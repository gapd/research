<?xml version="1.0"?><st-source><!-- Name: MQ-BaseExtensionsNotice: Copyright © 2008-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: Base Extensions and overrides needed for the MQ series productDbIdentifier: bear73DbTrace: 108669PackageName: MQ-BaseExtensionsParcel: #('MQ-BaseExtensions')ParcelName: MQ-BaseExtensionsPrintStringCache: (76 1.0,gheeg)Version: 7.6Date: 1:10:40 pm February 1, 2008 --><time-stamp>From VisualWorks®, 7.6 of February 1, 2008 on February 1, 2008 at 1:10:40 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>External.ExternalLibraryHolder</class-id> <category>loading</category><body package="MQ-BaseExtensions" selector="load">load	"Scan the receiver's directory list looking for the receiver's library.  If the library is not found, an ExternalLibraryHolder class&gt;&gt;libraryNotFoundSignal is raised.  Once the library is found it is loaded into the current application.  If the library could not be loaded, an ExternalLibrary class&gt;&gt;libraryNotLoadedSignal is raised.  Answers the receiver.""Changed Behaviour: if the file is not found,  just return, if 'libraryFileSearchSignals' returns a meaningful error class/set. That way multiple files can be listed in an ExternalIntefaceClass, if the first is not found, the second is tried, and so on."	| fullName |	fullName := [directories  isEmpty					ifTrue: [name]					ifFalse: [self findFile: name inDirectories: directories]] 				on: owner libraryFilesSearchSignals 				do: [:ex | nil].	fullName notNil		ifTrue:			[self library: (ExternalLibrary named: fullName asSymbol owner: self).			"Assert that 'self library' is a valid library."			self library load]</body></methods><methods><class-id>Core.String</class-id> <category>mq extensions</category><body package="MQ-BaseExtensions" selector="fillUpWithSpacesTo:">fillUpWithSpacesTo: aNumber	"'123456'  fillUpWithSpacesTo: 42"	^self		padWith: Character space		upTo: aNumber</body><body package="MQ-BaseExtensions" selector="padWith:upTo:">padWith: aCharacter upTo: anInteger	"Make a new String, make it anInteger long, and fill it up with aCharacter"	| newStr |	self size &gt;= anInteger ifTrue: [^self].	newStr := String new: (anInteger - self size) withAll: aCharacter.      ^self , newStr</body><body package="MQ-BaseExtensions" selector="trimMQTrailer">trimMQTrailer	"Return a copy with trailing 0-Characters removed and do a #trimBlanks afterwards"	| first string |	first := self indexOf: (Character value: 0).	string := first = 0 				ifTrue: [self]				ifFalse: [self copyFrom: 1 to: first - 1].	^string trimBlanks</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ExternalLibraryHolder</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name directories library owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class></st-source>