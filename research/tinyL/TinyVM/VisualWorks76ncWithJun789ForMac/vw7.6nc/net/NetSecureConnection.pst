<?xml version="1.0"?><st-source><!-- Name: NetSecureConnectionNotice: Copyright © 2008 Cincom Systems, Inc.  All Rights Reserved.Comment: Provides the core classes extending the various protocol implementations in the Internet Connectivity Toolkit with SSL capabilities, allowing to secure connections using the SSL protocol.DbIdentifier: bear73DbTrace: 90154DevelopmentPrerequisites: #(#(#any 'NetClientBase' '') #(#any 'SSL' ''))PackageName: NetSecureConnectionParcel: #('NetSecureConnection')PrerequisiteParcels: #(#('NetClientBase' '') #('SSL' ''))PrintStringCache: (751 3,mkobetic)Version: 7.6Date: 12:33:39 pm February 1, 2008 --><time-stamp>From VisualWorks®, 7.6 of February 1, 2008 on February 1, 2008 at 12:33:39 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SSLConnection</name><environment>Net</environment><super>Net.NetConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sslContext sslConnection validationBlock hostName </inst-vars><class-inst-vars></class-inst-vars><imports>			Security.*			</imports><category>Net-SecureConnection-Support</category><attributes><package>NetSecureConnection</package></attributes></class><comment><class-id>Net.SSLConnection</class-id><body>SSLConnection is an abstract superclass for client connections using a communication channel secured with SSL protocol. It integrates necessary SSL infrastructure with the Net client. For detailed explanation of various SSL related aspect, please, refer to the comments in the SSL package.Instance Variables:	sslConnection	&lt;Security.SSLConnection&gt;	SSL connection between two parties	sslContext	&lt;SSLContext&gt;	environment for SSL communication	validationBlock	&lt;BlockClosure&gt;	subject validation block for server certificate	hostName	&lt;String&gt;	host name</body></comment><methods><class-id>Net.SSLConnection</class-id> <category>accessing</category><body package="NetSecureConnection" selector="sslContext">sslContext	^sslContext ifNil: [ sslContext := SSLContext newWithSecureCipherSuites ].</body><body package="NetSecureConnection" selector="sslContext:">sslContext: anSSLContext	sslContext := anSSLContext</body><body package="NetSecureConnection" selector="validationBlock">validationBlock	^validationBlock isNil		ifTrue: [ [ :dnd | "Let's emulate web browser validation as default"				 hostName = (dnd at: 'CN') ] ]		ifFalse: [ validationBlock ]</body><body package="NetSecureConnection" selector="validationBlock:">validationBlock: aBlock	validationBlock := aBlock</body></methods><methods><class-id>Net.SSLConnection</class-id> <category>private</category><body package="NetSecureConnection" selector="setupLogging">setupLogging	sslConnection 		when: #receivingSignedBytes:size: 		do: [ :bytes :size | 			self class log: '****************Receiving Signed Bytes****************' level: #SSLConnection.			self class log: (bytes copyFrom: 1 to: size) asString level: #SSLConnection ].	sslConnection 		when: #sendingSignedBytes:size: 		do: [ :bytes :size | 			self class log: '****************Sending Signed Bytes******************' level: #SSLConnection.			self class log: (bytes copyFrom: 1 to: size) asString level: #SSLConnection].</body><body package="NetSecureConnection" selector="sslConnection">sslConnection	^sslConnection</body></methods><methods><class-id>Net.SSLConnection</class-id> <category>initialize-release</category><body package="NetSecureConnection" selector="openStreamFor:port:timeout:">openStreamFor: hNameString port: aNumber timeout: tmNumber	self disconnect.	hostName := hNameString.	sslConnection := self sslContext connectionFor: 						(self 							socketStreamWithEncoding: #binary							host: hNameString 							port: aNumber 							timeout: tmNumber).	[	sslConnection connectSubject: self validationBlock.	] ifCurtailed: [ sslConnection shutdown. ].	self setupLogging.	stream := (sslConnection withEncoding: self defaultEncoding)				readAppendStream				lineEndConvention: self defaultLineEndConvention.	^stream</body><body package="NetSecureConnection" selector="sslContext:validationBlock:">sslContext: aSSLContext validationBlock: aBlock	sslContext := aSSLContext.	validationBlock := aBlock</body></methods><methods><class-id>Net.SSLConnection</class-id> <category>testing</category><body package="NetSecureConnection" selector="isSecure">isSecure	^true</body></methods><methods><class-id>Net.SSLConnection</class-id> <category>stream</category><body package="NetSecureConnection" selector="disconnect">disconnect	sslConnection ifNotNil: [ [sslConnection close] ensure: [sslConnection := nil ]].	hostName := nil.	super disconnect.</body></methods><methods><class-id>Net.SSLConnection class</class-id> <category>instance creation</category><body package="NetSecureConnection" selector="sslContext:">sslContext: aSSLContext	^self new 		sslContext: aSSLContext;		yourself</body><body package="NetSecureConnection" selector="sslContext:validationBlock:">sslContext: aSSLContext validationBlock: aBlock	^self new 		sslContext: aSSLContext validationBlock: aBlock;		yourself</body><body package="NetSecureConnection" selector="validationBlock:">validationBlock: aBlock	^self new 		validationBlock: aBlock;		yourself</body></methods><methods><class-id>Net.SSLConnection class</class-id> <category>debugging</category><body package="NetSecureConnection" selector="debugLabelsAndValues">debugLabelsAndValues	^OrderedCollection new		add: ((#SSLConnection &lt;&lt; #net &gt;&gt; 'SSL Connection')-&gt;#SSLConnection);		yourself</body><body package="NetSecureConnection" selector="log:level:">log: aString level: aLevel	#{Tools.LogEnvironment} ifDefinedDo: [ :le | le  default log: aString level: aLevel ]</body><body package="NetSecureConnection" selector="menuItemName">menuItemName	^(#SSLConnectionMessages &lt;&lt; #net &gt;&gt; 'SSL Connection Messages')</body><body package="NetSecureConnection" selector="registerToDebug">registerToDebug	#{Tools.LogEnvironment} ifDefinedDo: [ :le | le  default addToDebug: self ]</body></methods><methods><class-id>Net.SSLConnection class</class-id> <category>class initialization</category><body package="NetSecureConnection" selector="initialize">initialize	"self initialize."	self registerToDebug.</body></methods><initialize><class-id>Net.SSLConnection</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>NetConnection</name><environment>Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream </inst-vars><class-inst-vars>encoding </class-inst-vars><imports>			private OS.IOConstants.*			</imports><category>Net-Clients</category><attributes><package>NetClientBase</package></attributes></class></st-source>