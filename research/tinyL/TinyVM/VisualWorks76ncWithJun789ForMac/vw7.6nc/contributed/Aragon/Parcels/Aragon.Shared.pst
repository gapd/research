<?xml version="1.0"?><st-source><!-- Name: Aragon.SharedComment: Contains stuff shared by Aragon.Look Policies, Aragon.Widgets and Aragon.Win32HideSource: falseParcel: #('Aragon.Shared')PrerequisiteParcels: #(#('Aragon.Basics' ''))SaveSource: trueVersion: 7.1Date: 3:59:43 am May 28, 2003 --><time-stamp>From VisualWorks®, Release 7.1 of 18. März 2003 on 28. Mai 2003 at 3:59:43</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>NSBorder</name><environment>Aragon</environment><super>UI.SimpleBorder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.UI.Nice Borders</category></class><class><name>NSMultiSelectionSequenceView</name><environment>Aragon</environment><super>UI.MultiSelectionSequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.UI.SequenceView</category></class><class><name>NSSequenceController</name><environment>Aragon</environment><super>UI.SequenceController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.UI.SequenceView</category></class><class><name>EnhancedSequenceView</name><environment>Aragon</environment><super>Aragon.NSMultiSelectionSequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionMode </inst-vars><class-inst-vars>deselectOnReselection useStandardHiliting </class-inst-vars><imports></imports><category>Aragon.Core.UI.SequenceView</category></class><class><name>NSRaisedBorder</name><environment>Aragon</environment><super>Aragon.NSBorder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.UI.Nice Borders</category></class><class><name>AragonStuff</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.Info</category></class><comment><class-id>Aragon.AragonStuff</class-id><body>This class is used to administer the current releases and patch levels of each Aragon product being installed. Especially AragonSetup will evaluate and depend on information registered in the class's package info in order to find out which updates and patches can/shall be applied.Do not remove this class from your image unless you are preparing a deployment image.</body></comment><class><name>NSSequenceView</name><environment>Aragon</environment><super>UI.SequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>toggleOnMove </class-inst-vars><imports></imports><category>Aragon.Core.UI.SequenceView</category></class><class><name>AragonIcon</name><environment>Aragon</environment><super>Graphics.OpaqueImage</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.Info</category></class><class><name>NSEmulatedSequenceController</name><environment>Aragon</environment><super>UI.EmulatedSequenceController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.UI.SequenceView</category></class><class><name>NSTwoPixelsBorder</name><environment>Aragon</environment><super>Aragon.NSBorder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.UI.Nice Borders</category></class><class><name>NSInsetBorder</name><environment>Aragon</environment><super>Aragon.NSBorder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.UI.Nice Borders</category></class><shared-variable><name>ColorIndexes</name><environment>Aragon.AragonIcon</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>DefaultColors</name><environment>Aragon.NSBorder</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>RaisedBorder</name><environment>Aragon.NSBorder</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>InsetBorder</name><environment>Aragon.NSBorder</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>UseNewKeyboardProcessing</name><environment>Aragon.NSSequenceController</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>Shorthands</name><environment>Aragon.AragonStuff</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>PackageInfo</name><environment>Aragon.AragonStuff</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>ApplicationHooks</name><environment>Aragon.AragonStuff</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>Instance</name><environment>Aragon.NSTwoPixelsBorder</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><methods><class-id>Aragon.NSBorder class</class-id> <category>constants</category><body>inset	^InsetBorder</body><body>inset1	^BeveledBorder inset1</body><body>raised	^RaisedBorder</body><body>raised1	^BeveledBorder raised1</body></methods><methods><class-id>Aragon.NSBorder class</class-id> <category>class initialization</category><body>initialize	"Initialize the class."	"NSBorder initialize."	InsetBorder	  :=  NSInsetBorder new.	RaisedBorder  :=  NSRaisedBorder new.	DefaultColors := ColorPreferencesDictionary new		matchAt: SymbolicPaint border			put: SymbolicPaint pushButtonBorder;		matchAt: SymbolicPaint hilite			put: SymbolicPaint pushButtonHilite;		matchAt: SymbolicPaint shadow		put: SymbolicPaint pushButtonShadow;		matchAt: SymbolicPaint background	put: SymbolicPaint pushButtonBackground;	yourself.</body></methods><methods><class-id>Aragon.NSMultiSelectionSequenceView</class-id> <category>accessing</category><body>targetIndex: elementIndex 	"Set the index of the selected item." 	"This has been changed with the Aragon widgets (parcel 'Aragon.System.Changes.List Target').	Find the old implementation in #_targetIndex:."	| box gc |	(visualBlock isNil and: [selectedVisualBlock isNil]) ifFalse: [^super targetIndex: elementIndex].	targetIndex = elementIndex ifTrue: [^self].	sequence == nil ifTrue: [^self].	Object messageNotUnderstoodSignal		handle: [:ex | ^super targetIndex: elementIndex]		do: [gc := self graphicsContext].	box := self bounds.	self		undisplayTargetElement: targetIndex		on: gc		forBounds: (self boundsOfElementIndex: targetIndex inBounds: box).	self		displayTargetElement: elementIndex		on: gc		forBounds: (self boundsOfElementIndex: elementIndex inBounds: box).	self setValidTargetIndex: elementIndex.</body></methods><methods><class-id>Aragon.NSMultiSelectionSequenceView</class-id> <category>private</category><body>displayTargetElement: index on: aGraphicsContext forBounds: elementBounds 	"Display the receiver's content on aGraphicsContext."	| oldPaint |	oldPaint := aGraphicsContext paint.	self		displayTargetElement: index		on: aGraphicsContext		forBounds: elementBounds		withPaint: self traversalHiliteColor.		aGraphicsContext paint: oldPaint.</body><body>displayTargetElement: index on: aGraphicsContext forBounds: elementBounds withPaint: aPaint	"Display the receiver's content on aGraphicsContext."	aGraphicsContext paint: aPaint.	aGraphicsContext displayInteriorRectangularBorder: elementBounds</body><body>toggleOnMove	^NSSequenceView toggleOnMove		ifTrue: 			[| c |			c := container container.			[c isKindOf: SpecWrapper]				whileFalse: [(c := c container) isNil ifTrue: [^true]].			c spec selectionType ~~ #checkMark]		ifFalse: [false]</body><body>undisplayTargetElement: index on: aGraphicsContext forBounds: elementBounds 	"Display the receiver's content on aGraphicsContext."	| oldPaint |	oldPaint := aGraphicsContext paint.	self		displayTargetElement: index		on: aGraphicsContext		forBounds: elementBounds		withPaint: ((self isSelected: index)				ifTrue: [self selectionBackgroundColor]				ifFalse: [self backgroundColor]).	aGraphicsContext paint: oldPaint.</body></methods><methods><class-id>Aragon.NSSequenceController</class-id> <category>keyboard</category><body>processKeyboardEvent: anEvent 	NSSequenceController useNewKeyboardProcessing		ifTrue: [self aragonProcessKeyboardEvent: anEvent]		ifFalse: [super processKeyboardEvent: anEvent]</body></methods><methods><class-id>Aragon.NSSequenceController class</class-id> <category>class initialization</category><body>initialize	self useNewKeyboardProcessing: true</body></methods><methods><class-id>Aragon.NSSequenceController class</class-id> <category>accessing</category><body>useNewKeyboardProcessing	^UseNewKeyboardProcessing</body><body>useNewKeyboardProcessing: aBoolean	UseNewKeyboardProcessing := aBoolean</body></methods><methods><class-id>Aragon.EnhancedSequenceView</class-id> <category>initialize-release</category><body>enableMultipleSelections: aBoolean withModifierKeys: anotherBoolean 	selectionMode := aBoolean				ifTrue: [anotherBoolean						ifTrue: [#multiSelectWithModifiers]						ifFalse: [#multiSelect]]				ifFalse: [#singleSelect]</body><body>initialize	selectionMode := #multiSelectWithModifiers.	^super initialize.</body><body>scrollOffsetHolder: aValueHolder	scrollOffset := aValueHolder.	scrollOffset grid: [2@self lineGrid].</body></methods><methods><class-id>Aragon.EnhancedSequenceView</class-id> <category>element accessing</category><body>invalidateElementIndex: anIndex 	self invalidateRectangle: (self boundsOfElementIndex: anIndex inBounds: self bounds)		repairNow: true</body><body>invalidateElementIndexes: indexes 	indexes size &gt; 4		ifTrue: [indexes do: [:i | super invalidateElementIndex: i]]		ifFalse: [indexes do: [:i | self invalidateElementIndex: i]]</body></methods><methods><class-id>Aragon.EnhancedSequenceView</class-id> <category>accessing</category><body>selectionChannel: aValueModel 	"Set the receiver's selection channel to be aValueModel."	selectionChannel removeDependent: self.	selectionChannel := (aValueModel value isKindOf: Collection)				ifTrue: [aValueModel]				ifFalse: 					[| s |					s := Set with: aValueModel value.					(PluggableAdaptor on: aValueModel)						getBlock: [:m | s]						putBlock: [:m :v | s := v.  m value: (s detect: [:d | true] ifNone: [0])]						updateBlock: [:m :a :p | m == aValueModel								ifTrue: [m value == 0										ifTrue: [s := Set new.  true]										ifFalse: [(s includes: m value)												ifTrue: [false]												ifFalse: [s := Set with: m value. true]]]								ifFalse: [false]]].	selectionChannel addDependent: self.	self resetSelection</body><body>selectionIndex	"Answer the receiver's selection index"	^selections isEmpty ifTrue: [0] ifFalse: [selections detect: [:i | true]].</body><body>selectionMode	^selectionMode</body><body>selectionMode: aValue	selectionMode := aValue</body><body>selections: aSet	| oldSelections |	(selections = aSet or: [sequence == nil]) ifTrue: [^self].	oldSelections := selections.	selections := aSet.	selections size == 1		ifTrue:			[self targetIndex: (selectionIndex := selections detect: [:x | true]).			self makeVisible: targetIndex]		ifFalse: [selectionIndex := 0].	selections do: [:i | (i == 0 or: [oldSelections includes: i]) ifFalse: [self invalidateElementIndex: i]].	oldSelections do: [:i | (i == 0 or: [selections includes: i]) ifFalse: [self invalidateElementIndex: i]].</body></methods><methods><class-id>Aragon.EnhancedSequenceView</class-id> <category>private</category><body>boundsOfElementInterval: anInterval inBounds: aRectangle 	"Answer the first visible index in the receiver."	^((self boundsOfElementIndex: anInterval first inBounds: aRectangle)		bottom: anInterval last * self lineGrid + self topOffsetForDisplay)</body><body>isHilited: anIndex	^(self isSelected: anIndex) and: [self class useStandardHiliting or: [self hasFocus]]</body><body>reallyUseSingleSelectionIndex: anIndex 	"If multiple selections are possible, clear the 	selections, and add anIndex to the new list."	| wasSelected oldSelections |	(self selections size = 1 and: [self isSelected: anIndex])		ifTrue: [^self].	wasSelected := false.	selectionIndex := self zeroIndex.	oldSelections := self selections.	self setSelections: (self selections species with: anIndex).	oldSelections size &gt; 4 		ifTrue: 			[oldSelections do: [:i | i == anIndex				ifTrue: [wasSelected := true]				ifFalse: [super invalidateElementIndex: i]]]		ifFalse: 			[oldSelections do: [:i | i == anIndex				ifTrue: [wasSelected := true]				ifFalse: [self invalidateElementIndex: i]]].	wasSelected ifFalse: [self invalidateElementIndex: anIndex].	lastSelectionIndex := anIndex.	self selectionChannel value: self selections</body><body>retractAllSelections	"Retract all selections in one operation."	| oldSelections |	selectionIndex := self zeroIndex.	lastSelectionIndex := self zeroIndex.	oldSelections := self selections.	self setSelections: selections species new.	self invalidateElementIndexes: oldSelections.	self selectionChannel value: self selections</body><body>setSelections: aCollection 	"Silently set the collection of selection indices."	selections := aCollection asSet.	selectionIndex := selections size == 1 ifTrue: [selections detect: [:x | true]] ifFalse: [0].</body><body>toggleOnMove	^super toggleOnMove and: [self selectionMode ~= #multiSelect]</body><body>useSelectionIndex: anIndex 	"If multiple selections are possible, add the current selection and all indices from the current selection 	to the previous selection, to the list of selections."	self selectionMode == #singleSelect ifTrue: [^self reallyUseSingleSelectionIndex: anIndex].	self selectionMode == #multiSelect ifTrue: [(self isSelected: anIndex)			ifTrue: 				[self selections remove: anIndex.				lastSelectionIndex := anIndex.				self invalidateElementIndex: anIndex.				^self selectionChannel value: selections]			ifFalse: [super useSelectionIndex: anIndex]].	self selectionMode == #multiSelectWithModifiers ifTrue: [^super useSelectionIndex: anIndex]</body><body>useSingleSelectionIndex: anIndex 	"If multiple selections are possible, add the current selection and all indices from the current selection 	to the previous selection, to the list of selections."	(self isSelected: anIndex)		ifTrue: [(self selectionMode == #multiSelectWithModifiers and: [anIndex ~= self lastSelectionIndex])				ifTrue: [self reallyUseSingleSelectionIndex: anIndex]				ifFalse: [self class deselectOnReselection ifTrue: [self retractSelectionIndex: anIndex]]]		ifFalse: [self selectionMode == #multiSelect				ifTrue: [super useSelectionIndex: anIndex]				ifFalse: [self reallyUseSingleSelectionIndex: anIndex]]</body><body>useSweepSelectionIndex: anIndex 	"If multiple selections are possible, add the current selection and all indices from the current selection 	to the previous selection, to the list of selections."	| save delta list newList l |	self selectionMode == #singleSelect ifTrue: [^self reallyUseSingleSelectionIndex: anIndex].	lastSelectionIndex = self zeroIndex		ifTrue:			[self retractAllSelections.			^self].	save := lastSelectionIndex.	save &lt; anIndex		ifTrue: [delta := -1]		ifFalse: [delta := 1].	list := self selections copy.	newList := (anIndex to: save by: delta) asSet.	selectionIndex := self zeroIndex.	(l := list - newList) do: [:i | selections remove: i ifAbsent: []].	self invalidateElementIndexes: l.	(l := newList - list) do: [:i | selections add: i].	self invalidateElementIndexes: l.	lastSelectionIndex := save.	self selectionChannel value: selections.</body></methods><methods><class-id>Aragon.EnhancedSequenceView</class-id> <category>updating</category><body>invalidateFrom: anIndex	| box |	box := self bounds.	box top: (self boundsOfElementIndex: anIndex inBounds: box) top.	self invalidateRectangle: box</body><body>updateAppendCollection: anArg		"A collection has been appended to the receiver's sequence.  Update the dispaly."	| start stop |	stop := self numberOfElements.	start := stop - (anArg-1).	self fixScrollingOffset.	self newElementsFrom: start to: stop.	self changedPreferredBounds: nil.	self invalidateFrom: start</body><body>updateInsert: anIndex	"An item has been inserted into the receiver's model.  Update the display."	self updateSelectionsForInserting: 1 elementsAt: anIndex.	anIndex &lt;= targetIndex ifTrue: [self makeVisible: targetIndex].	self changedPreferredBounds: nil.	self invalidateFrom: anIndex</body><body>updateInsertCollection: anArg	| start stop |	start := anArg first.	stop := start + anArg last - 1.	self updateSelectionsForInserting: anArg last elementsAt: start.	start &lt;= targetIndex ifTrue: [self makeVisible: targetIndex].	self newElementsFrom: start to: stop.	self changedPreferredBounds: nil.	self invalidateFrom: start</body><body>updateRemove: anIndex 	"The item at anIndex in the receiver's model has been removed. Update the display."	self updateSelectionsForRemoving: 1 elementsAt: anIndex.	self fixScrollingOffset.		self elementsInSequenceHaveChanged.	self changedPreferredBounds: nil.	self invalidate.	targetIndex &gt; sequence size ifTrue: [self useTargetIndex: sequence size].	selections isEmpty ifTrue: [self useSelectionIndex: targetIndex].</body><body>updateRemoveRange: anArray 	"The item between anArray first and anArray last in the receiver's model have been removed. 	Update the display."	| first |	first := anArray first.	self updateSelectionsForRemoving: anArray last - first + 1 elementsAt: first.	self fixScrollingOffset.	targetIndex &gt; sequence size ifTrue: [self useTargetIndex: sequence size].	self elementsInSequenceHaveChanged.	self changedPreferredBounds: nil.	self invalidateFrom: first</body><body>updateSelectionsForInserting: n elementsAt: anIndex	| newSelections |	newSelections := selections collect: [:each | each &gt;= anIndex ifTrue: [each+n] ifFalse: [each]].	newSelections ~= selections		ifTrue: 			[self dynamicUpdatingOfSelection.			self setSelections: newSelections].	targetIndex &gt;= anIndex ifTrue: [targetIndex := targetIndex + n].	lastSelectionIndex &gt;= anIndex ifTrue: [lastSelectionIndex := lastSelectionIndex + n].</body><body>updateSelectionsForRemoving: n elementsAt: anIndex 	| newSelections selectionChanged |	selectionChanged := false.	newSelections := Set new.	selections do: [:i | i &gt;= anIndex			ifTrue: [i - anIndex &lt; n					ifTrue: [selectionChanged := true]					ifFalse: [newSelections add: i - n]]			ifFalse: [newSelections add: i]].	self dynamicUpdatingOfSelection.	self setSelections: newSelections.	targetIndex &gt; anIndex ifTrue: [targetIndex := targetIndex &lt; (anIndex + n)					ifTrue: [anIndex]					ifFalse: [targetIndex - n]].	lastSelectionIndex &gt; anIndex ifTrue: [lastSelectionIndex := lastSelectionIndex - n].	selectionChanged ifTrue: [selectionChannel value: selections]</body></methods><methods><class-id>Aragon.EnhancedSequenceView</class-id> <category>updating - TreeView</category><body>update: anAspect with: anArg from: anObject 	"An object that the receiver's depends on has changed. Perform an appropriate action."	anObject == self sequence		ifTrue: 			[anAspect == #expand: ifTrue: [^self updateExpand: anArg].			anAspect == #collapse: ifTrue: [^self updateCollapse: anArg].			anAspect == #range ifTrue: [^self updateRange: anArg]].	^super update: anAspect with: anArg from: anObject</body><body>updateCollapse: assoc	"The item at anIndex in the receiver's model has been collapsed. Update the display."	| index oldScrollOffset hadSelection n |	index := assoc key.	n := assoc value.	hadSelection := selections isEmpty not.	self updateSelectionsForRemoving: n elementsAt: index + 1.	(hadSelection and: [self selectionIndex == self zeroIndex])		ifTrue: [self useSelectionIndex: index].	selections size == 1 ifTrue: [targetIndex := self selectionIndex].	self selectionChannel setValue: self selections.	oldScrollOffset := scrollOffset value.	self fixScrollingOffset.	self elementsInSequenceHaveChanged.	self changedPreferredBounds: nil.	oldScrollOffset = scrollOffset value		ifTrue: 			[| box | box := self bounds.			box := (self boundsOfElementIndex: index inBounds: box) bottom: box bottom.			box bottom: (self boundsOfElementIndex: self numberOfElements + n inBounds: box) bottom.			self invalidateRectangle: box]		ifFalse: [self invalidate].</body><body>updateExpand: assoc 	"An item has been expanded in the receiver's model. Update the display."	| index n bounds |	index := assoc key.	index == nil ifTrue: [^self invalidate].	n := assoc value.	self updateSelectionsForInserting: n elementsAt: index + 1.	self selectionChannel setValue: self selections.	self newElementsFrom: index to: index + n.	self fixScrollingOffset.	bounds := self bounds.	self invalidateRectangle: (self boundsOfElementInterval: (index to: self numberOfElements)			inBounds: bounds).	self makeVisible: index + (n min: self visibleExtent y // self lineGrid - 1).	self changedPreferredBounds: nil</body><body>updateRange: anInterval	self invalidateRectangle: ((self boundsOfElementIndex: anInterval first inBounds: self bounds)		merge: (self boundsOfElementIndex: anInterval last inBounds: self bounds))</body></methods><methods><class-id>Aragon.EnhancedSequenceView class</class-id> <category>class initialization</category><body>initialize	self deselectOnReselection: true.	self useStandardHiliting: true.</body></methods><methods><class-id>Aragon.EnhancedSequenceView class</class-id> <category>constants</category><body>deselectOnReselection	^deselectOnReselection isNil ifTrue: [superclass deselectOnReselection] ifFalse: [deselectOnReselection]</body><body>deselectOnReselection: aBoolean	deselectOnReselection := aBoolean</body><body>useStandardHiliting	^useStandardHiliting isNil ifTrue: [superclass useStandardHiliting] ifFalse: [useStandardHiliting]</body><body>useStandardHiliting: aBoolean	useStandardHiliting := aBoolean</body></methods><methods><class-id>Aragon.NSRaisedBorder</class-id> <category>display box accessing</category><body>displayBoxFor: aRectangle 	^thickness &gt; 0		ifTrue: [aRectangle origin - 1 corner: aRectangle corner + 2]		ifFalse: [aRectangle]</body><body>insetDisplayBoxFor: aRectangle 	^thickness &gt; 0		ifTrue: [aRectangle origin + 1 corner: aRectangle corner - 2]		ifFalse: [aRectangle]</body></methods><methods><class-id>Aragon.NSRaisedBorder</class-id> <category>displaying</category><body>displayOn: gc forDisplayBox: r using: colorSource 	| oldPaint x0 y0 x1 y1 cs |				thickness = 0 ifTrue: [^self]."	cs := colorSource notNil ifTrue: [colorSource] ifFalse: [DefaultColors]."	cs := DefaultColors.	x0 := r origin x.  y0 := r origin y.   x1 := r corner x-1.  y1 := r corner y-1.	oldPaint := gc paint.	gc paint: cs hiliteColor;		displayPolyline: (Array with: (x0@y1) with: (x0@y0) with: (x1@y0)).	gc paint: cs borderColor;		displayPolyline: (Array with: (x0@y1) with: (x1@y1) with: (x1@(y0-1))).	gc paint: cs shadowColor;  	displayPolyline: (Array with: (x0+1@(y1 :=y1-1)) with: ((x1 := x1-1)@y1) with: (x1@y0)).	gc paint: oldPaint</body></methods><methods><class-id>Aragon.AragonStuff class</class-id> <category>class initialization</category><body>addIconsToLauncher	AragonIcon initialize.	VisualLauncher 		visualAt: #AragonIcon put: self aragonIcon;		visualAt: #AragonClassBrowserIcon put: (AragonIcon named: #largeBrick color: #paleRed);		visualAt: #AragonFolderIcon put: (AragonIcon named: #openFolder);		visualAt: #AragonParcelBrowserIcon put: (AragonIcon named: #package color: #paleRed);		visualAt: #AragonIcon put: self aragonIcon.</body><body>fakeAragonNamespaceIn30	Smalltalk at: #Aragon put: Smalltalk.</body><body>initialize	(Smalltalk includesKey: #Aragon) ifFalse: [self fakeAragonNamespaceIn30].	PackageInfo := IdentityDictionary new.	Shorthands := IdentityDictionary new		add: #FE		-&gt; 'Framework Enhancements';		add: #NLP		-&gt; 'New Look Policies';		add: #W32		-&gt; 'Win32 Connect';		add: #ODBC	-&gt; 'ODBC Connect';		add: #NW		-&gt; 'New Widgets';		add: #SI		-&gt; 'Stored Images';		add: #FC		-&gt; 'Fonts Convenient';		add: #PD		-&gt; 'Pseudo Database';	yourself.	ApplicationHooks := IdentityDictionary new.	self addIconsToLauncher</body></methods><methods><class-id>Aragon.AragonStuff class</class-id> <category>constants</category><body>packageInfo	^PackageInfo</body><body>shorthands	^Shorthands</body></methods><methods><class-id>Aragon.AragonStuff class</class-id> <category>registry</category><body>applicationForClassNamed: aBindingReference 	^(InputState default shiftDown		ifTrue: [aBindingReference]		ifFalse: [ApplicationHooks at: aBindingReference asSymbol 			ifAbsent: [aBindingReference]]) 	asQualifiedReference</body><body>hookup: anAragonApplicationClass for: aSystemApplicationClassName	ApplicationHooks add: aSystemApplicationClassName -&gt; anAragonApplicationClass fullName</body><body>isHookedUp: anAragonApplicationClass 	^ApplicationHooks includes: anAragonApplicationClass fullName</body><body>register: aKey release: releaseNo 		self register: aKey release: releaseNo patchLevel: nil</body><body>register: aKey release: releaseNo patchLevel: patchLevel 	patchLevel isNil		ifFalse: 			[| currentPatchLevel |			(currentPatchLevel := self patchLevelAt: aKey) isNil ifTrue: [currentPatchLevel := 0].			currentPatchLevel + 1 &lt; patchLevel				ifTrue: 					[| missingPatchLevels |					missingPatchLevels := String new writeStream.					missingPatchLevels nextPutAll: (currentPatchLevel + 1) printString.					currentPatchLevel + 2 to: patchLevel - 1 do: [:each | missingPatchLevels nextPutAll: ', '; nextPutAll: each printString].					Dialog warn: 'You installed a patch to ''' , (Shorthands at: aKey) , ''' without having installed the intermediate patches. It is strongly recommended that you install the missing patches too. The missing patch levels are: ' , missingPatchLevels contents , '.']].	self silentlyRegister: aKey release: releaseNo patchLevel: patchLevel</body><body>silentlyRegister: aKey release: releaseNo patchLevel: patchLevel 	| patchName currentPatchLevel |	(currentPatchLevel := self patchLevelAt: aKey) isNil ifTrue: [currentPatchLevel := 0].	PackageInfo at: aKey put: (Array with: releaseNo with: (patchLevel notNil ifTrue: [patchLevel max: currentPatchLevel])).	patchName := self patchNameFor: aKey.	self removePatchesLike: patchName.	ChangeSet current addPatch: patchName , (self releaseInfoFor: aKey)</body><body>unhook: anAragonApplicationClass 	| value |	value := anAragonApplicationClass fullName.	ApplicationHooks 		associationsDo: [:each | each value = value 			ifTrue: [ApplicationHooks removeKey: each key]]</body><body>unregister: aKey	self removePatchesLike: (self patchNameFor: aKey).	PackageInfo removeKey: aKey ifAbsent: [].</body></methods><methods><class-id>Aragon.AragonStuff class</class-id> <category>inquiry</category><body>packageInfoFor: aKey 	^(self shorthands at: aKey), ' Release', (self releaseInfoFor: aKey)</body><body>patchLevelAt: aKey	^(PackageInfo at: aKey ifAbsent: [^nil]) last</body><body>patchNameFor: aKey	^'Aragon-', aKey</body><body>registeredReleaseAt: aKey	^(PackageInfo at: aKey ifAbsent: [^nil]) first</body><body>releaseAt: aKey	^(PackageInfo at: aKey ifAbsent: [^nil]) first</body><body>releaseInfoFor: aKey 	| info stream |	info := PackageInfo at: aKey ifAbsent: [^(self shorthands at: aKey) , ' not installed'].	stream := String new writeStream.	stream space; nextPutAll: info first printString.	info last notNil ifTrue: [stream nextPutAll: ' (Patchlevel '; nextPutAll: info last printString; nextPut: $)].	^stream contents</body><body>systemVersion	CodeWriter fileFormat &lt; 04 ifTrue: [^25].	CodeWriter fileFormat &lt; 11 ifTrue: [^3].	^5.</body></methods><methods><class-id>Aragon.AragonStuff class</class-id> <category>utilities</category><body>allReferencesTo: aSymbol	^self methodCollector allReferencesTo: aSymbol</body><body>browse: aString inContext: aClassOrMethodOrNil	| symbol |	(symbol := Symbol findInterned: aString) isNil 		ifTrue: [^Screen default ringBell].	aClassOrMethodOrNil isBehavior		ifTrue: 			[| targetClass |  targetClass := aClassOrMethodOrNil.			(targetClass allInstVarNames includes: aString)				ifTrue: [^self browseAllAccessesTo: aString within: targetClass].			targetClass isMeta ifTrue: [targetClass := targetClass soleInstance].			(targetClass allClassVarNames includes: aString asSymbol)				ifTrue: [^self browseAllAccessesToClassVar: aString within: targetClass]].	Root withAllNameSpacesDo: [:ns | ns name = symbol		ifTrue:  [^self browseNameSpace: ns]].	SystemUtils allBehaviorsDo: [:cls | cls name = symbol		ifTrue:  [^self browseClass: cls]].	SystemUtils allBehaviorsDo: [:cls | (cls includesSelector: symbol)		ifTrue:  [^self browseImplementorsAndSendersOf: symbol]].	self browseReferencesTo: symbol</body><body>browseAllAccessesTo: instvar within: aClass	self browseAllAccessesTo: instvar within: aClass accessType: #readWrite</body><body>browseAllAccessesTo: instvar within: aClass accessType: aSymbol	| mc |	mc := self methodCollector.	mc browseSelect:			(mc searchBehaviorHierarchy: aClass)			&amp; (mc instVarUse: instvar asString access: aSymbol).</body><body>browseAllAccessesToClassVar: classvar within: aClass 	| binding |	(binding := aClass localBindingFor: classvar asSymbol) notNil		ifTrue: 			[| mc |			mc := self methodCollector.			mc browseSelect: (mc searchClassHierarchy: aClass)					&amp; (mc referencesTo: binding)]</body><body>browseAllReadAccessesTo: instvar within: aClass	self browseAllAccessesTo: instvar within: aClass accessType: #read</body><body>browseAllWriteAccessesTo: instvar within: aClass	self browseAllAccessesTo: instvar within: aClass accessType: #write</body><body>browseCategory: aSymbol	"self browseCategory: #'Aragon.Examples'"	| browser browserClass |	(browserClass := Smalltalk at: #TabApplicationSystemBrowser ifAbsent: []) notNil		ifTrue: 			[browser := browserClass openOnAllNameSpaces source.			browser selectCategory: aSymbol].	(browserClass := Smalltalk at: #Browser ifAbsent: []) notNil		ifTrue: 			[(browser := browserClass new) open.			browser categoryList selection: aSymbol].	^browser</body><body>browseClass: aClass 	| browser |	browser := self privateBrowseClass: aClass instanceBehavior.	aClass isMeta 		ifTrue: [(browser respondsTo: #metaOn)			ifTrue: [browser metaOn]			ifFalse: [browser metaHolder value: true]].	^browser</body><body>browseClass: aClass method: aSelector	| browser protocol |	protocol := aClass whichCategoryIncludesSelector: aSelector.	browser := self browseClass: aClass protocol: protocol.	(browser respondsTo: #selectMethod:) 		ifTrue: [browser selectMethod: aSelector]		ifFalse: [browser newSelectorList: aSelector].	^browser</body><body>browseClass: aClass protocol: protocol	| browser |	browser := self browseClass: aClass.	(browser respondsTo: #selectProtocol:) 		ifTrue: [browser selectProtocol: protocol]		ifFalse: [browser protocolList selection: protocol].	^browser</body><body>browseImplementorsAndSendersOf: aSelector 	| mc |	(mc := self methodCollector)		openListBrowserOn: 			(mc allImplementorsOf: aSelector), 			(mc allReferencesTo: aSelector)		label: 'Implementors/Senders of #' , aSelector		initialSelection: aSelector</body><body>browseImplementorsOf: aSymbol	| mc |	mc := self methodCollector.	^mc browseSelect: (mc implementorsOf: aSymbol asSymbol)"	self methodCollector browseAllImplementorsOf: aSymbol."</body><body>browseMethod: selector in: aClass 	| list |	list := List with: (MethodDefinition class: aClass selector: selector).	SystemBrowser		initializeForMethodsLabel: 'Method: ' , aClass name , '&gt;&gt;' , selector		list: list		initialSelection: list first		with: NamespaceTabApplication</body><body>browseNameSpace: aNameSpace	FullSystemBrowser openOnNameSpace: aNameSpace</body><body>browseParcel: aParcel 	| pta browser |	AragonStuff systemVersion == 3 		ifTrue: [^(Aragon at: #EnhancedParcelBrowser) newOnParcel: aParcel filtered: aParcel isEmpty not].	browser := FullNotebookSystemBrowser new 		initializeForTabApplications: (Array with: NamespaceTabApplication with: ParcelTabApplication).	browser majorTabs selectionIndex: 2.	pta := browser currentTabApplication.	pta selectParcel: aParcel.	aParcel isEmpty ifFalse: [pta toggleParceled].	browser open</body><body>browseReferencesTo: aSymbol	self methodCollector browseAllReferencesTo: aSymbol asSymbol.</body><body>ensureGlobal: aClass 	^self ensureGlobal: aClass category: 'Globals'</body><body>ensureGlobal: aClass category: aCategory	((CodeWriter fileFormat &lt; 11) or: [Smalltalk includesKey: aClass name]) 		ifFalse: 			[Smalltalk 				defineStatic: aClass name 				private: false				constant: false				category: aCategory				initializer: ''.			Smalltalk at: aClass name put: aClass].	</body><body>explore	| examplesBrowser |	examplesBrowser := Aragon at: #AragonExamplesBrowser ifAbsent: [nil].	examplesBrowser notNil		ifTrue: [examplesBrowser open]		ifFalse: [^Dialog warn: 'Examples Browser isn''t loaded in current image anymore.']</body><body>methodCollector	^MethodCollector new browser: SystemBrowser new; yourself</body><body>openSystemBrowser	| browserClass |	(browserClass := Smalltalk at: #TabApplicationSystemBrowser ifAbsent: []) notNil		ifTrue: 			[^browserClass openOnAllNameSpaces source].	(browserClass := Smalltalk at: #Browser ifAbsent: []) notNil		ifTrue: 			[^(browserClass new) open; yourself].</body><body>privateBrowseClass: aClass	| browserClass |	(browserClass := Aragon at: #SystemBrowser ifAbsent: []) notNil		ifTrue: [^(browserClass openOnClassHierarchy: aClass) source].	(browserClass := Smalltalk at: #SmalltalkWorkbench ifAbsent: []) notNil 		ifTrue: [^(browserClass browseClass: aClass) source].	browserClass := Smalltalk at: #HierarchyBrowser.	browserClass newOnClass: aClass.	^Window currentWindow model</body><body>removePatchesLike: aPatchName	| pattern |	pattern := aPatchName, '*'.	ChangeSet patches removeAllSuchThat: [:patch | pattern match: patch].</body></methods><methods><class-id>Aragon.AragonStuff class</class-id> <category>resources</category><body>aragonIcon	^OpaqueImage figure: self aragonImage shape: self aragonShape</body></methods><methods><class-id>Aragon.NSSequenceView</class-id> <category>accessing</category><body>targetIndex: elementIndex 	"Set the index of the selected item." 	"This has been changed with the Aragon widgets (parcel 'Aragon.System.Changes.List Target').	Find the old implementation in #_targetIndex:."	| box gc |	(visualBlock isNil and: [selectedVisualBlock isNil]) ifFalse: [^super targetIndex: elementIndex].	targetIndex = elementIndex ifTrue: [^self].	sequence == nil ifTrue: [^self].	Object messageNotUnderstoodSignal		handle: [:ex | ^super targetIndex: elementIndex]		do: [gc := self graphicsContext].	box := self bounds.	self		undisplayTargetElement: targetIndex		on: gc		forBounds: (self boundsOfElementIndex: targetIndex inBounds: box).	self		displayTargetElement: elementIndex		on: gc		forBounds: (self boundsOfElementIndex: elementIndex inBounds: box).	self setValidTargetIndex: elementIndex.</body></methods><methods><class-id>Aragon.NSSequenceView</class-id> <category>controller accessing</category><body>defaultControllerClass	"Answer a default controller class for the receiver."	^NSSequenceController</body></methods><methods><class-id>Aragon.NSSequenceView</class-id> <category>private</category><body>displayTargetElement: index on: aGraphicsContext forBounds: elementBounds 	"Display the receiver's content on aGraphicsContext."	| oldPaint |	oldPaint := aGraphicsContext paint.	self		displayTargetElement: index		on: aGraphicsContext		forBounds: elementBounds		withPaint: self traversalHiliteColor.		aGraphicsContext paint: oldPaint.</body><body>displayTargetElement: index on: aGraphicsContext forBounds: elementBounds withPaint: aPaint	"Display the receiver's content on aGraphicsContext."	aGraphicsContext paint: aPaint.	aGraphicsContext displayInteriorRectangularBorder: elementBounds</body><body>toggleOnMove	^NSSequenceView toggleOnMove		ifTrue: 			[| c |			c := container container.			[c isKindOf: SpecWrapper]				whileFalse: [(c := c container) isNil ifTrue: [^true]].			c spec selectionType ~~ #checkMark]		ifFalse: [false]</body><body>undisplayTargetElement: index on: aGraphicsContext forBounds: elementBounds 	"Display the receiver's content on aGraphicsContext."	| oldPaint |	oldPaint := aGraphicsContext paint.	self		displayTargetElement: index		on: aGraphicsContext		forBounds: elementBounds		withPaint: ((self isSelected: index)				ifTrue: [self selectionBackgroundColor]				ifFalse: [self backgroundColor]).	aGraphicsContext paint: oldPaint.</body></methods><methods><class-id>Aragon.NSSequenceView class</class-id> <category>class initialization</category><body>initialize	self toggleOnMove: true</body></methods><methods><class-id>Aragon.NSSequenceView class</class-id> <category>constants</category><body>toggleOnMove	^toggleOnMove</body><body>toggleOnMove: aBoolean	toggleOnMove := aBoolean</body></methods><methods><class-id>Aragon.AragonIcon</class-id> <category>converting</category><body>asIcon	^Icon figure: figure shape: shape</body></methods><methods><class-id>Aragon.AragonIcon class</class-id> <category>class initialization</category><body>initialize	ColorIndexes := IdentityDictionary new		add: #book			-&gt; (Array with: 4 with: 2);		add: #bookOpen		-&gt; (Array with: 4 with: 2);		add: #brick			-&gt; (Array with: 1 with: 3);		add: #bricks			-&gt; (Array with: 1 with: 3);		add: #brick32		-&gt; (Array with: 3 with: 4);		add: #package32		-&gt; (Array with: 6 with: 4);		add: #largeBrick		-&gt; (Array with: 1 with: 3);		add: #package		-&gt; (Array with: 1 with: 3);		add: #cake			-&gt; (Array with: 2 with: 3);		add: #folder1		-&gt; (Array with: 2 with: 4);		add: #folder2		-&gt; (Array with: 1 with: 3);		add: #gem			-&gt; (Array with: 2 with: 1);	yourself.</body></methods><methods><class-id>Aragon.AragonIcon class</class-id> <category>accessing icons</category><body>bookIconsColored: aColorValue 	^(self named: #book color: aColorValue) -&gt; (self named: #bookOpen color: aColorValue)</body><body>colorValueFor: aColorValueOrSymbol 	aColorValueOrSymbol isSymbol		ifTrue: 			[aColorValueOrSymbol == #paleRed ifTrue: [^self paleRed].			aColorValueOrSymbol == #paleYellow ifTrue: [^self paleYellow].			^ColorValue perform: aColorValueOrSymbol].	^aColorValueOrSymbol</body><body>named: aSymbol 	^self named: aSymbol ifAbsent: [self error: 'Didn''t find icon named ''', aSymbol, '''!']</body><body>named: aSymbol color: aColor 	^self		named: aSymbol		color: aColor		ifAbsent: [self error: 'Didn''t find icon named ''' , aSymbol , '''!']</body><body>named: aSymbol color: aColor ifAbsent: aBlock 	| figure shape |	Object messageNotUnderstoodSignal handle: [:ex | ^aBlock value]		do: 			[figure := self perform: (aSymbol , 'Image') asSymbol.			shape := self perform: (aSymbol , 'Shape') asSymbol].	aColor notNil		ifTrue: 			[| cindexes cv |			cindexes := ColorIndexes at: aSymbol ifAbsent: [^self error: 'Cannot colorize icon ' , aSymbol].			cv := self colorValueFor: aColor.			figure image palette setColors: ((figure image palette colors) 					at: cindexes first put: cv; 					at: cindexes last put: cv asShadowColor; 				yourself)].	^self figure: figure shape: shape</body><body>named: aSymbol ifAbsent: aBlock 	^self named: aSymbol color: nil ifAbsent: aBlock</body><body>visualAt: aKey	^self named: aKey</body><body>visualAt: aKey ifAbsent: aBlock	^self named: aKey ifAbsent: aBlock</body><body>visualFor: aKey	^self visualFor: aKey ifAbsent: []</body><body>visualFor: aKey ifAbsent: aBlock 	^aKey notNil ifTrue: 		[| i |		(i := aKey indexOf: $_) &gt; 0			ifTrue: [self					named: (aKey copyFrom: 1 to: i-1) asSymbol					color: (aKey copyFrom: i + 1 to: aKey size) asSymbol					ifAbsent: aBlock]			ifFalse: [self named: aKey ifAbsent: aBlock]]</body></methods><methods><class-id>Aragon.AragonIcon class</class-id> <category>constants</category><body>paleRed	^(ColorValue orange blendWith: ColorValue red asHiliteColor) asHiliteColor</body><body>paleYellow	^(ColorValue yellow blendWith: ColorValue red asHiliteColor asHiliteColor) asHiliteColor.</body></methods><methods><class-id>Aragon.AragonIcon class</class-id> <category>resources</category><body>xcopyImage	^self copyImage</body><body>xcopyShape	^self copyShape</body></methods><methods><class-id>Aragon.NSEmulatedSequenceController</class-id> <category>keyboard</category><body>processKeyboardEvent: anEvent 	NSSequenceController useNewKeyboardProcessing		ifTrue: [self aragonProcessKeyboardEvent: anEvent]		ifFalse: [super processKeyboardEvent: anEvent]</body></methods><methods><class-id>Aragon.NSEmulatedSequenceController</class-id> <category>private</category><body>toggleAt: index 	self sensor shiftDown		ifTrue: 			[view useSweepSelectionIndex: index.			^self].	self sensor ctrlDown		ifTrue: 			[view useExtendedSelectionIndex: index.			^self].	view useSingleSelectionIndex: index</body></methods><methods><class-id>Aragon.NSEmulatedSequenceController</class-id> <category>event driven</category><body>toggleAt: index withEvent: event	self toggleAt: index</body></methods><methods><class-id>Aragon.NSTwoPixelsBorder</class-id> <category>display box accessing</category><body>displayBoxFor: aRectangle 	"Answer a display box for anInnerRectangle based on the receiver's edge widths. This is the inverse 	of insetDisplayBoxFor:."	^aRectangle expandedBy: 2</body><body>insetDisplayBoxFor: aRectangle	"Answer an inset display box for aRectangle based on the receiver's edge widths."	^aRectangle insetBy: 2</body></methods><methods><class-id>Aragon.NSTwoPixelsBorder</class-id> <category>displaying</category><body>displayOn: gc forDisplayBox: r using: colorSource 	| oldPaint x0 y0 x1 y1 cs |				thickness = 0 ifTrue: [^self]."	cs := colorSource notNil ifTrue: [colorSource] ifFalse: [DefaultColors]."	cs := DefaultColors.	x0 := r origin x.  y0 := r origin y.   x1 := r corner x-1.  y1 := r corner y-1.	oldPaint := gc paint.	gc paint: cs backgroundColor;	displayPolyline: (Array with: (x0@y1) with: (x0@y0) with: (x1@y0)).	gc paint: cs hiliteColor;		displayPolyline: (Array with: (x0+1@(y1-1)) with: (x0+1@(y0+1)) with: (x1-1@(y0+1))).	gc paint: cs borderColor;		displayPolyline: (Array with: (x0@y1) with: (x1@y1) with: (x1@(y0-1))).	gc paint: cs shadowColor;  	displayPolyline: (Array with: (x0+1@(y1 :=y1-1)) with: ((x1 := x1-1)@y1) with: (x1@y0)).	gc paint: oldPaint</body></methods><methods><class-id>Aragon.NSTwoPixelsBorder class</class-id> <category>class initialization</category><body>initialize	Instance := self new.</body></methods><methods><class-id>Aragon.NSTwoPixelsBorder class</class-id> <category>constants</category><body>default	^Instance</body><body>raised	^Instance</body></methods><methods><class-id>Aragon.NSInsetBorder</class-id> <category>display box accessing</category><body>displayBoxFor: aRectangle 	^thickness &gt; 0		ifTrue: [aRectangle expandedBy: 2]		ifFalse: [aRectangle]</body><body>insetDisplayBoxFor: aRectangle 	^thickness &gt; 0		ifTrue: [aRectangle insetBy: 2]		ifFalse: [aRectangle]</body></methods><methods><class-id>Aragon.NSInsetBorder</class-id> <category>displaying</category><body>displayOn: gc forDisplayBox: r using: colorSource 	| oldPaint x0 y0 x1 y1 cs |				thickness = 0 ifTrue: [^self]."	cs := colorSource notNil ifTrue: [colorSource] ifFalse: [DefaultColors]."	cs := DefaultColors.	x0 := r origin x.  y0 := r origin y.   x1 := r corner x-1.  y1 := r corner y-1.	oldPaint := gc paint.	gc paint: cs shadowColor;		displayPolyline: (Array with: (x0@y1) with: (x0@y0) with: (x1@y0)).	gc paint: cs borderColor;		displayPolyline: (Array with: (x0+1@(y1-1)) with: (x0+1@(y0+1)) with: (x1-1@(y0+1))).	gc paint: cs hiliteColor;		displayPolyline: (Array with: (x0@y1) with: (x1@y1) with: (x1@(y0-1))).	gc paint: cs backgroundColor;	displayPolyline: (Array with: (x0+1@(y1 :=y1-1)) with: ((x1 := x1-1)@y1) with: (x1@y0)).	gc paint: oldPaint</body></methods><methods><class-id>UI.UISpecification class</class-id> <category>enhanced - New Widgets</category><body>shouldBeOnPalette	^false</body></methods><methods><class-id>UI.MultiSelectionInList</class-id> <category>enhanced - sequence view</category><body>selectionIndex	"Answer the receiver's selection index"	| s |	^(s := selectionIndexHolder value) isEmpty ifTrue: [0] ifFalse: [s detect: [:i | true]].</body></methods><methods><class-id>UI.UISpecification class</class-id> <category>enhanced - New Widgets</category><body>uninstall	| palette |	(palette := Smalltalk at: #UIPalette ifAbsent: []) notNil 		ifTrue: [palette activeSpecsList remove: self name ifAbsent: []].	(CodeWriter fileFormat &gt; 11) ifFalse: [^self].	Smalltalk removeKey: self name ifAbsent: [].</body></methods><methods><class-id>Core.String</class-id> <category>enhanced - Rich Text</category><body>removeColorFrom: emphasis	| existingColor |	emphasis isNil | emphasis isSymbol ifTrue: [^emphasis].	(emphasis isKindOf: Association) ifTrue: [^nil].	existingColor := emphasis detect: [:e | e isKindOf: Association] ifNone: [nil].	existingColor isNil ifTrue: [^emphasis].	^emphasis copyWithout: existingColor</body><body>asRichText	| srce dest runs emphasis |	srce := self readStream.	dest := String new writeStream.	runs := RunArray new.	emphasis := nil.	[srce atEnd]		whileFalse: 			[| c |			(c := srce next) = $&lt;				ifTrue: 					[(c := srce next) = $/						ifTrue: 							[c := self emphasisFor: srce next.							c == #color ifTrue: [emphasis := self removeColorFrom: emphasis] ifFalse: [							c notNil &amp; emphasis notNil ifTrue: [emphasis isSymbol 									ifTrue: [emphasis = c ifTrue: [emphasis := nil]]									ifFalse: [(emphasis includes: c)											ifTrue: 												[emphasis := emphasis copyWithout: c.												emphasis size == 1 ifTrue: [emphasis := emphasis first]]]]]]						ifFalse: 							[c := self emphasisFor: c.							c == #color ifTrue: [emphasis := self addColor: (self readColorFrom: srce) to: emphasis] ifFalse: [							c notNil ifTrue: [emphasis isNil									ifTrue: [emphasis := c]									ifFalse: 										[(emphasis isSymbol or: [emphasis isKindOf: Association]) 											ifTrue: [emphasis := Array with: emphasis].										emphasis := emphasis copyWith: c]]]].					srce next == $&gt; ifFalse: [self error: '... in String Parsing Missing ''&gt;'' at string position ', srce position printString]]				ifFalse: 					[dest nextPut: c.					runs addLast: emphasis]].	^Text new setString: dest contents setRuns: runs</body></methods><methods><class-id>UI.UISpecification class</class-id> <category>enhanced - New Widgets</category><body>installOnPalette	| specsList |	Aragon.AragonStuff ensureGlobal: self category: 'Globals.Widgets'.	specsList := (Smalltalk at: #UIPalette ifAbsent: [^self]) activeSpecsList.	(specsList includes: self name) ifFalse: [specsList add: self name].</body></methods><methods><class-id>UI.SequenceController</class-id> <category>enhanced - sequence view</category><body>scrollPageDown	self moveSelectionBy: (view bounds height  - view topOffsetForDisplay) // view lineGrid - 1</body><body>aragonProcessKeyboardEvent: anEvent 	"This is the new implementation of processKeyboardEvent: as being contained	in the Aragon AddOns. Find the old implementation in #old_processKeyboardEvent:"	| ev ch |	ev := anEvent.	keyboardHook == nil ifFalse: [(ev := keyboardHook value: ev value: self) isNil ifTrue: [^self]].	ch := ev keyValue.	ch isSymbol		ifTrue: 			[searchString := nil.			ch == #Down ifTrue: [^self moveSelectionBy: 1].			ch == #Up ifTrue: [^self moveSelectionBy: -1].			ch == #Left ifTrue: [^self selectTheHPrev].			ch == #Right ifTrue: [^self selectTheHNext].			ch == #PageUp ifTrue: [^self scrollPageUp].			ch == #PageDown ifTrue: [^self scrollPageDown].			ch == #Home ifTrue: [^self moveSelectionBy: view lastIndex negated].			ch == #End ifTrue: [^self moveSelectionBy: view lastIndex].			^self].	ch == Character cr		ifTrue: 			[keyboardProcessor focusIsShifting: true.			self selectTarget.			keyboardProcessor focusIsShifting ifTrue: [keyboardProcessor doDefaultAction].			keyboardProcessor focusIsShifting: false.			^self].	ch == Character tab		ifTrue: 			[(keyboardProcessor isBackTab: anEvent)				ifTrue: [keyboardProcessor prevFieldFrom: self]				ifFalse: [keyboardProcessor nextFieldFrom: self].			^self].	ch == Character space ifTrue: [^self pressAction].	self searchChar: ch</body></methods><methods><class-id>Core.List</class-id> <category>enhanced - sequence view</category><body>removeAll: aCollection	| myDependents |	aCollection isEmpty ifTrue: [^self].	myDependents := dependents.	dependents := nil.	2 to: aCollection size do: [:i | self remove: (aCollection at: i)].	dependents := myDependents.	self remove: aCollection first</body></methods><methods><class-id>UI.SequenceController</class-id> <category>enhanced - sequence view</category><body>scrollPageUp	self moveSelectionBy: ((view bounds height - view topOffsetForDisplay) // view lineGrid) negated + 1</body></methods><methods><class-id>Core.String</class-id> <category>enhanced - Rich Text</category><body>addColor: aColorValue to: emphasis	| existingColor |	(emphasis isNil or: [emphasis isKindOf: Association]) ifTrue: [^#color -&gt; aColorValue].	emphasis isSymbol ifTrue: [^Array with: emphasis with: #color -&gt; aColorValue].	existingColor := emphasis detect: [:e | e isKindOf: Association] ifNone: [nil].	existingColor notNil ifTrue: [^(emphasis copyWithout: existingColor) copyWith: #color -&gt; aColorValue].	^emphasis copyWith: #color -&gt; aColorValue</body></methods><methods><class-id>UI.UISpecification class</class-id> <category>private-interface building</category><body>fontMenu	| mb styles preDefinedLabels preDefinedStyles |	preDefinedStyles := #(#system #default #pixelLarge #pixelDefault #pixelSmall #pixelFixed #large #systemDefault #small #fixed).	preDefinedLabels := 		(Array new: 10)			at: 1 put: (#system &lt;&lt; #labels &gt;&gt; 'System (Widget Text)');			at: 2 put: (#default &lt;&lt; #labels &gt;&gt; 'Default');			at: 3 put: (#pixelLarge &lt;&lt; #labels &gt;&gt; 'Pixel large');			at: 4 put: (#pixelDefault &lt;&lt; #labels &gt;&gt; 'Pixel medium (default)');			at: 5 put: (#pixelSmall &lt;&lt; #labels &gt;&gt; 'Pixel small');			at: 6 put: (#pixelFixed &lt;&lt; #labels &gt;&gt; 'Pixel fixed');			at: 7 put: (#large &lt;&lt; #labels &gt;&gt; 'Standard large');			at: 8 put: (#systemDefault &lt;&lt; #labels &gt;&gt; 'Standard medium (default)');			at: 9 put: (#small &lt;&lt; #labels &gt;&gt; 'Standard small');			at: 10 put: (#fixed &lt;&lt; #labels &gt;&gt; 'Standard fixed');			yourself.	styles := TextAttributes styles asSortedCollection.	mb := MenuBuilder new.	styles add: #system.	1 to: 2 do: [:i | 		| label style |		style := preDefinedStyles at: i.		(styles remove: style ifAbsent: []) isNil			ifFalse:				[label := (preDefinedLabels at: i) asString.				mb add: label-&gt;style]].		mb beginSubMenuLabeled: (#Pixel &lt;&lt; #labels &gt;&gt; 'Pixel').	3 to: 6 do: [:i | 		| label style |		style := preDefinedStyles at: i.		(styles remove: style ifAbsent: []) isNil			ifFalse:				[label := (preDefinedLabels at: i) asString.				mb add: label-&gt;style]].	mb endSubMenu.	mb beginSubMenuLabeled: (#Standard &lt;&lt; #labels &gt;&gt; 'Standard').	7 to: 10 do: [:i | 		| label style |		style := preDefinedStyles at: i.		(styles remove: style ifAbsent: []) isNil			ifFalse:				[label := (preDefinedLabels at: i) asString.				mb add: label-&gt;style]].	mb endSubMenu.	styles isEmpty		ifFalse: [mb line].	styles do:		[:style |		| label |		(label := style asString) at: 1 put: label first asUppercase.				mb add: label-&gt;style].	^mb menuHolder</body></methods><methods><class-id>Graphics.CharacterAttributes</class-id> <category>accessing</category><body>attributes	^attributes</body></methods><methods><class-id>UI.MultiSelectionInList</class-id> <category>enhanced - sequence view</category><body>selection	"Answer the receiver's selection"	selectionIndexHolder value do: [:i | i == 0 ifTrue: [^nil].  ^listHolder value at: i].	^nil</body><body>selection: aValue	"Set the receiver's selection to be aValue"	self selections: (Set with: aValue)</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>enhanced - Nextstep Look</category><body>setupFlyByHelpFor: aComponent spec: aSpec builder: aBuilder 	| controller |	((controller := aComponent controller) respondsTo: #helpText:) ifFalse: [^self].	controller helpText: (aSpec helpText isSymbol			ifTrue: [aBuilder aspectAt: aSpec helpText]			ifFalse: [aSpec helpText]) asValue.	controller helpField: aSpec helpField.	controller receiver: (aSpec getPerformerIn: aBuilder)</body></methods><methods><class-id>UI.MultiSelectionInList</class-id> <category>enhanced - sequence view</category><body>selectionIndex: anIndex	"Answer the receiver's selection index"	selectionIndexHolder value: (Set with: anIndex)</body></methods><methods><class-id>UI.SequenceController</class-id> <category>enhanced - sequence view</category><body>moveSelectionBy: delta 	| index newIndex |	searchString := nil.	index := view targetIndex.	index = view zeroIndex ifTrue: [index := view lastSelectionIndex].	newIndex := (index + delta max: 1) min: view lastIndex.	newIndex == index ifTrue: [^Screen default ringBell].	view useTargetIndex: newIndex.	(view toggleOnMove and: [self sensor ctrlDown not or: [self sensor shiftDown]]) 		ifTrue: [self requestValueChange			ifTrue: 				[self toggleAt: newIndex.				self valueChange]			ifFalse: [view useTargetIndex: index]]</body></methods><methods><class-id>Core.String</class-id> <category>enhanced - Rich Text</category><body>readColorFrom: aStream	| selector |	aStream skip: 1.	selector := aStream upTo: $&gt;.	aStream skip: -1.	^ColorValue perform: selector asSymbol</body><body>emphasisFor: aCharacter	aCharacter == $b ifTrue: [^#bold].	aCharacter == $i ifTrue: [^#italic].	aCharacter == $s ifTrue: [^#small].	aCharacter == $L ifTrue: [^#large].	aCharacter == $u ifTrue: [^#underline].	aCharacter == $x ifTrue: [^#strikeout].	aCharacter == $c ifTrue: [^#color].	^nil</body></methods><methods><class-id>Aragon.AragonStuff class</class-id> <category>resources</category><body>aragonImage	"UIMaskEditor new openOnClass: self andSelector: #AragonImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 4 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 15) at: 1 put: (ColorValue scaledRed: 8126 scaledGreen: 7644 scaledBlue: 7098); at: 2 put: (ColorValue scaledRed: 6906 scaledGreen: 4593 scaledBlue: 2601); at: 3 put: (ColorValue scaledRed: 7741 scaledGreen: 7355 scaledBlue: 7034); at: 4 put: (ColorValue scaledRed: 3950 scaledGreen: 2376 scaledBlue: 931); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 7869 scaledGreen: 8062 scaledBlue: 8126); at: 7 put: (ColorValue scaledRed: 7355 scaledGreen: 5749 scaledBlue: 4593); at: 8 put: (ColorValue scaledRed: 5589 scaledGreen: 3726 scaledBlue: 2055); at: 9 put: (ColorValue scaledRed: 5589 scaledGreen: 5139 scaledBlue: 4753); at: 10 put: (ColorValue scaledRed: 3983 scaledGreen: 3083 scaledBlue: 2312); at: 11 put: (ColorValue scaledRed: 2152 scaledGreen: 1220 scaledBlue: 642); at: 12 put: (ColorValue scaledRed: 3950 scaledGreen: 3886 scaledBlue: 3950); at: 13 put: (ColorValue scaledRed: 8094 scaledGreen: 8191 scaledBlue: 7677); at: 14 put: (ColorValue scaledRed: 6584 scaledGreen: 6552 scaledBlue: 6649); at: 15 put: (ColorValue scaledRed: 8126 scaledGreen: 7869 scaledBlue: 7869); yourself)) usingBits: (ByteArray fromPackedString: 'UUUUUU3WK%UUUUUUUUUUUUA!#%UUUUUUUUUUUUA&amp;''%9UUUUUUUUUUUI!FN9UUUUUUUUUU^Y!Y&gt;9UUUUUUUUUURY&amp;Y=UUUUUUUUUUW&amp;FVDW9UUUUUUUUUT&amp;N&amp;DW9UUUUU9U;%H&amp;*&amp;DQ#.;%UU9U;%A)*PXQ''%;.;.UU;.I*+^XQ_^8-7]UUW 5:)^HQF&gt;7X"MUUW@ :/LA!F]";.MUUTF^*&amp;SLQE3.;.MUUTGFHDQE!DS&amp;;.MW%WW^W]7]7]7&amp;;.M3.@S*.T-"Q]7N;.B9^53*&lt;JK.8E7&amp;[.NUP!:*M.;.;!7\;.E9R\:*Y&amp;;"H!7\9.E;A\3L:.M;"E7\:&amp;NJGL3N*.B;&amp;DWL3NM"S&amp;SN+#R;&amp;\3L3NX,3(:*MIUW+L:N**+'))</body><body>aragonShape	"UIMaskEditor new openOnClass: self andSelector: #AragonShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 16 0 0 0 56 0 0 0 56 0 0 0 60 0 0 0 124 0 0 0 126 0 0 0 254 0 0 0 255 0 0 0 255 0 0 1 239 128 0 1 207 135 0 3 199 207 0 3 199 223 0 3 255 255 0 7 255 255 0 7 255 254 0 15 7 254 0 15 15 254 0 31 31 254 0 31 127 254 0 63 249 254 0 127 227 254 0 255 131 255 0 255 3 255 0])</body></methods><methods><class-id>Aragon.AragonIcon class</class-id> <category>resources</category><body>AragonImage	"UIMaskEditor new openOnClass: self andSelector: #AragonImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 10) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 1321 scaledBlue: 528); at: 3 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 2378 scaledBlue: 1056); at: 4 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 5812 scaledBlue: 4491); at: 5 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 3699 scaledBlue: 2113); at: 6 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 3963 scaledBlue: 3963); at: 7 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 4756); at: 8 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 3170 scaledBlue: 2378); at: 9 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6605 scaledBlue: 6605); at: 10 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 4491 scaledBlue: 2642); yourself)) usingBits: (ByteArray fromPackedString: '@@@@@@@D@@@@@@@@@@@@@@@9@@@@@@@@@@@@@@@3\@@@@@@@@@@@@@@9$@@@@@@@@@@@@@L9M@@@@@@@@@@@@@L3M@@@@@@@@@@@@C%3&amp;T@@@@@@@@@@@CHS&amp;T@@@@@@@@@@@CDS&amp;Y@@@@@@@@@@@7E0NY\@@@@@@@@@@1D@NYP@@@@@@@@@!AD@BY%P@FY @@@@X!T@@9%0YUU @@@CPQ]2JY%BUUU @@@D%&amp;&amp;Y$9&amp;R]UU @@@DQ4QDQDQD]UU @@BRDP@@Y9QDIUU @@ABEPA%UV%D]5U @@YAE UUUUYDP%U @@P!E7]UY&amp;YDP''U @IP"H!U @@%DP!] A$H"HQU @C&amp;TH"I Y2]2HUX@@CP"H"I6T"D!E(@@@EH!HQDU'))</body><body>AragonShape	"UIMaskEditor new openOnClass: self andSelector: #AragonShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 16 0 0 0 56 0 0 0 56 0 0 0 60 0 0 0 124 0 0 0 126 0 0 0 254 0 0 0 255 0 0 0 255 0 0 1 239 128 0 1 207 135 0 3 199 207 0 3 199 223 0 3 255 255 0 7 255 255 0 7 255 254 0 15 7 254 0 15 15 254 0 31 31 254 0 31 127 254 0 63 249 254 0 127 227 254 0 255 131 255 0 255 3 255 0])</body><body>arrowLeftImage	"UIMaskEditor new openOnClass: self andSelector: #arrowLeftImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@17 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue cyan; at: 3 put: ColorValue white; yourself)) usingBits: #[170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 170 168 170 170 160 0 0 0 170 160 170 170 160 0 0 0 170 132 170 170 160 0 0 0 170 20 170 170 160 0 0 0 168 84 0 0 160 0 0 0 161 85 85 84 160 0 0 0 133 85 85 84 160 0 0 0 161 85 85 84 160 0 0 0 168 84 0 0 160 0 0 0 170 20 170 170 160 0 0 0 170 132 170 170 160 0 0 0 170 160 170 170 160 0 0 0 170 168 170 170 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0])</body><body>arrowLeftShape	"UIMaskEditor new openOnClass: self andSelector: #arrowLeftShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@17 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 1 0 0 0 3 0 0 0 7 0 0 0 15 0 0 0 31 255 0 0 63 255 0 0 127 255 0 0 63 255 0 0 31 255 0 0 15 0 0 0 7 0 0 0 3 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])</body><body>arrowRightImage	"UIMaskEditor new openOnClass: self andSelector: #arrowRightImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@17 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue cyan; at: 3 put: ColorValue white; yourself)) usingBits: #[170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 170 170 162 170 160 0 0 0 170 170 160 170 160 0 0 0 170 170 161 42 160 0 0 0 170 170 161 74 160 0 0 0 160 0 1 82 160 0 0 0 161 85 85 84 160 0 0 0 161 85 85 85 32 0 0 0 161 85 85 84 160 0 0 0 160 0 1 82 160 0 0 0 170 170 161 74 160 0 0 0 170 170 161 42 160 0 0 0 170 170 160 170 160 0 0 0 170 170 162 170 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0])</body><body>arrowRightShape	"UIMaskEditor new openOnClass: self andSelector: #arrowRightShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@17 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 32 0 0 0 48 0 0 0 56 0 0 0 60 0 0 63 254 0 0 63 255 0 0 63 255 128 0 63 255 0 0 63 254 0 0 0 60 0 0 0 56 0 0 0 48 0 0 0 32 0 0 0 0 0 0 0 0 0 0])</body><body>bookImage	"UIMaskEditor new openOnClass: self andSelector: #bookImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@15 depth: 2 bitsPerPixel: 2 		palette: (MappedPalette withColors: ((Array new: 4) 			at: 1 put: ColorValue veryLightGray; 			at: 2 put: ColorValue navy; 			at: 3 put: ColorValue white; 			at: 4 put: ColorValue darkCyan; 		yourself)) usingBits: #[170 170 90 170 160 0 0 0 170 165 246 170 160 0 0 0 170 95 253 170 160 0 0 0 165 255 255 106 160 0 0 0 159 255 255 218 160 0 0 0 155 255 255 246 160 0 0 0 158 255 255 253 160 0 0 0 159 191 255 253 96 0 0 0 159 239 255 213 160 0 0 0 167 251 253 97 160 0 0 0 169 254 214 9 96 0 0 0 170 125 96 150 160 0 0 0 170 157 9 106 160 0 0 0 170 165 22 170 160 0 0 0 170 169 106 170 160 0 0 0])</body><body>bookOpenImage	"UIMaskEditor new openOnClass: self andSelector: #bookOpenImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@15 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) 		at: 1 put: ColorValue black; 		at: 2 put: ColorValue lightGray;		at: 3 put: ColorValue white; 		at: 4 put: ColorValue darkRed;		at: 5 put: ColorValue gray; 	yourself)) usingBits: #[34 0 34 34 34 34 34 34 32 0 0 0 34 2 2 34 34 34 34 34 32 0 0 0 32 2 68 34 34 0 2 34 32 0 0 0 32 50 32 34 0 34 0 34 32 0 0 0 32 50 34 0 34 34 1 0 32 0 0 0 32 50 34 1 34 34 1 16 32 0 0 0 32 50 34 1 34 34 1 48 32 0 0 0 32 50 34 1 34 34 1 16 32 0 0 0 32 50 34 1 34 34 1 48 32 0 0 0 32 51 34 1 36 64 1 16 32 0 0 0 32 3 50 1 4 17 17 48 32 0 0 0 34 32 51 0 0 0 0 16 32 0 0 0 34 32 48 3 51 51 51 48 32 0 0 0 34 32 51 48 0 0 0 0 32 0 0 0 34 34 0 2 34 34 34 34 32 0 0 0])</body><body>bookOpenShape	"UIMaskEditor new openOnClass: self andSelector: #bookOpenShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@15 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[48 0 0 0 40 0 0 0 108 56 0 0 100 204 0 0 99 15 0 0 99 15 0 0 99 15 0 0 99 15 0 0 99 15 0 0 115 127 0 0 123 255 0 0 31 255 0 0 31 255 0 0 31 255 0 0 14 0 0 0])</body><body>bookShape	"UIMaskEditor new openOnClass: self andSelector: #bookShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@15 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 192 0 0 3 224 0 0 15 240 0 0 63 248 0 0 127 252 0 0 95 254 0 0 111 255 0 0 119 255 128 0 123 255 0 0 61 251 0 0 30 237 128 0 15 182 0 0 7 216 0 0 3 224 0 0 1 128 0 0])</body><body>brick32Image	"UIMaskEditor new openOnClass: self andSelector: #iconFigure"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 31@32 depth: 3 bitsPerPixel: 4 		palette: (MappedPalette withColors: ((Array new: 7) 			at: 1 put: ColorValue black; 			at: 2 put: ColorValue white; 			at: 3 put: ColorValue green; 			at: 4 put: ColorValue green asShadowColor; 			at: 5 put: ColorValue gray; 			at: 6 put: ColorValue gray; 			at: 7 put: ColorValue gray; 		yourself)) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BH@@@@@@@@@@@@@@@@@@@H"H @@@@@@@@@@@@@@@@@"H"H"@@@@@@@@@@@@@@@BH"H"H"H@@@@@@@@@@@@@H"H"H"H"H @@@@@@@@@@@"H"H"H"H"H"@@@@@@@@@BH"H"H"H"H"H"H@@@@@@@H"H"H"H"H"H"H"H @@@@@"H"H"H"H"H"H"H"H#@@@CL"H"H"H"H"H"H"H"L0@@@3L2H"H"H"H"H"H"H3L@@@L3L3H"H"H"H"H"H#L3@@@CL3L3L"H"H"H"H"L3L0@@@3L3L3L2H"H"H"H3L3L@@@L3L3L3L3H"H"H#L3L3@@@CL3L3L3L3L"H"L3L3L0@@@3L3L3L3L3L2H3L3L3L@@@L3L3L3L3L3L3L3L3L0@@@@@3L3L3L3L3L3L3L3@@@@@@@CL3L3L3L3L3L3L@@@@@@@@@L3L3L3L3L3L0@@@@@@@@@@@3L3L3L3L3@@@@@@@@@@@@@CL3L3L3L@@@@@@@@@@@@@@@L3L3L0@@@@@@@@@@@@@@@@@3L3@@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body>brick32Shape	"UIMaskEditor new openOnClass: self andSelector: #iconShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 31@32 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 24 0 0 0 62 0 0 0 127 128 0 0 255 224 0 1 255 248 0 3 255 254 0 7 255 255 128 15 255 255 224 31 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 240 15 255 255 224 3 255 255 192 0 255 255 128 0 63 255 0 0 15 254 0 0 3 252 0 0 0 248 0 0 0 48 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body>brickImage	"UIMaskEditor new openOnClass: self andSelector: #brickImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@12 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue magenta; at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 4111); yourself)) usingBits: #[85 85 85 84 85 86 85 84 85 88 149 84 85 96 37 84 85 128 9 84 85 160 2 84 85 168 10 84 85 106 42 84 85 90 169 84 85 86 165 84 85 85 149 84 85 85 85 84])</body><body>brickShape	"UIMaskEditor new openOnClass: self andSelector: #brickShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@12 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 0 0 0 3 128 0 0 7 192 0 0 15 224 0 0 15 240 0 0 15 240 0 0 7 240 0 0 3 224 0 0 1 192 0 0 0 128 0 0 0 0 0 0])</body><body>bricksImage	"UIMaskEditor new openOnClass: self andSelector: #bricksImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@12 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue magenta; at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 4111); yourself)) usingBits: #[85 85 85 85 85 101 101 85 85 137 137 85 86 2 2 85 88 0 128 149 90 0 32 37 90 128 160 165 86 162 162 165 85 170 170 149 85 106 106 85 85 89 89 85 85 85 85 85])</body><body>bricksShape	"UIMaskEditor new openOnClass: self andSelector: #bricksShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@12 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 4 64 0 0 14 224 0 0 31 240 0 0 63 248 0 0 63 252 0 0 63 252 0 0 31 252 0 0 15 248 0 0 7 112 0 0 2 32 0 0 0 0 0 0])</body><body>cakeImage	"UIMaskEditor new openOnClass: self andSelector: #cakeImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@13 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue green; at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 0 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[170 170 170 170 160 0 0 0 170 175 255 170 160 0 0 0 170 197 85 58 160 0 0 0 171 81 244 94 160 0 0 0 173 92 243 87 160 0 0 0 173 127 255 215 160 0 0 0 173 92 243 87 160 0 0 0 175 81 244 95 160 0 0 0 175 197 85 63 160 0 0 0 171 255 255 254 160 0 0 0 170 255 255 250 160 0 0 0 170 175 255 170 160 0 0 0 170 170 170 170 160 0 0 0])</body><body>cakeShape	"UIMaskEditor new openOnClass: self andSelector: #cakeShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@13 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 3 240 0 0 15 252 0 0 31 254 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 31 254 0 0 15 252 0 0 3 240 0 0 0 0 0 0])</body><body>copyImage	"UIMaskEditor new openOnClass: self andSelector: #copyImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 19@18 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 7709 scaledGreen: 7259 scaledBlue: 7098); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); yourself)) usingBits: #[170 170 170 170 168 0 0 0 170 170 170 170 168 0 0 0 170 170 170 170 168 0 0 0 160 0 170 170 168 0 0 0 161 84 42 170 168 0 0 0 161 84 74 170 168 0 0 0 161 4 255 250 168 0 0 0 161 85 213 126 168 0 0 0 161 0 213 119 168 0 0 0 161 85 208 127 232 0 0 0 161 0 213 85 232 0 0 0 161 85 208 1 232 0 0 0 160 0 213 85 232 0 0 0 170 170 208 1 232 0 0 0 170 170 213 85 232 0 0 0 170 170 255 255 232 0 0 0 170 170 170 170 168 0 0 0 170 170 170 170 168 0 0 0])</body><body>copyShape	"UIMaskEditor new openOnClass: self andSelector: #copyShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 19@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 63 0 0 0 63 128 0 0 63 192 0 0 63 252 0 0 63 254 0 0 63 255 0 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 0 255 128 0 0 255 128 0 0 255 128 0 0 0 0 0 0 0 0 0])</body><body>cutImage	"UIMaskEditor new openOnClass: self andSelector: #cutImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@18 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 3 put: ColorValue white; yourself)) usingBits: #[170 170 170 170 128 0 0 0 170 170 170 170 128 0 0 0 170 162 162 170 128 0 0 0 170 162 162 170 128 0 0 0 170 162 162 170 128 0 0 0 170 160 130 170 128 0 0 0 170 168 138 170 128 0 0 0 170 168 10 170 128 0 0 0 170 170 42 170 128 0 0 0 170 169 26 170 128 0 0 0 170 169 149 170 128 0 0 0 170 149 154 106 128 0 0 0 170 105 154 106 128 0 0 0 170 105 154 106 128 0 0 0 170 105 165 170 128 0 0 0 170 150 170 170 128 0 0 0 170 170 170 170 128 0 0 0 170 170 170 170 128 0 0 0])</body><body>cutShape	"UIMaskEditor new openOnClass: self andSelector: #cutShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 2 32 0 0 2 32 0 0 2 32 0 0 3 96 0 0 1 64 0 0 1 192 0 0 0 128 0 0 1 192 0 0 1 112 0 0 7 72 0 0 9 72 0 0 9 72 0 0 9 48 0 0 6 0 0 0 0 0 0 0 0 0 0 0])</body><body>deleteImage	"UIMaskEditor new openOnClass: self andSelector: #deleteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: (ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 0); at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 7709 scaledGreen: 7259 scaledBlue: 7098); yourself)) usingBits: #[85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 80 149 85 66 80 0 0 0 80 9 85 9 80 0 0 0 84 2 84 37 80 0 0 0 85 64 146 85 80 0 0 0 85 80 2 85 80 0 0 0 85 84 9 85 80 0 0 0 85 80 2 85 80 0 0 0 85 64 144 149 80 0 0 0 85 2 84 37 80 0 0 0 84 9 85 37 80 0 0 0 84 9 85 73 80 0 0 0 85 37 85 85 80 0 0 0 85 85 85 82 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body>deleteShape	"UIMaskEditor new openOnClass: self andSelector: #deleteShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 56 7 0 0 62 14 0 0 31 28 0 0 7 176 0 0 3 240 0 0 1 224 0 0 3 240 0 0 7 184 0 0 15 28 0 0 30 12 0 0 30 6 0 0 12 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0])</body><body>diskImage	"UIMaskEditor new openOnClass: self andSelector: #diskImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@11 depth: 4 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 11) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6874 scaledGreen: 6874 scaledBlue: 6874); at: 3 put: (ColorValue scaledRed: 5010 scaledGreen: 5010 scaledBlue: 5010); at: 4 put: (ColorValue scaledRed: 5814 scaledGreen: 5814 scaledBlue: 5814); at: 5 put: (ColorValue scaledRed: 0 scaledGreen: 6617 scaledBlue: 0); at: 6 put: (ColorValue scaledRed: 7130 scaledGreen: 7130 scaledBlue: 7130); at: 7 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6360); at: 8 put: (ColorValue scaledRed: 0 scaledGreen: 4240 scaledBlue: 0); at: 9 put: ColorValue white; at: 10 put: (ColorValue scaledRed: 3693 scaledGreen: 3693 scaledBlue: 3693); at: 11 put: (ColorValue scaledRed: 4753 scaledGreen: 4753 scaledBlue: 4753); yourself)) usingBits: #[136 136 136 136 136 136 136 136 136 0 0 0 136 137 153 153 153 153 153 153 136 0 0 0 136 147 51 51 51 51 51 57 8 0 0 0 137 136 136 136 136 136 136 41 8 0 0 0 137 22 102 102 102 52 115 169 8 0 0 0 137 83 102 102 99 51 51 169 8 0 0 0 137 89 153 153 153 153 147 169 8 0 0 0 137 24 136 136 136 136 131 169 8 0 0 0 137 153 153 153 153 153 153 144 136 0 0 0 136 0 0 0 0 0 0 8 136 0 0 0 136 136 136 136 136 136 136 136 136 0 0 0])</body><body>diskShape	"UIMaskEditor new openOnClass: self andSelector: #diskShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@11 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 31 255 0 0 63 255 128 0 127 255 128 0 127 255 128 0 127 255 128 0 127 255 128 0 127 255 128 0 127 255 0 0 63 254 0 0 0 0 0 0])</body><body>exclamImage	"UIMaskEditor new openOnClass: self andSelector: #exclamImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: (ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 0); at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 5942 scaledGreen: 3726 scaledBlue: 2858); yourself)) usingBits: #[85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 5 85 80 0 0 0 85 84 1 85 80 0 0 0 85 84 1 85 80 0 0 0 85 84 1 85 80 0 0 0 85 84 1 85 80 0 0 0 85 84 1 85 80 0 0 0 85 84 1 85 80 0 0 0 85 86 9 85 80 0 0 0 85 85 5 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 5 85 80 0 0 0 85 84 1 85 80 0 0 0 85 84 1 85 80 0 0 0 85 85 5 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body>exclamShape	"UIMaskEditor new openOnClass: self andSelector: #exclamShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 192 0 0 1 224 0 0 1 224 0 0 1 224 0 0 1 224 0 0 1 224 0 0 1 224 0 0 1 224 0 0 0 192 0 0 0 0 0 0 0 192 0 0 1 224 0 0 1 224 0 0 0 192 0 0 0 0 0 0 0 0 0 0])</body><body>fileNewImage	"UIMaskEditor new openOnClass: self andSelector: #fileNewImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 5942 scaledGreen: 3726 scaledBlue: 2858); at: 5 put: (ColorValue scaledRed: 7709 scaledGreen: 7259 scaledBlue: 7098); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"@@@@HRH1H#@@H"H"@@@@H1H4H1Q@@"H"@@@@H#D1LTQ@PBH"@@@@H!LTL3M@Q@H"@@@@H3MAEDQ@@@@"@@@@H"P4P0ADQD@"@@@@H2H1QDQDQD@"@@@@H"H4@@@@AD@"@@@@H"HDQDQDQD@"@@@@H"HD@@@@AD@"@@@@H"HDQDQDQD@"@@@@H"HD@@@@AD@"@@@@H"HDQDQDQD@"@@@@H"HDQDQDQD@"@@@@H"H@@@@@@@@"@@@@H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@'))</body><body>fileNewShape	"UIMaskEditor new openOnClass: self andSelector: #fileNewShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 76 240 0 0 109 248 0 0 63 252 0 0 63 254 0 0 127 255 0 0 31 255 0 0 79 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 0 0 0 0 0 0 0 0])</body><body>fileOpenImage	"UIMaskEditor new openOnClass: self andSelector: #fileOpenImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 7709 scaledGreen: 7259 scaledBlue: 7098); at: 3 put: ColorValue white; at: 4 put: ColorValue yellow; at: 5 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@H"H"H"H @BH"@@@@H"H"H"HBH HB@@@@H"H"H"H"H"@B@@@@H"@@H"H"H @B@@@@H D1@@@@@"H"@@@@H LSD1LS@"H"@@@@H D1LSD1@"H"@@@@H LSD@@@@@@B@@@@H D1ADQDQDPB@@@@H LPQDQDQD@"@@@@H DDQDQDQ@H"@@@@H ADQDQDPBH"@@@@H @@@@@@@"H"@@@@H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@'))</body><body>fileOpenShape	"UIMaskEditor new openOnClass: self andSelector: #fileOpenShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 28 0 0 0 34 128 0 0 1 128 0 28 3 128 0 63 248 0 0 63 248 0 0 63 248 0 0 63 255 128 0 63 255 128 0 63 255 0 0 63 254 0 0 63 252 0 0 63 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body>filePrintImage	"UIMaskEditor new openOnClass: self andSelector: #filePrintImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 7709 scaledGreen: 7259 scaledBlue: 7098); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 5942 scaledGreen: 3726 scaledBlue: 2858); at: 5 put: ColorValue yellow; yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@H"H"@@@@@@H"@@@@H"H DQDQDPH"@@@@H"H D@@@DBH"@@@@H"HADQDQDBH"@@@@H"HA@@@A@@@"@@@@H"@QDQDQ@ HB@@@@H @@@@@@HB@B@@@@HBH"H"H"@ HB@@@@H@@@@@@@@BHB@@@@HBH"H#L2HB@"@@@@HBH"H$QBH@@"@@@@H@@@@@@@@B@"@@@@H H"H"H"@ H"@@@@H"@@@@@@@BH"@@@@H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@'))</body><body>filePrintShape	"UIMaskEditor new openOnClass: self andSelector: #filePrintShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 3 254 0 0 7 254 0 0 7 252 0 0 15 252 0 0 15 255 0 0 31 250 128 0 63 245 128 0 64 10 128 0 127 252 128 0 64 229 0 0 64 231 0 0 127 253 0 0 32 10 0 0 31 252 0 0 0 0 0 0 0 0 0 0])</body><body>fileSaveAllImage	"UIMaskEditor new openOnClass: self andSelector: #fileSaveAllImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 7709 scaledGreen: 7259 scaledBlue: 7098); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 0); yourself)) usingBits: #[170 170 170 170 160 0 0 0 170 160 0 0 32 0 0 0 170 163 21 81 32 0 0 0 170 0 0 0 32 0 0 0 170 49 85 19 32 0 0 0 160 0 0 3 32 0 0 0 163 21 81 51 32 0 0 0 163 21 80 51 32 0 0 0 163 21 83 51 32 0 0 0 163 21 83 51 32 0 0 0 163 192 15 51 32 0 0 0 163 255 255 48 32 0 0 0 163 192 3 50 160 0 0 0 163 192 19 2 160 0 0 0 163 192 19 42 160 0 0 0 168 0 0 42 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0])</body><body>fileSaveAllShape	"UIMaskEditor new openOnClass: self andSelector: #fileSaveAllShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 3 255 128 0 3 255 128 0 15 255 128 0 15 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 254 0 0 63 254 0 0 63 248 0 0 31 248 0 0 0 0 0 0 0 0 0 0])</body><body>fileSaveImage	"UIMaskEditor new openOnClass: self andSelector: #fileSaveImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 0); yourself)) usingBits: #[85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 80 0 0 0 80 0 0 0 82 21 85 68 80 0 0 0 82 21 85 64 80 0 0 0 82 21 85 72 80 0 0 0 82 21 85 72 80 0 0 0 82 21 85 72 80 0 0 0 82 21 85 72 80 0 0 0 82 128 0 40 80 0 0 0 82 170 170 168 80 0 0 0 82 128 0 8 80 0 0 0 82 128 1 72 80 0 0 0 82 128 1 72 80 0 0 0 82 128 1 72 80 0 0 0 84 0 0 0 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body>fileSaveShape	"UIMaskEditor new openOnClass: self andSelector: #fileSaveShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 63 255 0 0 56 5 0 0 56 7 0 0 56 7 0 0 56 7 0 0 56 7 0 0 56 7 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 231 0 0 63 231 0 0 63 231 0 0 31 255 0 0 0 0 0 0 0 0 0 0])</body><body>folder1Image	"UIMaskEditor new openOnClass: self andSelector: #folder1Image"	&lt;resource: #image&gt;	^CachedImage on: (Image			extent: 16 @ 16			depth: 2			bitsPerPixel: 2			palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4)						at: 1 put: Graphics.ColorValue black;						at: 2 put: Graphics.ColorValue royalBlue;						at: 3 put: Graphics.ColorValue gray;						at: 4 put: Graphics.ColorValue royalBlue asShadowColor; yourself))			usingBits: #[0 63 0 0 0 63 243 240 80 63 255 252 85 63 255 255 85 95 255 255 21 85 255 255 21 85 95 252 21 85 87 252 21 85 85 252 5 85 85 240 5 85 85 240 5 85 85 234 0 85 85 234 0 5 85 232 0 0 85 160 0 0 5 128])</body><body>folder1Shape	"UIMaskEditor new openOnClass: self andSelector: #folder1Shape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[7 0 0 0 7 220 0 0 199 254 0 0 247 255 0 0 255 255 0 0 127 255 0 0 127 254 0 0 127 254 0 0 127 254 0 0 63 252 0 0 63 252 0 0 63 255 0 0 15 255 0 0 3 254 0 0 0 252 0 0 0 56 0 0])</body><body>folder2Image	"UIMaskEditor new openOnClass: self andSelector: #folder2Image"	&lt;resource: #image&gt;	^CachedImage on: (Image			extent: 18 @ 18			depth: 2			bitsPerPixel: 2			palette: (MappedPalette withColors: ((Array new: 4)						at: 1 put: ColorValue magenta;						at: 2 put: ColorValue black;						at: 3 put: (ColorValue							scaledRed: 4111							scaledGreen: 0							scaledBlue: 4111);						at: 4 put: (ColorValue							scaledRed: 4111							scaledGreen: 4111							scaledBlue: 4111); yourself))			usingBits: #[85 85 85 85 80 0 0 0 85 90 149 85 80 0 0 0 85 90 169 169 80 0 0 0 65 90 170 170 80 0 0 0 64 26 170 170 144 0 0 0 64 2 170 170 144 0 0 0 80 0 42 170 144 0 0 0 80 0 2 170 80 0 0 0 80 0 0 170 80 0 0 0 80 0 0 42 80 0 0 0 84 0 0 41 80 0 0 0 84 0 0 41 80 0 0 0 84 0 0 47 208 0 0 0 85 64 0 47 208 0 0 0 85 84 0 47 80 0 0 0 85 85 64 61 80 0 0 0 85 85 84 53 80 0 0 0 85 85 85 85 80 0 0 0])</body><body>folder2Shape	"UIMaskEditor new openOnClass: self andSelector: #folder2Shape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 3 128 0 0 3 238 0 0 99 255 0 0 123 255 128 0 127 255 128 0 63 255 128 0 63 255 0 0 63 255 0 0 63 255 0 0 31 254 0 0 31 254 0 0 31 255 128 0 7 255 128 0 1 255 0 0 0 126 0 0 0 28 0 0 0 0 0 0])</body><body>folder3Image	"UIMaskEditor new openOnClass: self andSelector: #folder3Image"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 4 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 14) at: 1 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 5010); at: 2 put: (ColorValue scaledRed: 8191 scaledGreen: 7420 scaledBlue: 5557); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 5010); at: 5 put: (ColorValue scaledRed: 3950 scaledGreen: 3950 scaledBlue: 3950); at: 6 put: (ColorValue scaledRed: 2890 scaledGreen: 2890 scaledBlue: 2890); at: 7 put: (ColorValue scaledRed: 4753 scaledGreen: 4753 scaledBlue: 4753); at: 8 put: (ColorValue scaledRed: 5814 scaledGreen: 5814 scaledBlue: 5814); at: 9 put: (ColorValue scaledRed: 3693 scaledGreen: 3693 scaledBlue: 3693); at: 10 put: (ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 5557); at: 11 put: (ColorValue scaledRed: 4497 scaledGreen: 4497 scaledBlue: 4497); at: 12 put: (ColorValue scaledRed: 3437 scaledGreen: 3437 scaledBlue: 3437); at: 13 put: (ColorValue scaledRed: 1316 scaledGreen: 1316 scaledBlue: 1316); at: 14 put: (ColorValue scaledRed: 3180 scaledGreen: 3180 scaledBlue: 3180); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"@@@@H"H"RTH"H"H"@@@@H"H"PQ%BQDH"@@@@IDH"PQDYDP "@@@@I@QB$QDQDQAB@@@@I@L7\ADQDQEB@@@@H''L3LG$ADQAB@@@@H$L3L3LGDQ$"@@@@H$L3L3L3\Q "@@@@H$@3L3L3\QP"@@@@H"\3L3L3\YH"@@@@H"P3L3L3\ZH"@@@@H"Q3L3L3@[/B@@@@H"H$\3L3@X/R@@@@H"H"IGL3A+4"@@@@H"H"H"Q3MEH"@@@@H"H"H"H$]RH"@@@@H"H"H"H"H"H"@@@@'))</body><body>folderImage	"UIMaskEditor new openOnClass: self andSelector: #folderImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 7934 scaledGreen: 7934 scaledBlue: 7934); at: 3 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 5010); at: 4 put: (ColorValue scaledRed: 5010 scaledGreen: 5010 scaledBlue: 0); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 3180); at: 7 put: (ColorValue scaledRed: 8191 scaledGreen: 6617 scaledBlue: 5010); at: 8 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 6617); yourself)) usingBits: #[68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 67 51 51 4 68 68 68 68 49 119 34 48 68 68 68 67 85 85 85 83 51 51 52 67 119 119 119 119 119 114 80 67 114 34 34 34 34 38 80 67 114 34 34 34 98 98 80 67 114 34 34 34 38 38 80 67 114 34 34 98 98 98 80 67 114 34 34 38 38 38 80 67 114 34 98 98 98 102 80 67 118 38 38 38 38 102 80 67 85 85 85 85 85 85 80 68 0 0 0 0 0 0 0 68 68 68 68 68 68 68 68])</body><body>folderShape	"UIMaskEditor new openOnClass: self andSelector: #folderShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 31 0 0 0 63 128 0 0 127 254 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 63 255 0 0 0 0 0 0])</body><body>gemImage	"UIMaskEditor new openOnClass: self andSelector: #gemImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@15 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue green; at: 3 put: (ColorValue scaledRed: 0 scaledGreen: 4111 scaledBlue: 0); at: 4 put: ColorValue white; yourself)) usingBits: #[255 255 255 255 240 0 0 0 255 255 63 255 240 0 0 0 255 240 3 255 240 0 0 0 255 4 72 63 240 0 0 0 240 84 74 131 240 0 0 0 241 1 80 35 240 0 0 0 241 80 2 163 240 0 0 0 252 81 82 143 240 0 0 0 255 17 82 63 240 0 0 0 255 20 74 63 240 0 0 0 255 196 72 255 240 0 0 0 255 241 35 255 240 0 0 0 255 241 35 255 240 0 0 0 255 252 15 255 240 0 0 0 255 255 63 255 240 0 0 0])</body><body>gemShape	"UIMaskEditor new openOnClass: self andSelector: #gemShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@15 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 128 0 0 3 224 0 0 15 248 0 0 63 254 0 0 63 254 0 0 63 254 0 0 31 252 0 0 15 248 0 0 15 248 0 0 7 240 0 0 3 224 0 0 3 224 0 0 1 192 0 0 0 128 0 0])</body><body>glassesImage	"UIMaskEditor new openOnClass: self andSelector: #glassesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@18 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 2 put: ColorValue white; at: 3 put: ColorValue cyan; at: 4 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[85 85 85 85 85 85 0 0 85 85 85 85 85 85 0 0 85 85 85 85 85 85 0 0 85 85 85 5 85 85 0 0 85 85 80 81 85 65 0 0 85 85 5 81 85 20 0 0 85 80 85 81 84 84 0 0 85 5 85 117 81 84 0 0 80 5 85 1 69 81 0 0 65 144 80 100 21 85 0 0 70 100 1 153 21 85 0 0 73 152 82 102 21 85 0 0 70 100 81 153 21 85 0 0 81 145 84 100 85 85 0 0 84 5 85 1 85 85 0 0 85 85 85 85 85 85 0 0 85 85 85 85 85 85 0 0 85 85 85 85 85 85 0 0])</body><body>glassesShape	"UIMaskEditor new openOnClass: self andSelector: #glassesShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 12 0 0 0 50 6 0 0 194 9 0 3 2 17 0 12 4 33 0 60 14 66 0 107 53 128 0 85 234 128 0 107 53 128 0 85 42 128 0 42 21 0 0 28 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body>keyImage	"UIMaskEditor new openOnClass: self andSelector: #keyImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@15 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 4240); at: 3 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6360); at: 4 put: ColorValue white; at: 5 put: ColorValue yellow; at: 6 put: (ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 0); yourself)) usingBits: #[51 48 1 0 3 51 51 51 51 5 65 68 80 51 51 51 48 84 1 68 69 3 51 51 5 64 16 68 84 3 51 51 4 2 4 69 68 3 51 51 17 16 68 84 69 3 51 51 5 68 69 68 84 3 51 51 5 68 84 66 4 64 51 51 5 84 68 68 32 68 3 51 48 85 84 5 66 4 64 51 51 0 0 0 5 32 68 3 51 51 51 51 48 66 4 64 51 51 51 51 48 4 32 64 51 51 51 51 51 48 82 0 51 51 51 51 51 48 0 3])</body><body>keyShape	"UIMaskEditor new openOnClass: self andSelector: #keyShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@15 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[31 128 0 0 63 192 0 0 127 224 0 0 255 224 0 0 255 224 0 0 255 224 0 0 255 224 0 0 255 240 0 0 255 248 0 0 127 252 0 0 63 254 0 0 0 127 0 0 0 127 0 0 0 31 0 0 0 30 0 0])</body><body>largeBrickImage	"UIMaskEditor new openOnClass: self andSelector: #largeBrickImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[85 85 85 85 80 0 0 0 85 84 21 85 80 0 0 0 85 80 1 85 80 0 0 0 85 64 0 21 80 0 0 0 85 0 0 1 80 0 0 0 84 0 0 0 144 0 0 0 90 0 0 2 144 0 0 0 90 160 0 10 144 0 0 0 90 170 0 42 144 0 0 0 90 170 160 170 144 0 0 0 90 170 170 170 80 0 0 0 85 170 170 169 80 0 0 0 85 90 170 165 80 0 0 0 85 85 170 149 80 0 0 0 85 85 90 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body>largeBrickShape	"UIMaskEditor new openOnClass: self andSelector: #largeBrickShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 128 0 0 3 224 0 0 7 248 0 0 15 254 0 0 31 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 0 0 15 254 0 0 3 252 0 0 0 248 0 0 0 48 0 0 0 0 0 0])</body><body>leafImage	"UIMaskEditor new openOnClass: self andSelector: #leafImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6167 scaledGreen: 6167 scaledBlue: 6167); at: 3 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 4 put: ColorValue white; yourself)) usingBits: #[255 255 255 255 255 255 255 255 252 0 3 255 252 255 240 255 252 250 177 63 252 255 240 15 252 250 191 207 252 255 255 207 252 250 171 207 252 255 255 207 252 250 171 207 252 255 255 207 252 250 171 207 252 255 255 207 252 0 0 15 255 255 255 255])</body><body>leafShape	"UIMaskEditor new openOnClass: self andSelector: #leafShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 31 224 0 0 31 240 0 0 31 248 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 0 0 0 0])</body><body>monitorImage	"UIMaskEditor new openOnClass: self andSelector: #monitorImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 7 bitsPerPixel: 8 palette: (MappedPalette withColors: ((Array new: 68) at: 1 put: (ColorValue scaledRed: 7130 scaledGreen: 7420 scaledBlue: 7130); at: 2 put: (ColorValue scaledRed: 7130 scaledGreen: 7130 scaledBlue: 7420); at: 3 put: (ColorValue scaledRed: 1798 scaledGreen: 1541 scaledBlue: 2858); at: 4 put: (ColorValue scaledRed: 7934 scaledGreen: 7934 scaledBlue: 7934); at: 5 put: (ColorValue scaledRed: 1027 scaledGreen: 1027 scaledBlue: 1541); at: 6 put: (ColorValue scaledRed: 6874 scaledGreen: 7130 scaledBlue: 6874); at: 7 put: (ColorValue scaledRed: 5300 scaledGreen: 5300 scaledBlue: 5557); at: 8 put: (ColorValue scaledRed: 1541 scaledGreen: 1284 scaledBlue: 2087); at: 9 put: (ColorValue scaledRed: 8191 scaledGreen: 7934 scaledBlue: 8191); at: 10 put: (ColorValue scaledRed: 1284 scaledGreen: 1027 scaledBlue: 1798); at: 11 put: (ColorValue scaledRed: 5010 scaledGreen: 4721 scaledBlue: 5300); at: 12 put: (ColorValue scaledRed: 2087 scaledGreen: 1798 scaledBlue: 2344); at: 13 put: (ColorValue scaledRed: 2344 scaledGreen: 2087 scaledBlue: 3437); at: 14 put: (ColorValue scaledRed: 3950 scaledGreen: 3950 scaledBlue: 4207); at: 15 put: (ColorValue scaledRed: 4721 scaledGreen: 4497 scaledBlue: 5010); at: 16 put: (ColorValue scaledRed: 7677 scaledGreen: 7677 scaledBlue: 7677); at: 17 put: (ColorValue scaledRed: 2858 scaledGreen: 2601 scaledBlue: 4207); at: 18 put: (ColorValue scaledRed: 1541 scaledGreen: 1284 scaledBlue: 2601); at: 19 put: (ColorValue scaledRed: 2087 scaledGreen: 1798 scaledBlue: 3180); at: 20 put: (ColorValue scaledRed: 5300 scaledGreen: 5010 scaledBlue: 5557); at: 21 put: (ColorValue scaledRed: 4207 scaledGreen: 5010 scaledBlue: 4207); at: 22 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 6874); at: 23 put: (ColorValue scaledRed: 2087 scaledGreen: 1798 scaledBlue: 2858); at: 24 put: (ColorValue scaledRed: 1027 scaledGreen: 1027 scaledBlue: 2087); at: 25 put: (ColorValue scaledRed: 2601 scaledGreen: 2087 scaledBlue: 3693); at: 26 put: (ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 6070); at: 27 put: (ColorValue scaledRed: 1798 scaledGreen: 1541 scaledBlue: 2601); at: 28 put: (ColorValue scaledRed: 7677 scaledGreen: 7934 scaledBlue: 7934); at: 29 put: (ColorValue scaledRed: 7677 scaledGreen: 7677 scaledBlue: 8191); at: 30 put: (ColorValue scaledRed: 6070 scaledGreen: 6070 scaledBlue: 6360); at: 31 put: (ColorValue scaledRed: 2344 scaledGreen: 1798 scaledBlue: 3437); at: 32 put: (ColorValue scaledRed: 1798 scaledGreen: 1541 scaledBlue: 1798); at: 33 put: (ColorValue scaledRed: 1284 scaledGreen: 1284 scaledBlue: 2087); at: 34 put: (ColorValue scaledRed: 5010 scaledGreen: 5010 scaledBlue: 5557); at: 35 put: (ColorValue scaledRed: 2601 scaledGreen: 2344 scaledBlue: 3950); at: 36 put: (ColorValue scaledRed: 5814 scaledGreen: 5814 scaledBlue: 6070); at: 37 put: (ColorValue scaledRed: 7420 scaledGreen: 7420 scaledBlue: 7420); at: 38 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 39 put: (ColorValue scaledRed: 2858 scaledGreen: 2858 scaledBlue: 2858); at: 40 put: (ColorValue scaledRed: 3950 scaledGreen: 4207 scaledBlue: 4497); at: 41 put: (ColorValue scaledRed: 1027 scaledGreen: 1027 scaledBlue: 1798); at: 42 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6617); at: 43 put: (ColorValue scaledRed: 1284 scaledGreen: 1027 scaledBlue: 1541); at: 44 put: (ColorValue scaledRed: 6874 scaledGreen: 7130 scaledBlue: 7130); at: 45 put: (ColorValue scaledRed: 7130 scaledGreen: 6874 scaledBlue: 7130); at: 46 put: (ColorValue scaledRed: 4721 scaledGreen: 4721 scaledBlue: 5010); at: 47 put: (ColorValue scaledRed: 5300 scaledGreen: 5300 scaledBlue: 5814); at: 48 put: (ColorValue scaledRed: 1541 scaledGreen: 1284 scaledBlue: 2344); at: 49 put: (ColorValue scaledRed: 7420 scaledGreen: 7677 scaledBlue: 7677); at: 50 put: (ColorValue scaledRed: 2858 scaledGreen: 2601 scaledBlue: 3950); at: 51 put: (ColorValue scaledRed: 7677 scaledGreen: 7420 scaledBlue: 7677); at: 52 put: (ColorValue scaledRed: 6070 scaledGreen: 6070 scaledBlue: 6070); at: 53 put: ColorValue white; at: 54 put: (ColorValue scaledRed: 7130 scaledGreen: 7420 scaledBlue: 7420); at: 55 put: (ColorValue scaledRed: 1027 scaledGreen: 770 scaledBlue: 2087); at: 56 put: (ColorValue scaledRed: 2344 scaledGreen: 2087 scaledBlue: 3693); at: 57 put: (ColorValue scaledRed: 6070 scaledGreen: 6360 scaledBlue: 6617); at: 58 put: (ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 5814); at: 59 put: (ColorValue scaledRed: 1798 scaledGreen: 1284 scaledBlue: 2601); at: 60 put: (ColorValue scaledRed: 7677 scaledGreen: 7677 scaledBlue: 7934); at: 61 put: (ColorValue scaledRed: 1541 scaledGreen: 1541 scaledBlue: 2601); at: 62 put: (ColorValue scaledRed: 770 scaledGreen: 770 scaledBlue: 1541); at: 63 put: (ColorValue scaledRed: 1027 scaledGreen: 770 scaledBlue: 1284); at: 64 put: (ColorValue scaledRed: 2087 scaledGreen: 1798 scaledBlue: 3437); at: 65 put: (ColorValue scaledRed: 6617 scaledGreen: 6874 scaledBlue: 6874); at: 66 put: (ColorValue scaledRed: 1284 scaledGreen: 1027 scaledBlue: 2087); at: 67 put: (ColorValue scaledRed: 2087 scaledGreen: 2087 scaledBlue: 2344); at: 68 put: (ColorValue scaledRed: 1798 scaledGreen: 1541 scaledBlue: 3180); yourself)) usingBits: (ByteArray fromPackedString: 'MCP4MCP4MCP4MCP4MCP4MCP4@@@4MCP4MCP4MCP4MCP4MCP4MCP@@CP4MCP4MCP4MCP4MCP4MCP4M@@@MCP[F3@0LC@0LC@+J0T]ISP4@@@4MA,4F10\GA0\N0D+PAT%MCP@@CP4MS@IF$LRP0H:PTDDNBT4M@@@MCP2F1D7H"HXG!HQPP$#ISP4@@@4MCH[D#\PLS\7D!( JA$%MCP@@CP4L!,BD 07M3&lt;RF \IA"T4M@@@MCP2F2&lt;ZE!HB@!(/H@$SISP4@@@4MCH[PTD/OADZK4EABRD%MCP@@CP4MR,6E4EAPR!AOP$DHRT4M@@@MCP2LCP4MCP4MCPHMA0JISP4@@@4MCT,GSL]JPX.D24NI1P%MCP@@CP4MCP4I$H9CP,&gt;J!&lt;4MCP4M@@@MCP4MBT%IRT%IRT%IRT4MCP4@@@4MCP4MCP4MCP4MCP4MCP4MCP@@CP4MCP4MCP4MCP4MCP4MCP4M@@@'))</body><body>monitorShape	"UIMaskEditor new openOnClass: self andSelector: #monitorShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 63 255 0 0 47 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 48 23 0 0 63 255 0 0 7 248 0 0 15 252 0 0 0 0 0 0 0 0 0 0])</body><body>openFolderImage	"UIMaskEditor new openOnClass: self andSelector: #openFolderImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: (ColorValue scaledRed: 7934 scaledGreen: 7934 scaledBlue: 7934); at: 2 put: (ColorValue scaledRed: 3180 scaledGreen: 3180 scaledBlue: 3180); at: 3 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 5010); at: 4 put: (ColorValue scaledRed: 7677 scaledGreen: 7420 scaledBlue: 3693); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 5010 scaledGreen: 5010 scaledBlue: 3180); at: 7 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 3180); at: 8 put: (ColorValue scaledRed: 7934 scaledGreen: 7677 scaledBlue: 4240); yourself)) usingBits: #[68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 70 102 101 68 68 68 68 68 99 51 54 84 68 68 68 70 51 51 51 102 102 102 84 70 51 51 51 51 51 51 81 70 34 34 34 34 34 83 81 96 0 0 0 0 6 21 81 96 119 119 119 119 118 21 81 96 119 119 119 119 119 97 81 70 7 119 119 119 119 97 81 70 7 119 119 119 119 118 17 68 96 119 119 119 119 118 17 68 102 102 102 102 102 102 97 68 65 17 17 17 17 17 17 68 68 68 68 68 68 68 68])</body><body>openFolderShape	"UIMaskEditor new openOnClass: self andSelector: #openFolderShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 31 0 0 0 63 128 0 0 127 254 0 0 127 255 0 0 127 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 127 255 0 0 127 255 0 0 63 255 0 0 63 255 0 0 31 255 0 0 0 0 0 0])</body><body>package32Image	"UIMaskEditor new openOnClass: self andSelector: #package32Image"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 31@32 depth: 3 bitsPerPixel: 4 		palette: (MappedPalette withColors: ((Array new: 7) 			at: 1 put: ColorValue black; 			at: 2 put: ColorValue white; 			at: 3 put: ColorValue gray; 			at: 4 put: ColorValue green asShadowColor; 			at: 5 put: ColorValue gray; 			at: 6 put: ColorValue green; 			at: 7 put: ColorValue darkRed; 		yourself)) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ET@@@@@@@@@@@@@@@@@@@UUUP@@@@@@@@@@@@@@@@AUUUUU@@@@@@@@@@@@@@A%UUUUUUU&amp;@@@@@@@@@@@FY&amp;UUUUUVY&amp;@@@@@@@@@@YVY&amp;YUUUY&amp;YU@@@@@@@@@EUUY&amp;Y%U&amp;Y%UUT@@@@@@@UUUUU&amp;Y&amp;Y&amp;UUUUUP@@@@AUUUUUUVY&amp;YUUUUUUS@@@CMUUUUUU&amp;Y&amp;Y%UUUUL0@@@3L5UUUVY&amp;U&amp;Y&amp;UUT3L@@@L3L3UUY&amp;YUUVY&amp;YSL3@@@CL3L3M&amp;Y%UUUUY&amp;X3L0@@@3L3L3Y&amp;UUUUUUU&amp;L3L@@@L3L3L6Y#UUUUUSY#L3@@@CL3L3M&amp;X3MUUUL6X3L0@@@3L3L3Y&amp;L3L5T3M&amp;L3L@@@L3L3L6Y#L3L3L3Y#L0@@@@@3L3M&amp;X3L3L3L6X3@@@@@@@CL3Y&amp;L3L3L3M&amp;L@@@@@@@@@L6Y#L3L3L3Y @@@@@@@@@@A&amp;X3L3L3L6X@@@@@@@@@@@Y&amp;L3L3L3M @@@@@@@@@@@@A L3L3L0@@@@@@@@@@@@@@@@@3L3@@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body>package32Shape	"UIMaskEditor new openOnClass: self andSelector: #package32Shape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 31@32 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 24 0 0 0 62 0 0 0 127 128 0 1 255 248 0 3 255 252 0 7 255 254 0 7 255 255 128 15 255 255 224 31 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 240 15 255 255 224 3 255 255 192 0 255 255 128 0 63 255 128 0 63 255 0 0 11 252 0 0 0 248 0 0 0 48 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body>packageImage	"UIMaskEditor new openOnClass: self andSelector: #packageImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 4111); at: 4 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[85 85 85 85 80 0 0 0 85 84 21 85 80 0 0 0 85 80 1 85 80 0 0 0 85 96 2 149 80 0 0 0 85 42 10 1 80 0 0 0 84 2 168 0 208 0 0 0 95 0 170 3 208 0 0 0 95 242 130 175 208 0 0 0 95 250 0 43 208 0 0 0 95 250 240 235 208 0 0 0 95 250 255 235 80 0 0 0 85 250 255 233 80 0 0 0 85 90 255 229 80 0 0 0 85 85 255 213 80 0 0 0 85 85 95 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body>packageShape	"UIMaskEditor new openOnClass: self andSelector: #packageShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 128 0 0 3 224 0 0 7 248 0 0 15 254 0 0 31 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 0 0 15 254 0 0 3 252 0 0 0 248 0 0 0 48 0 0 0 0 0 0])</body><body>parcelImage	"UIMaskEditor new openOnClass: self andSelector: #parcelImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 4 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 9) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6167 scaledGreen: 6167 scaledBlue: 6167); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 5 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 0); at: 6 put: ColorValue yellow; at: 7 put: ColorValue cyan; at: 8 put: ColorValue red; at: 9 put: ColorValue blue; yourself)) usingBits: #[34 34 34 34 34 34 34 34 34 0 0 0 34 34 34 35 50 34 34 34 34 0 0 0 34 34 35 49 23 50 34 34 34 0 0 0 34 35 49 23 114 35 50 34 34 0 0 0 35 49 23 114 33 20 2 34 34 0 0 0 36 67 50 33 23 68 0 34 34 0 0 0 36 87 81 20 71 68 6 2 34 0 0 0 36 87 21 68 71 64 102 96 34 0 0 0 36 87 81 68 71 6 102 102 2 0 0 0 36 87 21 68 64 102 102 96 2 0 0 0 36 87 81 68 64 6 102 8 2 0 0 0 36 87 21 68 64 128 96 128 34 0 0 0 32 7 81 68 67 8 8 2 34 0 0 0 34 32 5 64 2 32 0 34 34 0 0 0 34 34 32 2 34 34 2 34 34 0 0 0 34 34 34 34 34 34 34 34 34 0 0 0])</body><body>parcelShape	"UIMaskEditor new openOnClass: self andSelector: #parcelShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 128 0 0 7 224 0 0 31 152 0 0 126 120 0 0 121 252 0 0 127 254 0 0 127 255 0 0 127 255 128 0 127 255 128 0 127 255 128 0 127 255 0 0 127 254 0 0 31 156 0 0 6 8 0 0 0 0 0 0])</body><body>parcPlaceImage	"UIMaskEditor new openOnClass: self andSelector: #parcPlaceImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue red; at: 3 put: ColorValue white; yourself)) usingBits: #[170 170 170 170 160 0 0 0 170 169 85 90 160 0 0 0 170 149 85 86 160 0 0 0 169 82 170 85 160 0 0 0 164 165 170 149 160 0 0 0 170 165 170 148 160 0 0 0 170 169 106 84 160 0 0 0 170 169 101 66 160 0 0 0 170 169 85 10 160 0 0 0 170 149 64 170 160 0 0 0 169 80 90 170 160 0 0 0 165 74 154 170 160 0 0 0 149 42 154 170 160 0 0 0 149 170 154 154 160 0 0 0 149 90 165 74 160 0 0 0 165 85 84 42 160 0 0 0 170 85 66 170 160 0 0 0 170 170 170 170 160 0 0 0])</body><body>parcPlaceShape	"UIMaskEditor new openOnClass: self andSelector: #parcPlaceShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 252 0 0 7 254 0 0 30 15 0 0 51 7 0 0 3 7 0 0 1 143 0 0 1 190 0 0 1 252 0 0 7 240 0 0 31 192 0 0 60 64 0 0 120 64 0 0 112 68 0 0 124 60 0 0 63 248 0 0 15 224 0 0 0 0 0 0])</body><body>parts1Image	"UIMaskEditor new openOnClass: self andSelector: #parts1Image"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 4 put: ColorValue magenta; at: 5 put: ColorValue cyan; at: 6 put: ColorValue blue; yourself)) usingBits: #[17 17 17 17 17 17 17 17 16 0 0 0 17 17 17 17 17 17 17 17 16 0 0 0 16 0 0 0 17 17 17 17 16 0 0 0 16 85 85 80 17 17 0 0 16 0 0 0 16 85 85 80 17 17 3 48 16 0 0 0 16 85 85 80 34 34 3 48 16 0 0 0 16 85 85 80 18 17 0 0 16 0 0 0 16 85 85 80 18 17 17 17 16 0 0 0 16 0 0 0 18 17 17 17 16 0 0 0 17 17 17 17 18 17 17 17 16 0 0 0 17 17 17 17 18 17 0 0 16 0 0 0 17 17 17 17 18 17 4 64 16 0 0 0 17 17 17 17 18 34 4 64 16 0 0 0 17 17 17 17 17 17 0 0 16 0 0 0 17 17 17 17 17 17 17 17 16 0 0 0 17 17 17 17 17 17 17 17 16 0 0 0])</body><body>parts1Shape	"UIMaskEditor new openOnClass: self andSelector: #parts1Shape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 127 0 0 0 127 15 0 0 127 15 0 0 127 255 0 0 127 79 0 0 127 64 0 0 127 64 0 0 0 64 0 0 0 79 0 0 0 79 0 0 0 127 0 0 0 15 0 0 0 0 0 0 0 0 0 0])</body><body>parts2Image	"UIMaskEditor new openOnClass: self andSelector: #parts2Image"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 4 put: ColorValue cyan; at: 5 put: ColorValue green; at: 6 put: ColorValue red; yourself)) usingBits: #[17 17 17 17 17 17 17 17 16 0 0 0 17 17 17 17 17 17 17 17 16 0 0 0 16 0 0 0 17 17 17 17 16 0 0 0 16 68 68 64 17 17 0 0 16 0 0 0 16 68 68 64 17 17 5 80 16 0 0 0 16 68 68 64 34 34 5 80 16 0 0 0 16 68 68 64 18 17 0 0 16 0 0 0 16 68 68 64 18 17 17 17 16 0 0 0 16 0 0 0 18 17 17 17 16 0 0 0 17 17 17 17 18 17 17 17 16 0 0 0 17 17 17 17 18 17 0 0 16 0 0 0 17 17 17 17 18 17 3 48 16 0 0 0 17 17 17 17 18 34 3 48 16 0 0 0 17 17 17 17 17 17 0 0 16 0 0 0 17 17 17 17 17 17 17 17 16 0 0 0 17 17 17 17 17 17 17 17 16 0 0 0])</body><body>parts2Shape	"UIMaskEditor new openOnClass: self andSelector: #parts2Shape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 127 0 0 0 127 15 0 0 127 15 0 0 127 255 0 0 127 79 0 0 127 64 0 0 127 64 0 0 0 64 0 0 0 79 0 0 0 79 0 0 0 127 0 0 0 15 0 0 0 0 0 0 0 0 0 0])</body><body>pasteImage	"UIMaskEditor new openOnClass: self andSelector: #pasteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 7709 scaledGreen: 7259 scaledBlue: 7098); at: 3 put: ColorValue white; at: 4 put: ColorValue yellow; at: 5 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 0); at: 6 put: (ColorValue scaledRed: 5942 scaledGreen: 3726 scaledBlue: 2858); at: 7 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@H"H"H@@BH"H"@@@@H"@@@CL@@@H"@@@@H UE@0@0QT@"@@@@H QPH"H"AE@"@@@@H U@@@@@AT@"@@@@H QTUEQTUE@"@@@@H UEQVY&amp;Y&amp;@"@@@@H QTUFDQDVX"@@@@H UEQVDQDVE"@@@@H QTUFE&amp;XVY"@@@@H UEQVDQDQE"@@@@H QTUFE&amp;Y&amp;E"@@@@H"@@@FDQDQE"@@@@H"H"H&amp;Y&amp;Y&amp;Y"@@@@H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@'))</body><body>pasteShape	"UIMaskEditor new openOnClass: self andSelector: #pasteShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 1 224 0 0 31 254 0 0 63 255 0 0 60 15 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 31 255 128 0 0 255 128 0 0 0 0 0 0 0 0 0])</body><body>pieImage	"UIMaskEditor new openOnClass: self andSelector: #pieImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 14@14 depth: 6 bitsPerPixel: 8 palette: (MappedPalette withColors: ((Array new: 47) at: 1 put: (ColorValue scaledRed: 4850 scaledGreen: 7612 scaledBlue: 7130); at: 2 put: (ColorValue scaledRed: 2376 scaledGreen: 7130 scaledBlue: 6295); at: 3 put: (ColorValue scaledRed: 706 scaledGreen: 3790 scaledBlue: 3244); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 3726 scaledGreen: 7387 scaledBlue: 6745); at: 6 put: (ColorValue scaledRed: 5075 scaledGreen: 7644 scaledBlue: 7195); at: 7 put: (ColorValue scaledRed: 3950 scaledGreen: 7420 scaledBlue: 6809); at: 8 put: (ColorValue scaledRed: 6649 scaledGreen: 7934 scaledBlue: 7709); at: 9 put: (ColorValue scaledRed: 5524 scaledGreen: 7709 scaledBlue: 7323); at: 10 put: (ColorValue scaledRed: 6874 scaledGreen: 7966 scaledBlue: 7773); at: 11 put: (ColorValue scaledRed: 835 scaledGreen: 4497 scaledBlue: 3854); at: 12 put: (ColorValue scaledRed: 7098 scaledGreen: 7998 scaledBlue: 7837); at: 13 put: (ColorValue scaledRed: 1284 scaledGreen: 6938 scaledBlue: 5942); at: 14 put: (ColorValue scaledRed: 1124 scaledGreen: 6006 scaledBlue: 5139); at: 15 put: (ColorValue scaledRed: 674 scaledGreen: 3565 scaledBlue: 3051); at: 16 put: (ColorValue scaledRed: 867 scaledGreen: 4657 scaledBlue: 3983); at: 17 put: (ColorValue scaledRed: 1509 scaledGreen: 6970 scaledBlue: 6006); at: 18 put: (ColorValue scaledRed: 1027 scaledGreen: 5589 scaledBlue: 4786); at: 19 put: (ColorValue scaledRed: 2858 scaledGreen: 7227 scaledBlue: 6456); at: 20 put: (ColorValue scaledRed: 578 scaledGreen: 3147 scaledBlue: 2698); at: 21 put: (ColorValue scaledRed: 3083 scaledGreen: 7259 scaledBlue: 6520); at: 22 put: (ColorValue scaledRed: 4432 scaledGreen: 7516 scaledBlue: 6970); at: 23 put: (ColorValue scaledRed: 2569 scaledGreen: 7195 scaledBlue: 6392); at: 24 put: (ColorValue scaledRed: 4657 scaledGreen: 7548 scaledBlue: 7034); at: 25 put: (ColorValue scaledRed: 6006 scaledGreen: 7805 scaledBlue: 7484); at: 26 put: (ColorValue scaledRed: 2794 scaledGreen: 7227 scaledBlue: 6456); at: 27 put: (ColorValue scaledRed: 642 scaledGreen: 3340 scaledBlue: 2858); at: 28 put: (ColorValue scaledRed: 1252 scaledGreen: 6713 scaledBlue: 5749); at: 29 put: (ColorValue scaledRed: 4143 scaledGreen: 7484 scaledBlue: 6906); at: 30 put: (ColorValue scaledRed: 1156 scaledGreen: 6295 scaledBlue: 5396); at: 31 put: (ColorValue scaledRed: 995 scaledGreen: 5364 scaledBlue: 4593); at: 32 put: (ColorValue scaledRed: 289 scaledGreen: 1573 scaledBlue: 1349); at: 33 put: (ColorValue scaledRed: 128 scaledGreen: 642 scaledBlue: 546); at: 34 put: (ColorValue scaledRed: 738 scaledGreen: 4015 scaledBlue: 3437); at: 35 put: (ColorValue scaledRed: 5717 scaledGreen: 7773 scaledBlue: 7420); at: 36 put: (ColorValue scaledRed: 578 scaledGreen: 3083 scaledBlue: 2633); at: 37 put: (ColorValue scaledRed: 6167 scaledGreen: 7837 scaledBlue: 7548); at: 38 put: (ColorValue scaledRed: 1702 scaledGreen: 7034 scaledBlue: 6103); at: 39 put: (ColorValue scaledRed: 6392 scaledGreen: 7869 scaledBlue: 7612); at: 40 put: (ColorValue scaledRed: 1927 scaledGreen: 7066 scaledBlue: 6167); at: 41 put: (ColorValue scaledRed: 1220 scaledGreen: 6488 scaledBlue: 5557); at: 42 put: (ColorValue scaledRed: 353 scaledGreen: 1766 scaledBlue: 1509); at: 43 put: (ColorValue scaledRed: 963 scaledGreen: 5139 scaledBlue: 4400); at: 44 put: (ColorValue scaledRed: 3276 scaledGreen: 7323 scaledBlue: 6617); at: 45 put: (ColorValue scaledRed: 2152 scaledGreen: 7098 scaledBlue: 6231); at: 46 put: (ColorValue scaledRed: 1252 scaledGreen: 6649 scaledBlue: 5685); at: 47 put: (ColorValue scaledRed: 3501 scaledGreen: 7355 scaledBlue: 6681); yourself)) usingBits: (ByteArray fromPackedString: '@0LC@0$GA2XKA0LC@0L@@@LC@0$"EQ0.EP\KBPLC@@@C@0\UD"0,@R\TABPK@0@@@0,WIP0PK@D''IR0%A0$@@@L&amp;EB4PIRT%I20LD!(I@@@CBB0(IR0''DA@%KA4JG@@@@0@''F1,PKB0AJA@RJ &lt;@@@LW@Q@[JA@[JB\MIR()@@@CIA@[CA,PD@0LJB0NJP@@@0\,DA@(DA@%CBTPG1D@@@LC@B0-DAHACR0,@"@X@@@C@2HYDAXTDB,FD2@J@0@@@0LCIA@BHQ8#G2@Q@0L@@@LC@0LCH!H%JB,G@0LC@@@b'))</body><body>pieShape	"UIMaskEditor new openOnClass: self andSelector: #pieShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 14@14 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[15 192 0 0 31 240 0 0 63 248 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 63 252 0 0 63 248 0 0 31 240 0 0 7 224 0 0])</body><body>resourceBitmapImage	"UIMaskEditor new openOnClass: self andSelector: #resourceBitmapImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 2 put: (ColorValue scaledRed: 0 scaledGreen: 4368 scaledBlue: 0); at: 3 put: ColorValue magenta; at: 4 put: ColorValue white; at: 5 put: ColorValue blue; yourself)) usingBits: #[51 51 51 51 51 51 51 48 51 51 51 51 51 51 51 48 51 48 0 0 0 0 3 48 51 48 51 1 16 51 3 48 51 48 51 1 16 51 3 48 51 48 0 0 0 0 3 48 51 48 34 3 48 51 3 48 51 48 34 3 48 51 3 48 51 48 0 0 0 0 3 48 51 48 51 4 64 51 3 48 51 48 51 4 64 51 3 48 51 48 0 0 0 0 3 48 51 51 51 51 51 51 51 48 51 51 51 51 51 51 51 48])</body><body>resourceBitmapShape	"UIMaskEditor new openOnClass: self andSelector: #resourceBitmapShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 0 0 0 0 0 0 0 0])</body><body>resourceCanvasImage	"UIMaskEditor new openOnClass: self andSelector: #resourceCanvasImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: #[170 170 170 168 170 160 42 168 170 168 170 168 168 0 0 168 170 25 152 168 170 6 102 40 170 137 153 136 170 130 100 8 170 161 128 168 170 160 8 168 170 168 138 40 170 170 138 168 170 170 170 168 170 170 170 168])</body><body>resourceCanvasShape	"UIMaskEditor new openOnClass: self andSelector: #resourceCanvasShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 3 128 0 0 1 0 0 0 31 240 0 0 15 240 0 0 15 248 0 0 7 252 0 0 7 252 0 0 3 240 0 0 3 208 0 0 1 72 0 0 0 64 0 0 0 0 0 0 0 0 0 0])</body><body>resourceMenuImage	"UIMaskEditor new openOnClass: self andSelector: #resourceMenuImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4368); at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 0 scaledGreen: 4914 scaledBlue: 8191); yourself)) usingBits: #[51 51 51 51 51 51 51 48 51 48 0 0 0 0 0 48 51 48 34 34 34 34 32 48 51 48 0 0 0 0 0 48 51 48 51 51 51 3 51 48 51 48 17 17 17 3 51 48 51 48 68 68 68 3 51 48 51 48 17 17 17 3 51 48 51 48 51 51 51 3 51 48 51 48 17 17 17 3 51 48 51 48 51 51 51 3 51 48 51 48 0 0 0 3 51 48 51 51 51 51 51 51 51 48 51 51 51 51 51 51 51 48])</body><body>resourceMenuShape	"UIMaskEditor new openOnClass: self andSelector: #resourceMenuShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 224 0 0 31 224 0 0 31 224 0 0 31 224 0 0 31 224 0 0 31 224 0 0 31 224 0 0 31 224 0 0 0 0 0 0 0 0 0 0])</body><body>resourceModelImage	"UIMaskEditor new openOnClass: self andSelector: #resourceModelImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: ColorValue cyan; at: 4 put: ColorValue white; yourself)) usingBits: #[255 255 255 252 255 252 0 60 255 193 85 64 255 200 0 32 255 202 170 160 255 250 170 160 252 0 10 160 252 243 202 128 252 0 8 60 252 243 207 252 252 0 15 252 252 243 207 252 252 0 15 252 255 255 255 252])</body><body>resourceModelShape	"UIMaskEditor new openOnClass: self andSelector: #resourceModelShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 248 0 0 7 254 0 0 7 254 0 0 7 254 0 0 3 254 0 0 31 254 0 0 31 254 0 0 31 248 0 0 31 192 0 0 31 192 0 0 31 192 0 0 31 192 0 0 0 0 0 0])</body><body>resourceQueryImage	"UIMaskEditor new openOnClass: self andSelector: #resourceQueryImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: ColorValue cyan; at: 4 put: ColorValue white; yourself)) usingBits: #[255 255 63 252 255 252 15 252 255 240 3 252 255 255 63 252 255 195 48 252 252 23 53 12 252 131 48 140 252 171 58 140 252 171 58 140 252 171 58 140 252 170 234 140 255 10 168 60 255 240 3 252 255 255 255 252])</body><body>resourceQueryShape	"UIMaskEditor new openOnClass: self andSelector: #resourceQueryShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 15@14 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 128 0 0 1 192 0 0 3 224 0 0 0 128 0 0 7 240 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 31 252 0 0 15 248 0 0 3 224 0 0 0 0 0 0])</body><body>smallKeyImage	"UIMaskEditor new openOnClass: self andSelector: #smallKeyImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@13 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 4240); at: 3 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6360); at: 4 put: ColorValue white; at: 5 put: ColorValue yellow; at: 6 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 0); at: 7 put: (ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 0); yourself)) usingBits: #[51 51 48 0 0 51 51 51 48 0 0 0 51 48 4 1 69 3 51 51 48 0 0 0 51 6 64 16 68 80 51 51 48 0 0 0 51 4 2 4 68 64 51 51 48 0 0 0 51 17 16 68 100 96 51 51 48 0 0 0 51 6 68 70 70 69 3 51 48 0 0 0 51 6 100 68 66 4 80 51 48 0 0 0 51 48 102 100 4 32 69 3 48 0 0 0 51 51 0 0 0 98 4 80 48 0 0 0 51 51 51 51 51 4 32 69 0 0 0 0 51 51 51 51 51 0 66 4 0 0 0 0 51 51 51 51 51 51 6 32 0 0 0 0 51 51 51 51 51 51 0 0 48 0 0 0])</body><body>smallKeyShape	"UIMaskEditor new openOnClass: self andSelector: #smallKeyShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@13 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[15 224 0 0 31 240 0 0 63 240 0 0 63 240 0 0 63 240 0 0 63 248 0 0 63 252 0 0 31 254 0 0 15 255 0 0 0 63 128 0 0 63 128 0 0 15 128 0 0 15 0 0])</body><body>stationImage	"UIMaskEditor new openOnClass: self andSelector: #stationImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 5 bitsPerPixel: 8 palette: (MappedPalette withColors: ((Array new: 19) at: 1 put: (ColorValue scaledRed: 7130 scaledGreen: 7130 scaledBlue: 7130); at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 3950 scaledGreen: 3950 scaledBlue: 3950); at: 4 put: (ColorValue scaledRed: 2890 scaledGreen: 2890 scaledBlue: 2890); at: 5 put: (ColorValue scaledRed: 6874 scaledGreen: 6874 scaledBlue: 6874); at: 6 put: (ColorValue scaledRed: 4753 scaledGreen: 4753 scaledBlue: 4753); at: 7 put: (ColorValue scaledRed: 5814 scaledGreen: 5814 scaledBlue: 5814); at: 8 put: (ColorValue scaledRed: 3693 scaledGreen: 3693 scaledBlue: 3693); at: 9 put: (ColorValue scaledRed: 1573 scaledGreen: 1573 scaledBlue: 5010); at: 10 put: (ColorValue scaledRed: 5010 scaledGreen: 6617 scaledBlue: 5010); at: 11 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6360); at: 12 put: (ColorValue scaledRed: 5300 scaledGreen: 5300 scaledBlue: 5300); at: 13 put: (ColorValue scaledRed: 3180 scaledGreen: 3180 scaledBlue: 6617); at: 14 put: (ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 4240); at: 15 put: (ColorValue scaledRed: 3180 scaledGreen: 6617 scaledBlue: 3180); at: 16 put: (ColorValue scaledRed: 3180 scaledGreen: 3180 scaledBlue: 3180); at: 17 put: (ColorValue scaledRed: 1573 scaledGreen: 3180 scaledBlue: 8191); at: 18 put: (ColorValue scaledRed: 1573 scaledGreen: 3180 scaledBlue: 5010); at: 19 put: (ColorValue scaledRed: 3180 scaledGreen: 5010 scaledBlue: 5010); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@@@AB (JB (JB (JA XEA0\A@PD@@@DDB TEAPTEAPTEB0HO@0\A@P@@@PPJDA@PDA@QDQDK@ &lt;C@0DA@@@AA@(PD@ HB@ HDP,BC0LC@PD@@@DDB!@LC@0LC@LQB0HO@0LA@P@@@PPJD@4@@@@E@1DK@ &lt;C@0DA@@@AA@(PCP@DA@TCDP,BC0LA@PD@@@DDB!@MCP4MCQDQB0HO@0DA@P@@@PPJDA@QDQDQDQDK@ &lt;A@PDA@@@AB (JB (FA XFC ,B@0DA@PD@@@DA@QHDB0HB@ HB@ LGA0LA@P@@@PPJB XKAPHOC0&lt;OC0&lt;CC0DA@@@AA@$NA XFB (FB0,EC0LO@PD@@@DJB0XFA XFAP\BB0HC@0LA@P@@@PHB@ HBB0XKA (K@ &lt;C@PDA@@@A@PDA@PDMCP4MCP4G@0DA@PD@@@DA@PDA@PDA@PDA@PDA@PDA@P@@'))</body><body>stationShape	"UIMaskEditor new openOnClass: self andSelector: #stationShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 127 254 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 254 0 0 127 254 0 0 127 252 0 0 127 252 0 0 31 255 0 0 127 255 0 0 127 255 0 0 127 255 0 0 127 254 0 0 3 252 0 0 0 0 0 0])</body><body>toolsImage	"UIMaskEditor new openOnClass: self andSelector: #toolsImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 7709 scaledGreen: 7259 scaledBlue: 7098); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 0); at: 5 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 6 put: (ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 0); at: 7 put: (ColorValue scaledRed: 5942 scaledGreen: 3726 scaledBlue: 2858); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@H$QDQDQDQDP"@@@@H$QDQDQDQDP"@@@@H DQDQDQDQ@"@@@@H DP@@DQDQ@"@@@@H D@L0@ADQ@"@@@@H DQ@CL0DQ@"@@@@H DQDCL0DQ@"@@@@H DQD@L0@Q@"@@@@H DQAP@CLA@"@@@@H DPTADC@Q@"@@@@H DE@QDPDQ@"@@@@H&amp;AP@@@@@@@"@@@@H TBH"H"H"H"@@@@HE@"H"H"H"H"@@@@H@H"H"H"H"H"@@@@H"H"H"H"H"H"@@@@'))</body><body>toolsShape	"UIMaskEditor new openOnClass: self andSelector: #toolsShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 63 255 0 0 56 0 0 0 112 0 0 0 96 0 0 0 0 0 0 0])</body></methods><initialize><class-id>Aragon.NSBorder</class-id></initialize><initialize><class-id>Aragon.NSSequenceController</class-id></initialize><initialize><class-id>Aragon.EnhancedSequenceView</class-id></initialize><initialize><class-id>Aragon.AragonStuff</class-id></initialize><initialize><class-id>Aragon.NSSequenceView</class-id></initialize><initialize><class-id>Aragon.AragonIcon</class-id></initialize><initialize><class-id>Aragon.NSTwoPixelsBorder</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category></class><class><name>List</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents collection limit collectionSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Collections</category></class><class><name>SequenceView</name><environment>UI</environment><super>UI.SelectionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visualBlock selectedVisualBlock measureWidth cachedWidth helpText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category></class><class><name>CharacterAttributes</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attributes defaultQuery queryCache policyCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Fonts</category></class><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>systemAttributes systemWidgetAttributes useSystemFontOnWidgets systemMenuAttributes </class-inst-vars><imports></imports><category>UIBuilder-Support</category></class><class><name>MultiSelectionInList</name><environment>UI</environment><super>UI.SelectionInList</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Collections</category></class><class><name>SimpleBorder</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thickness color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category></class><class><name>OpaqueImage</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>figure shape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category></class><class><name>MultiSelectionSequenceView</name><environment>UI</environment><super>UI.SequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selections lastSelectionIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category></class><class><name>SequenceController</name><environment>UI</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>keyboardProcessor outside searchString keyboardHook doStringSearching dispatcher dragDropCallbacks selectOnDownWithDrag autoSelect </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBasics-Controllers</category></class><class><name>EmulatedSequenceController</name><environment>UI</environment><super>UI.SequenceController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Controllers</category></class></st-source>