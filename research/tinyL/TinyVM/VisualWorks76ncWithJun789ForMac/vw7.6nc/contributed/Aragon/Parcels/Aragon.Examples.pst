<?xml version="1.0"?><st-source><!-- Name: Aragon.ExamplesComment: Contains examples for widgets and look policies. DevelopmentPrerequisites: #(#(#parcel 'Aragon.Widgets' '') #(#parcel 'Aragon.Look Policies' ''))HideSource: falseParcel: #('Aragon.Examples')PrerequisiteParcels: #(#('Aragon.Widgets' '') #('Aragon.Look Policies' ''))SaveSource: trueVersion: 7.1Date: 3:56:49 am May 28, 2003 --><time-stamp>From VisualWorks®, Release 7.1 of 18. März 2003 on 28. Mai 2003 at 3:56:49</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>World</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples</category></class><class><name>TextEditor</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>status text filename </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys</category></class><class><name>SimpleBrowserModule</name><environment>Aragon</environment><super>Tools.SimpleBrowserModule</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Class Browser</category></class><class><name>CardViewExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabs tabStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.CardView</category></class><class><name>ChangeSetBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>changes changeSet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.ChangeSet Browser</category></class><class><name>NewFileBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>directories currentDirectory entries retrieveProcess observerProcess selectedRow copySelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.File Browser</category></class><class><name>FontPanel</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>family style pixelSize textStyle menus exampleText applyBlock applyTextStyle selectionHolder targets lock </inst-vars><class-inst-vars></class-inst-vars><imports>			private TextConstants.*			</imports><category>Aragon.Examples.Toys.Font Panel</category></class><class><name>AragonMenuEditor</name><environment>Aragon</environment><super>Tools.MenuEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shortCutField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys</category></class><class><name>TabApplication</name><environment>Aragon</environment><super>Tools.NamespaceTabApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delegate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Class Browser</category></class><class><name>SimpleFileBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tree </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category></class><class><name>ParcelBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parcels selection searchPaths </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Parcel Browser</category></class><class><name>SystemBrowser</name><environment>Aragon</environment><super>Tools.TabApplicationSystemBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hierarchyBrowser parcelBrowser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Class Browser</category></class><class><name>AragonExamplesBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>examples selection explanation install alreadyShown </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples</category></class><class><name>ChangeSetBrowser30</name><environment>Aragon</environment><super>Aragon.ChangeSetBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>changeSetList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.ChangeSet Browser</category></class><class><name>ChangeSetBrowser5i</name><environment>Aragon</environment><super>Aragon.ChangeSetBrowser30</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.ChangeSet Browser</category></class><class><name>Win32FileBrowser</name><environment>Aragon</environment><super>Aragon.NewFileBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.File Browser</category></class><class><name>ClassBrowserHistory</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listHolder selectionHolder associations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Class Browser</category></class><class><name>GaugeExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gauge2 gauge1 progress </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples</category></class><class><name>Win32FontPanel</name><environment>Aragon</environment><super>Aragon.FontPanel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fonts fontList sizeMenu fontsMenu selection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Font Panel</category></class><class><name>UnixFontPanel</name><environment>Aragon</environment><super>Aragon.Win32FontPanel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Font Panel</category></class><class><name>SimpleClassBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category></class><class><name>CardViewExample3</name><environment>Aragon</environment><super>Aragon.CardViewExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.CardView</category></class><class><name>ResizerExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text21 text22 classNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples</category></class><class><name>CardViewExample1</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabs classes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.CardView</category></class><class><name>CardViewExample2</name><environment>Aragon</environment><super>Aragon.CardViewExample1</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.CardView</category></class><class><name>CategoriesBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>categories menuHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category></class><class><name>NewParcelBrowser</name><environment>Aragon</environment><super>Aragon.ParcelBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Parcel Browser</category></class><class><name>PopupTreeView</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category></class><class><name>NdsFileBrowser</name><environment>Aragon</environment><super>Aragon.SimpleFileBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>row optionsDialog showButtons showLines linesAtRoot showImages </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category></class><class><name>FilenameWrapper</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename modified type isHidden name fileSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.File Browser</category></class><class><name>OldDatasetExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>entries row </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.NewDataSet</category></class><class><name>NewDatasetExample</name><environment>Aragon</environment><super>Aragon.OldDatasetExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars>useRowSelectors useDecoratedEditors listMenu showLines showHorizontalLines showVerticalLines showLabels optionsDialog allowForSorting allowForColumnDragging showLineNumbers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.NewDataSet</category></class><class><name>ClassHierarchyBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hierarchy temp selectedNode filters history menuHolder completer delegate </inst-vars><class-inst-vars></class-inst-vars><imports>			private TextConstants.*			</imports><category>Aragon.Examples.Toys.Class Browser</category></class><shared-variable><name>LabelsFont</name><environment>Aragon.CardViewExample</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>DefaultPaths</name><environment>Aragon.ParcelBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>HelpTexts</name><environment>Aragon.ParcelBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>DropHandlers</name><environment>Aragon.ParcelBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>SoleInstance</name><environment>Aragon.ParcelBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>CoreCategories</name><environment>Aragon.CategoriesBrowser</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>ImageList</name><environment>Aragon.ClassHierarchyBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>CoreCategories</name><environment>Aragon.ClassHierarchyBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>ShortCutModifiers</name><environment>Aragon.AragonMenuEditor</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>GlobalHistory</name><environment>Aragon.ClassBrowserHistory</environment><private>false</private><constant>false</constant><category>Global</category><initializer></initializer></shared-variable><shared-variable><name>Descriptions</name><environment>Aragon.AragonExamplesBrowser</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>Examples</name><environment>Aragon.AragonExamplesBrowser</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>CopyBuffer</name><environment>Aragon.SystemBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><initializer></initializer></shared-variable><shared-variable><name>LeftPaneWidth</name><environment>Aragon.SystemBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><initializer>270</initializer></shared-variable><shared-variable><name>WindowPositions</name><environment>Aragon.SystemBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>RightPaneWidth</name><environment>Aragon.SystemBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><initializer>200</initializer></shared-variable><shared-variable><name>DelayForRetrieval</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>ColumnLayout</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>ShowHidden</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>DelayForRefresh</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>FileTypes</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category></shared-variable><shared-variable><name>ColumnLayout</name><environment>Aragon.NewDatasetExample</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>RecentlyWroteFile</name><environment>Aragon.FontPanel</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>Instance</name><environment>Aragon.FontPanel</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><shared-variable><name>Emphasizes</name><environment>Aragon.FontPanel</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><methods><class-id>Aragon.TextEditor</class-id> <category>initialize-release</category><body>initialize	filename := nil.	status := '' asValue.	text := '' asValue.</body><body>openOn: aFilename	self open; openFile: aFilename.</body><body>postBuildWith: aBuilder	self textEditor autoAccept: false.	(Aragon includesKey: #WindowResizeCorner)		ifTrue: [builder add: (Aragon at: #WindowResizeCornerSpec) new].	(Aragon includesKey: #EnhancedGroupBoxSpec)		ifTrue: [builder add: 				((Aragon at: #EnhancedGroupBoxSpec) new					layout: (	(0@1 corner: 1@1) asLayout topOffset: -18);					bevel: -1)]</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>aspects</category><body>status	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^status</body><body>text	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^text</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>actions</category><body>browseSymbol	AragonStuff browse: self textEditor selection asString inContext: nil</body><body>explain	| reply ctrlr |	ctrlr := self textEditor.	reply := (Explainer new				class: UndefinedObject				selector: nil				instance: nil				context: ctrlr text				methodText: ctrlr text)			explain: ctrlr selection asString for: self.	ctrlr insertAndSelect: ' ' , reply at: ctrlr selectionStopIndex</body><body>helpAbout		Dialog notify: 'What would you want to hear?'</body><body>helpContents	Dialog notify: 'Sorry, there''s no help provided currently!'</body><body>newFile		self changesAccepted ifFalse: [^self].	filename := nil.	text value: ''.	status value: 'new file'.	builder window label: 'Text Editor'</body><body>openFile	| answer  |	self changesAccepted ifFalse: [^self].	answer := Dialog requestFileName: 'Enter a name for the file to be read' default: (filename notNil					ifTrue: [filename]					ifFalse: ['*.txt']).	answer isNil | answer isEmpty ifTrue: [^self].	self openFile: answer.</body><body>saveFile	| stream |	self textEditor textHasChanged		ifFalse: 			[Dialog notify: 'You haven''t made any changes to be saved.'.			^true].	filename isNil ifTrue: [^self saveFileAs].	stream := filename writeStream.	self textEditor textHasChanged: false.	Cursor wait showWhile: [[stream nextPutAll: self textEditor text]			valueNowOrOnUnwindDo: [stream close]].	^true</body><body>saveFileAs	| answer |	answer := Dialog		requestFileName: 'Save File As...'		default: (filename notNil ifTrue: [filename asString] ifFalse: ['newfile.ext']).	answer isNil | answer isEmpty ifTrue: [^false].	self filename: answer.	self textEditor textHasChanged: true.	^self saveFile</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>events</category><body>changeRequest	"The receiver wants to change; check with all dependents that it is OK."	^self myDependents updateRequest</body><body>requestForWindowClose	^self changesAccepted</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>private</category><body>changesAccepted	| controller answer |	(controller := self textEditor) textHasChanged		ifTrue: 			[answer := Dialog						choose: 'You have unsaved changes!Do you want to save your changes?'						labels: #('&amp;Yes' '&amp;No' 'Cancel')						values: #(true false nil)						default: true.			answer isNil ifTrue: [^false].			answer				ifTrue: [self saveFile]				ifFalse: [^true]].	^controller textHasChanged not</body><body>doesNotUnderstand: aMessage 	"Forward text menu messages to the text view's controller"	(#(cut copySelection paste doIt printIt inspectIt undo again find replace hardcopy) includes: aMessage selector)		ifTrue: [(builder componentAt: #text) widget controller perform: aMessage selector]		ifFalse: [^super doesNotUnderstand: aMessage]</body><body>explainSpecial: string 	"Answer with a string explaining the code view selection if it is 	displaying one of the special edit functions."	^nil</body><body>filename	^filename</body><body>filename: aString	filename := aString asFilename.	status value: filename asString.	builder window label: filename tail</body><body>icon	^ #'@@clipbrd.bmp'</body><body>openFile: aFilename 	| stream s |	self filename: aFilename.	stream := filename readStream.		[Cursor read		showWhile:			[[s := stream contents] valueNowOrOnUnwindDo: [stream close].			[text value: s] forkAt: Processor highIOPriority]]			forkAt: Processor systemBackgroundPriority</body><body>textEditor	^(self builder componentAt: #text) widget controller</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>drag&amp;drop</category><body>dropOver: aDragContext 	^aDragContext key == #file ifTrue: [#dropEffectMove] ifFalse: [#dropEffectNone].</body><body>dropWith: aDragContext 	"Basic Step 3"	| files |	aDragContext key == #file ifFalse: [^#dropEffectNone].	files := aDragContext sourceData clientData.	self openFile: files first.	^#dropEffectMove</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>class initialization</category><body>hookUp	AragonStuff hookup: self for: #Workspace.</body><body>initialize	self hookUp</body><body>isHookedUp	^AragonStuff isHookedUp: self</body><body>unhook	AragonStuff unhook: self.</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>interface opening</category><body>openOnFileNamed: aFilename	^self new open; openFile: aFilename</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>resources</category><body>applicationName	^'Text Editor'</body><body>defaultIconName	^'@clipbrd.gif'</body></methods><methods><class-id>Aragon.SimpleBrowserModule</class-id> <category>actions</category><body>browseClass	| definition |	AragonStuff browseClass: ((definition := self selection) isBindingReference			ifTrue: [definition environment]			ifFalse: [definition implementingClass]) instanceBehavior</body><body>metaClass	self browser meta value: #class</body><body>metaData	self browser meta value: #data</body><body>metaInstance	self browser meta value: #instance</body></methods><methods><class-id>Aragon.SimpleBrowserModule</class-id> <category>menus accessing</category><body>dispatch: selector 	| answer |	selector == #browseClass ifTrue: [^self browseClass].	answer := super dispatch: selector.	self browser onDispatch: selector with: nil from: self.	^answer</body><body>dispatch: selector with: arg	| answer |	answer := super dispatch: selector with: arg.	self browser onDispatch: selector with: arg from: self.	^answer</body></methods><methods><class-id>Aragon.SimpleBrowserModule class</class-id> <category>interface specs</category><body>listSpec	^SystemBrowser listSpec</body><body>listSpecProtocols	^SystemBrowser listSpecProtocols</body></methods><methods><class-id>Aragon.CardViewExample</class-id> <category>initialize-release</category><body>initialize	tabs := SelectionInList 		with: (List new 			add: 'Set&amp;up' -&gt; (Array with: self with: #canvas1Spec); 			add: 'System &amp;Browser' -&gt; FullSystemBrowser;			add: '&amp;Resources' -&gt; (Smalltalk at: #UIFinderVW2 ifAbsent: [nil]);			add: '&amp;File List' -&gt; FileBrowser;		yourself).</body></methods><methods><class-id>Aragon.CardViewExample</class-id> <category>interface opening</category><body>postOpenWith: aBuilder 	tabs selectionIndex: 1</body></methods><methods><class-id>Aragon.CardViewExample</class-id> <category>aspects</category><body>tabs	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^tabs</body></methods><methods><class-id>Aragon.CardViewExample</class-id> <category>(not essential)</category><body>postBuildWith: aBuilder 	| label |	(label := aBuilder componentAt: #canvasLabel) notNil ifTrue: [label widget textStyle: LabelsFont].</body><body>tabStyle	"This method is not essential to the  CardView example itself.	It provides the aspect for the radio buttons in the first page. 	These radios can be used to change the overall tabs' display style using CardView&gt;&gt;tabStyle:."	tabStyle isNil		ifTrue: 			[tabStyle := CardView tabStyle asValue.			tabStyle				compute: 					[:m | 					CardView tabStyle: m value.					(builder componentAt: #tabs) widget invalidateTabsArea]].	^tabStyle</body></methods><methods><class-id>Aragon.CardViewExample class</class-id> <category>class initialization</category><body>initialize	"Install some text style to be used for the application"	LabelsFont := Fonts styleFrom: #(Times italic 72)</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>interface opening</category><body>postBuildWith: aBuilder	| myImageList |	aBuilder ~~ builder ifTrue: [^super postBuildWith: aBuilder].	myImageList := IdentityDictionary new		add: #category	-&gt;	(AragonIcon named: #folder2 color: ColorValue royalBlue asHiliteColor);		add: #nameSpace -&gt;	(AragonIcon named: #pie);		add: #class		-&gt;	(AragonIcon named: #largeBrick color: #paleRed);		add: #variable	-&gt;	(AragonIcon named: #leaf);		add: #protocol	-&gt;	(AragonIcon named: #bricks color: ColorValue royalBlue asHiliteColor);		add: #method	-&gt;	(AragonIcon named: #brick color: #green);	yourself.	(builder componentAt: #changes) widget imageList: myImageList.	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].</body><body>preBuildWith: aBuilder	aBuilder ~~ builder ifTrue: [^super preBuildWith: aBuilder].	changeSet isNil ifTrue: 		[changeSet := ChangeSet current asValue].	changeSet onChangeSend: #changeSetChanged to: self.	changes := SelectionInTree with: (TreeAdaptor new roots: self getAllChildren).</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>menu commands</category><body>browseSelection	| aNode |	(aNode := changes selectedNode) isNil ifTrue: [^self].	aNode type == #class ifTrue: [^self spawnClass: aNode subject].	aNode type == #method ifTrue: [^self spawnMethod: aNode].	^#toggleExpand</body><body>defaultInspect	changeSet value inspect</body><body>emptyChangeSet		(Dialog confirm: 'Do you really want to empty this change set?') 		ifTrue:			[changeSet value initialize.			self refreshView]</body><body>fileIn	| filename prompt currentChanges |	filename := changeSet value lastFileOutName asString.	(filename size == 0) ifTrue: [filename := changeSet value name, '.cha'].	prompt := 'File in into displayed ChangeSet from...'. 	filename := (Smalltalk includesKey: #Win32)					ifTrue: [(Smalltalk at: #Win32) 								openFilename: filename								title: prompt								filters: #(									'Changes File' '*.cha'									'Smalltalk File Out' '*.st' 									'All Files' '*.*'								)								for: Window currentWindow]					ifFalse: [Dialog								requestNewFileName: prompt								default: filename].	(filename isNil or: [filename isEmpty]) ifTrue: [^self].	currentChanges := ChangeSet current.	ChangeSet newChanges: changeSet value.	filename asFilename fileIn.	ChangeSet newChanges: currentChanges.	self updateChanges</body><body>fileOut	| filename fm prompt |	filename := changeSet value lastFileOutName.	filename := (filename size == 0) 		ifTrue: [self changeSetName, '.cha']		ifFalse: [filename asString].	prompt := 'File the displayed ChangeSet out as file named...'. 	filename := (Smalltalk includesKey: #Win32)					ifTrue: [(Smalltalk at: #Win32) 								saveFilename: filename								title: prompt								filters: #(									'Changes File' '*.cha'									'Smalltalk File Out' '*.st' 									'All Files' '*.*'								)								for: Window currentWindow]					ifFalse: [Dialog								requestNewFileName: prompt								default: filename].	(filename isNil or: [filename isEmpty]) ifTrue: [^self].	(filename asFilename tail includes: $.) ifFalse: [filename := filename , '.cha'].	Transcript cr; cr; show: ('Filing out changes on:'); crtab; show: filename asString.	fm := SourceCodeStream write: filename asFilename.	Cursor write showWhile:		[[fm timeStamp.		changeSet value fileOutOn: fm]			valueNowOrOnUnwindDo: [fm close]]</body><body>refreshView"	changes list invalidateAndReExpand."	self updateChanges</body><body>removeNode: aNode	changes list remove: aNode.	(aNode parent notNil and: [aNode parent children isEmpty]) ifTrue: [self removeNode: aNode parent]</body><body>removeSelection	| selectedNode |	selectedNode := changes selectedNode.	changes list fetchChildrenFor: selectedNode.	changes list nodesDo: [:each | "instVarAt: (ChangeSet instVarIndexFor: 'methodChanges')."		each parent subject == #remove			ifTrue: [changeSet value objectRemoves removeKey: each subject]			ifFalse: [		each type == #class 			ifTrue: [self class 				removeChange: each parent subject 				class: (self classNamed: each subject) 				from: changeSet value] 			ifFalse: [		each type == #method 			ifTrue: [changeSet value 				removeSelectorChanges: each subject 				class: (self classNamed: each parent subject)]]]]		startWith: selectedNode.	self removeNode: selectedNode</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>aspects</category><body>changes	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^changes</body><body>changeSet	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	changeSet isNil ifTrue: [changeSet := ChangeSet current asValue].	^changeSet</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>events</category><body>changeSetChanged	changes list: (TreeAdaptor new roots: self getAllChildren).	(changes list size between: 1 and: 3) ifTrue: [changes list expandAt: 1]</body><body>keyPress: aKeyboardEvent 	aKeyboardEvent keyValue == Character del ifTrue: [self removeSelection. ^nil].	^aKeyboardEvent</body><body>selectionChanged</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>private</category><body>changeSetName	| cs |	^(cs := changeSet value) class == ChangeSet		ifTrue: ['Default']		ifFalse: [cs name]</body><body>classNamed: aString 	aString isBehavior ifTrue: [^aString].	^AragonStuff systemVersion == 5		ifTrue: [('* class' match: aString)				ifTrue: [(aString copyFrom: 1 to: aString size - 6) asQualifiedReference value class]				ifFalse: [aString asQualifiedReference value]]		ifFalse: [('* class' match: aString)				ifTrue: [(Smalltalk at: (aString copyFrom: 1 to: aString size - 6)) class]				ifFalse: [Smalltalk at: aString]]</body><body>getAllChildren	| cs |	(cs := self changeSet value) isNil ifTrue: [^#()].	^OrderedCollection new		addAll: (self getClassChangesIn: cs);		addAll: (self getObjectRemovesIn: cs);		addAll: (self getOtherObjectChangesIn: cs);		addAll: (self getMethodChangesIn: cs);	yourself</body><body>getChangesIn: aChangeSet from: aCollectionOfChanges type: aSymbol label: aString	| cs classes node |	cs := aChangeSet.	classes := aCollectionOfChanges select: [:class | cs atClass: class includes: aSymbol].	classes isEmpty ifTrue: [^#()].	node := (IdentityTreeNode for: #rename label: aString) type: #category.	node children: (aSymbol == #rename			ifTrue: [classes collect: [:each | each asIdentityTreeNode type: #class; hasChildren: false; displayString: (cs oldNameFor: each), ' -&gt; ' , each name]]			ifFalse: [classes collect: [:each | each asIdentityTreeNode type: #class; hasChildren: false]]).	^Array with: node</body><body>getClassChangesIn: aChangeSet	| classChanges |	classChanges := aChangeSet changedClasses asSortedCollection: [:c1 :c2 | c1 name &lt;  c2 name].	^OrderedCollection new		addAll: (self getChangesIn: aChangeSet from: classChanges type: #add label: 'Added classes');		addAll: (self getChangesIn: aChangeSet from: classChanges type: #rename label: 'Renamed classes');		addAll: (self getChangesIn: aChangeSet from: classChanges type: #change label: 'Redefined classes');		addAll: (self getChangesIn: aChangeSet from: classChanges type: #comment label: 'Classes with changed comment');		addAll: (self getChangesIn: aChangeSet from: classChanges type: #reorganize label: 'Re-organized classes');	yourself</body><body>getMethodChangesIn: aChangeSet	| index classes node sorted imageList |	(index := ChangeSet instVarIndexFor: 'methodChanges') == 0 ifTrue: [index := ChangeSet instVarIndexFor: 'objectChanges'].	classes := aChangeSet instVarAt: index.	classes isEmpty ifTrue: [^#()].	node := (IdentityTreeNode for: 'Classes with changed methods') type: #category.	sorted := SortedCollection new.	imageList := IdentityDictionary new		add: #add		-&gt;	(AragonIcon named: #brick color: #green);		add: #change	-&gt;	(AragonIcon named: #brick color: #royalBlue);		add: #remove	-&gt;	(AragonIcon named: #brick color: #red);	yourself.	classes		keysAndValuesDo: 			[:cName :cChanges || classNode changed mChanges |			mChanges := (cChanges class name == #ChangeGroup) ifTrue: [cChanges methodChanges] ifFalse: [cChanges].			mChanges isEmpty 				ifFalse:					[sorted add: ((classNode := IdentityTreeNode for: cName) type: #class).					changed := SortedCollection new.							mChanges									keysAndValuesDo: [:mSel :mChange | changed add:									(mSel asIdentityTreeNode 											type: #method; 											hasChildren: false; 											icon: (imageList at: mChange))].					classNode children: changed]].	node children: sorted.	^Array with: node</body><body>getObjectRemovesIn: aChangeSet	| answer cs classes index |	answer := OrderedCollection new.	cs := aChangeSet.	(index := ChangeSet instVarIndexFor: 'classRemoves') == 0 ifTrue: [index := ChangeSet instVarIndexFor: 'objectRemoves'].	classes := cs instVarAt: index.	classes isEmpty		ifFalse: 			[| node | answer add: ((node := IdentityTreeNode for: #remove label: 'Removed classes') type: #category).			node children: (classes collect: [:each | (IdentityTreeNode for: each) type: #class; hasChildren: false]) asOrderedCollection].	^answer</body><body>getOtherObjectChangesIn: aChangeSet	^#()</body><body>setChanges: aChangeSet	changeSet := aChangeSet asValue.</body><body>spawnClass: aClassName	AragonStuff browseClass: (self classNamed: aClassName).</body><body>spawnMethod: aNode	| aClass |	aClass := self classNamed: aNode parent subject.	AragonStuff browseClass: aClass method: aNode subject."	| br browserClass aClass cls |	browserClass := Aragon at: #AragonBrowser ifAbsent: [Browser].	br := browserClass new.	aClass := self classNamed: aNode parent subject.	br meta: aClass isMeta. 	cls := aClass isMeta ifTrue: [aClass soleInstance] ifFalse: [aClass].	br categoryList selection: cls category.	br classList selection: cls name.	br protocolList selection: (aClass whichCategoryIncludesSelector: aNode subject).	br selectorList selection: aNode subject.	br textMode: #methodDefinition.	browserClass openMethodBrowserOn: br"</body><body>updateChanges	| treeAdaptor expandedNodes |	treeAdaptor := changes list.	expandedNodes := treeAdaptor expandedEntries.	treeAdaptor roots: self getAllChildren; changed: #value.	treeAdaptor expandAll: expandedNodes</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>drag&amp;drop</category><body>canDragFrom: aController 	"Drag the currently selected file(s)."	| node |	node := changes selectedNode.	^node ~~ nil  and: [#(class method) includes: node type].</body><body>dragFrom: aController 	"Drag the currently selected file(s)."	| node sourceData class key |	node := changes selectedNode.	sourceData := IdentityDictionary new.	key := node type.	key  == #class ifTrue: [class := (self classNamed: node subject)] ifFalse: [	key == #method		ifTrue: 			[key := #selector.			class := self classNamed: node parent subject.			sourceData add: #selector -&gt; node subject]].	sourceData add: #class -&gt; class instanceBehavior name.	sourceData add: #meta -&gt; class isMeta.	self startDragging: sourceData from: aController key: key</body></methods><methods><class-id>Aragon.ChangeSetBrowser class</class-id> <category>instance creation</category><body>new	AragonStuff systemVersion == 5 ifTrue: [^ChangeSetBrowser5i basicNew initialize].	AragonStuff systemVersion == 3 ifTrue: [^ChangeSetBrowser30 basicNew initialize].	^super new</body></methods><methods><class-id>Aragon.ChangeSetBrowser class</class-id> <category>utilities</category><body>addChanges: changeSet1 to: changeSet2	"Add Class Changes"	| classRemoves |	(changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classChanges'))		keysAndValuesDo: 			[:className :changes || class | 			class := changeSet1 classNamed: className.			changes do: [:ct | changeSet2 atClass: class add: ct]].	"Add Method Changes"	(changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'methodChanges'))		keysAndValuesDo: 			[:className :changes || class | 			class := changeSet1 classNamed: className.			changes 				keysAndValuesDo: [:selector :ct | changeSet2						perform: (ct , 'Selector:class:') asSymbol						with: selector						with: class]].	"Add Class Removes"	classRemoves := changeSet2 instVarAt: (ChangeSet instVarIndexFor: 'classRemoves').	(changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classRemoves'))		do: [:className | classRemoves add: className].</body><body>addChangesFor: aParcel	| newChangeSet |	newChangeSet := NamedChangeSet withName: aParcel name.	NamedChangeSet addChangeSet: newChangeSet.	^newChangeSet</body><body>addChangesFrom: aCollectionOfChanges to: aChangeSet 	aCollectionOfChanges 		do: [:each | 			each type == #'method definition'	ifTrue: [aChangeSet changeSelector: each selector class: each guaranteedClassObject] ifFalse: [			each type == #'method remove'	ifTrue: [aChangeSet removeSelector: each selector class: each guaranteedClassObject] ifFalse: [			each type == #'class definition'		ifTrue: [aChangeSet changeClass: each guaranteedClassObject] ifFalse: [			each type == #'class remove'		ifTrue: [aChangeSet removeClass: each guaranteedClassObject] ifFalse: [			each type == #'class reorganize'	ifTrue: [aChangeSet reorganizeClass: each guaranteedClassObject]		]]]]]</body><body>addChangesFrom: aChangeSet toChangesFor: aParcel 	| parcelChanges |	parcelChanges := self changesFor: aParcel.	parcelChanges isNil ifTrue: [parcelChanges := self addChangesFor: aParcel].	^ParcelBrowser		addChangesFrom: aChangeSet		to: parcelChanges		accordingTo: aParcel</body><body>changesFor: aParcel	^NamedChangeSet lookup: aParcel name</body><body>freshenChangesFor: aParcel	self addChangesFrom: ChangeSet current toChangesFor: aParcel.	^self changesFor: aParcel</body><body>openOnChangeSet: aChangeSet title: aTitle	| builder |	builder := (self new setChanges: aChangeSet) open.	builder window label: 'Change Set: ', aTitle.</body><body>removeChange: aSymbol class: aClass from: aChangeSet	aChangeSet removeChange: aSymbol class: aClass</body><body>subtract: changeSet1 from: changeSet2	| changes1 changes2 |	"Subtract Class Changes"	changes1 := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classChanges').	changes2 := changeSet2 instVarAt: (ChangeSet instVarIndexFor: 'classChanges').	changes1 keysDo: [:className | changes2 removeKey: className ifAbsent: [nil]].	"Subtract Method Changes"	changes1 := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'methodChanges').	changes2 := changeSet2 instVarAt: (ChangeSet instVarIndexFor: 'methodChanges').	changes1 		keysAndValuesDo: 			[:className :changes || selectors | 			(selectors := changes2 at: className ifAbsent: [nil]) notNil				ifTrue: [changes keysDo: [:selector | selectors removeKey: selector ifAbsent: [nil]].			selectors isEmpty ifTrue: [changes2 removeKey: className]]].	"Subtract Class Removes"	changes1 := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classRemoves').	changes2 := changeSet2 instVarAt: (ChangeSet instVarIndexFor: 'classRemoves').	changes1 do: [:className | changes2 remove: className ifAbsent: [nil]].</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>initialize-release</category><body>initialize	super initialize.	self hierarchy selectionIndexHolder compute: [self selectionInHierarchyChanged].	self 	entries selectionIndexHolder compute: [self selectionChanged].</body><body>postBuildWith: aBuilder 	| widget |	(Aragon includesKey: #WindowResizeCorner)		ifTrue: [builder add: (Aragon at: #WindowResizeCornerSpec) new].	widget := (builder componentAt: #entries) widget.	ColumnLayout notNil ifTrue: [widget columnLayout: ColumnLayout].	widget defaultSortBlock: [:a :b | a name &lt; b name].	widget orderBy: 2.	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].	super postBuildWith: aBuilder</body><body>postOpenWith: aBuilder 	self setEnablement.</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>menu actions</category><body>copyFile	self notYetImplemented</body><body>createFolder	self notYetImplemented</body><body>createTextFile	self notYetImplemented</body><body>cutFile	self notYetImplemented</body><body>fileIn	| directory |	directory := self currentDirectory.	self selectedRows do: [:entry | (directory construct: entry name) fileIn]</body><body>goTo	self notYetImplemented</body><body>helpAbout	Dialog warn: 'NewFileBrowser example'</body><body>invertSelection	self notYetImplemented</body><body>notYetImplemented	Dialog warn: 'This function is not yet implemented!'</body><body>openFile	Cursor execute showWhile: [	InputState default altDown ifTrue: [^self showProperties].	InputState default ctrlDown ifTrue: [^self openInShell].	self selectedRows do: [:entry | entry isDirectory			ifTrue: 				[| sel oldDelay |				oldDelay := DelayForRetrieval.								[DelayForRetrieval := 0.				entry name = '.' ifTrue: [^Screen default ringBell].				entry name = '..' ifTrue: [^directories selection: directories selectedNode parent subject].				directories list expand: (sel := directories selection).				directories selection: (sel asFilename construct: entry name) asString]					valueNowOrOnUnwindDo: [DelayForRetrieval := oldDelay]]			ifFalse: [self openFileFor: entry]]	] " End of showWhile "</body><body>openInChangeList	self selectedRows		do: 			[:entry | 			| filename |			filename := directories selection asFilename construct: entry name.			ChangeList openOnFileNamed: filename]</body><body>openInShell</body><body>openInTextEditor	self selectedRows		do: 			[:entry | 			| filename |			filename := directories selection asFilename construct: entry name.			self class openTextEditorFor: filename]</body><body>openWith	| answer |	answer := Dialog				choose: 'How should this file be opened?'				labels: #('In &amp;Text Editor' 'In &amp;Change List' '&amp;Cancel')				values: #(#textEditor #changeList nil)				default: #textEditor.	answer == #textEditor ifTrue: [^self openInTextEditor].	answer == #changeList ifTrue: [^self openInChangeList].</body><body>pasteFile	self notYetImplemented</body><body>refreshAll	self stopObserver.	self hierarchy list invalidateAndReExpand.	currentDirectory := nil.	self updateContents.	self startObserver.</body><body>removeFile	(Dialog confirm: 'Do you really want to remove all the selected files?') ifFalse: [^self].	self selectedRows		do: 			[:entry | 			(self currentDirectory construct: entry name) delete.			entries list remove: entry]</body><body>renameFile	(builder componentAt: #entries) widget controller startEditing.</body><body>renameFileWith: aController 	Object errorSignal		handle: 			[:ex | 			Dialog warn: ex errorString.			^false]		do: 			[| row dir |			(row := self selectedRow value) name = aController editValue				ifFalse: 					[dir := self currentDirectory.					(dir construct: row name)						renameTo: (dir construct: aController editValue) asString.					row name: aController editValue]."			self stopEditing."			^true]</body><body>selectAll	self notYetImplemented</body><body>setupOptions	self notYetImplemented</body><body>showProperties	self selectedRows first inspect</body><body>undo	self notYetImplemented</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>accessing</category><body>currentDirectory	^currentDirectory</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>aspects</category><body>entries	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	entries isNil		ifTrue:			[entries :=  MultiSelectionInList new.			entries selectionIndexHolder compute: [:v | self selectedRow value: entries selection]].	^entries</body><body>hierarchy	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	directories isNil 		ifTrue: 			[directories := SelectionInTree with: 				(TreeAdaptor new 					childrenBlock: [:anEntry | self entriesFor: anEntry]; 					roots: (Filename volumes collect: [:vol | vol asTreeNode type: #disk]))].	^directories</body><body>selectedRow	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	selectedRow isNil ifTrue: [selectedRow := nil asValue].	^selectedRow</body><body>selectedRows	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^entries selections</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>events</category><body>keyPress: aKeyboardEvent 	| keyValue |	(builder componentAt: #entries) widget hasFocus ifFalse: [^aKeyboardEvent].	keyValue := aKeyboardEvent keyValue.	keyValue == #F2 ifTrue: [(builder componentAt: #entries) widget controller toggleEditing. ^nil].	keyValue == Character esc ifTrue: [(builder componentAt: #entries) widget controller abortEditing. ^nil].	(builder componentAt: #entries) widget controller isEditing ifTrue: [^aKeyboardEvent].	keyValue == Character backspace ifTrue: [directories selectParent. ^nil].	keyValue == Character cr ifTrue: [self openFile. ^nil].	keyValue == Character del ifTrue: [self removeFile. ^nil].	^aKeyboardEvent</body><body>noticeOfWindowClose: aWindow	ColumnLayout := (builder componentAt: #entries) widget columnLayout.	self stopObserver.	retrieveProcess notNil ifTrue: [retrieveProcess terminate].	^super noticeOfWindowClose: aWindow.</body><body>selectionChanged"	self stopEditing."	self setEnablement.</body><body>selectionInHierarchyChanged	DelayForRetrieval == 0 ifTrue: [^self updateContents].	retrieveProcess ~~ nil ifTrue: [retrieveProcess terminate].	retrieveProcess := 			[(Delay forMilliseconds: DelayForRetrieval) wait.			self updateContents.			Window currentWindow displayPendingInvalidation.	] forkAt: Processor userBackgroundPriority</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>drag&amp;drop</category><body>dragFromList: aController	"Drag the currently selected file(s)."	| ds dm data dir |	data := DragDropData new.	data key: #file.	data contextWindow: self builder window.	"Basic Step 12"	data contextWidget: aController view.					data contextApplication: self.				dir := self currentDirectory.	data clientData: (self selectedRows collect: [:each | dir construct: each asString]).	"Basic Step 13"	ds := DropSource new.			"Basic Step 14"	dm := DragDropManager 			withDropSource: ds			withData: data.			"Basic Step 15"	dm doDragDrop						"Basic Step 16"</body><body>dropEnter: aSymbol with: aDragContext 	| widget dictionary |	aDragContext key == #file ifFalse: [^#dropEffectNone].	widget := (builder componentAt: aSymbol) widget.	dictionary := IdentityDictionary new.							"V2 Step 3"	dictionary at: #widget put: widget.							"V2 Step 4"	dictionary at: #targetIndex put: widget targetIndex.			"V2 Step 4"	dictionary at: #hasFocus put: widget hasFocus.				"V2 Step 4"	aDragContext dropTarget clientData: dictionary.			 	"V2 Step 5"	widget hasFocus: true.									"V2 Step 6"	^#dropEffectMove</body><body>dropEnterList: aDragContext 	^self dropEnter: #entries with: aDragContext</body><body>dropEnterTree: aDragContext 	^self dropEnter: #hierarchy with: aDragContext</body><body>dropExitWith: aDragContext 	| widget dictionary |	aDragContext key == #file ifFalse: [^#dropEffectNone].	dictionary := aDragContext dropTarget clientData.		"V2 Step 9"	widget := dictionary at: #widget.						"V2 Step 9"	widget targetIndex: (dictionary at: #targetIndex).		"V2 Step 10"	widget hasFocus: (dictionary at: #hasFocus).			"V2 Step 10"	aDragContext dropTarget clientData: nil.			 	"V2 Step 11"	^#dropEffectNone</body><body>dropOnList: aDragContext 	"Basic Step 3"	| files target widget |	aDragContext key == #file ifFalse: [^#dropEffectNone].	files := aDragContext sourceData clientData.	widget := aDragContext dropTarget clientData at: #widget.	target := directories selection asFilename construct: (entries list at: widget targetIndex) asString.	(target isDirectory and: [target ~= files first directory]) ifFalse: [^#dropEffectNone].	Cursor execute		showWhile: 			[aDragContext ctrlDown				ifTrue: [files do: [:each | each copyTo: (target construct: each tail)]]				ifFalse: 					[files do: [:each | each moveTo: (target construct: each tail)].					(aDragContext sourceData contextApplication isKindOf: NewFileBrowser)						ifTrue: [aDragContext sourceData contextApplication removeSelectedEntries]].			target = self currentDirectory ifTrue: [self updateContents]].	^self dropExitWith: aDragContext</body><body>dropOnTree: aDragContext 	"Basic Step 3"	| files target widget |	aDragContext key == #file ifFalse: [^#dropEffectNone].	files := aDragContext sourceData clientData.	widget := aDragContext dropTarget clientData at: #widget.	target := (directories list at: widget targetIndex) asFilename.	(target definitelyExists and: [target ~= files first directory]) ifFalse: [^#dropEffectNone].	Cursor execute		showWhile: 			[aDragContext ctrlDown				ifTrue: [files do: [:each | each copyTo: (target construct: each tail)]]				ifFalse: 					[files do: [:each | each moveTo: (target construct: each tail)].					(aDragContext sourceData contextApplication isKindOf: NewFileBrowser)						ifTrue: [aDragContext sourceData contextApplication removeSelectedEntries]].			target = self currentDirectory ifTrue: [self updateContents]].	^self dropExitWith: aDragContext</body><body>dropOverList: aDragContext 	| files widget target |	aDragContext key == #file ifFalse: [^#dropEffectNone].	widget := aDragContext dropTarget clientData at: #widget.			"V2 Step 7"	widget showDropFeedbackIn: aDragContext allowScrolling: true.	"V2 Step 8"	files := aDragContext sourceData clientData.	target := directories selection asFilename construct: (entries list at: widget targetIndex) asString.	(target isDirectory and: [target ~= files first directory]) ifFalse: [^#dropEffectNone].	^aDragContext ctrlDown ifTrue: [#dropEffectCopy] ifFalse: [#dropEffectMove]</body><body>dropOverTree: aDragContext 	| treeView files |	aDragContext key == #file ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.			"V2 Step 7"	treeView showDropFeedbackIn: aDragContext allowScrolling: true.	"V2 Step 8"	files := aDragContext sourceData clientData.	(directories list at: (builder componentAt: #hierarchy) widget targetIndex) asFilename		 = files first directory ifTrue: [^#dropEffectNone].	^aDragContext ctrlDown ifTrue: [#dropEffectCopy] ifFalse: [#dropEffectMove]</body><body>dropWith: aDragContext 	"Basic Step 3"	| files dest |	aDragContext key == #file ifFalse: [^#dropEffectNone].	files := aDragContext sourceData clientData.	dest := (directories list at: (builder componentAt: #hierarchy) widget targetIndex) asFilename.	(dest definitelyExists and: [dest ~= files first directory]) ifTrue: [Cursor execute			showWhile: 				[aDragContext ctrlDown					ifTrue: [files do: [:each | each copyTo: (dest construct: each tail)]]					ifFalse: 						[files do: [:each | each moveTo: (dest construct: each tail)].						(aDragContext sourceData contextApplication isKindOf: NewFileBrowser)							ifTrue: [aDragContext sourceData contextApplication removeSelectedEntries]].				dest = self currentDirectory ifTrue: [self updateContents]]].	^self dropExitWith: aDragContext</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>private</category><body>contentsOf: aFilename 	^aFilename notNil		ifTrue: [(aFilename directoryContents 					collect: [:each | FilenameWrapper on: (aFilename construct: each)])				select: [:f | (f isHidden or: [f isSystem]) == ShowHidden]]		ifFalse: [#()]</body><body>enableAll: items inMenu: aMenu if: condition	items do: [:each | (aMenu atNameKey: each) enabled: condition].</body><body>entriesFor: aString 	| dir answer |	answer := SortedCollection new.	(dir := aString asFilename)		directoryContents do:			[:file || fw | 				fw := FilenameWrapper on: (dir construct: file).				(fw name ~= '.' 				and: [fw name ~= '..' 				and: [fw isDirectory 				and: [(fw isHidden or: [fw isSystem]) == ShowHidden]]])			ifTrue: [answer add: ((AragonTreeNode for: (dir construct: fw asString) asString label: fw asString) isParent: true)]].	^answer</body><body>openDefault: aFilename	| answer |	answer := Dialog				choose: 'How should this file be opened?'				labels: #('In &amp;Text Editor' 'In &amp;Changes List' '&amp;Cancel')				values: #(#textEditor #changesList nil)				default: #textEditor.	answer isNil ifTrue: [^self].	answer == #textEditor ifTrue: [^self class openTextEditorFor: aFilename].	answer == #changesList ifTrue: [^ChangeList openOnFileNamed: aFilename]</body><body>openFileFor: anEntry 	| filename answer |	filename := directories selection asFilename construct: anEntry name.	InputState default shiftDown		ifFalse: 			[FileTypes associationsDo: [:fType | fType key do: [:s | (s match: anEntry name)						ifTrue: [^fType value value: filename]]].			^self openDefault: filename].	answer := Dialog				choose: 'How should this file be opened?'				labels: #('In &amp;Text Editor' 'In &amp;Changes List' '&amp;Cancel')				values: #(#textEditor #changesList nil)				default: #textEditor.	answer == #textEditor ifTrue: [^self class openTextEditorFor: filename].	answer == #changesList ifTrue: [^ChangeList openOnFileNamed: filename]</body><body>openInShell: aFilename</body><body>removeSelectedEntries	self selectedRows do: [:entry | entries list remove: entry]</body><body>setEnablement	| selectionSize listMenu |	selectionSize := entries selectionIndexes size.	listMenu := builder menuAt: #listMenu.	self enableAll: #(renameFile fileIn showProperties) inMenu: listMenu if: selectionSize == 1.	self enableAll: #(openFile removeFile cutFile copyFile) inMenu: listMenu if: selectionSize &gt; 0.	self enableAll: #(pasteFile) inMenu: listMenu if: copySelection notNil.</body><body>startObserver	observerProcess notNil ifTrue: [^self].	observerProcess := [(Delay forMilliseconds: DelayForRefresh first) wait.			[self updateContentsIfNecessary.			(Delay forMilliseconds: DelayForRefresh last) wait.			true] 	whileTrue] forkAt: Processor userBackgroundPriority</body><body>stopEditing	(builder componentAt: #entries) widget controller stopEditing.</body><body>stopObserver	observerProcess notNil		ifTrue: 			[observerProcess terminate.			observerProcess := nil]</body><body>updateContents	| selection |	selection := (selection := directories selection) notNil ifTrue: [selection asFilename].	selection = currentDirectory ifTrue: [^self].	self stopObserver.	(builder componentAt: #entries) widget controller stopEditingAndInvalidate: false.	self entries list: (self contentsOf: (currentDirectory := selection)).	self startObserver.</body><body>updateContentsIfNecessary	| actualContents currentContents newEntries obsoleteEntries |	actualContents := self contentsOf: currentDirectory.	currentContents := self entries list.	newEntries := actualContents reject: [:each | currentContents includes: each].	newEntries isEmpty ifFalse: [currentContents addAll: newEntries].	obsoleteEntries := currentContents reject: [:each | actualContents includes: each].	obsoleteEntries isEmpty ifFalse: [currentContents removeAll: obsoleteEntries].</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>class initialization</category><body>delayForRefresh: milliSeconds		DelayForRefresh := milliSeconds.</body><body>delayForRetrieval: milliSeconds		DelayForRetrieval := milliSeconds.</body><body>fileTypes	^FileTypes</body><body>hookUp	AragonStuff hookup: self for: #FileBrowser.</body><body>initialize	"self initialize"	self delayForRetrieval: 400.	self delayForRefresh: #(7000 2000).	self showHidden: false.	FileTypes := IdentityDictionary new		add:	#('*.ws' '*.txt' '*.ini')		-&gt;	[:f | self openTextEditorFor: f];		add:	#('*.pst' '*.st' '*.cha')		-&gt;	[:f | ChangeList openOnFileNamed: f];		add:	#('*.pcl')					-&gt;	[:f | Parcel loadParcelFrom: f asString];	yourself.</body><body>isHookedUp	^AragonStuff isHookedUp: self</body><body>showHidden: aBoolean	ShowHidden := aBoolean</body><body>unhook	AragonStuff unhook: self.</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>interface opening</category><body>open	self openWithSpec: #windowSpec</body><body>openTextEditorFor: aFilename	| te |	te := Aragon at: #TextEditor ifAbsent: [FileBrowser].	te openOnFileNamed: aFilename asString.</body><body>openWithSpec: aSymbol 	"Create a running instance of the application and open its user 	interface using the designated specification."	^self openOn: ((Aragon includesKey: #Win32)			ifTrue: [Win32FileBrowser]			ifFalse: [self]) new withSpec: aSymbol</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>resources</category><body>applicationName	^'File Browser'</body><body>defaultIconName	^'@disk.gif'</body></methods><methods><class-id>Aragon.FontPanel</class-id> <category>initialize-release</category><body>initBrowseStyleMenu	| mb |	mb := MenuBuilder new.	(TextStyle systemStyles asSortedCollection) do: [:each | mb add: each -&gt; [self browseStyle: each]].  	mb line.	(TextStyle standardStyles asSortedCollection) do: [:each | mb add: each -&gt; [self browseStyle: each]].  	mb line.	(TextStyle hiddenStyles asSortedCollection) do: [:each | mb add: each -&gt; [self browseStyle: each]].  	self browseStyleMenu value: mb menu</body><body>initChooseStyleMenu	| mb |	mb := MenuBuilder new.	(TextStyle systemStyles asSortedCollection) do: [:each | mb add: each -&gt; [self chooseStyle: each]].  	mb line.	(TextStyle standardStyles asSortedCollection) do: [:each | mb add: each -&gt; [self chooseStyle: each]].  	mb line.	(TextStyle hiddenStyles asSortedCollection) do: [:each | mb add: each -&gt; [self chooseStyle: each]].  	self chooseStyleMenu value: mb menu</body><body>initialize	(family := 'Times' asValue) onChangeSend: #familyChanged to: self.	(style := #italic asValue) onChangeSend: #styleChanged to: self.	(pixelSize := 48 asValue) onChangeSend: #sizeChanged to: self.	exampleText := 'The quick brown fox jumps over the lazy dog' asText asValue.	applyTextStyle := false.	lock := false.	targets := #().	menus := IdentityDictionary new		add: #stylesMenu -&gt; ValueHolder new;		add: #chooseStyleMenu -&gt; ValueHolder new;		add: #browseStyleMenu -&gt; ValueHolder new;		add: #removeStyleMenu -&gt; ValueHolder new;	yourself.	self initStylesMenu.	self initChooseStyleMenu.	self initBrowseStyleMenu.	self initRemoveStyleMenu.	selectionHolder := (Smalltalk includesKey: #UIPainterController)		ifTrue: [(Smalltalk at: #UIPainterController) lastControllerWithSelectionChannel] 		ifFalse: [ValueHolder with: nil].</body><body>initRemoveStyleMenu	| mb |	mb := MenuBuilder new.	(TextStyle standardStyles asSortedCollection) do: [:each | mb add: each -&gt; [self removeStyle: each]].  	mb line.	(TextStyle hiddenStyles asSortedCollection) do: [:each | mb add: each -&gt; [self removeStyle: each]].  	self removeStyleMenu value: mb menu</body><body>initStylesMenu	| mb menu |	(mb := MenuBuilder new)		beginSubMenuLabeled: '&amp;Textstyles';			add: '&amp;Choose' -&gt; #choose;			add: '&amp;Remove' -&gt; #select;			add: '&amp;Users Of' -&gt; #browse;			add: '&amp;Install As...' -&gt; [self installAs];			line;			add: '&amp;Save As...' -&gt; [self saveTextstyles];			add: '&amp;Read From...' -&gt; [self loadTextstyles];		endSubMenu.	menu := mb menu.	(menu menuItems first submenu menuItemAt: 1) submenu: self chooseStyleMenu.	(menu menuItems first submenu menuItemAt: 2) submenu: self removeStyleMenu.	(menu menuItems first submenu menuItemAt: 3) submenu: self browseStyleMenu.	self stylesMenu value: menu</body><body>noticeOfWindowClose: aWindow 	"The ApplicationWindow aWindow is in the process of closing. 	You have been notified."	Instance := nil.</body></methods><methods><class-id>Aragon.FontPanel</class-id> <category>interface opening</category><body>postBuildWith: aBuilder 	super postBuildWith: aBuilder.	aBuilder == self builder ifFalse: [^self].	(builder window) application: self; sendWindowEvents: #(#release).	builder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].	selectionHolder onChangeSend: #selectionChanged to: self.	self		invalidateAfter: 			[self setFontFamily: family value.			self setFontStyle: style value.			self setFontSize: pixelSize value.			self selectionChanged].	(builder componentAt: #applyButton) disable.</body></methods><methods><class-id>Aragon.FontPanel</class-id> <category>aspects</category><body>browseStyleMenu	^menus at: #browseStyleMenu</body><body>chooseStyleMenu	^menus at: #chooseStyleMenu</body><body>exampleText	^exampleText</body><body>family	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^family</body><body>pixelSize	^pixelSize</body><body>removeStyleMenu	^menus at: #removeStyleMenu</body><body>style	^style</body><body>stylesMenu	^menus at: #stylesMenu</body></methods><methods><class-id>Aragon.FontPanel</class-id> <category>actions</category><body>apply	| controller fontSpec |	self hasTarget ifFalse: [^self].	applyBlock notNil ifTrue: [^applyBlock value: self getFont].	fontSpec := applyTextStyle ifTrue: [textStyle key] ifFalse: [self getFont encoded].	(controller := selectionHolder value) selectionList: (targets			collect: 				[:each | 				(each spec respondsTo: #style:) ifTrue: [each spec style: fontSpec].				controller replaceElement: each basedOnSpec: each spec]).	(builder componentAt: #applyButton) disable.</body><body>browseStyle: aStylename	AragonStuff browseAllReferencesTo: aStylename asSymbol</body><body>chooseStyle: aStylename	| font |	textStyle := TextStyle named: aStylename.	font := textStyle font.	(self pixelSize setValue: font pixelSize) dependents do: [:each | each ~~ self ifTrue: [each update: #value]].	self family value: font family.	self style value: font style.	textStyle := aStylename -&gt; textStyle.	applyTextStyle := true.</body><body>installAs	| styleNames styleName dialog dialogBuilder attributes |	attributes := Dictionary new			add: #normal	-&gt; false asValue;			add: #bold		-&gt; false asValue;			add: #italic		-&gt; false asValue;			add: #underline	-&gt; false asValue;			add: #strikeout	-&gt; false asValue;		yourself.	styleNames := OrderedCollection new		addAll: (TextStyle systemStyles asSortedCollection collect: [:each | each asText allBold]);		addAll: TextStyle standardStyles asSortedCollection;		addAll: TextStyle hiddenStyles asSortedCollection;	yourself.	styleName := 'A Style Name' asValue.	textStyle notNil		ifTrue: 			[| font |			font := textStyle value font.			#(normal bold italic underline strikeout) do: [:x | (attributes at: x) value: (font attributes includesKey: x).			styleName value: textStyle key]].	dialog := SimpleDialog new.	dialogBuilder := dialog builder.	attributes associationsDo: [:each | dialogBuilder aspectAt: each key put: each value].	dialogBuilder aspectAt: #styleName put: styleName.	dialogBuilder aspectAt: #styleNames put: styleNames asValue.	(dialog openFor: self interface: #installAsSpec)		ifTrue:			[styleName := styleName value asSymbol.			attributes := (attributes keys select: [:x | (attributes at: x) value]) 								addAll: #(large small family color); 							yourself.			(Font new: family value style: style value pixelSize: pixelSize value)				installAs: styleName				withAttributes: attributes.			textStyle :=styleName -&gt; (TextStyle named: styleName).			applyTextStyle := true].</body><body>loadTextstyles	| filename |	RecentlyWroteFile isNil ifTrue: [RecentlyWroteFile := 'Textstyles.stx'].	filename := Dialog requestFileName: 'Read text tyles from file:' default: RecentlyWroteFile.	filename isEmpty ifTrue: [^self].	TextStyle readStylesFromFile: filename.	RecentlyWroteFile := filename.	self initChooseStyleMenu.	self initRemoveStyleMenu.	self initBrowseStyleMenu.</body><body>removeStyle: aStylename	| refs |	(Dialog confirm: 'Do you really want to remove text style ''', aStylename, '''?') ifFalse: [^self].	(refs := AragonStuff allReferencesTo: aStylename) isEmpty 		ifFalse:			[| choice | 			choice := Dialog 						choose:'It seems like text style ''', aStylename, ''' is still being used in ', refs size printString, ' method(s). What do you want to do?'						labels: #('Browse Refs' 'Remove Anyway' 'Cancel')						values: #(browse remove cancel)						default: #browse.			choice == #browse ifTrue: [^self browseStyle: aStylename].			choice == #cancel ifTrue: [^self]].	TextStyle removeStyleNamed: aStylename.	self initChooseStyleMenu.	self initRemoveStyleMenu.	self initBrowseStyleMenu.</body><body>saveTextstyles	| filename |	RecentlyWroteFile isNil ifTrue: [RecentlyWroteFile := 'Textstyles.stx'].	filename := Dialog requestFileName: 'Save text tyles to file:' default: RecentlyWroteFile.	filename isEmpty ifTrue: [^self].	TextStyle storeStylesIn: filename.	RecentlyWroteFile := filename.</body></methods><methods><class-id>Aragon.FontPanel</class-id> <category>events</category><body>familyChanged	family value isNil ifTrue: [(builder componentAt: #applyButton) disable. ^self].	self setFontFamily: family value.	self invalidateExample.</body><body>keyPress: aKeyboardEvent	aKeyboardEvent keyValue == Character esc ifTrue: [self closeRequest. ^nil].	aKeyboardEvent keyValue == Character cr 		ifTrue: 			[| kp | kp := builder keyboardProcessor. 			kp default isEnabled ifFalse: [kp nextFieldFrom: kp currentConsumer. ^nil]].	^aKeyboardEvent</body><body>selectionChanged	| newController newSelection |	newController := selectionHolder value.	newController == nil ifTrue: [^self setupForNil].	newSelection := newController selectionList.	newSelection == targets ifTrue: [^self].	targets := newSelection.	targets size == 1		ifTrue:			[| target | 			target := targets detect: [:t | t spec respondsTo: #style] ifNone: [nil].			target notNil 				ifTrue:					[| font |					font := self fontFor: target spec style.					self 						invalidateAfter: 							[font pixelSize ~= pixelSize value ifTrue: [pixelSize value: font pixelSize].							font family ~= family value ifTrue: [family value: font family].							font style ~= style value ifTrue: [style value: font style]]]].	(builder componentAt: #applyButton) isEnabled: targets size &gt; 1.</body><body>sizeChanged	self setFontSize: pixelSize value.	self invalidateExample</body><body>styleChanged	self setFontStyle: style value.	self invalidateExample.</body><body>windowEvent: anEvent from: anApplicationWindow 	anEvent key == #release ifTrue: [selectionHolder retractInterestsFor: self].	^super windowEvent: anEvent from: anApplicationWindow</body></methods><methods><class-id>Aragon.FontPanel</class-id> <category>private</category><body>fontFor: aSymbol 	| ts |	(Font canDecode: aSymbol) ifTrue: [^Font decode: aSymbol].	ts := (aSymbol == #system and: [UILookPolicy useSystemFontsOnWidgets])			ifTrue: [UILookPolicy systemWidgetTextStyle]			ifFalse: [(aSymbol == #default or: [aSymbol == nil]) 				ifTrue: [TextStyle default]				ifFalse: [TextStyle named: aSymbol ifAbsent: [TextStyle default]]].	(ts isKindOf: TextStyle) ifTrue: [textStyle := aSymbol -&gt; ts. ^ts font].	^ts characterAttributes asFont</body><body>getFont	^Font new: family value style: style value pixelSize: pixelSize value</body><body>hasTarget	^applyBlock notNil or: [targets isEmpty not]</body><body>invalidateAfter: aBlock 	^lock		ifTrue: aBlock		ifFalse: 			[lock := true.			aBlock value.			lock := false.			self invalidateExample]</body><body>invalidateExample	lock ifTrue: [^self].	(builder componentAt: #applyButton) isEnabled: self hasTarget.	(builder componentAt: #example) widget invalidate.	applyTextStyle := false.</body><body>setFontFamily: aFamilyName		| newFont |	newFont := Font new: aFamilyName style: #regular pixelSize: pixelSize value.	(self builder componentAt: #example) widget		textStyle: (TextStyle newOnFont: newFont withAttributes: #(bold italic))</body><body>setFontSize: anInteger	| ts |	(ts := (self builder componentAt: #example) widget textStyle) defaultFont pixelSize: anInteger.	ts gridForFont: nil withLead: 0.	ts characterAttributes invalidateQueryCache.</body><body>setFontStyle: aStyle 	(builder componentAt: #example) widget editText: (exampleText value emphasizeAllWith: (Emphasizes at: aStyle))</body><body>setupForNil	(builder componentAt: #applyButton) disable.	targets := #()</body></methods><methods><class-id>Aragon.FontPanel class</class-id> <category>class initialization</category><body>initialize	Emphasizes := (Dictionary new) 		at: #regular	 	put: #(); 		at: #bold	 		put: #(bold); 		at: #italic 		put: #(italic); 		at: #boldItalic 	put: #(bold italic); 	yourself.</body></methods><methods><class-id>Aragon.FontPanel class</class-id> <category>interface opening</category><body>open	(Instance isNil or: [Instance builder isNil or: [Instance builder window isNil or: [Instance builder window isOpen not]]])		ifTrue: [(Instance := 					OSHandle currentOS == #win32 ifTrue: [Win32FontPanel new] ifFalse: [					OSHandle currentOS == #unix ifTrue: [UnixFontPanel new]					ifFalse: [self new]]) 				open]		ifFalse: [Instance builder window expand raise].	^self</body></methods><methods><class-id>Aragon.AragonMenuEditor</class-id> <category>private</category><body>extendedShortcutKeyFor: item put: aShortcut 	currentItem value shortcutKeyCharacter: aShortcut</body><body>extendedShortcutKeyFrom: item 	^NSMenuItemView shortcutKeyFrom: item defaultPrefix: nil</body><body>keyPress: aKeyboardEvent 	(shortCutField ~~ nil and: [shortCutField widget hasFocus])		ifTrue: 			[| kv sc |			kv := aKeyboardEvent keyValue.			kv == Character del ifTrue: [(builder aspectAt: #shortCutChar) value: nil. ^nil].			sc := NSMenuItemView shortcutFrom: aKeyboardEvent.			sc == nil ifTrue: [^aKeyboardEvent].			(builder aspectAt: #shortCutChar) value: sc.			^nil].	^aKeyboardEvent</body><body>postBuildWith: aBuilder	super postBuildWith: aBuilder.	shortCutField := aBuilder componentAt: #shortCutChar.	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].</body><body>preBuildWith: aBuilder	super preBuildWith: aBuilder.	aBuilder aspectAt: #shortCutChar		put: ((PluggableAdaptor on: currentItem)				getBlock: [:m | self extendedShortcutKeyFrom: m value]				putBlock: [:m :v | 					self extendedShortcutKeyFor: m value put: v. 					self modified]				updateBlock: [:m :a :p | a == #value]).</body></methods><methods><class-id>Aragon.AragonMenuEditor class</class-id> <category>class initialization</category><body>initialize	ShortCutModifiers := IdentityDictionary new		add: #shift -&gt; 'Shift+';		add: #ctrl -&gt; 'Ctrl+';		add: #alt -&gt; 'Alt+';		add: #meta -&gt; 'Meta+';	yourself.</body></methods><methods><class-id>Aragon.TabApplication</class-id> <category>componentBuilding</category><body>allCategoriesComponent	^browser allCategoriesComponent</body><body>allClassesComponent	^browser allClassesComponent</body><body>categoriesComponent	^browser categoriesComponent</body><body>classesComponent	^browser classesComponent</body><body>protocolsComponent	^browser protocolsComponent</body><body>selectorsComponent	^browser selectorsComponent</body></methods><methods><class-id>Aragon.TabApplication</class-id> <category>initialize</category><body>browser: aBrowser	super browser: aBrowser.	delegate := ParcelTabApplication new basicInitialize browser: aBrowser.</body><body>initializeForMethodsLabel: labelString list: aCollection initialSelection: selector	| helper module |	helper := MethodListBrowserHelper new.	helper		label: labelString;		baseList: aCollection;		initialSelection: selector.	module := SimpleBrowserModule new			helpers: (Array with: helper).	components := List new.	components add: module.	self linkComponentsInArray: components.	self linkFirstComponentToSubcanvas.		self browser updateLists.	components first list selectionIndexHolder onChangeSend: #selectorChanged to: browser</body><body>release	delegate notNil ifTrue: [delegate release]</body></methods><methods><class-id>Aragon.TabApplication</class-id> <category>parcels</category><body>defaultEmphasizer	^delegate notNil		ifTrue: [delegate defaultEmphasizer]		ifFalse: [super defaultEmphasizer]</body><body>delegate	^delegate</body><body>doesNotUnderstand: aMessage 	"Delegates anything I don't understand to the current tab application. This 	allows adding Tab Applications that don't conflict with each other easier."	^delegate perform: aMessage selector withArguments: aMessage arguments</body><body>respondsTo: aSelector	^(super respondsTo: aSelector) 		ifTrue: [true]		ifFalse: [delegate notNil and: [delegate respondsTo: aSelector]]</body></methods><methods><class-id>Aragon.SimpleFileBrowser</class-id> <category>initialize-release</category><body>initialize	| treeAdaptor root |	root := AragonTreeNode for: #root label: 'Volumes'.	root children: self childrenOfRoot.	treeAdaptor := TreeAdaptor new		childrenBlock: 			[:aDirectory | self childrenOf: aDirectory]; 		root: root;		expandAt: 1.	tree := SelectionInList with: treeAdaptor</body></methods><methods><class-id>Aragon.SimpleFileBrowser</class-id> <category>aspects</category><body>tree	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	^tree</body></methods><methods><class-id>Aragon.SimpleFileBrowser</class-id> <category>notifications</category><body>selectionChanged	| file |	(file := tree selection) isNil ifTrue: [^self].	Transcript show: file asString; cr.</body></methods><methods><class-id>Aragon.SimpleFileBrowser</class-id> <category>private</category><body>childrenOf: aDirectory 	| answer |	answer := OrderedCollection new.	aDirectory directoryContents do: 		[:each | 		| file |		(file := aDirectory construct: each) isReadable 			ifTrue: [answer add: ((AragonTreeNode for: file label: each)					isParent: (self isDirectory: file))]].	^answer</body><body>childrenOfRoot	^(Filename volumes select: [:x | x asFilename exists]) 		collect: [:each | (AragonTreeNode for: each asFilename label: each) type: #disk]</body><body>isDirectory: aFilename 	^OSErrorHolder errorSignal 		handle: [:ex | false]		do: [aFilename isDirectory]</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>initialize-release</category><body>initialize	super initialize.	self initializeParcels.</body><body>initializeParcels	parcels := SelectionInTree with: TreeAdaptor new.	parcels selectionIndexHolder onChangeSend: #selectionChanged to: self.	(parcels list)		childrenBlock: 			[:s1 | 			| pattern set folders leafs i0 answer |			s1 == #root				ifTrue:	[i0 := 1.			pattern := '*']				ifFalse:	[i0 := s1 size + 2.	pattern := s1 , '.*'].			set := Set new.			folders := SortedCollection new.			leafs := SortedCollection new.			(Parcel parcels select: [:x | pattern match: x name]) do: 				[:s2 | 				| i1 label |				(i1 := s2 name indexOfSubCollection: '.' startingAt: i0) == 0					ifTrue: [leafs add: ((Parcel parcelNamed: s2 name) asTreeNode									type: #parcel; 									hasChildren: false;									displayString: (s2 name copyFrom: i0 to: s2 name size))]					ifFalse: 						[i1 := i1 - 1.						label := s2 name copyFrom: i0 to: i1.						(set includes: label)							ifFalse: [folders add: (AragonTreeNode for: (s2 name copyFrom: 1 to: i1) label: (set add: label))]]].			(answer := OrderedCollection new) addAll: folders.			s1 == #root 				ifTrue: 					[| node | node := 'Others' asTreeNode icon: (AragonIcon named: #folder2 color: #paleRed).					node children: leafs.					answer addLast: node]				ifFalse: [answer addAll: leafs].			answer];		root: (AragonTreeNode for: #root label: '[All Parcels]'); 		expand: parcels list rootNode</body><body>postBuildWith: aBuilder	| list myImageList |	list := (builder componentAt: #parcels) widget.	myImageList := IdentityDictionary new		add: #folder	-&gt;	(AragonIcon named: #folder2 color: ColorValue royalBlue asHiliteColor);		add: #parcel	-&gt;	(AragonIcon named: #package color: #paleRed);	yourself.	list imageList: myImageList.	list  textStyle: ((Fonts styleFrom: #(Helvetica italic 15)) lineGrid: 15).	self setEnablement.</body><body>postOpenWith: aBuilder 	Parcel addDependent: self.	(self class inSiena and: [aBuilder == self builder])		ifTrue: [self class defaultOutputDirectory = self class defaultInputDirectory 			ifTrue: [self editOptions]].	^super postOpenWith: aBuilder</body><body>selectParcel: aParcel	| tokens t |	tokens := self class pathOf: aParcel.	t := tokens first.	tokens := (OrderedCollection with: t) addAll: ((2 to: tokens size -1) collect: [:i | t := t, '.', (tokens at: i)]); yourself.	parcels list expandPath: tokens.	parcels selection: aParcel</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>menu commands</category><body>addParcelNamed: aString to: aFolder	| newName parcel |	newName := aFolder subject == #root 		ifTrue: [aString] 		ifFalse: [aFolder subject , '.' , aString].	(Parcel parcelNamed: newName) notNil		ifTrue: 			[Dialog warn: 'A parcel with this name allready exists'.			^self].	parcel := Parcel createParcelNamed: newName.	parcels selection: parcel.</body><body>browseChanges	| changeSet name |		(name := parcels selectedNode subject) isString ifFalse: [name := name name].	changeSet := (Smalltalk includesKey: #NamedChangeSet)		ifTrue: [(Smalltalk at: #NamedChangeSet) withName: name asSymbol]		ifFalse: [ChangeSet new].	self selectedParcels do: [:each | self class			addChangesFrom: ChangeSet current			to: changeSet			accordingTo: each].	(Aragon at: #ChangeSetBrowser ifAbsent: [^changeSet inspect])		openOnChangeSet: changeSet title: name</body><body>browseOverriddenExtensions	"Browse all methods in the currently selected parcel that are 	overrides of previous versions. 	To allow comparison of the old and the new open up a 	ChangeList switched to conflicts 	containing the original versions. To allow parcelling, open up a 	MethodListParcelBrowser."	| overrides currentParcel |	currentParcel := self selectedParcel.	(overrides := Override overriddenByComponent: currentParcel) isEmpty 		ifTrue: [^Dialog warn: 'No overridden extensions'].	(OverrideList new) 		listName: 'Definitions overridden by ' , currentParcel name , ' parcel'; 		checkSystem: #code; 		showConflicts: true; 		openOn: overrides."	current := OrderedCollection new.	overrides do: [:over | over isForMethod 		ifTrue: [current add: (MethodDefinition class: over owner selector: over selector)]].	current isEmpty 		ifFalse: [AragonStuff methodCollector			openListBrowserOn: current asSortedCollection			label: 'Current method overrides defined in ' , currentParcel name			initialSelection: nil]"</body><body>browseParcel	(selection isKindOf: Parcel) ifFalse: [^#toggleExpand].	AragonStuff browseParcel: selection.</body><body>changesIntoParcel	(Dialog confirm: 'Do you want to add the current change set to the selected parcel?') ifFalse: [^self].	selection addChangeSet: ChangeSet current</body><body>emptyParcel	(Dialog confirm: 'Really empty the parcel?')		ifTrue: [selection empty]</body><body>fileIntoParcel	"Ask the user for a Filename to file into this parcel."	| fname win32 filename |	win32 := Aragon at: #Win32 ifAbsent: nil.	filename := self class sourceFileOf: selection.	fname := win32 isNil		ifTrue: [Dialog requestFileName: 'Enter the path of the source file to read from:' default: filename]		ifFalse: [win32 openFilename: (self class defaultInputDirectory construct: filename) asString					filters: #(						'Parcel Source Files' '*.pst' 						'Smalltalk FileOuts' '*.st' 						'All Files' '*.*'					)].	(fname isNil or: [fname isEmpty]) ifTrue: [^self].	selection fileIntoFrom: fname</body><body>inspectParcel	selection isString		ifTrue: 			[self selectedParcels do: [:each | PackagePropertiesDialog on: each]]		ifFalse: [PackagePropertiesDialog on: selection]</body><body>loadParcel	| fname newParcel win32 |	fname := self class defaultInputDirectory.	win32 := Aragon at: #Win32 ifAbsent: nil.	fname := (fname construct: '*.pcl') asString.	fname := win32 isNil 		ifTrue: [Dialog requestFileName: 'Enter the path of the parcel file to read from:' default: fname]		ifFalse: [	win32 openFilename: fname filters: #('Parcel Files' '*.pcl' 'All Files' '*.*')].	(fname isNil or: [fname isEmpty]) ifTrue: [^self].	newParcel := Parcel loadParcelFrom: fname.	self invalidateAndSelect: newParcel</body><body>loadSources	| fname |	fname := self class defaultInputDirectory construct: (self sourceFileOf: selection).	fname definitelyExists		ifFalse: 			[| w32 |  w32 := Aragon at: #Win32 ifAbsent: nil.			fname := w32 isNil					ifTrue: [Dialog requestFileName: 'Enter the path of the source file to read from:' default: '*.st']					ifFalse: [w32 openFilename: fname asString 								filters: #(									'Source Files' '*.st' 									'All Files' '*.*'								)].			(fname isNil or: [fname isEmpty]) ifTrue: [^self]].	fname asFilename readStream fileIn</body><body>makeRemoveScript	| fname stream w32 |	fname := self class defaultOutputDirectory construct: (self changeExtensionIn: selection parcelFilename to: '.rm').	w32 := Aragon at: #Win32 ifAbsent: nil.	fname := w32 isNil					ifTrue: [Dialog requestFileName: 'Enter the path of a file to write to:' default: '*.rm']					ifFalse: [w32 saveFilename: fname filters: #('Remove Files' '*.rm' 'All Files' '*.*')].	(fname isNil or: [fname  isEmpty]) ifTrue: [^self].	stream := fname asFilename writeStream.	[selection writeRemovalScriptOn: stream]		valueNowOrOnUnwindDo: [stream close]</body><body>newFolder	| newFolder parent head newNode |	newFolder := Dialog request: 'Enter a name for the new folder' initialAnswer: 'New Folder'.	newFolder isEmpty ifTrue: [^self].	(parent := parcels selectedNode) isNil ifTrue: [parent := parcels list root].	(parent isKindOf: Parcel) ifTrue: [parent := parent parent].	head := parent subject == #root ifTrue: [''] ifFalse: [parent subject, (String with: self class parcelSeparator)].	newNode := (AragonTreeNode for: head, newFolder label: newFolder) children: #().	parcels list expand: parent; add: newNode asChildOf: parent.	parcels selection: newNode</body><body>newParcel	| folder aString |	aString := Dialog request: 'Enter a name for the new parcel' initialAnswer: 'New Parcel'.	aString isEmpty ifTrue: [^self].	(folder := parcels selectedNode) isNil 		ifTrue: [folder := parcels list rootNode] 		ifFalse: [selection isString ifFalse: [folder := folder parent]].	self addParcelNamed: aString to: folder.</body><body>removeParcel	| node |	node := parcels selectedNode.	node type == #folder 		ifTrue:			[node hasChildren				ifTrue: 					[Dialog warn: 'Only &lt;c:blue&gt;empty folders&lt;/c&gt; can be removed!' asRichText. 					^self]]		ifFalse:			[(Dialog confirm: 'Do you really want to &lt;c:red&gt;remove&lt;/c&gt; the selected parcel?' asRichText					initialAnswer: false)				ifFalse: [^self].				Parcel destroyParcelNamed: selection name]."	self privateRemove: node."</body><body>renameParcel	| newName node head |	node := parcels selectedNode.	newName := self requestParcelName: 'Rename ' , node type , ' to:' initialAnswer: node displayString.	newName isEmpty ifTrue: [^self].	head := node parent subject == #root ifTrue: [''] ifFalse: [node parent subject , (String with: self class parcelSeparator)].	self rename: node to: head, newName.	selection := node subject.	node displayString: newName.	parcels list changed: #at: with: parcels selectionIndex.</body><body>saveAs	| fname w32 |	fname := self class defaultOutputDirectory construct: (self class parcelFileOf: selection).	w32 := Aragon at: #Win32 ifAbsent: nil.	fname := w32 isNil					ifTrue: [Dialog requestFileName: 'Enter a filename to write the parcel to:' 								default: fname asString]					ifFalse: [w32 saveFilename: fname asString									filters: #(										'Parcel Files'		'*.pcl'										'Boss Files'		'*.bos'										'Source Files'	'*.st'										'All Files'			'*.*'									)].	(fname isNil or: [fname isEmpty]) ifTrue: [^self].	(('*.*' match: fname asFilename tail) not or: ['*.st' match: fname])		ifTrue: [fname := self changeExtensionIn: fname to: '.pcl'].	self saveParcels: (Array with: selection) on: fname.</body><body>saveParcel	self saveParcels: self selectedParcels on: nil.</body><body>unloadParcel	(Dialog confirm: 'Do you really want to uninstall and \remove the selected parcel(s)?' withCRs 			initialAnswer: false)		ifFalse: [^self].	Parcel removeDependent: self.	[(selection isKindOf: Parcel)		ifTrue: [Parcel unloadParcelNamed: selection name]		ifFalse: 			[| pattern |			pattern := selection , '.*'.			Parcel parcels do: [:each | (pattern match: each name)					ifTrue: [Parcel unloadParcelNamed: each name]]]] 	valueNowOrOnUnwindDo: [Parcel addDependent: self].	self privateRemove: parcels selectedNode.</body><body>updateView	parcels list invalidateAndReExpand.	parcels selection: selection.	self selectionChanged.</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>aspects</category><body>parcels	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parcels</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>notify</category><body>noticeOfWindowClose: aWindow	Parcel removeDependent: self.	SoleInstance := nil.	^super noticeOfWindowClose: aWindow</body><body>selectionChanged	selection := self parcels selection.	selection class == Parcel		ifTrue: 			[| info |			info := WriteStream on: String new.			info				nextPutAll: selection definedClasses size printString;				nextPutAll: ' defined, '.			info				nextPutAll: selection extendedClasses size printString;				nextPutAll: ' extended'.			selection isDirty ifTrue: [info nextPutAll: ' (has changes)'].			self showStatus: info contents]		ifFalse: [self showStatus: ''].	builder window displayPendingInvalidation.	self setEnablement</body><body>showHelpFor: aController	self showStatus: (HelpTexts at: aController view container container spec name)</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>private</category><body>changeExtensionIn: aFilename to: ext	| filename |	filename := aFilename asString.	('*.*' match: aFilename asFilename tail) ifTrue: [^(filename copyFrom: 1 to: (filename lastIndexOf: $.)-1), ext].	^filename, ext</body><body>doSnapshot(Dialog confirm: 'The parcel has been republished. You must snapshot to ensure your image is in sync with the new parcel source file. Do you want to snapshot now?') ifTrue: [ObjectMemory saveDialogThenQuit: false]</body><body>enableAll: ids inMenu: aMenu when: aBoolean	ids do: [:each || menuItem | (menuItem := aMenu atNameKey: each) ~~ nil ifTrue: [menuItem enabled: aBoolean]].</body><body>ensurePathTo: aFilename	| directory parts |	directory := aFilename asFilename directory.	parts := OrderedCollection new.	[directory definitelyExists] whileFalse: [parts addFirst: directory tail.  directory := directory directory].	parts do: [:s | (directory := directory construct: s) makeDirectory].</body><body>invalidate: aParcel	| parent |	(parent := self class headOf: aParcel) isEmpty ifTrue: [parent := #root].	parcels list invalidate: parent.</body><body>invalidateAndSelect: anEntry		| path i name |	name := anEntry isNil ifTrue: [''] ifFalse: [anEntry isString ifTrue: [anEntry] ifFalse: [anEntry name]].	path := OrderedCollection with: #root.	i := 0.	[(i := name nextIndexOf: self class parcelSeparator from: i+1 to: name size) ~~ nil]		whileTrue:			[path addLast: (name copyFrom: 1 to: i-1)].	name isEmpty ifFalse: [path addLast: anEntry].	Object errorSignal		handle: [:ex|]		do: [	parcels list invalidate expandPath: path].	parcels selection: anEntry.</body><body>isSourceFile: aFilenameOrString	"This has essentially been copied from SourcFileManager class. 	In the former implementation, files were compared on a string basis only. This had led 	to improper comparisons. E.g. filenames had always been compared in a case sensitive 	way. This is appropriate for UNIX but not for Windows platforms. Also environment variables	would not have been expanded."	| filename names sfm |	CodeWriter fileFormat &gt; 4 ifFalse: [^false].	filename := aFilenameOrString asFilename.	sfm := SourceFileManager default.	(names := sfm allFiles) nonEmptyIndicesDo: 		[:index | (names at: index) asFilename = filename ifTrue: [^index ~= sfm changesIndex]].	^false</body><body>privateRemove: aNode 	aNode parent children size == 1		ifTrue: [self updateView]		ifFalse: [parcels list remove: aNode]</body><body>rename: aNode to: newName 	| head i |	aNode type == #parcel ifTrue: [^aNode subject name: newName].	i := aNode subject size + 1.	head := aNode subject , (String with: self class parcelSeparator) , '*'.	Parcel parcels do: [:each | (head match: each name)			ifTrue: [each name: newName , (each name copyFrom: i to: each name size)]].	aNode allChildNodesDo: [:each | each type == #folder 			ifTrue: [each subject: newName , (each subject copyFrom: i to: each subject size)]].	aNode subject: newName.</body><body>requestParcelName: request initialAnswer: initialAnswer 		[| answer |	answer := Dialog request: request initialAnswer: initialAnswer.	(answer includes: self class parcelSeparator)		ifFalse: [^answer].	Dialog warn: 'Don''t enter a &lt;i&gt;separator (a dot)&lt;/i&gt; within a parcel''s or folder''s final name.If you want to move the parcel or folder, use drag&amp;drop instead.' asRichText.	true] whileTrue</body><body>save: aParcel as: aFilename withSources: aBoolean format: parcelFormat	| parcelFile sourceFile |	parcelFile := aFilename asFilename.	self ensurePathTo: parcelFile.	self class includeMatchingCategoriesInto: aParcel.	sourceFile := aBoolean ifTrue: [self changeExtensionIn: parcelFile to: Parcel sourceExtension].	self saveParcel: aParcel on: parcelFile sources: sourceFile hideOnLoad: false.	^aBoolean and: [self isSourceFile: sourceFile]</body><body>saveParcel: aParcel on: aFilename sources: sourceFilename hideOnLoad: aBoolean 	| republish |	republish := sourceFilename notNil and: [SourceFileManager default isSourceFile: sourceFilename].	Parcel handleCodeReaderSignalsDo: [aParcel			parcelOutOn: aFilename			withSource: sourceFilename			hideOnLoad: aBoolean			republish: republish			backup: false]		for: aFilename asFilename.	republish ifTrue: [aParcel markAsClean]</body><body>saveParcels: aCollection on: aFilename	| includeSources needsSnapshot parcelFormat collection |		parcelFormat := CodeWriter fileFormat.	includeSources := InputState default shiftDown not.	needsSnapshot := false.	aFilename isNil 		ifTrue: 			[| d | 			d := self class defaultOutputDirectory.			collection := aCollection collect: [:each | each -&gt; (d construct: (self class parcelFileOf: each))]]		ifFalse: [collection := aCollection collect: [:each | each -&gt; aFilename]].	Cursor write 		showWhile: 			[collection 				do: [:each | needsSnapshot := needsSnapshot | 						(self							save: each key							as: each value							withSources: includeSources							format: parcelFormat)]].	needsSnapshot ifTrue: [self doSnapshot]</body><body>selectedParcel	^selection isString ifFalse: [selection]</body><body>selectedParcels	^selection isString		ifTrue:			[selection ~~ #root				ifTrue: 					[| pattern | pattern := selection , '.*'.					Parcel parcels select: [:each | pattern match: each name]]				ifFalse: [Parcel parcels]]		ifFalse: [Set with: selection]</body><body>setEnablement	self		enableAll: #(new)		inMenu: (builder menuAt: #parcelMenu)		when: selection class ~~ Parcel &amp; selection notNil.	self		enableAll: #(saveParcel saveAs browseParcel  unloadParcel emptyParcel loadSources)		inMenu: (builder menuAt: #parcelMenu)		when: selection class == Parcel.	self		enableAll: #(removeParcel renameParcel saveParcel  unloadParcel)		inMenu: (builder menuAt: #parcelMenu)		when: selection ~~ nil.</body><body>showStatus: aString	</body><body>submenu: anId	^((builder menuAt: #menuBar) atNameKey: anId) submenu</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>search paths dialog</category><body>addPath	| fname |	fname := self searchPaths selection.	fname isNil ifTrue: [fname := self class defaultInputDirectory].	fname := self requestFileName: fname.	fname notNil ifTrue: [searchPaths list add: fname asFilename].</body><body>editPath	| fname index |	index := searchPaths selectionIndexes detect: [:x | true].	(index between: 1 and: searchPaths list size) ifFalse: [^Screen default ringBell].	fname := self requestFileName: (searchPaths list at: index).	fname notNil ifTrue: [searchPaths list at: index put: fname asString].</body><body>editSearchPaths	searchPaths := MultiSelectionInList with: (Parcel searchPathModel value asList collect: [:each | each asString]).	searchPaths selectionIndexHolder		compute: 			[:m || b | b := Window currentWindow model builder.			(b componentAt: #editPath) 		isEnabled: m size == 1.			(b componentAt: #removePath) 	isEnabled: m isEmpty not.			(b componentAt: #moveUp) 		isEnabled: (m isEmpty not and: [(m includes: 1) not]).			(b componentAt: #moveDown) 	isEnabled: (m isEmpty not and: [(m includes: searchPaths list size) not])].	(self openDialogInterface: #searchPathsSpec) ifTrue: [Parcel setSearchPath: searchPaths list].</body><body>move: d	| index entries |	index := searchPaths selectionIndexes inject: 1000 into: [:min :x | min min: x].	(index + d between: 1 and: searchPaths list size) ifFalse: [^Screen default ringBell].	entries := searchPaths selections.	searchPaths list removeAll: entries.	searchPaths list addAll: entries beforeIndex: index + d.	searchPaths selections: entries</body><body>moveDown	self move: 1</body><body>moveUp	self move: -1</body><body>removePath	searchPaths list removeAll: searchPaths selections.	searchPaths selections isEmpty		ifTrue: [searchPaths selectionIndexes: (Set with: searchPaths list size)]		ifFalse: [searchPaths selectionIndexHolder changed]</body><body>searchPaths	^searchPaths</body><body>setSearchPath: searchPath 	Parcel searchPathModel 		value: ((searchPath isString or: [searchPath isKindOf: Filename])			ifTrue: [List with: searchPath]			ifFalse: [List withAll: searchPath])</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>settings dialog</category><body>editOptions	| dialog indir outdir |	indir := self class defaultInputDirectory asString asValue.	outdir := self class defaultOutputDirectory asString asValue.	dialog := SimpleDialog new.	dialog builder		aspectAt: #defaultInputDirectory put: indir;		aspectAt: #defaultOutputDirectory put: outdir;		actionAt: #browseFile1 put: [| f |			f := Dialog requestDirectory: 'Select a directory' default: indir value.			f isEmpty ifFalse: [indir value: f asFilename asString]];		actionAt: #browseFile2 put: [| f |			f := Dialog requestDirectory: 'Select a directory' default: outdir value.			f isEmpty ifFalse: [outdir value: f asFilename asString]];		yourself.	(dialog openFor: self interface: #settingsSpec) 		ifTrue: 			[self class defaultInputDirectory: indir value.			self class defaultOutputDirectory: outdir value]</body><body>requestFileName: initialAnswer 	| aspect dialog |	aspect := (initialAnswer isNil ifTrue: [''] ifFalse: [initialAnswer asString]) asValue.	dialog := SimpleDialog new.	dialog builder aspectAt: #filename put: aspect.	dialog builder actionAt: #browseFile		put: 			[| fname |			fname := Dialog requestDirectory: 'Select a directory' default: aspect value.			fname isEmpty ifFalse: [aspect value: fname asFilename asString]].	^(dialog openFor: self interface: #fileRequesterSpec)		ifTrue: [aspect value isEmpty ifFalse: [aspect value]]</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>drag&amp;drop</category><body>canDropFrom: aDragContext	^#(parcel category class classOrNamespace protocol selector selectorOrStatic) includes: aDragContext key</body><body>canDropFrom: aDragContext onto: target 	^aDragContext key == #parcel		ifTrue: 			[| source |			source := aDragContext sourceData clientData.			((target subject isKindOf: Parcel)				or: [target == source or: [target == source parent]]) not]		ifFalse: [true]"		ifFalse: [target subject isKindOf: Parcel]"</body><body>dragFrom: aController 	"Drag the currently selected file(s)."	self startDragging: parcels selectedNode from: aController key: #parcel</body><body>dropCategory: info onto: target 	| category parcel s env org |	category := info at: #category ifAbsent: [^#dropEffectNone].	env := info at: #environment ifAbsent: [^#dropEffectNone].	org := env organization.	parcel := target type == #parcel 		ifTrue: [target subject]		ifFalse: [self addParcelNamed: 'Test' to: target. selection].	s := category, '*'.	(org categories select: [:cat | s match: cat])		do: [:cat | (org listAtCategoryNamed: cat)			do: [:key || binding | 				((binding := env bindingFor: key asSymbol) value isKindOf: ExternalDictionary) 					ifFalse: [binding isForClass 						ifTrue: [parcel addEntiretyOfClass: binding value]						ifFalse: [parcel addName: binding key in: env]]]].	^#dropEffectMove</body><body>dropClass: info onto: target 	| aClass parcel |	aClass := info at: #class.	parcel := target type == #parcel 		ifTrue: [target subject]		ifFalse: [self addParcelNamed: aClass name to: target. selection].	parcel addEntiretyOfClass: aClass.	^#dropEffectCopy.</body><body>dropEnterWith: aDragContext 	| widget dictionary |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	widget := (builder componentAt: #parcels) widget.	dictionary := IdentityDictionary new.							"V2 Step 3"	dictionary at: #widget put: widget.							"V2 Step 4"	dictionary at: #targetIndex put: widget targetIndex.			"V2 Step 4"	dictionary at: #hasFocus put: widget hasFocus.				"V2 Step 4"	aDragContext dropTarget clientData: dictionary.			 	"V2 Step 5"	widget hasFocus: true.									"V2 Step 6"	^#dropEffectMove</body><body>dropExitWith: aDragContext 	| widget dictionary |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	dictionary := aDragContext dropTarget clientData.	widget := dictionary at: #widget.	widget targetIndex: (dictionary at: #targetIndex).	widget hasFocus: (dictionary at: #hasFocus).	aDragContext dropTarget clientData: nil.	^#dropEffectNone</body><body>dropOverWith: aDragContext 	| treeView target |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.	target := parcels list nodeAt: treeView targetIndex.	treeView showDropFeedbackIn: aDragContext allowScrolling: true.	(self canDropFrom: aDragContext onto: target) ifFalse: [^#dropEffectNone].	^#dropEffectMove</body><body>dropParcel: source onto: target 	parcels list expand: target.	(parcels list) remove: source; add: source asChildOf: target.	parcels selection: source subject.	self rename: source to: (target subject == #root			ifTrue: ['']			ifFalse: [target subject , (String with: self class parcelSeparator)])			, source displayString.	selection := source subject</body><body>dropProtocol: clientData onto: target 	| aClass protocol selectors |	aClass := clientData at: #class ifAbsent: [^#dropEffectNone].	(clientData at: #meta ifAbsent: [^#dropEffectNone]) == true ifTrue: [aClass := aClass class].	protocol := clientData at: #protocol ifAbsent: [^#dropEffectNone].	selectors := aClass organization listAtCategoryNamed: protocol.	selectors isEmpty ifTrue: [^#dropEffectNone].	target subject addSelectors: selectors forClass: aClass.	^#dropEffectMove.</body><body>dropSelector: clientData onto: target 	| aClass selectors |	aClass := clientData at: #class ifAbsent: [^#dropEffectNone].	selectors := clientData at: #selector ifAbsent: [^#dropEffectNone].	selectors isSymbol ifTrue: [selectors := List with: selectors].	target subject addSelectors: selectors forClass: aClass.	^#dropEffectMove</body><body>dropWith: aDragContext 	| treeView target |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.	target := parcels list nodeAt: treeView targetIndex.	^(self canDropFrom: aDragContext onto: target)		ifTrue: 			[| source |			source := aDragContext sourceData clientData.			self				perform: (DropHandlers at: aDragContext key)				with: source				with: target]		ifFalse: [self dropExitWith: aDragContext]</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>updating</category><body>update: anAspectSymbol with: aParameter from: aSender 	#parcels == anAspectSymbol ifTrue: [self ~~ aSender ifTrue: [^self updateView]].	#clearUndoState == anAspectSymbol ifTrue: [self ~~ aSender ifTrue: [^self updateView]].	^super		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>class initialization</category><body>initialize	"self initialize"	DefaultPaths := Array new: 2.	HelpTexts := IdentityDictionary new		at: #browseParcel	put: 'Browse selected parcel';		at: #inspectParcel	put: 'Inspect selected parcel';		at: #loadParcel		put: 'Load a parcel from disk';		at: #saveParcel		put: 'Save selected parcel(s) in default location';	yourself.	DropHandlers := IdentityDictionary new		at: #parcel		put: #dropParcel:onto:;		at: #category		put: #dropCategory:onto:;		at: #class		put: #dropClass:onto:;		at: #protocol		put: #dropProtocol:onto:;		at: #selector		put: #dropSelector:onto:;		at: #selectorOrStatic		put: #dropSelector:onto:;	yourself.</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>resources</category><body>browseIcon	^OpaqueImage figure: self browseImage shape: self browseShape</body><body>folderIcon	^AragonIcon named: #folder2 color: ColorValue royalBlue asHiliteColor</body><body>inspectIcon	^OpaqueImage figure: self inspectImage shape: self inspectShape</body><body>menuBar	^self inSiena		ifTrue: [self menuBar30]		ifFalse: [self menuBar25]</body><body>openIcon	^OpaqueImage figure: self openImage shape: self openShape</body><body>parcelIcon	^AragonIcon named: #package color: #paleRed</body><body>parcelMenu	^self inSiena		ifTrue: [self parcelMenu30]		ifFalse: [self parcelMenu25]</body><body>saveIcon	^OpaqueImage figure: self saveImage shape: self saveShape</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>constants</category><body>defaultInputDirectory	| answer |	(answer := DefaultPaths first) isNil ifTrue: [answer := Parcel searchPathModel value first].	^answer asFilename</body><body>defaultInputDirectory: aStringOrFilename	DefaultPaths at: 1 put: aStringOrFilename</body><body>defaultOutputDirectory	| answer |	(answer := DefaultPaths last) isNil ifTrue: [answer := self defaultInputDirectory].	^answer asFilename</body><body>defaultOutputDirectory: aStringOrFilename	DefaultPaths at: 2 put: aStringOrFilename</body><body>inSiena	^CodeWriter fileFormat &gt; 4.</body><body>parcelSeparator	^$.</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>enhanced - resource accessing</category><body>applicationName	^'Parcel Browser'</body><body>defaultIconName	^'@install.gif'</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>utils</category><body>addChangesFrom: changeSet1 to: changeSet2 accordingTo: aParcel 	| classChanges methodChanges |	classChanges := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classChanges').	methodChanges := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'methodChanges').	aParcel definedClasses do: [:each | (Array with: each with: each class)			do: 				[:class | 				| changes |				(changes := classChanges at: class fullName ifAbsent: [nil]) notNil 					ifTrue: [changes do: [:ct | changeSet2 atClass: class add: ct]].				(changes := methodChanges at: class fullName ifAbsent: [nil]) notNil 					ifTrue: [changes keysAndValuesDo: [:selector :ct | changeSet2							perform: (ct , 'Selector:class:') asSymbol							with: selector							with: class]]]].		methodChanges copy		keysAndValuesDo: 			[:className :changes || class selectors | 			selectors := aParcel selectorsAt: (class := changeSet1 classNamed: className).			selectors isEmpty ifFalse:					[changes						keysAndValuesDo: [:selector :ct | (selectors includes: selector) 							ifTrue: 								[changeSet2									perform: (ct , 'Selector:class:') asSymbol									with: selector									with: class]]]].</body><body>changesOf: aParcel	| answer |	answer := ChangeSet new.	self addChangesFrom: ChangeSet current to: answer accordingTo: aParcel.	^answer</body><body>hasSources: aParcel	| cl |	CodeWriter fileFormat &gt; 4 ifTrue: [^true].	aParcel isEmpty ifTrue: [^true].	aParcel definedClasses isEmpty		ifFalse: 			[cl := aParcel definedClasses detect: [:c | c selectors isEmpty not or: [c class selectors isEmpty not]] ifNone: [^false].			cl selectors isEmpty ifTrue: [cl := cl class].			^(cl compiledMethodAt: cl selectors asArray first) sourcePointer notNil].	(cl := aParcel extensionMethods) isEmpty ifFalse: [^cl asArray first sourcePointer notNil].	^true</body><body>headOf: aParcel	| s index |	s := aParcel name.	index := s lastIndexOf: self parcelSeparator.	^index ~~ 0 ifTrue: [s copyFrom: 1 to: index-1] ifFalse: [^''].</body><body>includeMatchingCategoriesInto: aParcel	| pattern |	pattern := aParcel name , (String with: self parcelSeparator with: $*).	(aParcel definedClasses collect: [:each | each environment]) asSet		do: 			[:nameSpace | 			| organizer categories classes |			organizer := nameSpace organization.			categories := organizer categories select: [:each | each asSymbol = aParcel name asSymbol or: [pattern match: each]].			classes := Set new.			categories do: [:each | classes addAll: ((organizer listAtCategoryNamed: each)						collect: [:cn | nameSpace at: cn asSymbol])].			aParcel addClassesAndAllSelectors: classes.			aParcel addClassesAndAllSelectors: aParcel definedClasses]</body><body>parcelFileOf: aParcel	| baseName |	baseName := Filename filterFilename: aParcel name.	baseName isString ifFalse:		[baseName := (Filename fromComponents: baseName) asString].	^baseName, Parcel fileExtension</body><body>pathOf: aParcel	^aParcel name tokensBasedOn: self parcelSeparator</body><body>sourceFileOf: aParcel	| baseName |	baseName := Filename filterFilename: aParcel name.	baseName isString ifFalse:		[baseName := (Filename fromComponents: baseName) asString].	^baseName, Parcel sourceExtension</body><body>tailOf: aParcel	| s index |	s := aParcel name.	index := s lastIndexOf: self parcelSeparator.	^index ~~ 0 ifTrue: [s copyFrom: index+1 to: s size] ifFalse: [^s].</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>initialize</category><body>initializeForClassHierarchy: aClass	^self initializeForAllNameSpaces</body><body>initializeForMethodsLabel: labelString list: aCollection initialSelection: selector	tabApplication isNil 		ifTrue: [self tabApplication: (TabApplication basicNewOnBrowser: self)].	super tabApplication initializeForMethodsLabel: labelString list: aCollection initialSelection: selector.	aCollection size = 1		ifTrue: 			[self components first forceSelection: aCollection first.			self updateLists].</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>interface opening</category><body>finallyOpen	^self finallyOpenIn: nil withType: #normal</body><body>finallyOpenIn: displayBox withType: aSymbol	self setIcon.	^super finallyOpenIn: self initialWindowPosition withType: aSymbol</body><body>postBuildWith: aBuilder 	| w modules |	super postBuildWith: aBuilder.	(w := builder componentAt: #parcelPane) notNil 		ifTrue: [w beInvisible]. 	(aBuilder == self builder and: [Aragon includesKey: #WindowResizeCorner])		ifTrue: [builder add: ((Aragon at: #WindowResizeCornerSpec) new isOpaque: false)].	#(toolsMenu fileSaveAll) 		do: [:each | (w := aBuilder componentAt: each) notNil 			ifTrue: [w widget controller fireOnDown: true]].	modules := self components.	modules size &gt; 2 		ifTrue: [((modules at: 3) builder componentAt: #metaInstance) notNil 			ifTrue: 				[self meta onChangeSend: #metaChanged to: self.				self metaChanged]].</body><body>postOpenWith: aBuilder 	| leftPane |	(leftPane := aBuilder componentAt: #hierarchyBrowser) notNil		ifTrue: 			[| resizer |			self hierarchyBrowser.			resizer := builder componentAt: #verticalResizer.			resizer widget moveBy: LeftPaneWidth - leftPane bounds width @ 0].	parcelBrowser notNil ifTrue: [parcelBrowser postOpenWith: aBuilder]. 	^super postOpenWith: aBuilder</body><body>preBuildWith: aBuilder 	| v |	super preBuildWith: aBuilder.	self tabApplication delegate notNil		ifTrue: 			[aBuilder aspectAt: #showOnlyParceled put: (v := false asValue).			v onChangeSend: #toggleParceled to: self]</body><body>specificationFor: aSymbol	"Why in hell is this overiden in FullSystemBrowser?!?"		^(self respondsTo: aSymbol) 		ifTrue: [super specificationFor: aSymbol]		ifFalse: [self application specificationFor: aSymbol]</body><body>windowIcon	| color |	color := #(green red green royalBlue magenta) at: self components size.	^(AragonIcon named: #folder1 color: color) asIcon</body><body>windowLabel	| answer |	self isMethodEditor		ifTrue: [^'  ', self components last selection displayString].	(answer := super windowLabel) = 'System Browser on Smalltalk'		ifTrue: 			[^'  Smalltalk Aragon/5 - [' , ObjectMemory imagePrefix asFilename tail, ']'].	^answer</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>components</category><body>allCategoriesComponent	^SimpleBrowserModule new		helpers: (Array with: (ParcelNameSpaceOrganizerBrowserHelper new searchChildNamespaces: true) ).</body><body>allClassesComponent	^SimpleBrowserModule new 		helperType: ParcelNameSpaceGlobalCategoryBrowserHelper;		yourself</body><body>categoriesComponent	^SimpleBrowserModule new		helperType: ParcelNameSpaceOrganizerBrowserHelper.</body><body>classesComponent	^SimpleBrowserModule new 		helperType: ParcelNameSpaceCategoryBrowserHelper</body><body>classvarMenu	^nil</body><body>instvarMenu	^nil</body><body>menuBar	| menuBar mi |	menuBar := super menuBar.		"Add the close window menu item...""	menu := menuBar menuItems first submenu.	menu menuItems isEmpty ifFalse: [menu addLine].	menu addItem: (self class menuBarStuff atNameKey: #exit)."	"Add icon to file out item..."	menuBar menuItems 		do: [:m | (mi := m submenu atNameKey: #fileOut) notNil 				ifTrue: [mi labelImage: (AragonIcon named: #fileSave)]].	(mi := menuBar menuItemLabeled: 'Class' ifNone: []) notNil 		ifTrue: [mi accessCharacterPosition: 2].	menuBar menuItems 		do: [:m | (mi := m submenu atNameKey: #findClass) notNil 				ifTrue: [m submenu removeItem: mi]].	^menuBar</body><body>namespaceMenu	^nil</body><body>protocolsComponent	| answer |	answer := SimpleBrowserModule new 		specName: #listSpecProtocols;		helperType: ParcelProtocolBrowserHelper;		yourself.	answer list selectionIndexHolder onChangeSend: #protocolChanged to: self.	^answer</body><body>selectorsComponent	| answer |	answer := SimpleBrowserModule new		helperType: ParcelSelectorBrowserHelper;		yourself.	answer list selectionIndexHolder onChangeSend: #selectorChanged to: self.	^answer</body><body>textMenu 	^self class textMenu</body><body>toolBar	^super toolBar</body><body>viewMenu	| menu |	menu := super viewMenu.	menu menuItems isEmpty ifFalse: [menu addLine].	menu addItem: (self class menuBarStuff atNameKey: #refreshView).	^menu</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>accessing</category><body>classBrowserIsShown	^(builder componentAt: #verticalResizer) bounds left &gt; 24</body><body>hierarchyBrowser	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	hierarchyBrowser isNil		ifTrue:			[(hierarchyBrowser := ClassHierarchyBrowser new) hierarchy selectionIndexHolder 				onChangeSend: #nodeChanged to: self.			hierarchyBrowser delegate: self].	^hierarchyBrowser</body><body>history	^self hierarchyBrowser history</body><body>isMethodEditor	^self components size == 1 and: [self components last hasList not]</body><body>parcelBrowser	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	parcelBrowser isNil		ifTrue:			[(parcelBrowser := ParcelBrowser new) parcels selectionIndexHolder 				onChangeSend: #parcelChanged to: self.			"parcelBrowser delegate: self"].	^parcelBrowser</body><body>selectedCategory	^self selectedCategoryFor: #default.</body><body>selectedClass	^self selectedClassOrNameSpaceFor: #default."	| answer |	(self components size &gt; 1) ifFalse: [^nil].	answer := (self components at: 2) selection.	^meta value == #class ifTrue: [answer class] ifFalse: [answer]"</body><body>selectedMethod	| m cls |	(m := self components last selection) isNil ifTrue: [^nil].	m class == MethodDefinition ifTrue: [^m].	^(cls := self selectedClass) notNil ifTrue: [MethodDefinition class: cls selector: m]</body><body>selectedNode	^hierarchyBrowser notNil 		ifTrue: [hierarchyBrowser hierarchy selectedNode]</body><body>selectedNonMetaClass	^(self components at: 2) selection.</body><body>selectedParcel	^self selected: #parcel for: #default."	| answer |	(self components size &gt; 1) ifFalse: [^nil].	answer := (self components at: 2) selection.	^meta value == #class ifTrue: [answer class] ifFalse: [answer]"</body><body>selectedProtocol	^self selectedProtocolFor: #default.</body><body>showOnlyParceled	^(builder aspectAt: #showOnlyParceled) value</body><body>spawningBrowser	^self class new</body><body>status	^(builder componentAt: #status) widget label text</body><body>status: aText 	| w |	(w := builder componentAt: #status) notNil		ifTrue: 			[w widget label text: aText.			w invalidate]</body><body>tree	^self hierarchyBrowser hierarchy list</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>actions</category><body>browseImplementors	| s |	(s := self selectedSymbol) isNil		ifFalse: [AragonStuff browseImplementorsOf: s asSymbol].</body><body>browseReferences	| s |	(s := self selectedSymbol) isNil		ifFalse: [AragonStuff browseReferencesTo: s asSymbol].</body><body>browseSelection 	| module |	module := self components reverse detect: [:c | c selection notNil] ifNone: [^self].	module selection isBehavior ifTrue: [^module browseClassReferences].	AragonStuff browse: module selection displayString inContext: nil.</body><body>browseSymbol	| s |	(s := self selectedSymbol) isNil ifTrue: [^Screen default ringBell].	s = self selectedClass displayString		ifTrue: [self browseSelection]		ifFalse: [AragonStuff browse: s inContext: self selectedClass].</body><body>editCopy	self selectedMethod notNil ifTrue:  [self copyMethod] ifFalse: [	self selectedProtocol notNil ifTrue: [self copyProtocol] 	ifFalse: [^self]].		self setEnablement</body><body>editRemove	self components reverseDo: [:each | each selections isEmpty ifFalse: [^each remove]].</body><body>editResource	^self tabApplication components last openResourceEditor</body><body>fileOpen	| file |	file := Win32 openFilename: '*.st' title: 'Choose a file to file-in...' filters: #(		'Changes File' '*.cha'		'Smalltalk File Out' '*.st' 		'Parcel Sources' '*.pst' 		'All Files' '*.*'	) for: builder window.	(file isNil or: [file isEmpty]) ifFalse: [file asFilename fileIn].</body><body>filePrint	self components 		reverseDo: [:each | each selections isEmpty ifFalse: [^each hardcopy]].</body><body>fileSave	self components 		reverseDo: [:each | each selections isEmpty ifFalse: [^each fileOut]].</body><body>fileSaveAll	self systemSaveImage</body><body>openApplication	| cls md |	cls := self selectedNonMetaClass.	((md := self selectedMethod) notNil and: [md method resourceType == #canvas])		ifTrue: [^cls openWithSpec: md selector].	cls open</body><body>promptAndBrowseClass	SmalltalkWorkbench chooseAndBrowseClassFrom: builder window</body><body>promptAndBrowseImplementors	| trial |	trial := Dialog 				request: 'Browse implementors of what?'				for: builder window.	trial isEmpty ifTrue: [^self].	AragonStuff browseImplementorsOf: trial</body><body>promptAndBrowseReferences	| trial |	trial := Dialog 				request: 'Browse references to what?'				for: builder window.	trial isEmpty ifTrue: [^self].	AragonStuff browseReferencesTo: trial</body><body>promptAndBrowseSymbol	| trial |	trial := Dialog 				request: 'Browse definition/usages of what?'				for: builder window.	trial isEmpty ifTrue: [^self].	AragonStuff browse: trial inContext: nil</body><body>spawnParcelBrowser	NewParcelBrowser open.	self toggleShowParcelBrowser</body><body>spawnSelection	self components 		reverseDo: [:module | module selection notNil 			ifTrue: 				[^module selection isBehavior 					ifTrue: [module spawnHierarchy]					ifFalse: [module spawn]]].	self class open</body><body>systemCollectAllGarbage	ObjectMemory verboseGlobalCompactingGC</body><body>systemCollectGarbage	ObjectMemory verboseCompactingGC</body><body>systemExit	ObjectMemory quitDialog</body><body>systemPermSaveImage	ObjectMemory permSaveDialogThenQuit: false.</body><body>systemPermUndoImage	ObjectMemory permUndoDialogThenQuit: false.</body><body>systemSaveImage	ObjectMemory saveDialogThenQuit: false.</body><body>systemSettings	UISettings open</body><body>toggleShowClassBrowser	self classBrowserIsShown 		ifTrue: [self fadeOutClassBrowser]		ifFalse: [self fadeInClassBrowser]</body><body>toggleShowParcelBrowser	| w offset rp |	(w := builder componentAt: #parcelPane) isNil ifTrue: [^self].	offset := w isVisible 		ifTrue: 			[w beInvisible. 			RightPaneWidth := w bounds width.			0]		ifFalse: 			[w beVisible. 			RightPaneWidth].				(rp := builder componentAt: #rightPane) isNil ifTrue: [^self].	rp layout rightOffset: -18 - offset.	rp container		layoutComponentsForBounds: rp container bounds.	rp container invalidate.</body><body>toolsAragonExamples	AragonExamplesBrowser open</body><body>toolsCanvas	UIPainter new openNewWindowCanvas</body><body>toolsChangeSet	ChangeSetBrowser open</body><body>toolsDataModeler	| panGen sc cl |	cl := #{LensApplicationSpecEditor} valueOrDo: [^self].	sc := #{LensApplicationSpec} valueOrDo: [^self].	panGen := cl new.	panGen spec: sc new.	panGen open</body><body>toolsFileBrowser	NewFileBrowser open</body><body>toolsFonts	FontPanel open</body><body>toolsHelp	self displayHelp</body><body>toolsLauncher	VisualLauncher open</body><body>toolsLoadParcel	Parcel loadParcelByNameFor: self</body><body>toolsMenu	| choice |	choice := self class toolsMenu startUp.	choice isSymbol ifTrue: [self perform: choice].</body><body>toolsNameSpaces	FullNotebookSystemBrowser openNormal</body><body>toolsParcelBrowser	NewParcelBrowser open</body><body>toolsWorkspace	TextEditor open</body><body>updateLists	hierarchyBrowser notNil ifTrue: [hierarchyBrowser refreshDisplay].	super updateLists.</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>events</category><body>doubleClickSelector	InputState default ctrlDown ifTrue: [^self editResource].	^self spawnMethod</body><body>keyPress: aKeyboardEvent 	aKeyboardEvent keyValue == Character del ifTrue: [self editRemove. ^nil].	aKeyboardEvent keyValue == Character cr ifTrue: [self spawnSelection. ^nil].	^aKeyboardEvent</body><body>metaChanged	| symbol |	symbol := (		#meta, 		(String with: meta value first asUppercase), 		(meta value copyFrom: 2 to: meta value size)	) asSymbol.	#(metaInstance metaClass metaData) 		do: [:s || w | w := ((self components at: 3) builder componentAt: s) widget.			w label text emphasizeAllWith: (s == symbol ifTrue: [#bold] ifFalse: [#regular]).			w invalidate]</body><body>nodeChanged	| node |	(node := hierarchyBrowser hierarchy selectedNode) isNil		ifTrue: 			[self components first deselect.			(self components at: 2) deselect]		ifFalse: 			[node type == #category 				ifTrue: 					[(self components at: 1) selection: node subject.					(self components at: 2) deselect] 				ifFalse: [			node type == #class				ifTrue: [self setClass: node subject withMeta: false]  ifFalse: [			node type == #classvar				ifTrue:					[self setClass: node subject value withMeta: false.					meta value: #data.					(self components at: 3) selection: (node subject value localBindingFor: node subject key) category.					(self components at: 4) selection: node subject key] 				ifFalse: [			node type == #protocol				ifTrue:					[self setClass: node subject value.					(self components at: 3) selection: node subject key] 				ifFalse: [			node type == #method				ifTrue:					[self setClass: node subject value.					(self components at: 3) selection: node parent subject key.					(self components at: 4) selection: node subject key]					]]]]].	self setEnablement.	self updateStatus.	self updatePopupMenu.</body><body>noticeOfWindowClose: aWindow 	(builder notNil and: [aWindow == builder window and: [aWindow isCollapsed not]])		ifTrue: [self rememberWindowPosition].	hierarchyBrowser notNil 		ifTrue: [hierarchyBrowser noticeOfWindowClose: aWindow]."	CopyBuffer := nil"	^super noticeOfWindowClose: aWindow.</body><body>onDispatch: selector with: arg from: aModule	| tree |	hierarchyBrowser isNil ifTrue: [^self].	tree := hierarchyBrowser hierarchy."	aModule currentHelper defaultAttribute == #classOrNameSpace"	(selector == #remove and: [aModule selections isEmpty])		ifTrue: [(self components indexOf: aModule) &lt; 3 			ifTrue: [tree removeSelectedNode]			ifFalse: ["tree invalidateParentNode"]].</body><body>parcelChanged	self setSelection: #parcel for: #default to: self parcelBrowser selectedParcel.	self setupFilters.	self updateLists</body><body>protocolChanged	builder isNil ifTrue: [^self].	self setEnablement.	self updateStatus.</body><body>selectorChanged	builder isNil ifTrue: [^self].	self setEnablement.	self updateStatus.</body><body>textAccepted: textController	| former cls tree |	hierarchyBrowser isNil ifTrue: [	^super textAccepted: textController].	former := self selectedClass.	super textAccepted: textController.	(cls := self selectedClass) isNil ifTrue: [^self].	cls == former		ifTrue: ["Nothing happened to the class" ^self].	"A new class was added..."	tree := hierarchyBrowser hierarchy.	tree list add: (hierarchyBrowser nodeForClass: cls) asChildOf: tree selectedNode parent.	tree selection: cls.</body><body>toggleParceled	self setupFilters.	self tabApplication delegate toggleParceled.</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>drag &amp; drop</category><body>dropCategory: source onto: targetNode 	"This will change the source category's name along 	with all subcategories."	| delimiter i newName sourceNode env |	(#(category namespace) includes: targetNode type) ifFalse: [^false].	sourceNode := source at: #node.	env := source at: #environment.	(targetNode subject == env or: [(hierarchyBrowser environmentFor: targetNode) == env])		ifFalse: 			[Dialog warn: 'Moving a Category into another NameSpace is currently not supported'. 			^false].	delimiter := 		(i := self indexOfDelimiterIn: targetNode subject) &gt; 0 ifTrue: [targetNode subject at: i] ifFalse: [		(i := self indexOfDelimiterIn: sourceNode subject) &gt; 0 ifTrue: [sourceNode subject at: i] 		ifFalse: [$.]].	newName := 		((targetNode type == #category) ifTrue: [targetNode subject, (String with: delimiter)] ifFalse: ['']), 		sourceNode displayString.	self renameCategory: sourceNode subject to: newName with: delimiter within: env.	sourceNode subject: newName asSymbol.	^true</body><body>dropClass: source onto: targetNode 	| cls |	cls := source at: #class.	(hierarchyBrowser environmentFor: targetNode) == cls environment		ifFalse: 			[Dialog warn: 'Moving a Class into another NameSpace is currently not supported'. 			^false].	self moveClass: cls intoCategory: targetNode subject.	self setClass: cls.	 ^true</body><body>moveClass: aClass intoCategory: aCategorySymbol 	| env |	Transcript show: 		'Moving ' , aClass name asString , ' from ''' , aClass category asString , 		''' to ''' , aCategorySymbol asString , ''''; cr.	env := aClass environment.	env organization classify: aClass name under: aCategorySymbol.	ChangeSet current changeClass: (env at: aClass name).</body><body>renameCategory: oldName to: newName with: delimiter within: environment 	| org pattern s i1 rename |	org := environment organization.	Transcript cr; show: 'Renaming categories...'; cr; cr.	rename := 		[:old :new |		Transcript show: old, ' -&gt; ', new; cr.		org renameCategory: old to: new].	rename value: oldName value: newName.	pattern := oldName, (String with: delimiter), '*'.	s := newName, (String with: delimiter).	i1 := pattern size.	org categories do: [:cat | (pattern match: cat) 		ifTrue: [rename value: cat value: s, (cat copyFrom: i1 to: cat size)]]</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>spawning</category><body>spawnForMethodsLabel: aLabel list: list initialSelection: selection	self class initializeForMethodsLabel: aLabel list: list initialSelection: selection with: TabApplication</body><body>spawnOnClass: aClass	self class openOnClass: aClass</body><body>spawnOnClass: aClass protocol: aSelection	self class openOnClass: aClass with: TabApplication protocol: aSelection"	| browser |	browser := self spawnOnClass: aClass.	browser selectProtocol: aSelection"</body><body>spawnOnClassHierarchy: aClass 	^self class openOnClassHierarchy: aClass</body><body>spawnOnNameSpaces: aNamespace category: aCategory	self class		openOnNameSpace: aNamespace		with: TabApplication		on: aCategory</body></methods><methods><class-id>Aragon.SystemBrowser</class-id> <category>private</category><body>activateListMenuAt: aComponentIndex	| module |	module := self components at: aComponentIndex.	hierarchyBrowser menu value: (module getListMenu: false).	(hierarchyBrowser builder componentAt: #hierarchy) widget controller performer: module</body><body>defaultLeftPaneWidth	| spec layout |	spec := self class interfaceSpecFor: #windowSpec4.	layout := (spec componentSpec collection detect: [:one | one name = #hierarchyBrowser]) layout.	^layout rightOffset - layout leftOffset"	^(layout rightOffset - layout leftOffset) -&gt; (layout rightFraction - layout leftFraction)"</body><body>enable: aWidget when: aBoolean	| w |	(w := builder componentAt: aWidget) isNil ifTrue: [^self].	w isEnabled: aBoolean</body><body>fadeInClassBrowser	| resizer |	LeftPaneWidth &lt; 100 		ifTrue: [LeftPaneWidth := self defaultLeftPaneWidth].	resizer := builder componentAt: #verticalResizer.	resizer widget moveBy: LeftPaneWidth @ 0</body><body>fadeOutClassBrowser	| resizer |	LeftPaneWidth := (builder componentAt: #hierarchyBrowser) bounds width.	resizer := builder componentAt: #verticalResizer.	resizer widget moveBy: LeftPaneWidth negated@0.</body><body>indexOfDelimiterIn: aCategory	| i |	aCategory isSymbol ifFalse: [^0].	(i := aCategory lastIndexOf: $.) &gt; 0 ifTrue: [^i].	(i := aCategory lastIndexOf: $-) &gt; 0 ifTrue: [^i].	^0</body><body>initialWindowPosition	| answer bw |	bw := builder window.	answer := WindowPositions at: self components size ifAbsent: [bw displayBox].	self isMethodEditor		ifTrue: 			[| extent |			extent := self text value asComposedText preferredBounds extent.			answer := answer origin extent: (40 @ 64 + extent max: bw minimumSize)]		ifFalse: [WindowPositions add: self -&gt; #textMode].	^answer</body><body>isResourceMethod: aMethodDefinition 	| m |	^(aMethodDefinition notNil and: [(m := aMethodDefinition method) notNil])		ifTrue: [self class resourceTypes includes: m resourceType]		ifFalse: [false]</body><body>rememberWindowPosition	| leftPane |	(leftPane := builder componentAt: #hierarchyBrowser) notNil 		ifTrue: [LeftPaneWidth := leftPane bounds width].	WindowPositions removeKey: self ifAbsent: [^self].	WindowPositions add: self components size -&gt; builder window displayBox.</body><body>selectedSymbol	| s |	(s := self selectionInEditor) isNil		ifTrue: 			[| module |			module := self components reverse detect: [:c | c selection notNil] ifNone: [^nil].			s := module selection displayString].	^s</body><body>selectionInEditor	| editor s |	editor := (builder componentAt: #text) widget controller.	editor view hasFocus ifFalse: [^nil].	s := editor selection string.	s isEmpty		ifTrue: 			[| w |			w := editor selectWord: editor selectionStopIndex.			s := editor text string copyFrom: w first to: w last-1].	^s</body><body>setClass: aClass 	^self setClass: aClass withMeta: true</body><body>setClass: aClass withMeta: aBoolean	| cls |	aBoolean 		ifTrue: 			[(cls := aClass) isMeta				ifTrue: 					[cls := cls soleInstance.					self metaOn]				ifFalse: [self metaOff]]		ifFalse: [(cls := aClass) isMeta ifTrue: [cls := cls soleInstance]].	self selectedCategory ~~ cls category 		ifTrue: 			[| m | m := (self components at: 2) nextModule.			(self components at: 1) selection: cls category.			(self components at: 2) nextModule: m].	(self components at: 2) selection: cls.	^cls</body><body>setEnablement		| method node hasMethods hasSelection |	builder == nil ifTrue: [^self].	hasSelection := hierarchyBrowser isNil 		ifTrue: [self components inject: false into: [:s :c | c selections isEmpty not]]		ifFalse: [(node := self selectedNode) notNil].	hasMethods := self components last selections isEmpty not.	#(fileSave filePrint editRemove) do: [:each | self enable: each when: hasSelection].	#(editCut editCopy) do: [:each | self enable: each when: hasMethods].	self enable: #editOpen when: (node notNil and: [node type == #class and: [hierarchyBrowser isApp: node subject]]).	method := self selectedMethod.	self enable: #editResource when: (self isResourceMethod: method)."	self enable: #editPaste when: (CopyBuffer notNil and: [protocolList selection notNil])."</body><body>setIcon	(Icon respondsTo: #figure:shape:)		ifTrue: [builder window icon: self windowIcon]</body><body>setupFilters	| doFilter p classes namespaces categories |	doFilter := self showOnlyParceled and: [(p := self selectedParcel) notNil].	doFilter 		ifTrue: 			[classes := (p changedClasses collect: [:c | c instanceBehavior]) asSet.			namespaces := (classes collect: [:c | c environment]) asSet.			categories := Set new 				addAll: (namespaces collect: [:each | each category]);				addAll: (classes collect: [:each | each category]);			yourself.			hierarchyBrowser filters				add: #namespace -&gt; [:x | namespaces includes: x];				add: #category -&gt; [:x | categories includes: x];				add: #class -&gt; [:x | classes includes: x];				add: #protocol -&gt; [:x | false];			yourself]		ifFalse: [hierarchyBrowser resetFilters].	^doFilter</body><body>updatePopupMenu	| menu node |	hierarchyBrowser isNil ifTrue: [^self].	menu := hierarchyBrowser menu.	(node := self selectedNode) isNil ifTrue: [^menu value: nil].	node type == #category ifTrue: [^self activateListMenuAt: 1].	node type == #class ifTrue: [^self activateListMenuAt: 2].	node type == #protocol ifTrue: [^self activateListMenuAt: 3].	node type == #method ifTrue: [^self activateListMenuAt: 4].	node type == #instvar ifTrue: [^menu value: self instvarMenu].	node type == #classvar ifTrue: [^menu value: self classvarMenu].	node type == #namespace ifTrue: [^menu value: self namespaceMenu].	menu value: nil.</body><body>updateStatus	| cls start pcl |	self components size == 1 		ifTrue: [^self status: self components first selection displayString].	(cls := self selectedClass) isNil ifTrue: [^self status: '(Nothing selected)'].	start := self components size &lt; 4 ifTrue: [cls displayString] ifFalse: [''].	(pcl := self selectedParcel) notNil ifTrue: [start := '[', pcl displayString, ']', start].	self status: (self components inject: start into: 		[:s :each | s, ' &gt; ', (each selections size &gt; 1 			ifTrue: ['(many)'] 			ifFalse: [each selection displayString])]).</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>class initialization</category><body>hookUp	AragonStuff hookup: self for: #TabApplicationSystemBrowser.	UISettings preferenceFor: #browserType put: self fullName. </body><body>initialize	"self initialize"	Fonts install: #(Helvetica regular 14) as: #'AragonBrowser.Small'.	WindowPositions := IdentityDictionary new.	self hookUp</body><body>isHookedUp	^AragonStuff isHookedUp: self</body><body>unhook	AragonStuff unhook: self.</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>application configuration</category><body>allButOpenOnClass: aClass	^self openOnClass: aClass with: TabApplication</body><body>openOnAllNameSpaces		"self openOnAllNameSpaces"	^self initializeForNamespacesWith:  TabApplication.</body><body>openOnClass: aClass	^self openWith: [:browser | 		browser hierarchyBrowser jumpToClass: aClass.		browser fadeOutClassBrowser]</body><body>openOnClassHierarchy: aClass 	^self openWith: [:browser | 		browser hierarchyBrowser showInheritanceFor: aClass.		browser fadeInClassBrowser]</body><body>openWith: aBlock	| browser |	(browser := self new) 		tabApplication: (TabApplication basicNewOnBrowser: browser); 		initializeForAllNameSpaces;		yourself.	browser allButOpenInterface: #windowSpec4.	aBlock value: browser.	browser finallyOpen.	^browser builder</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>interface opening</category><body>newOnClass: aClass	^self openOnClassHierarchy: aClass</body><body>open	^self openOnAllNameSpaces</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>resources</category><body>classIcon	^ClassHierarchyBrowser classIcon</body><body>verticalLabelFrom: aString	| label gc |	label := AcceleratedLabel with: aString attributes: (Fonts styleFrom: #(Helvetica italic 15)).	gc := ScreenGraphicsContext on: (Mask extent: label width @ label height).	label displayOn: gc.	^CachedImage on: (gc medium asImage rotatedByQuadrants: -1)</body><body>visualFor: aKey 	aKey isNil ifTrue: [^nil].	^('|*' match: aKey)		ifTrue: [self verticalLabelFrom: (aKey copyFrom: 2 to: aKey size)]		ifFalse: 			[| answer |			(answer := super visualFor: aKey) isNil				ifTrue: [ToolbarIconLibrary visualFor: aKey]				ifFalse: [answer]]</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>accessing</category><body>listBrowserClass	^self</body><body>resourceTypes	^#(canvas image menu dataModel query)</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>old</category><body>showCategoriesIcon	^OpaqueImage figure: self showCategoriesImage shape: self showCategoriesShape</body><body>showHierarchyIcon	^OpaqueImage figure: self showHierarchyImage shape: self showHierarchyShape</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>initialize-release</category><body>initialize	examples := SelectionInTree with: TreeAdaptor new.	examples selectionIndexHolder onChangeSend: #selectionChanged to: self.	alreadyShown := List new.	(Aragon includesKey: #Win95LookPolicy) ifTrue: [self showExamples: #'New Look Policies'].	(Aragon includesKey: #TreeView) ifTrue: [self showExamples: #'Samples'].	(Aragon includesKey: #TreeView) ifTrue: [self showExamples: #'Toys'].</body><body>showExamples: aSymbol	| someExamples roots rnode |	(alreadyShown includes: aSymbol) ifTrue: [^self].	alreadyShown add: aSymbol.	someExamples := Examples at: aSymbol.	(roots := examples list roots) isNil ifTrue: [roots := List new].	rnode := aSymbol asIdentityTreeNode.	rnode children: (someExamples collect: 			 [:each | each isSymbol				ifTrue: [each asTreeNode isLeaf: true]				ifFalse: 					[| node |					node := each first asTreeNode.					node children: (each last collect: [:e | e asTreeNode isLeaf: true]).					node]]).	roots add: rnode.	examples list roots: roots.	(builder notNil and: [builder window isOpen]) ifTrue: [examples list changed: #value].</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>interface opening</category><body>postBuildWith: aBuilder	| label |	self selectionChanged.	(label := aBuilder componentAt: #explanation) notNil 		ifTrue: 			[label widget textStyle: (Fonts styleFrom: #(Helvetica italic 16))].	(Icon respondsTo: #'figure:shape:')		ifTrue: [builder window 			icon: (Icon new figure: AragonStuff aragonImage shape: AragonStuff aragonShape)]</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>aspects</category><body>examples	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^examples</body><body>explanation	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	explanation isNil ifTrue: [explanation := String new asValue].	^explanation</body><body>install	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	install isNil ifTrue: [install := false asValue].	^install</body><body>selectedClass	^selection isNil ifFalse: [Aragon at: selection subject]</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>events</category><body>installOrUnInstall	install value		ifTrue: [self selectedClass hookUp]		ifFalse: [self selectedClass unhook]</body><body>selectionChanged	| enable selectedClass |	selection := examples selectedNode.	(enable := selection notNil and: [selection type == #leaf])		ifTrue: [(Aragon includesKey: selection subject)				ifTrue: [self explanation value: (Descriptions at: (selectedClass := self selectedClass) name ifAbsent: ['There''s no description available for this sample.']) asRichText]				ifFalse: 					[self explanation value: 'This class is not present in the image!'.					enable := false]]		ifFalse: [self explanation value: (Descriptions at: (selection isNil ifTrue: [self class name] ifFalse: [selection subject]) ifAbsent: ['']) asRichText].	#(start browse) do: [:each | (builder componentAt: each) widget isEnabled: enable].	(selectedClass notNil and: [selectedClass respondsTo: #hookUp])		ifTrue: 			[(builder componentAt: #install) widget isEnabled: true.			install value: selectedClass isHookedUp]		ifFalse: 			[install value: false.			(builder componentAt: #install) widget isEnabled: false]</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>actions</category><body>browse	AragonStuff browseClass: self selectedClass.</body><body>doubleClick	(builder componentAt: #start) widget isEnabled ifTrue: [self start]</body><body>start	self selectedClass open</body></methods><methods><class-id>Aragon.AragonExamplesBrowser class</class-id> <category>class initialization</category><body>examples	^Examples</body><body>initialize	Examples := IdentityDictionary new.	Examples at: #'Samples' put: #(		#(NewDataSet	 #(NewDatasetExample OldDatasetExample NdsFileBrowser))		#(TreeView		 #(SimpleFileBrowser SimpleClassBrowser CategoriesBrowser TreeViewDirectorySelector))		#(CardView		 #(CardViewExample CardViewExample1 CardViewExample2 CardViewExample3))		#GaugeExample		#ResizerExample		#World	).	Examples at: #'Toys' put: #(		#SystemBrowser		#NewParcelBrowser		#NewFileBrowser		#FontPanel		#ChangeSetBrowser		#AragonMenuEditor		#TextEditor	).	Examples at: #'New Look Policies' put: #(		Win95WidgetsExample Win95Notifier NSNotifier CompleterExample	).	self initializeDescriptions</body><body>initializeDescriptionsDescriptions := IdentityDictionary new 	add: #Samples -&gt; 'These are some sample apps that illustrate the usage of the new widgets in &lt;b&gt;Framework Enhancements&lt;/b&gt;';	add: #Toys -&gt; 'These are examples and tools that deploy new widgets from Framework Enhancements to fulfil their work. &lt;b&gt;Please Note:&lt;/b&gt; Even though some of these tools might look quite usable for your everyday work, you should still consider them as being examples and no fully tested products.';	add: #NSNotifier -&gt; 'This is the NextStep UI look-specific dialog notifier. It can be used as the dialog supplier for the built-in Dialog class. Applications can either refer to this class directly or use the standard dialog notifier interface provided by class ''Dialog''.';	add: #Win95Notifier -&gt; 'This is the Win95 UI look-specific dialog notifier. It supports implicit use of standard Windows 95 message box icons.  Win95Notifier can be used as the dialog supplier for the built-in Dialog class. Applications can either refer to this class directly or use the standard dialog notifier interface provided by class ''Dialog''.';	add: #NewParcelBrowser -&gt; 'This is a replacement for the built-in ParcelList It uses a TreeView to display the loaded parcels in a hierarchy. Maintaining a hierarchy of parcels requires Enhanced Parcels facilities, which are also included with Framework Enhancements.';	add: #OldDatasetExample -&gt; 'This is the superclass of NewDataSetExample, containing all the DataSet-specific methods. It is provided to show that NewDataSet widgets can be used in place of the built-in DataSet widgets with no method changes (Open it with #windowWithNewDatasetSpec).';	add: #NewDatasetExample -&gt; 'This example shows how to deploy a NewDataSet widget. It exploits the various new features introduced with NewDataSet, such as switching between browsing and editing mode, multiple selection, customized rendering of cell contents and manipulation of appearance.';	add: #SimpleFileBrowser -&gt; 'This is a very simple file browser example. It displays all the volumes, directories and files in a single TreeView. The directories are displayed as folders, the files appear as leafs.';	add: #CategoriesBrowser -&gt; 'This example shows a TreeView with the class categories on level 1, classes on level 2, variables and method categories on level 3 and instance variables, class variables and instance methods on level 4. (Try double clicking on a leaf entry)';	add: #SimpleClassBrowser -&gt; 'This is a very simple class browser example. It displays the inheritance hierarchy of all classes in the system starting at class Object as root.';	add: #FontPanel -&gt; 'This isn''t really an example but a fully featured tool for selecting and maintaining Fonts and TextStyles. It is hooked into the ''Fonts'' menu in properties tool and can be used to directly specify a font for a widget. You can also use it to define and install text styles, including system text styles.';	add: #TextEditor -&gt; 'This is a replacement for the built-in workspace windows. You can use it as a scratch pad. It comes with additional commands for storing text on file. (TextEditor makes use of WindowResizeCorner if present).';	add: #NewFileBrowser -&gt; 'This is a replacement for the built-in FileList. It deploys a TreeView and a NewDataSet for presenting a Windows 95 explorer like interface. If Win32 Connect is installed, subclass Win32FileBrowser is used automatically  that supports opening files via Windows Explorer.';	add: #SystemBrowser -&gt; 'This is a replacement for the built-in System Browser. It deploys a &lt;b&gt;TreeView&lt;/b&gt; for presenting a Windows 95 explorer like interface to class categories, and classes. &lt;b&gt;Resizers&lt;/b&gt; allow to resize all the subpanes. And finally, the tool bar shows some &lt;b&gt;Toolbar Buttons&lt;/b&gt;';	add: #Win32FileBrowser -&gt; 'This is a replacement for the built-in FileList. It deploys a TreeView and a NewDataSet for presenting a Windows 95 explorer like interface. If Win32 Connect is installed, subclass Win32FileBrowser is used automatically  that supports opening files via Windows Explorer.';	add: #PopupTreeView -&gt; 'This example displays a TreeView in a popup window. The window disapears when a mouse button is pressed outside its boundaries. This could be a way to provide a Windows 95-like path selector drop-down box.';	add: #CardViewExample -&gt; 'This example shows how to deploy a non-trivial CardView widget, displaying several application interfaces, with only minimal effort, by exploiting the advanced features introduced with CardView (automatic building of subcanvases, subcanvas caching).';	add: #CardViewExample3 -&gt; 'And yet another one. (Sorry, I''m getting tired now.)';	add: #CardViewExample1 -&gt; 'This example illustrates the basic steps to deploy a CardView widget in the traditional, Notbook-like style. It displays a different set of classes in a listbox corresponding to the selected index tab.';	add: #CardViewExample2 -&gt; 'This example is a derivate of CardViewExample1 that shows how to configure a CardView with a list of associations instead of mere index label strings.';	add: #GaugeExample -&gt; 'This example application shows how to use different forms of the new widget &lt;i&gt;Gauge&lt;/i&gt;, such as for Pregress Bars, and Measures.';	add: #World -&gt; 'A simple application showing a bitmap loaded from disk using the &lt;b&gt;StoredImages&lt;/b&gt; proxies.';	add: #AragonExamplesBrowser -&gt; 'Browse through the example classes with the list on the left. Some example apps can be installed in VisualLauncher to be used in place of the default tools. Do so by turning on the check mark below.PLEASE NOTE: These are only examples. You should not expect them to be complete.';	add: #CompleterExample -&gt; 'This example shows an application of a standard ContextCompleter and a FilenameCompleter. At installation time, ContextCompleter is hooked into any text editor widget. FilenameCompleteris available in standard #requestFilename: dialogs.';	add: #ChangeSetBrowser -&gt; 'This example displays the entries of the current changes set in a TreeView. The TreeView is used to categorise the changes. You can browse to changed classes or methods by double-clicking on the corresponding leaf entries.';	add: #AragonMenuEditor -&gt; 'This is a replacement for the built-in MenuEditor that provides support for advanced short cut key characters. Switch to a menu item''s details page and type in a short cut key for a try.';	add: #ResizerExample -&gt; 'Shows the new subcanvas resizer widget in action. Resizers can also be seen in the Class Browser toy.';	add: #Win95WidgetsExample -&gt; 'This is an example that displays all the standard widgets plus WindowSizeCorner and the new slider in Win 95 UI look. The widgets are displayed in both enabled and disabled status';	add: #TreeViewDirectorySelector -&gt; 'This example implements a Windows 95-style directory selector dialog. It is part of the Aragon.Framework.Widget.TreeView parcel and can be used for selecting directory names..';yourself.</body></methods><methods><class-id>Aragon.ChangeSetBrowser30</class-id> <category>menu commands</category><body>editChangeSet	| cs |	cs := ChangeEditor new.	cs sourceHolder: self changeSet.	cs open</body><body>freshenChanges	| pattern1 pattern2 |	changeSet value == ChangeSet current 		ifTrue: [^Dialog warn: 'You can only freshen a ChangeSet that is not the current default ChangeSet.'].	pattern1 := changeSet value name, '*'.	pattern2 := 'Aragon.', pattern1.	Parcel parcels do: [:parcel | ((pattern1 match: parcel name) or: [pattern2 match: parcel name])		ifTrue: 			[Transcript show: 'Freshening parcel ''', parcel name, ''' ...'; cr.			ParcelBrowser 				addChangesFrom: ChangeSet current 				to: changeSet value				accordingTo: parcel.			self refreshView]]</body><body>synchronizeChanges	changeSet value == ChangeSet current 		ifTrue: [^Dialog warn: 'You can only freshen a ChangeSet that is not the current default ChangeSet.'].	(Dialog 		confirm: ('&lt;c:red&gt;&lt;b&gt;WARNGING:&lt;/b&gt;&lt;/c&gt;This will remove all changes registered in the selected ChangeSet &lt;c:blue&gt;''', changeSet value name, '''&lt;/c&gt; from the current default ChangeSet &lt;c:red&gt;''', ChangeSet current name, '''&lt;/c&gt;! Do you really want to continue?') asRichText 		initialAnswer: false for: nil) ifFalse: [^self]. 	self ensureRegistered: changeSet value.	self class subtract: changeSet value from: ChangeSet current</body></methods><methods><class-id>Aragon.ChangeSetBrowser30</class-id> <category>aspects</category><body>addMenuItemsTo: aMenu 	| menuItems default moreItems |	CodeWriter fileFormat &gt; 4 ifFalse: [^self].	(changeSet isNil or: [changeSet value == ChangeSet current])		ifFalse: [| cs | cs := changeSet value. 				aMenu addItemGroup: (Array with: ((MenuItem labeled: cs name) 					labelText: (cs name asText emphasizeAllWith: #italic); 					value: cs))].	menuItems := (self namedChangeSets 						collect: [:each | (MenuItem labeled: each name) value: each])					asSortedStrings: [:sc :a :b | a label &lt; b label].	aMenu addItemGroup: menuItems.	moreItems := OrderedCollection 		with: ((MenuItem labeled: 'Edit...') value: [self defineChangeSet]).	aMenu addItemGroup: moreItems.	default := menuItems detect: [:each | each value == ChangeSet current] ifNone: [^self].	default labelText: default label asText allBold</body><body>changeSetList	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	changeSetList isNil ifTrue: [changeSetList := SelectionInList with: self getChangeSetList].	^changeSetList</body><body>changeSetMenu	| answer |	self addMenuItemsTo: (answer := Menu new).	^answer</body></methods><methods><class-id>Aragon.ChangeSetBrowser30</class-id> <category>actions</category><body>defineChangeSet	self openDialogInterface: #defineChangeSetSpec</body><body>deleteChangeSet	| cs menu |	(cs := changeSetList selection) isNil ifTrue: [^self].	cs := cs value.	cs == ChangeSet current 		ifTrue: [Dialog warn: 'You cannot delete the current default ChangeSet.'. ^self].	(Dialog confirm: 'Do you really want to delete the selected ChangeSet?')		ifFalse: [^self].	(NamedChangeSet changeSetList includes: cs) 		ifTrue: [NamedChangeSet removeChangeSet: cs].	menu := builder menuAt: #changeSetMenu.	menu removeItem: (menu menuItemLabeled: cs name asString).	cs == changeSet value ifTrue: [changeSet value: NamedChangeSet changeSetList first].	self changeSetList list remove: changeSetList selection</body><body>newChangeSet	| cs |	cs := Dialog request: 'Enter a name for the new ChangeSet:' initialAnswer: 'New Changes'.	cs isEmpty ifTrue: [^self].	cs := NamedChangeSet withName: cs asSymbol.	NamedChangeSet addChangeSet: cs.	self addMenuItemsTo: (builder menuAt: #changeSetMenu) initialize.	changeSetList list add: (cs := cs name -&gt; cs).	changeSetList selection: cs</body><body>renameChangeSet	| newName assoc oldName mi cs |	(assoc := changeSetList selection) isNil ifTrue: [^self].	oldName := 	assoc key asString.	newName := Dialog request: 'Enter a new newName for the selected ChangeSet:' initialAnswer: oldName.	(newName isEmpty or: [newName = oldName]) ifTrue: [^self].	(cs := assoc value) name: newName asSymbol.	mi := (builder menuAt: #changeSetMenu) menuItemLabeled: oldName.	mi label: newName.	mi labelText isNil 		ifFalse: 			[newName := newName asText emphasizeAllWith: (mi labelText emphasisAt: 1).			mi labelText: newName].	cs == changeSet value 		ifTrue:			[| menuButton |			((menuButton := (builder componentAt: #changeSet) widget)				isKindOf: ComboBoxView)					ifTrue: [menuButton editor editText: newName]					ifFalse: [menuButton setLabel: cs].			menuButton invalidate].	assoc key: newName.	changeSetList list changed: #at: with: changeSetList selectionIndex.</body><body>setAsDefault	| cs menu recentName assoc |	(assoc := changeSetList selection) isNil ifTrue: [^self].	(cs := assoc value) == ChangeSet current ifTrue: [^self].		recentName := ChangeSet current name asString.	ChangeSet newChanges: cs.	changeSetList list do: [:each | each key: each key asString].	assoc key: cs name asText allBold.	changeSetList listHolder changed: #value.	menu := builder menuAt: #changeSetMenu.	(menu menuItemLabeled: recentName) labelText: recentName.	(menu menuItemLabeled: cs name asString) labelText: cs name asText allBold.</body></methods><methods><class-id>Aragon.ChangeSetBrowser30</class-id> <category>private</category><body>ensureRegistered: aChangeSet 	(NamedChangeSet changeSetList includes: aChangeSet)		ifFalse: [NamedChangeSet addChangeSet: aChangeSet]</body><body>getChangeSetList	| answer |	answer := self namedChangeSets collect: [:each | (each == ChangeSet current					ifTrue: [each name asText allBold]					ifFalse: [each name]) -&gt; each].	^answer asSortedStrings asList</body><body>namedChangeSets	^NamedChangeSet changeSetList</body><body>setChanges: aChangeSet	super setChanges: aChangeSet.	self changeSetList list add: (aChangeSet name asText emphasizeAllWith: #italic) -&gt; aChangeSet</body></methods><methods><class-id>Aragon.ChangeSetBrowser5i</class-id> <category>private</category><body>getObjectRemovesIn: aChangeSet	| classes node |	(classes := aChangeSet objectRemoves) isEmpty ifTrue: [^#()].	node := (IdentityTreeNode for: #remove label: 'Removed objects') type: #category.	node children: (classes associations collect: [:each | (IdentityTreeNode for: each key) type: each value; hasChildren: false]) asOrderedCollection.	^Array with: node</body><body>getOtherObjectChangesIn: aChangeSet 	| node |	node := (IdentityTreeNode for: #relocate label: 'Relocated objects') type: #category.	node children: ((aChangeSet objectChanges 		select: [:each | each changes includes: #relocate]) keys asSortedStrings 			collect: [:each | (each asIdentityTreeNode) type: #class; hasChildren: false]).	^node children isEmpty ifTrue: [#()] ifFalse: [Array with: node]</body></methods><methods><class-id>Aragon.ChangeSetBrowser5i class</class-id> <category>utilities</category><body>removeChange: aSymbol class: aClass from: aChangeSet 	(aChangeSet objectChanges at: aClass fullName) changes 		remove: aSymbol 		ifAbsent: []</body></methods><methods><class-id>Aragon.Win32FileBrowser</class-id> <category>interface opening</category><body>postBuildWith: aBuilder 	super postBuildWith: aBuilder.	((builder menuAt: #listMenu) menuItemAt: 2) enable.</body></methods><methods><class-id>Aragon.Win32FileBrowser</class-id> <category>menu actions</category><body>openInShell	Cursor execute 		showWhile: [self selectedRows do: [:entry | self openInShell: (self currentDirectory construct: entry name)]]</body></methods><methods><class-id>Aragon.Win32FileBrowser</class-id> <category>private</category><body>contentsOf: aFilename 	^aFilename notNil		ifTrue: [(Win32 findContentsOf: aFilename)				select: [:f | (f isHidden or: [f isSystem]) == ShowHidden]]		ifFalse: [#()]</body><body>entriesFor: aString 	| dir answer |	answer := SortedCollection new.	(dir := Win32Filename new name: aString) 		directoryEntries do:			[:file | (file name ~= '.' 				and: [file name ~= '..' 				and: [file isDirectory 				and: [(file isHidden or: [file isSystem]) == ShowHidden]]])			ifTrue: [answer add: ((AragonTreeNode for: (dir construct: file asString) asString label: file asString) isParent: true)]].	^answer</body><body>openDefault: aFilename	^self openInShell: aFilename</body><body>openInShell: aFilename	(Win32 shellExecute: 'open' on: aFilename tail with: nil in: aFilename head) &lt; 32 ifTrue: [Screen default ringBell]</body></methods><methods><class-id>Aragon.Win32FileBrowser class</class-id> <category>class initialization</category><body>initialize	"self initialize"	FileTypes add: #('*.exe')  -&gt;  [:f | Win32 execute: f asString].</body></methods><methods><class-id>Aragon.ClassBrowserHistory</class-id> <category>initialize-release</category><body>initialize	GlobalHistory isNil		ifTrue: 			[listHolder := List new asValue.			associations := IdentityDictionary new]		ifFalse: 			[listHolder := GlobalHistory list asValue.			associations := GlobalHistory associations].	selectionHolder := nil asValue.</body></methods><methods><class-id>Aragon.ClassBrowserHistory</class-id> <category>accessing</category><body>associations	^associations</body><body>list	^listHolder value</body><body>listHolder	^listHolder</body><body>selection	^selectionHolder value</body><body>selectionHolder	^selectionHolder</body></methods><methods><class-id>Aragon.ClassBrowserHistory</class-id> <category>history</category><body>cleanUp	| s |	s := self selection.	listHolder value: (self list select: [:each | each asSymbol asQualifiedReference isDefined]).	associations keys do: [:each | each asSymbol asQualifiedReference isDefined ifFalse: [associations removeKey: each]].	self selection: s.</body><body>selection: aValue	selectionHolder value: aValue</body><body>selectionIndex	^self list indexOf: selectionHolder value</body><body>selectionIndex: anIndex	selectionHolder value: (self list at: anIndex)</body><body>store	GlobalHistory := self.	GlobalHistory associations removeKey: #categories ifAbsent: []</body></methods><methods><class-id>Aragon.GaugeExample</class-id> <category>aspects</category><body>gauge1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	gauge1 isNil ifTrue: [gauge1 := 100 asValue].	^gauge1</body><body>gauge2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	gauge2 isNil ifTrue: [gauge2 := 0 asValue].	^gauge2</body><body>progress	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	progress isNil ifTrue: [progress := 0 asValue].	^progress</body></methods><methods><class-id>Aragon.GaugeExample</class-id> <category>actions</category><body>resetProgress	progress value: 0.</body><body>simulateProgress	self resetProgress.	0 to: 100 do: [:i | progress value: i. (Delay forMilliseconds: 20) wait]</body></methods><methods><class-id>Aragon.Win32FontPanel</class-id> <category>initialize-release</category><body>initialize	super initialize.	self readPlatformFonts.	fontList := SelectionInList new.	fontsMenu isNil ifTrue: [fontsMenu := self class fontsMenu].	sizeMenu := Menu new asValue.</body><body>postOpenWith: aBuilder 	super postOpenWith: aBuilder.	self showAll.	self fontList selection: family value.	fontList selectionIndexHolder		compute: 			[family setValue: self fontList selection.			self familyChanged].	family compute: [self fontList selection: family value]</body><body>readPlatformFonts	"Answer a dictionary describing the fonts installed in the system. This dictionary has an entry for each 	distinct font family with the family name as its key. The associated values are Arrays with the following 	structure:		at: 1  --&gt;  Set with the available font styles (one of #standard, #bold, #italic, #boldItalic)		at: 2  --&gt;  Collection with available pixel sizes, left empty for freely scalable fonts.	Inspect this for an example:		(Dictionary new			at: 'Rich Scalable'		put: (Array with: #(regular boldItalic bold italic) with: #());			at: 'Poor Scalable'		put: (Array with: #(regular) with: #());			at: 'Non-Scalable'		put: (Array with: #(regular bold) with: #(8 9 10 12 14 20));		yourself).	This implementation works only for Windows platforms. It scans the font names answerd by	'Screen default listFontNames' to construct the answer. An example:		'Frutiger 45 Light~0~700~0~0~0~ansi~4'			has the following entries:				&lt;family name&gt;~&lt;size&gt;~&lt;boldness&gt;~&lt;slant&gt;~&lt;&gt;~&lt;&gt;~&lt;&gt;~&lt;&gt;		A size value of 0 means freely scalable. A boldness value of 700 means bold style. 	A slant value of 255 means italic style. The empty brackets are not interpreted. 	"	fonts := Dictionary new.	Screen default listFontNames		do: 			[:fname | 			| familyName fontStyle i1 i2 size |						"Get the family name"			familyName := fname copyUpTo: $~.						"Look-up font style"			('*~700~255~*' match: fname)	ifTrue: [fontStyle := #boldItalic]	ifFalse: [			('*~700~*' match: fname)	ifTrue: [fontStyle := #bold]	ifFalse: [			('*~255~*' match: fname)	ifTrue: [fontStyle := #italic]			ifFalse: [fontStyle := #regular]]].			"If the font family isn't registered allready, do it now"			(fonts includesKey: familyName)				ifFalse: [fonts at: familyName put: (Array with: Set new with: SortedCollection new)].			"Add font style to the family's description"			((fonts at: familyName) at: 1) add: fontStyle.			"Look-up the font's pixel size"			i1 := 1.			[(fname at: i1) ~= $~] whileTrue: [i1 := i1 + 1].			i2 := i1 := i1 + 1.			[(fname at: i2) ~= $~] whileTrue: [i2 := i2 + 1].			i2 := i2 - 1.			(size := (fname copyFrom: i1 to: i2) asNumber) &gt; 0				ifTrue: [((fonts at: familyName) at: 2) add: size]				ifFalse: [nil]].	^fonts</body></methods><methods><class-id>Aragon.Win32FontPanel</class-id> <category>aspects</category><body>fontList	^fontList</body><body>fontsMenu	^fontsMenu</body><body>sizeMenu	^sizeMenu</body></methods><methods><class-id>Aragon.Win32FontPanel</class-id> <category>actions</category><body>selectFonts: aSymbol 	selection notNil ifTrue: [(fontsMenu menuItemLabeled: selection) beOff].	(fontsMenu menuItemLabeled: (selection := aSymbol)) beOn.</body><body>showAll	fontList list: fonts keys asSortedCollection.	self selectFonts: 'Show All'.</body><body>showFixed	fontList list: (fonts select: [:aFont | (aFont at: 2) isEmpty not]) keys asSortedCollection.	self selectFonts: 'Show Fixed-Size Only'.</body><body>showScaled	fontList list: (fonts select: [:aFont | (aFont at: 2) isEmpty]) keys asSortedCollection.	self selectFonts: 'Show Scaled Only'.</body></methods><methods><class-id>Aragon.Win32FontPanel</class-id> <category>events</category><body>familyChanged	| styles sizes |	super familyChanged.		(fonts isNil or: [(styles := fonts at: family value ifAbsent: [nil]) isNil]) ifTrue: [^self].	sizes := styles at: 2.	styles := styles at: 1.	(self builder componentAt: #sizeMenu) isVisible: sizes isEmpty not.	(self builder componentAt: #sizeField) isVisible: sizes isEmpty.	sizes isEmpty		ifFalse: 			[sizeMenu value: (MenuBuilder new addLabels: (sizes collect: [:s | s printString]) andValues: sizes) menu.			(sizes includes: pixelSize value) ifFalse: [pixelSize value: sizes last]].	#(regular bold italic boldItalic) do: [:x | (self builder componentAt: x) isEnabled: (styles includes: x)].	(styles includes: style value) ifFalse: [style value: styles asArray first].</body></methods><methods><class-id>Aragon.UnixFontPanel</class-id> <category>initialize-release</category><body>readPlatformFonts	"Answer a dictionary describing the fonts installed in the system. This dictionary has an entry for each 	distinct font family with the family name as its key. The associated values are Arrays with the following 	structure:		at: 1  --&gt;  Set with the available font styles (one of #standard, #bold, #italic, #boldItalic)		at: 2  --&gt;  Collection with available pixel sizes, left empty for freely scalable fonts.	Inspect this for an example:		(Dictionary new			at: 'Rich Scalable'		put: (Array with: #(regular boldItalic bold italic) with: #());			at: 'Poor Scalable'		put: (Array with: #(regular) with: #());			at: 'Non-Scalable'		put: (Array with: #(regular bold) with: #(8 9 10 12 14 20));		yourself).	This implementation works only for UNIX platforms. It scans the font names answerd by	'Screen default listFontNames' to construct the answer. An example:		'*-times-medium-r-*-*-14-*-*-75-*-*-*-*'			has the following entries:				&lt;&gt;-&lt;family name&gt;-&lt;boldness&gt;-&lt;slant&gt;-&lt;&gt;-&lt;&gt;-&lt;size&gt;-&lt;&gt;-&lt;&gt;-&lt;&gt;-&lt;&gt;-&lt;&gt;-&lt;&gt;-&lt;&gt; 		A size value of 0 means freely scalable. A boldness bold or empty means bold style.	A slant value of i or empty means italic style. The empty brackets are not interpreted. 	"		| tokens | 	fonts := Dictionary new.	Screen default listFontNames asOrderedCollection		do: 			[:fname || fontFamily fontStyle size i |			tokens := Dictionary new.			i := 1.			(self scanPlatformFontName: fname) do: [:el | tokens at: i put: el.  i := i + 1].			tokens size = 28 ifTrue:[			"Get the family name"			fontFamily := (tokens at: 4 ifAbsent: [tokens at: 1 ifAbsent: [#undefined]]) asString.			"Look-up font style"			((tokens at: 6 ifAbsent: [nil]) = 'bold')	&amp; ((tokens at: 8 ifAbsent: [nil]) = 'i')													ifTrue: [fontStyle := #boldItalic] ifFalse: [			((tokens at: 6 ifAbsent: [nil]) = 'bold')		ifTrue: [fontStyle := #bold] ifFalse: [			((tokens at: 8 ifAbsent: [nil]) = 'i')			ifTrue: [fontStyle := #italic]			ifFalse: [fontStyle := #regular]]].			"If the font family isn't registered allready, do it now"			(fonts includesKey: fontFamily)				ifFalse: [					fonts at: fontFamily put: (Array with: Set new with: SortedCollection new)].				"Add font style to the family's description"			((fonts at: fontFamily) at: 1) add: fontStyle.			"Look-up the font's pixel size"			(size := (tokens at: 14 ifAbsent: ['0']) asString asNumber) &gt; 0				ifTrue: [(((fonts at: fontFamily) at: 2)  includes:size) 					ifFalse:[	((fonts at: fontFamily) at: 2) add: size]]]].	^fonts</body><body>scanPlatformFontName: aString 	| temp list |	list := List new.	temp := ReadStream on: aString.	[temp atEnd]		whileFalse: 			[list add: (temp throughAll: #($-)).			list add: (temp upToAll: #($-))].	^list</body></methods><methods><class-id>Aragon.SimpleClassBrowser</class-id> <category>initialize-release</category><body>initialize	super initialize.	classes := SelectionInTree with: 		(MultipleParentTreeAdaptor new 			childrenBlock: [:aClass | aClass subclasses asSortedCollection: [:a :b | a name &lt; b name]];			root: Object asIdentityTreeNode).	classes list expandAt: 1.</body></methods><methods><class-id>Aragon.SimpleClassBrowser</class-id> <category>menu commands</category><body>addEntry	| newEntry selectedEntry |	selectedEntry := classes selection.	newEntry := Dialog request: 'Enter a name for the new sub entry to ', selectedEntry displayString, ':'.	newEntry isEmpty ifTrue: [^self].	newEntry := Smalltalk at: newEntry ifAbsent: [newEntry].	classes list add: newEntry asChildOf: selectedEntry.	classes selection: newEntry.</body><body>collapse	classes collapseSelectedNode</body><body>expand	classes expandSelectedNode</body><body>expandAll	classes list expandAll</body><body>findClass	| className aClass |	(className := Dialog request: 'Find class:') isEmpty ifTrue: [^self].	aClass := Smalltalk at: className ifAbsent: [^Screen default ringBell].	classes list expandPath: aClass withAllSuperclasses reverse.	classes selection: aClass</body><body>removeEntry	"classes list removeAt: classes selectionIndex."	classes list remove: classes selection.</body><body>toggleExpand	classes toggleExpandSelectedNode</body><body>toggleExpandSubtree	classes list toggleExpandSubtreeAt: classes selectionIndex.</body></methods><methods><class-id>Aragon.SimpleClassBrowser</class-id> <category>aspects</category><body>classes	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^classes</body></methods><methods><class-id>Aragon.SimpleClassBrowser</class-id> <category>actions</category><body>action"	classes selectedNode transcribe.	classes selection transcribeCr"</body></methods><methods><class-id>Aragon.CardViewExample3</class-id> <category>initialize-release</category><body>initialize	tabs := SelectionInList with: #(First Second Third).	tabs selectionIndexHolder onChangeSend: #pageChanged to: self.</body></methods><methods><class-id>Aragon.CardViewExample3</class-id> <category>notifications</category><body>pageChanged	| wrapper subcanvasSpec |	subcanvasSpec := ('canvas' , tabs selectionIndex printString , 'Spec') asSymbol.	(wrapper := builder componentAt: #tabs) isNil ifTrue: [^self].	wrapper widget 		client: self 		spec: subcanvasSpec</body></methods><methods><class-id>Aragon.ResizerExample</class-id> <category>aspects</category><body>classNames	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	classNames isNil		ifTrue: 			[classNames := SelectionInList with: Smalltalk classNames.			classNames selectionIndexHolder onChangeSend: #selectionChanged to: self].	^classNames</body><body>text21	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	text21 isNil ifTrue: [text21 := Object comment asValue].	^text21</body><body>text22	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	text22 isNil ifTrue: [text22 := Collection comment asValue].	^text22</body></methods><methods><class-id>Aragon.ResizerExample</class-id> <category>events</category><body>selectionChanged	| s c |	(s := classNames selection) isNil ifTrue: [^self].	c := Smalltalk at: s.	text21 value: c definition.	text22 value: c comment.</body></methods><methods><class-id>Aragon.CardViewExample1</class-id> <category>initialize-release</category><body>initialize	classes := SelectionInList new.	tabs := SelectionInList with: #('Views' 'Controllers' 'Models' 'Application Models').	tabs selectionIndexHolder onChangeSend: #pageChanged to: self.</body></methods><methods><class-id>Aragon.CardViewExample1</class-id> <category>interface opening</category><body>postOpenWith: aBuilder 	(aBuilder componentAt: #tabs) widget client: self spec: #canvasSpec.	tabs selectionIndex: 1.</body></methods><methods><class-id>Aragon.CardViewExample1</class-id> <category>aspects</category><body>classes	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^classes</body><body>tabs	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^tabs</body></methods><methods><class-id>Aragon.CardViewExample1</class-id> <category>notifications</category><body>pageChanged	^self pageChangedVariantB</body><body>pageChangedVariantA	| chosenTab rootClass |	chosenTab := tabs selection.	chosenTab = 'Views' ifTrue: [rootClass := View].	chosenTab = 'Controllers' ifTrue: [rootClass := Controller].	chosenTab = 'Models' ifTrue: [rootClass := Model].	chosenTab = 'Application Models' ifTrue: [rootClass := ApplicationModel].	classes list: rootClass withAllSubclasses</body><body>pageChangedVariantB	| chosenTab rootClass |	chosenTab := tabs selection.	chosenTab = 'Views' ifTrue: [rootClass := View].	chosenTab = 'Controllers' ifTrue: [rootClass := Controller].	chosenTab = 'Models' ifTrue: [rootClass := Model].	chosenTab = 'Application Models' ifTrue: [rootClass := ApplicationModel].	self classes list: rootClass withAllSubclasses</body></methods><methods><class-id>Aragon.CardViewExample1 class</class-id> <category>interface specs</category><body>windowTitle	^self name</body></methods><methods><class-id>Aragon.CardViewExample2</class-id> <category>initialize-release</category><body>initialize	tabs := SelectionInList with: 		(List new			add: 'Views' -&gt; View;			add: 'Controllers' -&gt; Controller;			add: 'Models' -&gt; Model;			add: 'Application Models' -&gt; ApplicationModel;			add: 'My Examples' -&gt; #myExamples;		yourself).	tabs selectionIndexHolder onChangeSend: #pageChanged to: self.	classes := SelectionInList new.</body></methods><methods><class-id>Aragon.CardViewExample2</class-id> <category>notifications</category><body>pageChanged	| newContents |	newContents := tabs selection value == #myExamples				ifTrue: [Aragon keys select: [:each | 'CardViewExample*' match: each]]				ifFalse: [tabs selection value withAllSubclasses collect: [:each | each name]].	classes list: newContents asSortedCollection</body></methods><methods><class-id>Aragon.CategoriesBrowser</class-id> <category>initialize-release</category><body>initialize	| roots |	super initialize.	categories := SelectionInTree with: 		(TreeAdaptor new 			childrenBlock: [:anEntry :type | self childrenFor: anEntry  type: type];			roots: (roots := self roots)).	roots size == 1 ifTrue: [categories list expandAt: 1].</body></methods><methods><class-id>Aragon.CategoriesBrowser</class-id> <category>interface opening</category><body>postBuildWith: aBuilder	| myImageList |	myImageList := IdentityDictionary new		add: #namespace -&gt;	(AragonIcon named: #pie );		add: #category	-&gt;	(AragonIcon named: #folder2 color: ColorValue royalBlue );		add: #class		-&gt;	(AragonIcon named: #largeBrick color: #red);		add: #protocol	-&gt;	(AragonIcon named: #bricks color: #royalBlue);		add: #variables	-&gt;	(AragonIcon named: #parts1);		add: #method	-&gt;	(AragonIcon named: #brick color: #green);		add: #instvar		-&gt;	(AragonIcon named: #brick color: #red);		add: #classvar	-&gt;	(AragonIcon named: #brick color: #yellow);		add: #unknown	-&gt;	(AragonIcon named: #leaf);	yourself.	(builder componentAt: #categories) widget imageList: myImageList.</body></methods><methods><class-id>Aragon.CategoriesBrowser</class-id> <category>menu commands</category><body>browseSelection	| aNode |	aNode := categories selectedNode.	aNode == #root ifTrue: [^AragonStuff openSystemBrowser].	aNode type == #unknown ifTrue: [^aNode subject inspect].	aNode type == #category ifTrue: [^AragonStuff browseCategory: aNode subject].	aNode type == #class ifTrue: [^AragonStuff browseClass: aNode subject].	(#(#variables #instvar #classvar) includes: aNode type)		ifTrue: [^AragonStuff browseClass: aNode subject value].	aNode type == #protocol		ifTrue: 			[^AragonStuff browseClass: aNode subject value protocol: aNode subject key].	aNode type == #method		ifTrue: 			[^AragonStuff browseClass: aNode subject value method: aNode subject key].</body><body>findClass	| className |	className := Dialog request: 'Enter the name of a class to look for:'.	className isEmpty ifTrue: [^self].	self jumpToClass: (Smalltalk at: className ifAbsent: [^Screen default ringBell])</body><body>gotoParent	| aNode |	(aNode := categories selectedNode) isNil ifTrue: [^Screen default ringBell].	(aNode := aNode parent) isNil ifTrue: [^Screen default ringBell].	categories selection: aNode subject</body><body>gotoSubclass	| aNode classes aClass |	aNode := categories selectedNode.	(aNode type ~~ #class or: [(classes := aNode subject subclasses) isEmpty]) ifTrue: [^Screen default ringBell].	aClass := Dialog				choose: 'To which subclass do you want to jump to?'				fromList: (classes collect: [:each | each name])				values: classes				lines: 9				cancel: [^self].	self jumpToClass: aClass</body><body>gotoSuperclass	| aNode |	aNode := categories selectedNode.	(aNode type == #class and: [aNode subject superclass notNil])		ifTrue: [self jumpToClass: aNode subject superclass]</body><body>refreshDisplay	categories list invalidateAndReExpand</body></methods><methods><class-id>Aragon.CategoriesBrowser</class-id> <category>aspects</category><body>categories	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^categories</body><body>categoriesMenu	menuHolder isNil ifTrue: [menuHolder := Menu new asValue].	^menuHolder</body><body>selectionChanged	| mb aNode |	(mb := MenuBuilder new) add: 'Browse Definition' -&gt; #browseSelection.	(aNode := categories selectedNode) isNil		ifFalse: 			[(#(#class #instvar #classvar) includes: aNode type)				ifTrue: [mb add: 'Browse References' -&gt; #browseReferences].			aNode type == #class ifTrue: [mb line; add: 'Go to Superclass' -&gt; #gotoSuperclass; add: 'Go to Subclass' -&gt; #gotoSubclass].			aNode type == #method ifTrue: [mb add: 'Browse Senders' -&gt; #browseSenders; add: 'Browse Implementors' -&gt; #browseImplementors]].	mb line; add: 'Find Class...\b' -&gt; #findClass.	self categoriesMenu value: mb menu</body></methods><methods><class-id>Aragon.CategoriesBrowser</class-id> <category>private</category><body>allCategories	^AragonStuff systemVersion == 5 		ifTrue: 			[| root list | 			root := Smalltalk at: #Root.			(list := IdentitySet new: 400) addAll: root organization categories.			root withAllNameSpaces 				do: [:nameSpace | nameSpace 					bindingsDo: [:i | i isForClass ifTrue: [list add: i value category]]].			list] 		ifFalse: [Smalltalk organization categories]</body><body>childrenFor: anEntry type: aType	anEntry == #root ifTrue: [^self childrenForRoot].	aType == #namespace ifTrue: [^self childrenForNamespace: anEntry].	aType == #category ifTrue: [^self childrenForCategory: anEntry].	aType == #class ifTrue: [^self childrenForClass: anEntry].	aType == #variables			ifTrue:				[anEntry key == #instvars ifTrue: [^self childrenForInstvarsOf: anEntry value].				anEntry key == #classvars ifTrue: [^self childrenForClassvarsOf: anEntry value]].	aType == #protocol ifTrue: [^self childrenForProtocol: anEntry key in: anEntry value].	^#()</body><body>childrenForCategory: aCategory 	"Get all the classes in aCategory from the system organizer and 	wrap them in an Association with #class as the key."	| n |	n := self selectedNode. 	[n isNil or: [n type == #namespace]] whileFalse: [n := n parent].	^self childrenForCategory: aCategory in: (n isNil ifTrue: [Smalltalk] ifFalse: [n subject]).</body><body>childrenForCategory: aCategory in: environment	"Get all the classes in aCategory from the system organizer and 	wrap them in an Association with #class as the key."	| answer |	answer := self subCategoriesOf: aCategory in: environment.	(environment organization categories includes: aCategory)		ifTrue: [answer addAll: ((environment organization listAtCategoryNamed: aCategory)					collect: [:each | (self nodeFor: (environment at: each)) displayString: each])].	^answer</body><body>childrenForClass: aClass 	"Get all the protocol names in aClass from the class's organizer."	| answer node |	answer := OrderedCollection new.	categories list fetchChildrenFor: ((node := AragonTreeNode for: #instvars -&gt; aClass) type: #variables).	node hasChildren ifTrue: [answer add: (node displayString: 'Instance Variables')].	categories list fetchChildrenFor: ((node := AragonTreeNode for: #classvars -&gt; aClass) type: #variables).	node hasChildren ifTrue: [answer add: (node displayString: 'Class Variables')].	answer addAll: (aClass organization categories 		collect: [:each | (AragonTreeNode for: each -&gt; aClass) type: #protocol; displayString: each]).	aClass isMeta		ifFalse: 			[categories list fetchChildrenFor: ((node := AragonTreeNode for: aClass class) type: #class).			node hasChildren ifTrue: [answer add: node]].	^answer</body><body>childrenForClassvarsOf: aClass 	"Get all the instance variable names aClass and wrap them in Arrays 	with the following entries: #(#instvar &lt;the inst var name&gt;)."	^aClass classVarNames asArray collect: [:each | (each -&gt; aClass) asTreeNode type: #classvar; displayString: each; hasChildren: false]</body><body>childrenForInstvarsOf: aClass 	"Get all the instance variable names aClass and wrap them in Arrays 	with the following entries: #(#instvar &lt;the inst var name&gt;)."	^aClass instVarNames collect: [:each | (each -&gt; aClass) asTreeNode type: #instvar; displayString: each; hasChildren: false]</body><body>childrenForNamespace: aNamespace 	| answer |	answer := OrderedCollection new.	answer addAll: (self childrenForCategory: #'' in: aNamespace).	answer addAll: (self subCategoriesOf: nil in: aNamespace)."	answer addAll: (self nameSpacesIn: aNamespace)."	^answer</body><body>childrenForProtocol: aProtocol in: aClass 	"Get all the methods in aProtocol of aClass from the class's organizer and wrap them in Arrays with 	the following entries: #(#method &lt;the method&gt;)."	^(aClass organization listAtCategoryNamed: aProtocol)		collect: [:each | (each -&gt; aClass) asTreeNode type: #method; displayString: each; hasChildren: false]</body><body>childrenForRoot	"Get all the names of class categories from the system organizer and wrap them in Arrays with the 	following entries: #(#category &lt;the category name&gt;)."	^Smalltalk organization categories collect: [:each | each asIdentityTreeNode type: #category]</body><body>jumpToClass: aClass 	| s tokens t c |	s := aClass category.	c := ((s := aClass category) includes: $.) ifTrue: [$.] ifFalse: [$-].	tokens := s tokensBasedOn: c.	c := String with: c.	tokens := (OrderedCollection with: (t := tokens first asSymbol)) 				addAll: ((2 to: tokens size) collect: [:i | (t := t , c, (tokens at: i)) asSymbol]);				yourself.	(CoreCategories includes: tokens first) ifTrue: [tokens addFirst: #Core].	categories list expandPath: tokens.	categories selection: aClass</body><body>nameSpacesIn: aNamespace 	| answer |	answer := OrderedCollection new.	aNamespace localBindings 		do: [:b | b isForNameSpace ifTrue: [answer add: (b value asTreeNode type: #namespace)]].	^answer</body><body>nodeFor: anEntry	anEntry isBehavior ifTrue: [^anEntry asIdentityTreeNode type: #class].	anEntry isNameSpace ifTrue: [^anEntry asIdentityTreeNode type: #namespace].	^anEntry asTreeNode type: #unknown; hasChildren: false</body><body>rootCategories	| answer |	(answer := OrderedCollection new) add: (#Core asTreeNode type: #category; displayString: 'Core Classes').	(self subCategoriesOf: nil)		do: [:each | (CoreCategories includes: each subject)				ifTrue: [answer first addChild: each]				ifFalse: [answer add: each]].	^answer</body><body>roots	^AragonStuff systemVersion == 5		ifTrue: [self nameSpacesIn: (Smalltalk at: #Root)]		ifFalse: [self rootCategories]</body><body>subCategoriesOf: aCategory 	^self subCategoriesOf: aCategory in: Smalltalk</body><body>subCategoriesOf: aCategory in: environment	| answer pattern start |	answer := Set new.	aCategory == #'' ifTrue: [^answer].	aCategory isNil		ifTrue: [pattern := '*'. start := 1]		ifFalse: [pattern := aCategory , '*'.  start := pattern size+1].	environment organization categories		 do: [:each | (each ~= aCategory and: [pattern match: each])			ifTrue: 				[| i stop |				(stop := each size) == 0 ifFalse: [				(i := each nextIndexOf: $. from: start to: stop) isNil ifTrue: [				(i := each nextIndexOf: $- from: start to: stop) isNil ifTrue: [				i := stop+1]].				answer add: (each copyFrom: 1 to: i-1)]]].	^answer asSortedStrings collect: [:each | (each asSymbol asIdentityTreeNode) 		displayString: (each copyFrom: start to: each size); 		type: #category]</body><body>_nodeFor: anEntry	| answer s |	s := anEntry value.	answer := anEntry key asIdentityTreeNode,	s isBehavior ifTrue: [^answer type: #class].	s isNameSpace ifTrue: [^answer type: #namespace].	^answer type: #unknown; hasChildren: false</body><body>__nodeFor: anEntry	| s |	s := anEntry value.	s isBehavior ifTrue: [^s asIdentityTreeNode type: #class].	s isNameSpace ifTrue: [^s asIdentityTreeNode type: #namespace].	^s asTreeNode displayString: anEntry key; type: #unknown; hasChildren: false</body></methods><methods><class-id>Aragon.CategoriesBrowser</class-id> <category>accessing</category><body>selectedNode 	^categories selectedNode</body></methods><methods><class-id>Aragon.CategoriesBrowser class</class-id> <category>class initialization</category><body>initialize	CoreCategories := #(Magnitude Collections Graphics Interface Kernel System Tools OS External UIBasics UIBuilder UILooks Globalization Drag Messages)</body></methods><methods><class-id>Aragon.NewParcelBrowser</class-id> <category>initialize-release</category><body>postBuildWith: aBuilder	super postBuildWith: aBuilder.	(Aragon includesKey: #WindowResizeCorner)		ifTrue: [builder add: (Aragon at: #WindowResizeCornerSpec) new].	aBuilder keyboardProcessor 		keyboardHook: 			[:ev :ctrl | 			(ev keyValue == Character del and: [selection isKindOf: Parcel]) 				ifTrue: [self removeParcel. nil] 				ifFalse: [ev]].	self showStatus: ''</body><body>postOpenWith: aBuilder 	aBuilder window damageRepairIsLazy: false.	^super postOpenWith: aBuilder</body></methods><methods><class-id>Aragon.NewParcelBrowser</class-id> <category>private</category><body>setEnablement	self		enableAll: #(new)		inMenu: (builder menuAt: #parcelMenu)		when: selection class ~~ Parcel &amp; selection notNil.	self		enableAll: #( saveAs browseParcel )		inMenu: (self submenu: #packageMenu)		when: selection class == Parcel.	self		enableAll: #(browseParcel  emptyParcel loadSources )		inMenu: (self submenu: #editMenu)		when: selection class == Parcel.	self		enableAll: #( fileIntoParcel changesIntoParcel makeRemoveScript)		inMenu: (self submenu: #toolsMenu)		when: selection class == Parcel.	self		enableAll: #(saveParcel saveAs browseParcel  unloadParcel emptyParcel loadSources)		inMenu: (builder menuAt: #parcelMenu)		when: selection class == Parcel.	self		enableAll: #(removeParcel saveParcel unloadParcel)		inMenu: (self submenu: #packageMenu)		when: selection ~~ nil.	self		enableAll: #(renameParcel inspectParcel browseChanges )		inMenu: (self submenu: #editMenu)		when: selection ~~ nil.	self		enableAll: #(removeParcel renameParcel saveParcel  unloadParcel)		inMenu: (builder menuAt: #parcelMenu)		when: selection ~~ nil.	#(browseParcel) do: [:each | (builder componentAt: each) isEnabled: selection class == Parcel].	#(saveParcel) do: [:each | (builder componentAt: each) isEnabled: selection ~~ nil].</body><body>showStatus: aString	| w |	w := (builder componentAt: #status) widget.	w labelString: aString.</body></methods><methods><class-id>Aragon.NewParcelBrowser class</class-id> <category>class initialization</category><body>hookUp	AragonStuff hookup: self for: #ParcelList.</body><body>initialize	"self initialize"	self hookUp</body><body>isHookedUp	^AragonStuff isHookedUp: self</body><body>unhook	AragonStuff unhook: self.</body></methods><methods><class-id>Aragon.NewParcelBrowser class</class-id> <category>interface opening</category><body>open	SoleInstance isNil		ifTrue: [(SoleInstance := self new) open]		ifFalse: [SoleInstance builder window raise].	^SoleInstance</body></methods><methods><class-id>Aragon.NewParcelBrowser class</class-id> <category>enhanced - resource accessing</category><body>applicationName	^'Parcel Browser'</body><body>defaultIconName	^'@install.gif'</body></methods><methods><class-id>Aragon.PopupTreeView</class-id> <category>interface opening</category><body>openInterface: aWindowSpec	self allButOpenInterface: aWindowSpec.	builder window openTransientIn: (InputSensor cursorPoint extent: builder window extent) type: #postedMenu.	builder window displayPendingInvalidation.	self postOpenWith: builder.	^builder"	^self finallyOpenIn: (InputSensor cursorPoint extent: builder window extent) withType: #postedMenu"</body><body>postBuildWith: aBuilder 	aBuilder keyboardProcessor 		keyboardHook: 			[:ev :ctrl | 			ev keyValue == Character cr ifTrue: [self closeRequest. nil] ifFalse: [			ev keyValue == Character esc ifTrue: [self closeRequest. nil] ifFalse: [			ev]]].</body></methods><methods><class-id>Aragon.NdsFileBrowser</class-id> <category>initialize-release</category><body>initialize	| treeAdaptor roots |	roots := self childrenOfRoot.	treeAdaptor := TreeAdaptor new		childrenBlock: 			[:aDirectory | self childrenOf: aDirectory]; 		roots: roots.	tree := SelectionInTree with: treeAdaptor.	tree selectionIndexHolder compute: [:v | self row value: tree selection].</body><body>postBuildWith: aBuilder 	| dataSet widget |	(Aragon includesKey: #WindowResizeCorner)		ifTrue: [builder add: (Aragon at: #WindowResizeCornerSpec) new].	(dataSet  := builder componentAt: #tree) isNil ifTrue: [^self].	widget := dataSet widget.	self showButtons value: widget treeView displayButtons.	self showImages value: widget treeView displayImages.	self showLines value: widget treeView displayLines.	self linesAtRoot value: widget treeView linesAtRoot.	(self showButtons) compute: [:m | widget treeView displayButtons: m value].	(self showLines) compute: [:m | widget treeView displayLines: m value].	(self showImages) compute: [:m | widget treeView displayImages: m value].	(self linesAtRoot) compute: [:m | widget treeView linesAtRoot: m value].	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].	super postBuildWith: aBuilder.</body></methods><methods><class-id>Aragon.NdsFileBrowser</class-id> <category>aspects</category><body>linesAtRoot	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	linesAtRoot isNil ifTrue: [linesAtRoot := false asValue].	^linesAtRoot</body><body>row	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	row isNil ifTrue: [row := nil asValue].	^row</body><body>showButtons	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showButtons isNil ifTrue: [showButtons := false asValue].	^showButtons</body><body>showImages	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showImages isNil ifTrue: [showImages := false asValue].	^showImages</body><body>showLines	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showLines isNil ifTrue: [showLines := false asValue].	^showLines</body></methods><methods><class-id>Aragon.NdsFileBrowser</class-id> <category>events</category><body>keyPress: aKeyboardEvent 	| keyValue ctrl |	keyValue := aKeyboardEvent keyValue.	ctrl := (builder componentAt: #tree) widget controller.	keyValue == #F2					 				ifTrue: [ctrl toggleEditing]	ifFalse: [	(keyValue == Character cr and: [ctrl isBrowsing])		ifTrue: [ctrl startEditing]	ifFalse: [	keyValue == #F12								ifTrue: [ctrl stopEditing]	ifFalse: [	keyValue == Character esc 						ifTrue: [ctrl abortEditing]	ifFalse: [	(keyValue == Character del and: [ctrl isBrowsing]) 	ifTrue: [tree list removeAll: tree selections]	ifFalse: [^aKeyboardEvent]]]]].	^nil</body></methods><methods><class-id>Aragon.NdsFileBrowser</class-id> <category>actions</category><body>showOptions	(optionsDialog notNil and: [optionsDialog builder window isOpen])		ifTrue: [^optionsDialog builder window raise].	optionsDialog := SimpleDialog new.	optionsDialog builder source: self.	optionsDialog allButOpenFrom: (UISpecification from: self class optionsSpec).	optionsDialog builder open</body><body>startEditing	| widget |	widget := (builder componentAt: #tree) widget.	tree selection isNil ifTrue: [tree selectionIndex: 1].	widget controller startEditing.</body><body>stopEditing	(builder componentAt: #tree) widget controller stopEditing.</body><body>toggleEditing	| widget |	widget := (builder componentAt: #tree) widget.	tree selection isNil ifTrue: [tree selectionIndex: 1].	widget controller toggleEditing.</body></methods><methods><class-id>Aragon.FilenameWrapper</class-id> <category>accessing</category><body>attributesString	^'-----'</body><body>extension	| s i |	s := self name.	i := s lastIndexOf: $..	^i &gt; 0 ifTrue: [(s copyFrom: i+1 to: s size) asUppercase] ifFalse: ['']</body><body>filename	^filename</body><body>filename: aFilename	filename := aFilename</body><body>fileSize	fileSize isNil ifTrue: [fileSize := filename fileSize].	^fileSize</body><body>isHidden	isHidden isNil ifTrue: [isHidden := filename isReadable not].	^isHidden</body><body>isSystem	^false</body><body>modified	modified isNil		ifTrue: 			[modified := filename dates at: #modified.			modified := Timestamp fromDate: modified first andTime: modified last].	^modified</body><body>name	name == nil ifTrue: [name := filename tail].	^name</body><body>type	type isNil		ifTrue: 			[type := self isDirectory ifTrue: ['   /'] ifFalse: [self extension].			type isEmpty ifTrue: [type := '  ?']].	^type</body></methods><methods><class-id>Aragon.FilenameWrapper</class-id> <category>testing</category><body>= another	^filename = another filename</body></methods><methods><class-id>Aragon.FilenameWrapper</class-id> <category>wrapping</category><body>asString	^self name</body><body>isDirectory	^OSErrorHolder errorSignal		handle: [:ex | false]		do: [filename isDirectory]</body></methods><methods><class-id>Aragon.FilenameWrapper class</class-id> <category>instance creation</category><body>on: aFilename	^self new filename: aFilename</body></methods><methods><class-id>Aragon.OldDatasetExample</class-id> <category>initialize-release</category><body>initialize	| list |	list := List new		add: #('9/13/96'	'Jelly Beans'	10000	27		true) copy;		add: #('5/5/2005'	'Marmalade' 	50		70		true) copy;		add: #('7/30/98'	'Red Wine' 	100		1000	false) copy;		add: #('7/26/98'	'Tai Food' 		20		120		false) copy;		add: #('7/26/98'	'Tai Food' 	10		100		false) copy;		add: #('7/23/98'	'Pizza' 		20		120		false) copy;		add: #('7/20/98'	'Guinness' 	2000	700		false) copy;	yourself.	list do: [:each | each first notNil ifTrue: [each at: 1 put: (Date readFrom: each first readStream)]].	self entries list: list.</body></methods><methods><class-id>Aragon.OldDatasetExample</class-id> <category>aspects</category><body>entries	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	entries isNil		ifTrue: 			[entries := SelectionInList new.			entries selectionIndexHolder compute: [:v | self row value: entries selection]].	^entries</body><body>row	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	row isNil ifTrue: [row := nil asValue].	^row</body></methods><methods><class-id>Aragon.OldDatasetExample</class-id> <category>events</category><body>validateProductName	^self validateProductName: (builder componentAt: #entries) widget editor widget controller.</body><body>validateProductName: aController 	| newName oldName |	newName := aController editValue.	aController textHasChanged ifFalse: [^true].	newName isEmpty 		ifTrue: 			[Screen default ringBell. 			Dialog warn: 'You must enter a name for that product!'.			^false].	oldName := row value at: 2.	newName = oldName ifTrue: [^true].	entries list detect: [:each | each ~~ row value and: [(each at: 2) = newName]] ifNone: [^true].	Screen default ringBell.	(Dialog 		confirm: 'There''s already an entry with product name ''', newName, '''Are you sure you want to insert another one?')		ifTrue: [aController textHasChanged: false; accept. ^true]		ifFalse: [aController cancel].	^false</body></methods><methods><class-id>Aragon.OldDatasetExample class</class-id> <category>resources</category><body>productsMenu	^#('Jelly Beans' 'Marmalade' 'Red Wine' 'Pizza' 'Tai Food' 'Guinness') asValue</body></methods><methods><class-id>Aragon.NewDatasetExample</class-id> <category>initialize-release</category><body>postBuildWith: aBuilder 	| dataSet widget menuItem |	(Aragon includesKey: #WindowResizeCorner)		ifTrue: [builder add: (Aragon at: #WindowResizeCornerSpec) new].	(dataSet  := builder componentAt: #entries) isNil ifTrue: [^self].	widget := dataSet widget.	ColumnLayout notNil ifTrue: [widget columnLayout: ColumnLayout].	(self allowForColumnDragging) compute: [:m | widget allowForColumnDragging: m value]; value: true.	(self allowForSorting) compute: [:m | widget allowForSorting: m value]; value: true.	(self useDecoratedEditors) compute: [:m | widget useDecoratedEditors: m value]; value: true.	(self useRowSelectors) compute: [:m | widget useRowSelectors: m value]; value: true.	(self showLineNumbers) compute: [:m | widget showLineNumbers: m value]; value: false.	(self showHorizontalLines) compute: [:m | widget showHorizontalLines: m value].	(self showVerticalLines) compute: [:m | widget showVerticalLines: m value].	(self showLabels) compute: [:m | widget showLabels: m value].	widget controller performer: [:i | widget orderBy: i].	"Provide an auto new block that returns a template for new entries"	widget autoNewBlock: [self templateEntry].	"Provide a default sort block which compares two entries' product names ...""	widget defaultSortBlock: [:a :b | (a at: 2) &lt; (b at: 2)]."	widget orderBy: 2.	menuItem := ((builder menuAt: #menuBar) atNameKey: #productMenu) submenu atNameKey: #showPrices.	menuItem indication: (ColumnLayout isNil or: [(ColumnLayout includesKey: #Labels) not or: [(ColumnLayout at: #Labels) includes: 'Price']]).	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].	super postBuildWith: aBuilder.</body></methods><methods><class-id>Aragon.NewDatasetExample</class-id> <category>aspects</category><body>allowForColumnDragging	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	allowForColumnDragging isNil ifTrue: [allowForColumnDragging := false asValue].	^allowForColumnDragging</body><body>allowForSorting	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	allowForSorting isNil ifTrue: [allowForSorting := false asValue].	^allowForSorting</body><body>entries	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	entries isNil		ifTrue: 			[entries := MultiSelectionInList new.			entries selectionIndexHolder compute: [:v | self row value: entries selection]].	^entries</body><body>listMenu	listMenu isNil 		ifTrue: 			[| mb |			(mb := MenuBuilder new)				beginSubMenuLabeled: 'Sort by ...\b';					add: 'Date' -&gt; 1;					add: 'Name' -&gt; 2;					add: 'Amount' -&gt; 3;					add: 'Price' -&gt; 4;				endSubMenu.			listMenu := mb menu asValue].	^listMenu</body><body>showHorizontalLines	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showHorizontalLines isNil ifTrue: [showHorizontalLines := false asValue].	^showHorizontalLines</body><body>showLabels	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showLabels isNil ifTrue: [showLabels := true asValue].	^showLabels</body><body>showLineNumbers	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showLineNumbers isNil ifTrue: [showLineNumbers := false asValue].	^showLineNumbers</body><body>showVerticalLines	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showVerticalLines isNil ifTrue: [showVerticalLines := false asValue].	^showVerticalLines</body><body>templateEntry	^(Array new: 5)		at: 1 put: Date today;		at: 2 put: '[new]';		at: 3 put: nil;		at: 4 put: -9999;		at: 5 put: false;	yourself.</body><body>useDecoratedEditors	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	useDecoratedEditors isNil ifTrue: [useDecoratedEditors := false asValue].	^useDecoratedEditors</body><body>useRowSelectors	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	useRowSelectors isNil ifTrue: [useRowSelectors := false asValue].	^useRowSelectors</body></methods><methods><class-id>Aragon.NewDatasetExample</class-id> <category>events</category><body>keyPress: aKeyboardEvent 	| keyValue ctrl |	keyValue := aKeyboardEvent keyValue.	ctrl := (builder componentAt: #entries) widget controller.	keyValue == #F2					 				ifTrue: [ctrl toggleEditing]	ifFalse: [	(keyValue == Character cr and: [ctrl isBrowsing])		ifTrue: [ctrl startEditing]	ifFalse: [	keyValue == #F12								ifTrue: [ctrl stopEditing]	ifFalse: [	keyValue == Character esc 						ifTrue: [ctrl abortEditing]	ifFalse: [	(keyValue == Character del and: [ctrl isBrowsing]) 	ifTrue: [entries list removeAll: entries selections]	ifFalse: [^aKeyboardEvent]]]]].	^nil</body><body>noticeOfWindowClose: aWindow	| dataSet |	(dataSet  := builder componentAt: #entries) isNil ifTrue: [^optionsDialog := nil].	ColumnLayout := dataSet widget columnLayout.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Aragon.NewDatasetExample</class-id> <category>actions</category><body>colorChess	((builder componentAt: #entries) widget)		visualBlock: 			[:view :cell :gc | 			| fg bg |			(cell x + cell y) odd				ifTrue: 					[fg := ColorValue white.					bg := ColorValue gray]				ifFalse: 					[fg := ColorValue black.					bg := ColorValue white].			gc paint: bg; displayRectangle: (view boundsOfCellIndex: cell); paint: fg]; invalidate</body><body>colorColumn2	(builder componentAt: #entries) widget		visualBlockAtColumn: 2 put: 			[:view :cell :gc | 			gc paint: ColorValue veryLightGray. 			gc displayRectangle: (view boundsOfCellIndex: cell). 			gc paint: view foregroundColor];		invalidate</body><body>colorFlag	(builder componentAt: #entries) widget		visualBlock: 			[:view :cell :gc | 			| fg bg |			fg := gc paint.			bg := cell &lt; (3 @ 5)						ifTrue: [fg := ColorValue white. ColorValue royalBlue]						ifFalse: [cell y odd								ifTrue: [ColorValue pink]								ifFalse: [ColorValue white]].			gc paint: bg; displayRectangle: (view boundsOfCellIndex: cell); paint: fg];		invalidate</body><body>colorNone	(builder componentAt: #entries) widget		visualBlock: nil;		invalidate</body><body>pricesColumn	"This could as well be taken from the widget spec, such as in: 	((builder componentAt: #entries) spec columns at: 5) 	Note: index 1 = rowSelector"	^(DataSetColumnSpec new 		model: #'row 4';		width: 72;		label: 'Price'; 		labelFont: #DataSetLabel;		editorType: #InputField;		type: #fixedpoint;		alignment: #right;		font: #DataSetEntries;		formatString: '$#,##0.00;[Red]-$#,##0.00' )</body><body>showOptions	(optionsDialog notNil and: [optionsDialog builder window isOpen])		ifTrue: [^optionsDialog builder window raise].	optionsDialog := SimpleDialog new.	optionsDialog builder source: self.	optionsDialog allButOpenFrom: (UISpecification from: self class optionsSpec).	optionsDialog builder open</body><body>showPrices	| menuItem |	menuItem := ((builder menuAt: #menuBar)				atNameKey: #productMenu) submenu atNameKey: #showPrices.	menuItem indication: menuItem indication not.	self showPrices: menuItem indication.</body><body>showPrices: aBoolean 	| dataset |	dataset := builder componentAt: #entries.	aBoolean		ifTrue: [dataset widget insertColumn: (dataset spec columns at: 5) at: 4]		ifFalse: [dataset widget removeColumnAt: 4]</body><body>startEditing	| widget |	widget := (builder componentAt: #entries) widget.	entries selection isNil ifTrue: [entries selectionIndex: 1].	widget controller startEditing.</body><body>stopEditing	(builder componentAt: #entries) widget controller stopEditing.</body><body>toggleEditing	| widget |	widget := (builder componentAt: #entries) widget.	entries selection isNil ifTrue: [entries selectionIndex: 1].	widget controller toggleEditing.</body></methods><methods><class-id>Aragon.NewDatasetExample class</class-id> <category>class initialization</category><body>initialize	"Install some better looking text style to be used for the applications"	| ts |	ts := Fonts styleFrom: #(Helvetica italic 15).	TextAttributes styleNamed: #DataSetLabel put: ts.	TextAttributes styleNamed: #DataSetEntries put: ts.</body><body>resetColumns	ColumnLayout := nil</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>initialize-release</category><body>delegate: aDelegate	delegate := aDelegate</body><body>initialize	super initialize.	filters := IdentityDictionary new.				self hierarchy selectionIndexHolder onChangeSend: #selectionChanged to: self.</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>interface opening</category><body>noticeOfWindowClose: aWindow 	history isNil		ifFalse: 			[(completer := Aragon at: #Completer) isNil 				ifFalse: 					[completer removeResponsibilityFor: (builder componentAt: #history) widget controller].			history store].	super noticeOfWindowClose: aWindow</body><body>postBuildWith: aBuilder	| w |	aBuilder == builder 		ifFalse: [builder namedComponents addAll: aBuilder namedComponents associations].	(w := builder componentAt: #hierarchy) notNil 		ifTrue: [w widget 			imageList: ImageList;			linesAtRoot: hierarchy list roots size &gt; 1].	(builder componentAt: #historyBar) isNil 		ifFalse:			[self prepareHistory.			(builder componentAt: #toggleDisplay) widget 				enabledImage: (self showsInheritance 					ifTrue: [self class categoryIcon] 					ifFalse: [self class classIcon]).			(completer := Aragon at: #ConfigurableCompleter ifAbsent: [nil]) notNil				ifTrue:					[| ctrl | ctrl := (builder componentAt: #history) widget controller.					(completer := completer for: ctrl) completionPools: 						(Array 							with: (Root allClasses collect: [:each | each name]),							(Root allNameSpaces collect: [:each | each name])).					ctrl keyboardHook: [:ev :c | self keyPress: ev in: c]]].</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>history</category><body>findClass	builder keyboardProcessor 		setActive: (builder componentAt: #history) widget controller</body><body>history	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	history isNil ifTrue: [self prepareHistory].	^history</body><body>historyChanged	| hs cls |	((hs := history selection) isNil or: [hs isEmpty]) ifTrue: [^self].	hs := hs asSymbol.	(selectedNode notNil and: [hs == selectedNode subject]) ifTrue: [^self].	cls := hs asQualifiedReference isDefined 		ifTrue: [hs asQualifiedReference value]		ifFalse: [Root allClasses detect: [:one | one name == hs] 			ifNone: 				[Screen default ringBell.				^false]].	self jumpToClass: cls.	self raiseInHistory: hs asString.</body><body>historyChangeRequest: aController	^true</body><body>historyGotFocus: aController	aController selectAll</body><body>historyList	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	^history listHolder</body><body>keyPress: eve in: controller "	^(completer ~~ nil and: [| c | ((c := eve keyValue) isKindOf: Character) and: [c isAlphaNumeric]])		ifTrue: 			[| save |			save := completer.			completer := nil.			controller processKeyboardEvent: eve.			(completer := save) completeForward.			nil]		ifFalse: [eve]"^eve</body><body>prepareHistory	history isNil ifTrue: [history := ClassBrowserHistory new initialize].	^history</body><body>raiseInHistory: aString 	(history list) remove: aString ifAbsent: []; addFirst: aString.	history list size &gt; 24		ifTrue: 			[| s |			s := history list removeLast.			history associations removeKey: s asSymbol ifAbsent: []].	builder notNil 		ifTrue: 			[(builder componentAt: #back) enable.			(builder componentAt: #forward) disable].</body><body>selectionInHistory	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^self history selectionHolder</body><body>updateHistory	| n cname cls |	history isNil ifTrue: [^self].		((n := selectedNode) isNil or: [	n type == #namespace or: [	n type == #category]]) 		ifTrue: [^history selection: nil].	[n type ~~ #class] 		whileTrue: [(n := n parent) isNil ifTrue: [^history selection: nil]].	cls := n subject instanceBehavior.	history selection = (cname := cls displayString) ifTrue: [^self].	self raiseInHistory: cname.	history selection: cname</body><body>_historyChanged	| hs |	((hs := history selection) isNil or: [hs isEmpty]) ifTrue: [^self].	hs := hs asSymbol.	(selectedNode notNil and: [hs == selectedNode subject]) ifTrue: [^self].	self jumpToClass: hs asQualifiedReference value.	self raiseInHistory: hs asString.</body><body>_historyChangeRequest: aController	| s cls qr |	(s := aController editValue) isEmpty ifTrue: [^true].		(qr := (s := s asSymbol) asQualifiedReference) isDefined ifTrue: 		[aController view editText: qr value fullName; invalidate.		aController notAccepted.		^true].	cls := Root allClasses detect: [:one | one name == s] 		ifNone: 			[completer isNil ifFalse: [completer completeFor: aController].			Screen default ringBell.			^false].	aController view editText: cls name; invalidate.	aController notAccepted.	^true</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>children</category><body>childrenFor: anEntry type: aType node: aNode	anEntry == #root ifTrue: [^self childrenForRoot].	aType == #namespace ifTrue: [^self childrenForNamespace: anEntry].	aType == #category ifTrue: [^self childrenForCategory: anEntry node: aNode].	aType == #class ifTrue: [^self childrenForClass: anEntry].	aType == #variables			ifTrue:				[anEntry key == #instvars ifTrue: [^self childrenForInstvarsOf: anEntry value].				anEntry key == #classvars ifTrue: [^self childrenForClassvarsOf: anEntry value]].	aType == #protocol ifTrue: [^self childrenForProtocol: anEntry key in: anEntry value].	^#()</body><body>childrenForCategory: aCategory in: env 	"Get all the classes in aCategory from the system organizer and 	wrap them in an Association with #class as the key."	| answer donts fx f1 f2 |	answer := self subCategoriesOf: aCategory in: env.	donts := self withAllParents: env.	fx := filters at: #namespace ifAbsent: [[:c | true]].	f1 := [:c | (donts includes: c) not and: [fx value: c]].	f2 := filters at: #class ifAbsent: [[:c | true]].	(env organization categories includes: aCategory)		ifTrue: [(env organization listAtCategoryNamed: aCategory) do: 			[:each || b | b := env localBindingFor: each.				((b isForNameSpace ifTrue: [f1] ifFalse: [f2]) value: b value)					ifTrue: [answer add: (self nodeFor: b)]]].	^answer</body><body>childrenForCategory: aCategory node: aNode	"Get all the classes in aCategory from the system organizer and 	wrap them in an Association with #class as the key."	| n |	n := aNode. 	[n isNil or: [n type == #namespace]] whileFalse: [n := n parent].	^self childrenForCategory: aCategory in: (n isNil ifTrue: [Smalltalk] ifFalse: [n subject]).</body><body>childrenForClass2: aClass	^(aClass subclasses collect: [:each | (self nodeForClass: each)			displayString: (each name asText emphasizeAllWith: #italic);			children: ((each == Class or: [each subclasses isEmpty]) ifTrue: [#()])]) 		asSortedCollection</body><body>childrenForClass: aClass 	"Get all the protocol names in aClass from the class's organizer."	| answer node cats f |	self showsInheritance ifTrue: [^self childrenForClass2: aClass].	answer := OrderedCollection new.	f := filters at: #protocol ifAbsent: [[:x | true]].	(f value: #instvars) 		ifTrue:			[hierarchy list fetchChildrenFor: ((node := AragonTreeNode for: #instvars -&gt; aClass) type: #variables).			node hasChildren ifTrue: [answer add: (node displayString: 'Instance Variables')]].	(f value: #classvars) 		ifTrue:			[hierarchy list fetchChildrenFor: ((node := AragonTreeNode for: #classvars -&gt; aClass) type: #variables).			node hasChildren ifTrue: [answer add: (node displayString: 'Class Variables')]].	cats := aClass organization categories select: f.	answer addAll: (cats		collect: [:each | (AragonTreeNode for: each -&gt; aClass) type: #protocol; displayString: each]).	aClass isMeta		ifFalse: 			[hierarchy list fetchChildrenFor: (node := 				aClass class asIdentityTreeNode displayString: aClass class name; type: #class).			node hasChildren ifTrue: [answer add: node]].	^answer</body><body>childrenForClassvarsOf: aClass 	"Get all the instance variable names aClass and wrap them in Arrays 	with the following entries: #(#instvar &lt;the inst var name&gt;)."	^aClass classVarNames asArray collect: [:each | (each -&gt; aClass) asTreeNode type: #classvar; displayString: each; hasChildren: false]</body><body>childrenForInstvarsOf: aClass 	"Get all the instance variable names aClass and wrap them in Arrays 	with the following entries: #(#instvar &lt;the inst var name&gt;)."	^aClass instVarNames collect: [:each | (each -&gt; aClass) asTreeNode type: #instvar; displayString: each; hasChildren: false]</body><body>childrenForNamespace: aNamespace 	| answer cats |	answer := OrderedCollection new.	answer addAll: (self childrenForCategory: #'' in: aNamespace).	cats := self subCategoriesOf: nil in: aNamespace."	(cats size == 1 and: [cats first = aNamespace name])		ifTrue:			[cats := self subCategoriesOf: cats first subject in: aNamespace]."	answer addAll: cats."	answer addAll: (self subCategoriesOf: nil in: aNamespace).	answer addAll: (self nameSpacesIn: aNamespace)."	^answer</body><body>childrenForProtocol: aProtocol in: aClass 	"Get all the methods in aProtocol of aClass from the class's organizer and wrap them in Arrays with 	the following entries: #(#method &lt;the method&gt;)."	^(aClass organization listAtCategoryNamed: aProtocol)		collect: [:each | (each -&gt; aClass) asTreeNode type: #method; displayString: each; hasChildren: false]</body><body>childrenForRoot	"Get all the names of class categories from the system organizer and wrap them in Arrays with the 	following entries: #(#category &lt;the category name&gt;)."	^Smalltalk organization categories collect: [:each | each asIdentityTreeNode type: #category]</body><body>coreCategories	^(self subCategoriesOf: nil)		select: [:each | CoreCategories includes: each subject].</body><body>nameSpacesIn: aNamespace 	| answer |	answer := OrderedCollection new.	aNamespace localBindings 		do: [:b | b isForNameSpace ifTrue: [answer add: (b value asTreeNode type: #namespace)]].	^answer</body><body>rootCategories	| answer |	(answer := OrderedCollection new) add: ((#Core asTreeNode) 		type: #category; 		displayString: 'Core Classes').	(self subCategoriesOf: nil)		do: [:each | (CoreCategories includes: each subject)				ifFalse: [answer add: each]].	^answer</body><body>roots	^AragonStuff systemVersion == 5		ifTrue: [Array with: (Smalltalk asIdentityTreeNode type: #namespace)]		ifFalse: [self rootCategories]</body><body>subCategoriesOf: aCategory 	^self subCategoriesOf: aCategory in: Smalltalk</body><body>subCategoriesOf: aCategory in: environment	| answer pattern start cats f |	answer := Set new.	aCategory == #'' ifTrue: [^answer].	aCategory isNil		ifTrue: [pattern := '*'. start := 1]		ifFalse: [pattern := aCategory , '*'.  start := pattern size+1].	cats := environment organization categories.	(f := filters at: #category ifAbsent: []) notNil 		ifTrue: [cats := cats select: f].	cats		do: [:each | (each ~= aCategory and: [pattern match: each])			ifTrue: 				[| i stop |				(stop := each size) == 0 ifFalse: [				(i := each nextIndexOf: $. from: start to: stop) isNil ifTrue: [				(i := each nextIndexOf: $- from: start to: stop) isNil ifTrue: [				i := stop+1]].				answer add: (each copyFrom: 1 to: i-1)]]].	^answer asSortedStrings collect: [:each | (each asSymbol asIdentityTreeNode) 		displayString: (each copyFrom: start to: each size); 		type: #category]</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>private</category><body>classFor: aSymbol	^aSymbol asQualifiedReference isDefined 		ifTrue: [aSymbol asQualifiedReference value]		ifFalse: [Root allClasses detect: [:one | one name == aSymbol] ifNone: []].</body><body>environmentFor: aNode 	^	aNode type == #class ifTrue: [aNode subject environment] ifFalse: [	aNode type == #namespace ifTrue: [aNode subject environment] 	ifFalse: 		[| n |  n := aNode.		[n type == #namespace] whileFalse: [n := n parent].		n subject]]</body><body>expandCategory: aCategory	| s tokens |	(s := aCategory) == #'Drag-And-Drop' 		ifFalse:			[| t c |			c := ((s := aCategory) includes: $.) ifTrue: [$.] ifFalse: [$-].			tokens := s tokensBasedOn: c.			c := String with: c.			tokens := (OrderedCollection with: (t := tokens first asSymbol)) 				addAll: ((2 to: tokens size) collect: [:i | (t := t , c, (tokens at: i)) asSymbol]);				yourself]		ifTrue: [tokens := OrderedCollection with: s].	(CoreCategories includes: tokens first) ifTrue: [tokens addFirst: #Core].	hierarchy list expandPath: tokens.</body><body>expandClass: aClass 	self expandCategory: aClass category.	hierarchy list expand: aClass.</body><body>isApp: aClass	^(aClass inheritsFrom: ApplicationModel) and: [aClass respondsTo: #windowSpec]</body><body>nodeFor: aBinding	aBinding isForClass ifTrue: [^self nodeForClass: aBinding value].	aBinding isForNameSpace ifTrue: [^aBinding value asIdentityTreeNode type: #namespace].	^aBinding asTreeNode type: #unknown; hasChildren: false</body><body>nodeForClass: aClass 	| answer |	answer := aClass asIdentityTreeNode type: #class; hasChildren: self showsInheritance not.	(self isApp: aClass) ifTrue: [answer icon: self class appIcon].	^answer</body><body>pathTo: aClassOrNamespace	| n answer |	n := aClassOrNamespace.	answer := OrderedCollection new.	[n ~~ Smalltalk] 		whileTrue: 			[answer addAll: (self tokensInCategory: n category) reverse.			answer add: (n := n environment)].	^answer reverse</body><body>tokensInCategory: aCategory	^aCategory == #'Drag-And-Drop' 		ifTrue: [OrderedCollection with: aCategory]		ifFalse:			[| tokens t c s |			c := ((s := aCategory) includes: $.) ifTrue: [$.] ifFalse: [$-].			tokens := s tokensBasedOn: c.			c := String with: c.			(OrderedCollection with: (t := tokens first asSymbol)) 				addAll: ((2 to: tokens size) collect: [:i | (t := t , c, (tokens at: i)) asSymbol]);				yourself]</body><body>withAllParents: aNamespace 	| answer n |	answer := OrderedCollection with: (n := aNamespace).	[n == nil] whileFalse: [answer add: (n := n environment)].	^answer</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>accessing</category><body>filters	^filters</body><body>hierarchy	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined."	hierarchy isNil 		ifTrue: 			[hierarchy := SelectionInTree with: (TreeAdaptor new 				childrenBlock: [:anEntry :type :node | self childrenFor: anEntry type: type node: node]; 				roots: self roots;				expandAt: 1)].	^hierarchy</body><body>historyMenu	^	[| mb |	mb := MenuBuilder new.	history list do: [:each | mb add: each -&gt; [self jumpToClass: (Smalltalk at: each)]].	mb menu]</body><body>menu	menuHolder isNil ifTrue: [menuHolder := Menu new asValue].	^menuHolder</body><body>resetFilters	filters := IdentityDictionary new</body><body>selectedNode 	^hierarchy selectedNode</body><body>showsInheritance	^temp notNil</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>actions</category><body>doubleClick	selectedNode type == #class 		ifTrue: 			[self showsInheritance 				ifTrue: [temp key == selectedNode subject 					ifTrue: [^self showCategoriesFor: selectedNode subject]].			self showInheritanceFor: selectedNode subject]		ifFalse: [hierarchy list toggleExpand: selectedNode].</body><body>goBack	| h i |	h := history list.	i := history selectionIndex.	(i := i+1) &gt; h size ifTrue: [^Screen default ringBell].	history selectionIndex: i.	self jumpToClass: (h at: i) asSymbol.	i == h size ifTrue: [(builder componentAt: #back) disable].	(builder componentAt: #forward) enable.</body><body>goForward	| h i |	h := history list.	i := history selectionIndex.	(i := i-1) &lt; 1 ifTrue: [^Screen default ringBell].	history selectionIndex: i.	self jumpToClass: (h at: i) asSymbol.	i&lt;2 ifTrue: [(builder componentAt: #forward) disable].	(builder componentAt: #back) enable.</body><body>jumpToClass: aClassOrSymbol 	| cls |	(cls := aClassOrSymbol) isSymbol ifTrue: [cls := self classFor: cls].	(hierarchy list includes: cls)		ifFalse: 			[self showsInheritance ifTrue: [self showCategoriesFor: nil].			hierarchy list expandAll: (self pathTo: cls)].	hierarchy selection: cls.</body><body>refreshDisplay	| selection expandedNodes |	builder isNil ifTrue: [^self].	selection := hierarchy selection.	expandedNodes := hierarchy list expandedEntries.	(hierarchy list) roots: self roots; expandAll: expandedNodes.	hierarchy selection: selection.	history cleanUp.</body><body>selectionChanged	selectedNode := hierarchy selectedNode.	self updateHistory.</body><body>showCategoriesFor: aClass	self showsInheritance ifFalse: [^false].	(builder componentAt: #hierarchy) widget linesAtRoot: hierarchy list roots size &gt; 1.	(builder componentAt: #toggleDisplay) widget 		enabledImage: self class classIcon;		invalidate.	hierarchy list roots: temp value.	aClass notNil ifTrue: [self jumpToClass: aClass].	temp := nil.	^true</body><body>showInheritanceFor: aClass	| node cls root |	temp isNil ifTrue: [temp := aClass -&gt; self hierarchy list roots].	temp key: aClass.	node := self nodeForClass: aClass.	node displayString: node subject name asText allBold.	cls := aClass superclass.	root := node.	[cls isNil]		whileFalse: 			[| r |			r := self nodeForClass: cls.			r children: (Array with: root).			root := r status: #expanded.			cls := cls superclass].	aClass == Class ifFalse: [node children: nil].	(builder notNil and: [history notNil])		ifTrue: 			[(builder componentAt: #hierarchy) widget linesAtRoot: false.			(builder componentAt: #toggleDisplay) widget 				enabledImage: self class categoryIcon;				invalidate].	hierarchy list root: root; expand: node.	hierarchy selection: node.	^true</body><body>toggleShowInheritance	| selectedClass |	(selectedNode isNil or: [selectedNode type == #category]) 		ifTrue: [^Screen default ringBell].	selectedClass := selectedNode subject.	self showsInheritance		ifTrue: [self showCategoriesFor: selectedClass]		ifFalse: [self showInheritanceFor: selectedClass]</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>drag&amp;drop</category><body>canDropFrom: aDragContext 	^aDragContext sourceData contextApplication == self and: 	[#(namespace category class protocol selector) includes: aDragContext key]</body><body>canDropFrom: aDragContext onto: targetNode 	| source node |	source := aDragContext sourceData clientData.	node := source at: #node.	aDragContext key == #category		ifTrue:			[^(targetNode type == #category or: [targetNode type == #namespace]) and: [			targetNode ~~ node and: [targetNode ~~ node parent and: [			(targetNode path includes: node) not]]]].	aDragContext key == #class		ifTrue:			[^targetNode type == #category and: [			targetNode subject ~~ node subject category]].	aDragContext key == #selector		ifTrue: 			[targetNode type == #protocol 				ifTrue: 					[| cls |  cls := targetNode subject value.					^cls instanceBehavior name == (source at: #class) and: 					[targetNode subject key ~~ (source at: #protocol)]]].			targetNode type == #method ifTrue: [^self canDropFrom: aDragContext onto: targetNode parent].	aDragContext key == #protocol		ifTrue: 			[targetNode type == #protocol 				ifTrue: 					[| cls |  cls := targetNode subject value.					cls instanceBehavior name == (source at: #class) and: 					[targetNode subject key ~~ (source at: #protocol)]].			targetNode type == #class ifTrue: [^targetNode subject name == (source at: #class)]].	^false</body><body>drop: source onto: target with: aDragContext	delegate isNil ifTrue: [^false].	aDragContext key == #namespace ifTrue: [^delegate dropNamespace: source onto: target].	aDragContext key == #category ifTrue: [^delegate dropCategory: source onto: target].	aDragContext key == #class ifTrue: [^delegate dropClass: source onto: target].	aDragContext key == #selector ifTrue: [^delegate dropSelector: source onto: target].	aDragContext key == #protocol ifTrue: [^delegate dropProtocol: source onto: target].	^false</body><body>dropEnterWith: aDragContext 	| widget dictionary |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	widget := (builder componentAt: #hierarchy) widget.	dictionary := IdentityDictionary new.							"V2 Step 3"	dictionary at: #widget put: widget.							"V2 Step 4"	dictionary at: #targetIndex put: widget targetIndex.			"V2 Step 4"	dictionary at: #hasFocus put: widget hasFocus.				"V2 Step 4"	aDragContext dropTarget clientData: dictionary.			 	"V2 Step 5"	widget hasFocus: true.									"V2 Step 6"	^#dropEffectMove</body><body>dropExitWith: aDragContext 	| widget dictionary |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	dictionary := aDragContext dropTarget clientData.	widget := dictionary at: #widget.	widget targetIndex: (dictionary at: #targetIndex).	widget hasFocus: (dictionary at: #hasFocus).	aDragContext dropTarget clientData: nil.	^#dropEffectNone</body><body>dropOverWith: aDragContext 	| treeView target |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.	treeView showDropFeedbackIn: aDragContext allowScrolling: true.	target := hierarchy list nodeAt: treeView targetIndex.	(self canDropFrom: aDragContext onto: target) ifFalse: [^#dropEffectNone].	^#dropEffectMove</body><body>dropWith: aDragContext 	| treeView target source |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.	source := aDragContext sourceData clientData.	target := self hierarchy list nodeAt: treeView targetIndex.	(self canDropFrom: aDragContext onto: target)		ifTrue:  			[(self drop: source onto: target with: aDragContext)				ifFalse: [^#dropEffectNone].			self moveNode: (source at: #node) to: target].		^self dropExitWith: aDragContext</body><body>moveNode: aNode to: targetNode	| tree |	tree := hierarchy list.	hierarchy selectionIndexHolder doWithoutDependents:	[		| i1 i2 |		tree expand: targetNode.		i1 := tree indexOf: aNode.		tree doWithoutDependents: 			[tree remove: aNode; addFirst: aNode asChildOf: targetNode].		i2 := tree indexOf: aNode.		i2 &lt; i1 ifTrue: [| t | t := i2. i2 := i1. i1 := t].		aNode isExpanded ifTrue: [i2 := i2 + aNode children size].		hierarchy selection: aNode.		tree changed: #range with: (i1-1 to: i2+1).	].	(builder componentAt: #hierarchy) widget updateSelectionChannel</body><body>startDraggingFrom: aController 	"Drag the currently selected entry."	| node dm data subject info |	node := self selectedNode. 	data := DragDropData new.	data key: node type.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: (info := IdentityDictionary new		add: #node -&gt; node;		add: node type -&gt; node subject;		add: #environment -&gt; (self environmentFor: node);	yourself).	((subject := node subject) isKindOf: Association)		ifTrue: 			[info add: #class -&gt; subject value.			info add: node type -&gt; subject key].	dm := DragDropManager withDropSource: DropSource new withData: data.	dm doDragDrop</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser class</class-id> <category>class initialization</category><body>initialize	ImageList := IdentityDictionary new		add: #namespace -&gt;	(AragonIcon named: #pie );		add: #category	-&gt;	self categoryIcon;		add: #class		-&gt;	self classIcon;		add: #app 		-&gt;	self appIcon;		add: #protocol	-&gt;	(AragonIcon named: #bricks color: #royalBlue);		add: #variables	-&gt;	(AragonIcon named: #parts1);		add: #method	-&gt;	(AragonIcon named: #brick color: #green);		add: #instvar		-&gt;	(AragonIcon named: #brick color: #red);		add: #classvar	-&gt;	(AragonIcon named: #brick color: #yellow);		add: #unknown	-&gt;	(AragonIcon named: #leaf);	yourself.	CoreCategories := 	#(		Magnitude 		Collections 		Graphics 		Interface 		Kernel 		System 		Tools 		OS 		External 		UIBasics 		UIBuilder 		UILooks 		Globalization 		Drag #'Drag-And-Drop' 		Messages	).</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser class</class-id> <category>constants</category><body>appIcon	^AragonIcon named: #largeBrick color: #darkRed</body><body>categoryIcon	^AragonIcon named: #folder2 color: ColorValue royalBlue</body><body>classIcon	^AragonIcon named: #largeBrick color: #red</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>enhanced - Aragon</category><body>openAragonAppFor: aSymbol	| app |	app := Aragon at: aSymbol ifAbsent: [^false].	^(app isHookedUp and: [InputState default shiftDown not])		ifTrue: [app open. true]		ifFalse: [false]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body>applicationForClassNamed: aSymbol do: aBlock	"Evaluate aBlock with the class named aSymbol, if it exists.  If it	 does not exist issue a warning."	| cl |	cl := (Aragon.AragonStuff applicationForClassNamed: aSymbol) valueOrDo:		[^Dialog warn: ((#warnClassNotInSystem &lt;&lt; #dialogs &gt;&gt; 'Class &lt;1s&gt; not in system.')				expandMacrosWith: aSymbol asString)].	^aBlock value: cl</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>enhanced - Aragon</category><body>openAragonApp: aSymbol 	(Aragon at: aSymbol 		ifAbsent: [^Dialog warn: 'The Aragon application ''' , aSymbol , ''' is not installed.']) open</body></methods><methods><class-id>Tools.ParcelTabApplication</class-id> <category>enhanced - Aragon</category><body>basicInitialize	manager := Parcel.	parcelFilterOn := unparceledFilterOn := conflictsFilterOn := false.	parcelDefType := #parcelComment asValue.	components := #().	self addDependents.</body></methods><methods><class-id>Aragon.World class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'The World' 			#min: #(#Point 291 153 ) 			#bounds: #(#Rectangle 495 436 786 589 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ArbitraryComponentSpec 					#layout: #(#LayoutFrame -130 0.5 -61 0.5 130 0.5 59 0.5 ) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 0 0.5 0.5 0.5 ) 					#name: #fontIcon 					#label: #'@World.bmp' 					#style: #Special 					#hasCharacterOrientedLabel: false ) ) ) )</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>resources</category><body>mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;File' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;New' 							#value: #newFile 							#shortcutKeyCharacter: $n ) 						#(#MenuItem 							#rawLabel: '&amp;Open ...' 							#value: #openFile 							#shortcutKeyCharacter: $o ) 						#(#MenuItem 							#rawLabel: '&amp;Save' 							#value: #saveFile 							#shortcutKeyCharacter: $s ) 						#(#MenuItem 							#rawLabel: 'Save &amp;as ...' 							#value: #saveFileAs ) 						#(#MenuItem 							#rawLabel: '&amp;Print' 							#value: #hardcopy 							#shortcutKeyCharacter: $p ) 						#(#MenuItem 							#rawLabel: 'E&amp;xit' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(4 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Edit' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Undo' 							#value: #undo 							#shortcutKeyCharacter: $Z ) 						#(#MenuItem 							#rawLabel: '&amp;Again' 							#value: #again 							#shortcutKeyCharacter: $A ) 						#(#MenuItem 							#rawLabel: '&amp;Cut' 							#value: #cut 							#shortcutKeyCharacter: $X ) 						#(#MenuItem 							#rawLabel: 'C&amp;opy' 							#value: #copySelection 							#shortcutKeyCharacter: $C ) 						#(#MenuItem 							#rawLabel: '&amp;Paste' 							#value: #paste 							#shortcutKeyCharacter: $V ) 						#(#MenuItem 							#rawLabel: '&amp;Find ...' 							#value: #find 							#shortcutKeyCharacter: $F ) 						#(#MenuItem 							#rawLabel: '&amp;Replace ...' 							#value: #replace 							#shortcutKeyCharacter: $R ) ) #(2 3 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Code' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Do it' 							#value: #doIt ) 						#(#MenuItem 							#rawLabel: '&amp;Print it' 							#value: #printIt ) 						#(#MenuItem 							#rawLabel: '&amp;Explain it' 							#value: #explain ) 						#(#MenuItem 							#rawLabel: '&amp;Inspect it ...' 							#value: #inspectIt 							#shortcutKeyCharacter: $I ) ) #(4 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Help' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: 'Contents ...' 							#value: #helpContents ) 						#(#MenuItem 							#rawLabel: 'About ...' 							#value: #helpAbout ) ) #(1 1 ) nil ) ) ) #(4 ) nil ) decodeAsLiteralArray</body><body>textMenu	"MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;Find ...' 				#value: #find 				#shortcutKeyCharacter: $F 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Replace ...' 				#value: #replace 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Again' 				#value: #again 				#shortcutKeyCharacter: $A 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Undo' 				#value: #undo 				#shortcutKeyCharacter: $Z 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Cu&amp;t' 				#value: #cut 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Copy' 				#value: #copySelection 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Paste' 				#value: #paste 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Do it' 				#value: #doIt ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Print it' 				#value: #printIt ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Inspect...' 				#value: #inspectIt 				#shortcutKeyCharacter: $I 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Browse...' 				#nameKey: #browseSymbol 				#value: #browseSymbol ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Explain...' 				#nameKey: #explain 				#value: #explain ) ) #(2 2 3 5 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#properties: 			#(#PropertyListDictionary #dragOverSelector 				#dropOver: #dropSelector 				#dropWith: ) 			#label: 'Text Editor' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 537 459 1063 822 ) 			#flags: 4 			#menu: #mainMenu 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#InputFieldSpec 					#layout: #(#LayoutFrame 5 0 -16 1 -15 1 0 1.0 ) 					#flags: 0 					#model: #status 					#style: #('Arial' #italic 15 ) 					#isReadOnly: true ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 0 0 1 0 0 1.0 -19 1 ) 					#name: #text 					#isOpaque: true 					#model: #text 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#requestValueChangeSelector: #saveFile ) 					#tabable: true 					#menu: #textMenu 					#style: #'TextEditor.Contents' ) ) ) )</body></methods><methods><class-id>Aragon.CardViewExample class</class-id> <category>interface specs</category><body>canvas1Spec	"UIPainter new openOnClass: self andSelector: #canvas1Spec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 484 427 797 597 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.501597 0 0.352941 0.5 0.5 ) 					#name: #canvasLabel 					#colors: 					#(#LookPreferences 						#setForegroundColor: #(#ColorValue #red ) ) 					#label: 'Canvas 1' 					#style: #('Times New Roman' #italic 72 ) ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 50 0 -44 1 ) 					#name: #straight 					#model: #tabStyle 					#label: 'Windows 95' 					#select: #straight ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 174 0 -44 1 ) 					#name: #slanted 					#model: #tabStyle 					#label: 'NextStep' 					#select: #slanted ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 12 0 -69 1 -12 1 -13 1 ) 					#label: 'Tab Style' ) ) ) )</body><body>canvas2Spec	"UIPainter new openOnClass: self andSelector: #canvas2Spec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 744 635 1057 805 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 0 0.5 0.5 0.5 ) 					#name: #canvasLabel 					#colors: 					#(#LookPreferences 						#setForegroundColor: #(#ColorValue #green ) ) 					#label: 'Canvas 2' 					#style: #('Times New Roman' #italic 72 ) ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 12 0 -32 1 ) 					#label: 'Just a dummy' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 186 0 -31 1 0 0.955272 -11 1 ) 					#colors: 					#(#LookPreferences 						#setBackgroundColor: #(#ColorValue #white ) ) ) ) ) )</body><body>canvas3Spec	"UIPainter new openOnClass: self andSelector: #canvas3Spec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 214 417 527 587 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 0 0.5 0.5 0.5 ) 					#name: #canvasLabel 					#colors: 					#(#LookPreferences 						#setForegroundColor: #(#ColorValue #blue ) ) 					#label: 'Canvas 3' 					#style: #('Times New Roman' #italic 72 ) ) 				#(#ActionButtonSpec 					#layout: #(#LayoutOrigin 12 0 -32 1 ) 					#label: 'Do Nothing' 					#defaultable: true ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'CardView Example' 			#bounds: #(#{Graphics.Rectangle} 640 512 1035 744 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.CardViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 4 0 -4 1 -33 1 ) 					#name: #tabs 					#flags: 8 					#model: #tabs 					#tabable: true 					#style: #Label 					#labelSuppliedByApplication: true 					#buildPages: true 					#cachePages: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -181 1 -27 1 -95 1 -4 1 ) 					#model: #closeRequest 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -91 1 -27 1 -5 1 -4 1 ) 					#model: #closeRequest 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Aragon.ChangeSetBrowser class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Changes Set' 			#bounds: #(#{Graphics.Rectangle} 640 512 990 804 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragStartSelector 						#dragFrom: #dragOkSelector 						#canDragFrom: ) 					#layout: #(#{Graphics.LayoutFrame} 7 0 2 0 -7 1 -14 1 ) 					#name: #changes 					#model: #changes 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectionChanged 						#doubleClickSelector: #browseSelection ) 					#menu: #changesMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) ) ) )</body></methods><methods><class-id>Aragon.ChangeSetBrowser class</class-id> <category>resources</category><body>changesMenu	"MenuEditor new openOnClass: self andSelector: #changesMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Browse\b' 				#nameKey: #browseSelection 				#value: #browseSelection ) 			#(#MenuItem 				#rawLabel: '&amp;Remove' 				#value: #removeSelection ) 			#(#MenuItem 				#rawLabel: '&amp;Refresh' 				#value: #refreshView ) ) #(2 1 ) nil ) decodeAsLiteralArray</body><body>menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;ChangeSet' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Browse Selected Entry\b' 							#value: #browseSelection ) 						#(#MenuItem 							#rawLabel: 'Default &amp;Inspector' 							#value: #defaultInspect ) 						#(#MenuItem 							#rawLabel: '&amp;Empty...' 							#nameKey: #emptyChangeSet 							#value: #emptyChangeSet ) 						#(#MenuItem 							#rawLabel: 'File &amp;In...' 							#value: #fileIn ) 						#(#MenuItem 							#rawLabel: 'File &amp;Out...' 							#value: #fileOut 							#shortcutKeyCharacter: $f ) ) #(3 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;View' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Refresh\b' 							#value: #refreshView ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>resources</category><body>hierarchyMenu	"MenuEditor new openOnClass: self andSelector: #hierarchyMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Delete...' ) 			#(#MenuItem 				#rawLabel: '&amp;Rename...' ) 			#(#MenuItem 				#rawLabel: '&amp;Properties' ) 			#(#MenuItem 				#rawLabel: 'Cu&amp;t' 				#nameKey: #cutFile 				#value: #cutFile 				#shortcutKeyCharacter: $x ) 			#(#MenuItem 				#rawLabel: '&amp;Copy' 				#nameKey: #copyFile 				#value: #copyFile 				#shortcutKeyCharacter: $c ) ) #(3 2 ) nil ) decodeAsLiteralArray</body><body>listMenu	"MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Open\b' 				#nameKey: #openFile 				#value: #openFile ) 			#(#MenuItem 				#rawLabel: 'Open in E&amp;xplorer' 				#enabled: false 				#nameKey: #openInShell 				#value: #openInShell ) 			#(#MenuItem 				#rawLabel: 'Open In' 				#nameKey: #openIn 				#value: #openIn 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Text Editor' 							#nameKey: #openInTextEditor 							#value: #openInTextEditor ) 						#(#MenuItem 							#rawLabel: '&amp;Change List' 							#nameKey: #openInChangeList 							#value: #openInChangeList ) ) #(2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Rename...' 				#nameKey: #renameFile 				#value: #renameFile ) 			#(#MenuItem 				#rawLabel: '&amp;Delete...' 				#nameKey: #removeFile 				#value: #removeFile ) 			#(#MenuItem 				#rawLabel: '&amp;File In' 				#nameKey: #fileIn 				#value: #fileIn ) 			#(#MenuItem 				#rawLabel: 'Cu&amp;t' 				#nameKey: #cutFile 				#value: #cutFile 				#shortcutKeyCharacter: $x ) 			#(#MenuItem 				#rawLabel: '&amp;Copy' 				#nameKey: #copyFile 				#value: #copyFile 				#shortcutKeyCharacter: $c ) 			#(#MenuItem 				#rawLabel: '&amp;Paste' 				#nameKey: #pasteFile 				#value: #pasteFile 				#shortcutKeyCharacter: $v ) 			#(#MenuItem 				#rawLabel: '&amp;Properties' 				#nameKey: #showProperties 				#value: #showProperties ) ) #(3 3 3 1 ) nil ) decodeAsLiteralArray</body><body>mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;File' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;New' 							#submenu: #(#Menu #(									#(#MenuItem 										#rawLabel: '&amp;Folder\b' 										#nameKey: #createFolder 										#value: #createFolder 										#shortcutKeyCharacter: $d ) 									#(#MenuItem 										#rawLabel: '&amp;Text File' 										#nameKey: #createTextFile 										#value: #createTextFile ) ) #(2 ) nil ) ) 						#(#MenuItem 							#rawLabel: '&amp;Go To...' 							#nameKey: #goTo 							#value: #goTo 							#shortcutKeyCharacter: $g ) 						#(#MenuItem 							#rawLabel: '&amp;Delete...' ) 						#(#MenuItem 							#rawLabel: '&amp;Rename...' ) 						#(#MenuItem 							#rawLabel: '&amp;Properties' ) 						#(#MenuItem 							#rawLabel: '&amp;Close\b' 							#nameKey: #closeRequest 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(2 3 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Edit' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Undo' 							#nameKey: #undo 							#value: #undo 							#shortcutKeyCharacter: $z ) 						#(#MenuItem 							#rawLabel: 'Cu&amp;t' 							#nameKey: #cutFile 							#value: #cutFile 							#shortcutKeyCharacter: $x ) 						#(#MenuItem 							#rawLabel: '&amp;Copy' 							#nameKey: #copyFile 							#value: #copyFile 							#shortcutKeyCharacter: $c ) 						#(#MenuItem 							#rawLabel: '&amp;Paste' 							#nameKey: #pasteFile 							#value: #pasteFile 							#shortcutKeyCharacter: $v ) 						#(#MenuItem 							#rawLabel: 'Select &amp;All' 							#nameKey: #selectAll 							#value: #selectAll 							#shortcutKeyCharacter: $a ) 						#(#MenuItem 							#rawLabel: '&amp;Invert Selection' 							#nameKey: #invertSelection 							#value: #invertSelection ) ) #(1 3 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;View' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Refresh\b' 							#nameKey: #refreshAll 							#value: #refreshAll ) 						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #setupOptions 							#value: #setupOptions ) ) #(2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Help' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;About\b' 							#nameKey: #helpAbout 							#value: #helpAbout ) ) #(1 ) nil ) ) ) #(4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'File Browser' 			#bounds: #(#{Graphics.Rectangle} 541 512 1280 806 ) 			#flags: 4 			#menu: #mainMenu 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterTree: #dropSelector 						#dropOnTree: #dragOverSelector 						#dropOverTree: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -1 0.3333 -20 1 ) 					#name: #hierarchy 					#model: #hierarchy 					#menu: #hierarchyMenu 					#multipleSelections: false 					#style: #DataSetEntries 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) 				#(#{Aragon.NewDataSetSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterList: #dragStartSelector 						#dragFromList: #dropSelector 						#dropOnList: #dragOverSelector 						#dropOverList: ) 					#layout: #(#{Graphics.LayoutFrame} 1 0.3333 0 0 0 1 -20 1 ) 					#name: #entries 					#model: #entries 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #openFile ) 					#menu: #listMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow name' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#requestFocusOutSelector: 								#renameFileWith: 								#requestValueChangeSelector: 								#renameFileWith: ) 							#label: 'Name' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 167 							#editorType: #InputField 							#font: #DataSetEntries 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow type' 							#label: 'Type' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 40 							#rendererType: #Text 							#editorType: #None 							#font: #DataSetEntries 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow fileSize' 							#label: 'Size' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 74 							#rendererType: #Text 							#editorType: #None 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow modified' 							#label: 'Modified' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 119 							#rendererType: #Text 							#editorType: #None 							#font: #DataSetEntries 							#type: #timestamp 							#noScroll: false 							#formatString: 'dd-mm-yy hh:mm:ss' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow attributesString' 							#label: 'Attributes' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 70 							#rendererType: #Text 							#editorType: #None 							#font: #DataSetEntries 							#noScroll: false ) ) 					#multipleSelections: true 					#useModifierKeys: true ) ) ) )</body></methods><methods><class-id>Aragon.FontPanel class</class-id> <category>interface specs</category><body>installAsSpec	"UIPainter new openOnClass: self andSelector: #installAsSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Install Font As...' 			#min: #(#Point 267 327 ) 			#max: #(#Point 267 327 ) 			#bounds: #(#Rectangle 507 349 774 676 ) 			#menu: #mainMenu 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 14 64 ) 					#label: 'Install As:' ) 				#(#ComboBoxSpec 					#layout: #(#Rectangle 32 90 237 112 ) 					#model: #styleName 					#style: #default 					#isReadOnly: false 					#type: #string 					#comboList: #styleNames ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 208 ) 					#model: #normal 					#label: 'Regular' ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 228 ) 					#model: #bold 					#label: 'Bold' ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 248 ) 					#model: #italic 					#label: 'Italic' ) 				#(#CheckBoxSpec 					#layout: #(#Point 130 207 ) 					#model: #underline 					#label: 'Underline' ) 				#(#CheckBoxSpec 					#layout: #(#Point 130 227 ) 					#model: #strikeout 					#label: 'Strikeout' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -196 1 -31 1 -103 1 -7 1 ) 					#name: #accept 					#model: #accept 					#tabable: false 					#label: 'Install' 					#isDefault: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -100 1 -31 1 -7 1 -7 1 ) 					#name: #cancel 					#model: #cancel 					#tabable: false 					#label: 'Cancel' 					#isDefault: false ) 				#(#EnhancedLabelSpec 					#layout: #(#LayoutFrame 20 0 156 0 -20 1 211 0 ) 					#label: 'Select those style attributes you want to make available additionally:' ) 				#(#EnhancedLabelSpec 					#layout: #(#LayoutFrame 14 0 20 0 -14 1 64 0 ) 					#label: 'Select or type in a name for the text style to install the font on.' ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 -40 1 0 1 0 1 ) ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 135 0 0 1.0 139 0 ) ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Font Panel' 			#min: #(#Point 394 259 ) 			#bounds: #(#Rectangle 443 383 837 642 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#GroupBoxSpec 					#layout: #(#LayoutFrame -130 1 12 0 -12 1 131 0 ) 					#isOpaque: true 					#label: 'Style' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 13 0 12 0 -140 1 131 0 ) 					#isOpaque: true 					#label: 'Font' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 75 0 75 0 1 0 ) 					#label: 'Size:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 75 0 50 0 1 0 ) 					#label: 'Family:' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 12 0 140 0 -12 1 -40 1 ) 					#isOpaque: true 					#label: 'Sample' ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 86 47 230 69 ) 					#name: #family 					#model: #family ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 86 74 137 96 ) 					#name: #sizeField 					#isOpaque: true 					#model: #pixelSize 					#tabable: true 					#type: #number 					#formatString: '0' ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin -110 1 42 0 ) 					#name: #regular 					#isOpaque: true 					#model: #style 					#label: 'Regular' 					#select: #regular ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin -110 1 60 0 ) 					#name: #bold 					#isOpaque: true 					#model: #style 					#label: 'Bold' 					#select: #bold ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin -110 1 78 0 ) 					#name: #italic 					#isOpaque: true 					#model: #style 					#label: 'Italic' 					#select: #italic ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin -110 1 96 0 ) 					#name: #boldItalic 					#isOpaque: true 					#model: #style 					#label: 'Bold Italic' 					#select: #boldItalic ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 26 0 161 0 -24 1 -53 1 ) 					#name: #example 					#flags: 0 					#model: #exampleText 					#tabable: true 					#isReadOnly: false 					#type: #text ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -315 1 -31 1 -215 1 -7 1 ) 					#name: #applyButton 					#flags: 40 					#model: #apply 					#label: 'Apply' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -212 1 -31 1 -112 1 -7 1 ) 					#model: #installAs 					#label: 'Install As...' 					#isDefault: false 					#defaultable: true ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame -109 1 -31 1 -9 1 -7 1 ) 					#tabable: true 					#label: 'Textstyles' 					#menu: #stylesMenu ) ) ) )</body></methods><methods><class-id>Aragon.FontPanel class</class-id> <category>resources</category><body>fontsMenu	"MenuEditor new openOnClass: self andSelector: #fontsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: 'Show &amp;All' 				#value: #showAll ) 			#(#MenuItem 				#rawLabel: 'Show &amp;Scaled Only' 				#value: #showScaled ) 			#(#MenuItem 				#rawLabel: 'Show &amp;Fixed-Size Only' 				#value: #showFixed ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.AragonMenuEditor class</class-id> <category>interface specs</category><body>detailSlice	"UIPainter new openOnClass: self andSelector: #detailSlice"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 256 166 ) 			#bounds: #(#{Graphics.Rectangle} 512 400 768 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 27 93 ) 					#label: 'Class:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 15 124 ) 					#label: 'Selector:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 30 0 0 1 ) 					#label: 'Shortcut Character:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 8 0 188 0 0 1 ) 					#label: 'Help Text:' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 63 0 -5 1 154 0 ) 					#label: 'Label Image' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 60 0 0 1 ) 					#label: 'Enablement Selector:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -130 1 5 0 -5 1 30 0 ) 					#name: #shortCutChar 					#model: #shortCutChar 					#numChars: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -130 1 35 0 -5 1 60 0 ) 					#name: #enablementSelector 					#model: #enablementSelector 					#type: #symbol ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 91 0 -15 1 116 0 ) 					#name: #labelImageClassName 					#flags: 0 					#majorKey: #{ClassFinder} 					#minorKey: #nameOnlySpec 					#clientKey: #labelImageClassName ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 122 0 -15 1 147 0 ) 					#name: #labelImageSelector 					#model: #labelImageSelector 					#type: #symbol ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 163 0 -5 1 188 0 ) 					#model: #helpText ) ) ) )</body><body>_detailSlice	"UIPainter new openOnClass: self andSelector: #detailSlice"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#min: #(#Point 256 166 ) 			#bounds: #(#Rectangle 772 608 1028 832 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 15 57 ) 					#label: 'Class' ) 				#(#LabelSpec 					#layout: #(#Point 15 83 ) 					#label: 'Selector' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame -129 1 5 0 -5 1 30 0 ) 					#name: #shortCutChar 					#model: #shortCutChar 					#numChars: 1 ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 100 0 51 0 -5 1 76 0 ) 					#name: #labelImageClassName 					#model: #labelImageClassName 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 100 0 82 0 -5 1 107 0 ) 					#name: #labelImageSelector 					#model: #labelImageSelector 					#type: #symbol ) 				#(#LabelSpec 					#layout: #(#Point 5 5 ) 					#label: 'Shortcut character:' ) 				#(#LabelSpec 					#layout: #(#Point 5 31 ) 					#label: 'Label image:' ) ) ) )</body></methods><methods><class-id>Aragon.SimpleFileBrowser class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'A Simple File Browser' 			#bounds: #(#{Graphics.Rectangle} 640 512 1242 817 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 7 0 -7 1 -7 1 ) 					#flags: 15 					#model: #tree 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectionChanged ) 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>resources</category><body>arrowDown	"UIMaskEditor new openOnClass: self andSelector: #arrowDown"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 9@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 128 0 0 127 0 0 0 127 0 0 0 62 0 0 0 62 0 0 0 28 0 0 0 28 0 0 0 8 0 0 0 8 0 0 0])</body><body>arrowUp	"UIMaskEditor new openOnClass: self andSelector: #arrowUp"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 9@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[8 0 0 0 8 0 0 0 28 0 0 0 28 0 0 0 62 0 0 0 62 0 0 0 127 0 0 0 127 0 0 0 255 128 0 0])</body><body>browseImage	"UIMaskEditor new openOnClass: self andSelector: #browseImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 4 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 9) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6070 scaledGreen: 6070 scaledBlue: 6070); at: 3 put: (ColorValue scaledRed: 3693 scaledGreen: 0 scaledBlue: 0); at: 4 put: (ColorValue scaledRed: 5010 scaledGreen: 5010 scaledBlue: 0); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 4497 scaledGreen: 4497 scaledBlue: 4497); at: 7 put: (ColorValue scaledRed: 3693 scaledGreen: 3693 scaledBlue: 3693); at: 8 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 6617); at: 9 put: (ColorValue scaledRed: 1573 scaledGreen: 8191 scaledBlue: 1573); yourself)) usingBits: (ByteArray fromPackedString: ']7]7]7]7]7]7]7]7]7]7]0@@@@]7]7]7]7]7@ADQDQ@G]7]7]7]0QDQDQDE ]7]7]7\DQDQDQDQFA7]7]7AFQDQ@@EU4XG]7]0Q@@@@@"HU7Q ]7]0Q@QDQ@@@AG]@]7\DQ@QDQDQDQG]FA7\D@@QDQDQDQD]FA7\DQ@QDQ@@@@D]FA7\DQ@Q@@@"H DQFA7\DQ@Q@Q@@@@DQFA7\DQ@@@QDQDQDQFA7]PQDQ@Q@@@@DQFA7]PQDQ@@@"H DQ ]7]0ADQDQ@@@@DX@]7]5@DQDQDQDQF@"A7]7T@QDQDQDQ H"HG]7]P@DQDQD@@@#L0]7]5T@@@@@AU@CL5]7]7]U@@@E]7T@L5]7]7]7]7]7]7]P@5]7]7]7]7]7]7]7@E'))</body><body>browseShape	"UIMaskEditor new openOnClass: self andSelector: #browseShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 254 0 0 3 255 128 0 7 255 192 0 15 255 224 0 31 255 112 0 63 255 56 0 63 255 152 0 127 255 156 0 127 255 220 0 127 255 220 0 127 255 252 0 127 255 252 0 127 255 252 0 127 255 252 0 127 255 248 0 63 255 248 0 63 255 252 0 31 255 254 0 15 255 255 0 7 255 255 0 1 254 63 0 0 0 31 0 0 0 7 0])</body><body>inspectImage	"UIMaskEditor new openOnClass: self andSelector: #inspectImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (ColorValue scaledRed: 8191 scaledGreen: 7580 scaledBlue: 5460); at: 2 put: ColorValue blue; at: 3 put: ColorValue black; at: 4 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6360); yourself)) usingBits: #[255 255 255 255 255 255 0 0 255 255 255 255 255 255 0 0 255 255 192 15 255 255 0 0 255 252 0 0 255 255 0 0 255 192 0 0 15 255 0 0 255 0 0 80 3 255 0 0 255 0 0 84 2 255 0 0 252 0 0 80 0 255 0 0 252 0 0 0 0 191 0 0 240 0 1 80 0 63 0 0 240 0 21 64 0 47 0 0 240 0 1 64 0 47 0 0 240 0 5 64 0 47 0 0 240 0 5 0 0 47 0 0 252 0 21 0 0 175 0 0 252 0 21 0 0 191 0 0 255 0 20 64 2 191 0 0 255 0 85 0 2 255 0 0 255 192 0 0 10 255 0 0 255 248 0 0 171 255 0 0 255 255 128 10 191 255 0 0 255 255 250 171 255 255 0 0 255 255 255 255 255 255 0 0 255 255 255 255 255 255 0 0])</body><body>inspectShape	"UIMaskEditor new openOnClass: self andSelector: #inspectShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 124 0 0 1 255 0 0 7 255 192 0 15 255 224 0 15 255 240 0 31 255 240 0 31 255 248 0 63 255 248 0 63 255 252 0 63 255 252 0 63 255 252 0 63 255 252 0 31 255 252 0 31 255 248 0 15 255 248 0 15 255 240 0 7 255 240 0 3 255 224 0 0 255 128 0 0 62 0 0 0 0 0 0 0 0 0 0])</body><body>menuBar25	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Parcel' 				#nameKey: #packageMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;New...' 							#nameKey: #newParcel 							#value: #newParcel 							#submenu: #(#Menu #(									#(#MenuItem 										#rawLabel: '&amp;Parcel\b' 										#nameKey: #newParcel 										#value: #newParcel 										#shortcutKeyCharacter: $n ) 									#(#MenuItem 										#rawLabel: '&amp;Folder' 										#nameKey: #newFolder 										#value: #newFolder ) ) #(2 ) nil ) ) 						#(#MenuItem 							#rawLabel: '&amp;Load...' 							#nameKey: #loadParcel 							#value: #loadParcel 							#shortcutKeyCharacter: $l ) 						#(#MenuItem 							#rawLabel: 'Load Sources' 							#nameKey: #loadSources 							#value: #loadSources ) 						#(#MenuItem 							#rawLabel: '&amp;Save' 							#nameKey: #saveParcel 							#value: #saveParcel 							#shortcutKeyCharacter: $s ) 						#(#MenuItem 							#rawLabel: 'Save &amp;As...' 							#nameKey: #saveAs 							#value: #saveAs ) 						#(#MenuItem 							#rawLabel: '&amp;Uninstall...' 							#nameKey: #unloadParcel 							#value: #unloadParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Remove...' 							#nameKey: #removeParcel 							#value: #removeParcel ) 						#(#MenuItem 							#rawLabel: 'E&amp;xit\b' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(3 4 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Edit' 				#nameKey: #editMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Browse\b' 							#nameKey: #browseParcel 							#value: #browseParcel 							#shortcutKeyCharacter: $b ) 						#(#MenuItem 							#rawLabel: '&amp;Inspect' 							#nameKey: #inspectParcel 							#value: #inspectParcel 							#shortcutKeyCharacter: $i ) 						#(#MenuItem 							#rawLabel: '&amp;Changes' 							#nameKey: #browseChanges 							#value: #browseChanges ) 						#(#MenuItem 							#rawLabel: 'Re&amp;name...' 							#nameKey: #renameParcel 							#value: #renameParcel 							#shortcutKeyCharacter: $r ) 						#(#MenuItem 							#rawLabel: '&amp;Empty...' 							#nameKey: #emptyParcel 							#value: #emptyParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #editOptions 							#value: #editOptions ) 						#(#MenuItem 							#rawLabel: '&amp;Search Paths...' 							#nameKey: #editSearchPaths 							#value: #editSearchPaths ) ) #(3 2 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Tools' 				#nameKey: #toolsMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;File Into Parcel...' 							#nameKey: #fileIntoParcel 							#value: #fileIntoParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Changes Into Parcel...' 							#nameKey: #changesIntoParcel 							#value: #changesIntoParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Make Remove Script...' 							#nameKey: #makeRemoveScript 							#value: #makeRemoveScript ) 						#(#MenuItem 							#rawLabel: '&amp;Update View\b' 							#nameKey: #updateView 							#value: #updateView 							#shortcutKeyCharacter: $u ) ) #(3 1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body>menuBar30	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Parcel' 				#nameKey: #packageMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;New...' 							#nameKey: #newParcel 							#value: #newParcel 							#submenu: #(#Menu #(									#(#MenuItem 										#rawLabel: '&amp;Parcel\b' 										#nameKey: #newParcel 										#value: #newParcel 										#shortcutKeyCharacter: $n ) 									#(#MenuItem 										#rawLabel: '&amp;Folder' 										#nameKey: #newFolder 										#value: #newFolder ) ) #(2 ) nil ) ) 						#(#MenuItem 							#rawLabel: '&amp;Load...' 							#nameKey: #loadParcel 							#value: #loadParcel 							#shortcutKeyCharacter: $l ) 						#(#MenuItem 							#rawLabel: '&amp;Save' 							#nameKey: #saveParcel 							#value: #saveParcel 							#shortcutKeyCharacter: $s ) 						#(#MenuItem 							#rawLabel: 'Save &amp;As...' 							#nameKey: #saveAs 							#value: #saveAs ) 						#(#MenuItem 							#rawLabel: '&amp;Uninstall...' 							#nameKey: #unloadParcel 							#value: #unloadParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Remove...' 							#nameKey: #removeParcel 							#value: #removeParcel ) 						#(#MenuItem 							#rawLabel: 'E&amp;xit\b' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(2 4 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Edit' 				#nameKey: #editMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Browse\b' 							#nameKey: #browseParcel 							#value: #browseParcel 							#shortcutKeyCharacter: $b ) 						#(#MenuItem 							#rawLabel: '&amp;Inspect' 							#nameKey: #inspectParcel 							#value: #inspectParcel 							#shortcutKeyCharacter: $i ) 						#(#MenuItem 							#rawLabel: '&amp;Changes' 							#nameKey: #browseChanges 							#value: #browseChanges ) 						#(#MenuItem 							#rawLabel: 'Re&amp;name...' 							#nameKey: #renameParcel 							#value: #renameParcel 							#shortcutKeyCharacter: $r ) 						#(#MenuItem 							#rawLabel: '&amp;Empty...' 							#nameKey: #emptyParcel 							#value: #emptyParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #editOptions 							#value: #editOptions ) 						#(#MenuItem 							#rawLabel: '&amp;Search Paths...' 							#nameKey: #editSearchPaths 							#value: #editSearchPaths ) ) #(3 2 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Tools' 				#nameKey: #toolsMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;File Into Parcel...' 							#nameKey: #fileIntoParcel 							#value: #fileIntoParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Changes Into Parcel...' 							#nameKey: #changesIntoParcel 							#value: #changesIntoParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Make Remove Script...' 							#nameKey: #makeRemoveScript 							#value: #makeRemoveScript ) 						#(#MenuItem 							#rawLabel: '&amp;Update View\b' 							#nameKey: #updateView 							#value: #updateView 							#shortcutKeyCharacter: $u ) ) #(3 1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body>openImage	"UIMaskEditor new openOnClass: self andSelector: #openImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 0); at: 5 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6360); yourself)) usingBits: (ByteArray fromPackedString: 'QDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQD@@QDQDQDQDQDQDQ@QDA@QDQDQDQDQDQDQDP@QDQD@@ADQDQDQD@@QDQ@D!HDQDQDQDQDQDQ@HRD @@@@ADQDQDQ@D!HRD!HRDDQDQDQ@HRD!HRD!HDQDQDQ@D!HR@@@@@@@@QDQ@HRD L3L3L3LDQDQ@D!HCL3L3L3ADQDQ@HR@3L3L3L0QDQDQ@D L3L3L3LDQDQDQ@HCL3L3L3ADQDQDQ@@3L3L3L0QDQDQDQ@@@@@@@@DQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQD'))</body><body>openShape	"UIMaskEditor new openOnClass: self andSelector: #openShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 1 192 0 0 2 40 0 0 0 24 0 30 0 56 0 63 0 0 0 63 255 0 0 63 255 128 0 63 255 128 0 63 255 248 0 63 255 240 0 63 255 224 0 63 255 192 0 63 255 128 0 63 255 0 0 63 254 0 0 63 252 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body>parcelMenu25	"MenuEditor new openOnClass: self andSelector: #parcelMenu25"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Browse\b' 				#value: #browseParcel 				#shortcutKeyCharacter: $b 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Parcel Contents\b' 							#nameKey: #browseParcel 							#value: #browseParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Changes' 							#nameKey: #browseChanges 							#value: #browseChanges ) ) #(2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Inspect' 				#nameKey: #inspectParcel 				#value: #inspectParcel 				#shortcutKeyCharacter: $i ) 			#(#MenuItem 				#rawLabel: 'Load Sources' 				#nameKey: #loadSources 				#value: #loadSources ) 			#(#MenuItem 				#rawLabel: '&amp;New...' 				#nameKey: #newParcel 				#value: #newParcel 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Parcel\b' 							#nameKey: #newParcel 							#value: #newParcel 							#shortcutKeyCharacter: $n ) 						#(#MenuItem 							#rawLabel: '&amp;Folder' 							#nameKey: #newFolder 							#value: #newFolder ) ) #(2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Save' 				#nameKey: #saveParcel 				#value: #saveParcel 				#shortcutKeyCharacter: $s ) 			#(#MenuItem 				#rawLabel: 'Save &amp;As...' 				#nameKey: #saveAs 				#value: #saveAs ) 			#(#MenuItem 				#rawLabel: '&amp;Uninstall...' 				#nameKey: #unloadParcel 				#value: #unloadParcel ) 			#(#MenuItem 				#rawLabel: '&amp;Remove...' 				#nameKey: #removeParcel 				#value: #removeParcel ) 			#(#MenuItem 				#rawLabel: 'Re&amp;name...' 				#nameKey: #renameParcel 				#value: #renameParcel 				#shortcutKeyCharacter: $r ) 			#(#MenuItem 				#rawLabel: '&amp;Empty...' 				#nameKey: #emptyParcel 				#value: #emptyParcel ) ) #(3 3 4 ) nil ) decodeAsLiteralArray</body><body>parcelMenu30	"MenuEditor new openOnClass: self andSelector: #parcelMenu30"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Browse\b' 				#value: #browseParcel 				#shortcutKeyCharacter: $b 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Parcel Contents\b' 							#nameKey: #browseParcel 							#value: #browseParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Overridden Extensions' 							#nameKey: #browseOverriddenExtensions 							#value: #browseOverriddenExtensions ) 						#(#MenuItem 							#rawLabel: '&amp;Changes' 							#nameKey: #browseChanges 							#value: #browseChanges ) ) #(3 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Inspect' 				#nameKey: #inspectParcel 				#value: #inspectParcel 				#shortcutKeyCharacter: $i ) 			#(#MenuItem 				#rawLabel: '&amp;New...' 				#nameKey: #newParcel 				#value: #newParcel 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Parcel\b' 							#nameKey: #newParcel 							#value: #newParcel 							#shortcutKeyCharacter: $n ) 						#(#MenuItem 							#rawLabel: '&amp;Folder' 							#nameKey: #newFolder 							#value: #newFolder ) ) #(2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Save' 				#nameKey: #saveParcel 				#value: #saveParcel 				#shortcutKeyCharacter: $s ) 			#(#MenuItem 				#rawLabel: 'Save &amp;As...' 				#nameKey: #saveAs 				#value: #saveAs ) 			#(#MenuItem 				#rawLabel: '&amp;Uninstall...' 				#nameKey: #unloadParcel 				#value: #unloadParcel ) 			#(#MenuItem 				#rawLabel: '&amp;Remove...' 				#nameKey: #removeParcel 				#value: #removeParcel ) 			#(#MenuItem 				#rawLabel: 'Re&amp;name...' 				#nameKey: #renameParcel 				#value: #renameParcel 				#shortcutKeyCharacter: $r ) 			#(#MenuItem 				#rawLabel: '&amp;Empty...' 				#nameKey: #emptyParcel 				#value: #emptyParcel ) ) #(2 3 4 ) nil ) decodeAsLiteralArray</body><body>saveImage	"UIMaskEditor new openOnClass: self andSelector: #saveImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (ColorValue scaledRed: 6167 scaledGreen: 6167 scaledBlue: 6167); at: 2 put: ColorValue black; at: 3 put: ColorValue blue; at: 4 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 85 85 85 85 64 0 0 1 164 0 0 16 112 0 0 1 164 0 0 16 112 0 0 1 164 0 0 21 112 0 0 1 164 0 0 26 112 0 0 1 164 0 0 26 112 0 0 1 164 0 0 26 112 0 0 1 164 0 0 26 112 0 0 1 164 0 0 26 112 0 0 1 165 85 85 90 112 0 0 1 170 170 170 170 112 0 0 1 170 170 170 170 112 0 0 1 169 85 85 106 112 0 0 1 169 85 65 106 112 0 0 1 169 85 65 106 112 0 0 1 105 85 65 106 112 0 0 0 89 85 65 106 112 0 0 0 21 85 85 85 112 0 0 0 15 255 255 255 240 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body>saveShape	"UIMaskEditor new openOnClass: self andSelector: #saveShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 31 255 248 0 30 0 76 0 30 0 76 0 30 0 124 0 30 0 124 0 30 0 124 0 30 0 124 0 30 0 124 0 30 0 124 0 31 255 252 0 31 255 252 0 31 255 252 0 31 255 252 0 31 249 252 0 31 249 252 0 31 249 252 0 15 249 252 0 7 255 252 0 3 255 252 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>interface specs</category><body>fileRequesterSpec	"UIPainter new openOnClass: self andSelector: #fileRequesterSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Add search path' 			#min: #(#Point 397 125 ) 			#max: #(#Point 397 125 ) 			#bounds: #(#Rectangle 442 453 839 578 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#InputFieldSpec 					#layout: #(#Rectangle 24 41 298 65 ) 					#name: #filename 					#model: #filename ) 				#(#LabelSpec 					#layout: #(#Point 23 20 ) 					#label: 'Enter pathname of a directory to add to the list:' 					#style: #'Demo.Label1' ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 302 41 372 65 ) 					#name: #browse 					#model: #browseFile 					#label: 'Browse...' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -118 1 -35 1 -8 1 -9 1 ) 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -231 1 -35 1 -121 1 -9 1 ) 					#model: #accept 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) ) ) )</body><body>hierarchySpec	"UIPainter new openOnClass: self andSelector: #hierarchySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Parcel Browser' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 910 849 ) 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterWith: #dragStartSelector 						#dragFrom: #dropSelector 						#dropWith: #dragOverSelector 						#dropOverWith: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #parcels 					#model: #parcels 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #browseParcel ) 					#menu: #parcelMenu 					#style: #'ParcelBrowser.Hierarchy' 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body><body>searchPathsSpec	"UIPainter new openOnClass: self andSelector: #searchPathsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Enhanced Parcels -- Search Paths' 			#bounds: #(#{Graphics.Rectangle} 640 512 1062 738 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 16 71 312 185 ) 					#name: #searchPaths 					#model: #searchPaths 					#multipleSelections: true 					#style: #Label 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{Aragon.EnhancedLabelSpec} 					#layout: #(#{Graphics.Rectangle} 13 13 364 62 ) 					#label: 'Add or remove parcel search paths to the list below. The uppermost entry will be used as the default path to store parcels.' 					#style: #Label ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 294 197 412 223 ) 					#name: #cancel 					#model: #cancel 					#label: '&amp;Cancel' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 173 197 291 223 ) 					#name: #accept 					#model: #accept 					#label: 'A&amp;pply' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 322 72 415 95 ) 					#name: #addPath 					#model: #addPath 					#label: '&amp;Add...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 322 99 415 122 ) 					#name: #editPath 					#flags: 40 					#model: #editPath 					#label: '&amp;Edit...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 322 126 415 149 ) 					#name: #removePath 					#flags: 40 					#model: #removePath 					#label: '&amp;Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 16 189 47 211 ) 					#name: #moveUp 					#flags: 40 					#model: #moveUp 					#label: #arrowUp 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 48 189 79 211 ) 					#name: #moveDown 					#flags: 40 					#model: #moveDown 					#label: #arrowDown 					#hasCharacterOrientedLabel: false 					#defaultable: true ) ) ) )</body><body>settingsSpec	"UIPainter new openOnClass: self andSelector: #settingsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Enhanced Parcels -- Options' 			#min: #(#{Core.Point} 422 294 ) 			#max: #(#{Core.Point} 422 294 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1062 806 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.EnhancedLabelSpec} 					#layout: #(#{Graphics.Rectangle} 13 13 406 103 ) 					#label: 'Specify the default input and output directories. The default input directory denotes the default location to read parcels from. The default output directory is used as the default location to store parcels to. It is strongy recommended to select different directories.' 					#style: #Label ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 35 121 309 145 ) 					#name: #defaultInputDirectory 					#model: #defaultInputDirectory ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 313 121 383 145 ) 					#name: #browse1 					#model: #browseFile1 					#label: 'Browse...' 					#defaultable: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 18 93 405 162 ) 					#label: 'Default Input Directory' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 18 173 405 242 ) 					#label: 'Default Output Directory' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 35 201 309 225 ) 					#name: #defaultOutputDirectory 					#model: #defaultOutputDirectory ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 313 201 383 225 ) 					#name: #browse2 					#model: #browseFile2 					#label: 'Browse...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 174 258 292 284 ) 					#name: #accept 					#model: #accept 					#label: 'A&amp;pply' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 295 258 413 284 ) 					#name: #cancel 					#model: #cancel 					#label: '&amp;Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>interface specs</category><body>listSpec	"UIPainter new openOnClass: self andSelector: #listSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 640 512 840 712 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 1 ) 					#name: #list 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7044 7044 7044 ) ) 					#model: #list 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #spawnBrowser 						#requestValueChangeSelector: 						#testChangeSelection: ) 					#menu: #listMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #normalSelection ) ) ) )</body><body>listSpecProtocols	"UIPainter new openOnClass: self andSelector: #listSpecProtocols"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 640 512 840 712 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -18 1 ) 					#name: #list 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7044 7044 7044 ) ) 					#model: #list 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #spawnBrowser 						#requestValueChangeSelector: 						#testChangeSelection: ) 					#menu: #listMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #normalSelection ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -18 1 0 0.4 0 1 ) 					#name: #metaInstance 					#flags: 0 					#model: #metaInstance 					#tabable: false 					#label: 'Instance' 					#style: #'AragonBrowser.Small' 					#defaultable: true ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 -18 1 0 0.7 0 1 ) 					#name: #metaClass 					#flags: 0 					#model: #metaClass 					#tabable: false 					#label: 'Class' 					#style: #'AragonBrowser.Small' 					#defaultable: true ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0.7 -18 1 0 1 0 1 ) 					#name: #metaData 					#flags: 0 					#model: #metaData 					#tabable: false 					#label: 'Statics' 					#style: #'AragonBrowser.Small' 					#defaultable: true ) ) ) )</body><body>toolBarEditSpec	"UIPainter new openOnClass: self andSelector: #toolBarEditSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1099 563 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 24 23 ) 					#name: #editCut 					#flags: 32 					#model: #editCut 					#tabable: false 					#defaultable: true 					#enabledImage: #cut ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 24 0 46 23 ) 					#name: #editCopy 					#flags: 32 					#model: #editCopy 					#tabable: false 					#defaultable: true 					#enabledImage: #xcopy ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 48 0 72 23 ) 					#name: #editPaste 					#flags: 32 					#model: #editPaste 					#tabable: false 					#defaultable: true 					#enabledImage: #paste ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 72 0 96 23 ) 					#name: #editRemove 					#flags: 32 					#model: #editRemove 					#tabable: false 					#defaultable: true 					#enabledImage: #delete ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.Rectangle} 100 1 199 22 ) 					#orientation: #vertical ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 104 0 128 23 ) 					#name: #editOpen 					#flags: 32 					#model: #openApplication 					#tabable: false 					#defaultable: true 					#enabledImage: #openWindow ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 128 0 152 23 ) 					#name: #editResource 					#flags: 32 					#model: #editResource 					#tabable: false 					#defaultable: true 					#enabledImage: #tools ) ) ) )</body><body>toolBarFileSpec	"UIPainter new openOnClass: self andSelector: #toolBarFileSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1099 563 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 1 0 25 23 ) 					#name: #fileOpen 					#flags: 0 					#model: #fileOpen 					#tabable: false 					#defaultable: true 					#enabledImage: #fileOpen ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 25 0 49 23 ) 					#name: #fileSave 					#flags: 0 					#model: #fileSave 					#tabable: false 					#defaultable: true 					#enabledImage: #fileSave ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 49 0 73 23 ) 					#name: #fileSaveAll 					#flags: 0 					#model: #fileSaveAll 					#tabable: false 					#defaultable: true 					#enabledImage: #fileSaveAll ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 73 0 97 23 ) 					#name: #filePrint 					#flags: 0 					#model: #filePrint 					#tabable: false 					#defaultable: true 					#enabledImage: #filePrint ) ) ) )</body><body>toolBarSpec	"UIPainter new openOnClass: self andSelector: #toolBarSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1099 563 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 244 23 ) 					#flags: 0 					#majorKey: #{Aragon.ClassHierarchyBrowser} 					#minorKey: #toolbarSpec 					#clientKey: #hierarchyBrowser ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 248 0 1 0 250 0 -2 1 ) 					#orientation: #vertical ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 254 0 0 0 0 1 24 0 ) 					#flags: 0 					#minorKey: #toolBarSpec1 ) ) ) )</body><body>toolBarSpec1	"UIPainter new openOnClass: self andSelector: #toolBarSpec1"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1099 563 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 52 0 1 0 153 0 -2 1 ) 					#orientation: #vertical ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 24 23 ) 					#name: #spawn 					#flags: 0 					#model: #spawnSelection 					#tabable: false 					#defaultable: true 					#enabledImage: #fileNew ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 166 0 1 0 290 0 -2 1 ) 					#orientation: #vertical ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 60 0 162 24 ) 					#flags: 0 					#minorKey: #toolBarFileSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 170 0 331 24 ) 					#flags: 0 					#minorKey: #toolBarEditSpec ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 24 0 48 23 ) 					#name: #browseSymbol 					#flags: 0 					#model: #browseSymbol 					#tabable: false 					#defaultable: true 					#enabledImage: #exploreParts ) ) ) )</body><body>windowSpec1	"UIPainter new openOnClass: self andSelector: #windowSpec1"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #windowLabel 			#bounds: #(#{Graphics.Rectangle} 640 512 1194 911 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #ActionButton1 					#flags: 32 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5616 5616 6045 ) ) 					#tabable: false 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 26 0 -1 1 -1 0.4 ) 					#name: #component1 					#flags: 0 					#minorKey: #list1 					#clientKey: #component1 ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0.5 0 0 2 0.5 -1 0.4 ) 					#name: #ResizingSplitter2 					#horizontal: false 					#minAboveSize: 120 					#minBelowSize: 30 					#aboveWidgets: 'component1' 					#belowWidgets: 'component2' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -6 0.4 0 1 6 0.4 ) 					#name: #ResizingSplitter1 					#horizontal: true 					#minAboveSize: 50 					#minBelowSize: 25 					#aboveWidgets: 'component1 component2 ResizingSplitter2' 					#belowWidgets: 'text' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 0 0.4 -1 1 -16 1 ) 					#name: #text 					#model: #text 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0 0 1 26 0 ) 					#name: #Subcanvas1 					#flags: 0 					#minorKey: #toolBarSpec1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 -18 1 -44 1 0 1 ) 					#name: #status 					#flags: 32 					#label: '[ ... ]' 					#style: #'AragonBrowser.Small' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 2 0 ) 					#name: #Divider1 ) ) ) )</body><body>windowSpec2	"UIPainter new openOnClass: self andSelector: #windowSpec2"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #windowLabel 			#bounds: #(#{Graphics.Rectangle} 640 512 1194 911 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #ActionButton1 					#flags: 32 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5616 5616 6045 ) ) 					#tabable: false 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 26 0 -1 0.5 -1 0.4 ) 					#name: #component1 					#flags: 0 					#minorKey: #list1 					#clientKey: #component1 ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0.5 0 0 2 0.5 -1 0.4 ) 					#name: #ResizingSplitter2 					#horizontal: false 					#minAboveSize: 120 					#minBelowSize: 30 					#aboveWidgets: 'component1' 					#belowWidgets: 'component2' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 26 0 0 1 -1 0.4 ) 					#name: #component2 					#flags: 0 					#minorKey: #list2 					#clientKey: #component2 ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -6 0.4 0 1 6 0.4 ) 					#name: #ResizingSplitter1 					#horizontal: true 					#minAboveSize: 50 					#minBelowSize: 25 					#aboveWidgets: 'component1 component2 ResizingSplitter2' 					#belowWidgets: 'text' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 0 0.4 -1 1 -16 1 ) 					#name: #text 					#model: #text 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0 0 1 26 0 ) 					#name: #Subcanvas1 					#flags: 0 					#minorKey: #toolBarSpec1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 -18 1 -44 1 0 1 ) 					#name: #status 					#flags: 32 					#label: '[ ... ]' 					#style: #'AragonBrowser.Small' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -16 1 ) 					#name: #GroupBox2 ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 2 0 ) 					#name: #Divider2 ) ) ) )</body><body>windowSpec4	"UIPainter new openOnClass: self andSelector: #windowSpec4"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #windowLabel 			#bounds: #(#{Graphics.Rectangle} 640 512 1194 911 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#flags: 32 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5616 5616 6045 ) ) 					#tabable: false 					#defaultable: true ) 				#(#{Aragon.EnhancedActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 -20 19 244 ) 					#name: #leftBar 					#flags: 32 					#isOpaque: true 					#tabable: false 					#defaultable: true ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 0 18 70 ) 					#name: #toggleShowClassBrowser 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #toggleShowClassBrowser 					#tabable: false 					#defaultable: true 					#enabledImage: #'|Classes' ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 140 18 210 ) 					#name: #spawnChangeSets 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #toolsChangeSet 					#tabable: false 					#defaultable: true 					#enabledImage: #'|Changes' ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 70 18 140 ) 					#name: #toolsMenu 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #toolsMenu 					#tabable: false 					#defaultable: true 					#enabledImage: #'|Tools' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 19 0 2 0 0 1 26 0 ) 					#name: #toolbar 					#flags: 0 					#minorKey: #toolBarSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 26 0 269 0 -16 1 ) 					#name: #hierarchyBrowser 					#flags: 0 					#majorKey: #{Aragon.ClassHierarchyBrowser} 					#minorKey: #hierarchySpec 					#clientKey: #hierarchyBrowser ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 27 0 276 0 -1 1 ) 					#name: #verticalResizer 					#horizontal: false 					#minAboveSize: 0 					#minBelowSize: 200 					#aboveWidgets: 'hierarchyBrowser' 					#belowWidgets: 'rightPane' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0 0 0.401099 0 0.356932 ) 							#name: #component3 							#flags: 0 							#isOpaque: true 							#minorKey: #list3 							#clientKey: #component3 ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.401099 0 0 0 1.0 0 0.356932 ) 							#name: #component4 							#flags: 0 							#isOpaque: true 							#minorKey: #list4 							#clientKey: #component4 ) 						#(#{UI.ResizingSplitterSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.348083 0 1.0 0 0.371681 ) 							#name: #horizontalResizer 							#horizontal: true 							#minAboveSize: 50 							#minBelowSize: 25 							#aboveWidgets: 'component1 component2 component3 component4' 							#belowWidgets: 'text' ) 						#(#{UI.TextEditorSpec} 							#layout: #(#{Graphics.LayoutFrame} 1 0 0 0.359882 0 1.0 0 1.0 ) 							#name: #text 							#model: #text 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: 								#textAccepted: ) 							#menu: #textMenu 							#tabRequiresControl: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 270 0 26 0 -18 1 -16 1 ) 						#name: #rightPane ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -15 1 ) 							#name: #parcelBrowser 							#flags: 0 							#majorKey: #{Aragon.ParcelBrowser} 							#minorKey: #hierarchySpec 							#clientKey: #parcelBrowser ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0 -17 1 ) 							#name: #showOnlyParceled 							#model: #showOnlyParceled 							#tabable: false 							#label: 'Filter' 							#style: #'AragonBrowser.Small' ) 						#(#{Aragon.ToolbarButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 50 0 -16 1 90 0 0 1 ) 							#name: #spawnParcelBrowser 							#flags: 0 							#model: #spawnParcelBrowser 							#tabable: false 							#label: 'Spawn' 							#style: #'AragonBrowser.Small' 							#defaultable: true ) 						#(#{Aragon.ToolbarButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} -24 1 -16 1 0 1 0 1 ) 							#name: #hideParcelBrowser 							#flags: 0 							#model: #toggleShowParcelBrowser 							#tabable: false 							#label: '&gt;&gt;' 							#style: #'AragonBrowser.Small' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} -200 1 26 0 -18 1 -16 1 ) 						#name: #parcelPane ) ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 1 2 0 1 1 70 0 ) 					#name: #toggleShowParcelBrowser 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #toggleShowParcelBrowser 					#tabable: false 					#defaultable: true 					#enabledImage: #'|Parcels' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 27 0 -18 1 -44 1 0 1 ) 					#name: #status 					#flags: 32 					#label: '[ ... ]' 					#style: #'AragonBrowser.Small' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 0 0 10 1 10 1 ) 					#name: #GroupBox1 ) ) ) )</body><body>_windowSpec4	"UIPainter new openOnClass: self andSelector: #windowSpec4"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #windowLabel 			#bounds: #(#{Graphics.Rectangle} 640 512 1194 911 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#flags: 32 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6176 6176 6176 ) ) 					#tabable: false 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 26 0 -1 0.4 -16 1 ) 					#name: #hierarchyBrowser 					#flags: 0 					#majorKey: #{Aragon.ClassHierarchyBrowser} 					#minorKey: #hierarchySpec 					#clientKey: #hierarchyBrowser ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -4 0.4 27 0 4 0.4 -1 1 ) 					#name: #verticalResizer 					#horizontal: false 					#minAboveSize: 0 					#minBelowSize: 200 					#aboveWidgets: 'hierarchyBrowser' 					#belowWidgets: 'rightPane' ) 				#(#{Aragon.EnhancedActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 -20 19 244 ) 					#name: #leftBar 					#flags: 0 					#isOpaque: true 					#defaultable: true ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 0 18 70 ) 					#name: #toggleShowClassBrowser 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #toggleShowClassBrowser 					#defaultable: true 					#enabledImage: #'|Classes' ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 70 18 140 ) 					#name: #systemMenu 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #systemMenu 					#defaultable: true 					#enabledImage: #'|System' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 0 0 10 1 10 1 ) 					#name: #GroupBox1 ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 140 18 210 ) 					#name: #toolsMenu 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #toolsMenu 					#defaultable: true 					#enabledImage: #'|Tools' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 19 0 2 0 0 1 26 0 ) 					#name: #toolbar 					#flags: 0 					#minorKey: #toolBarSpec ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0 0 0.401099 0 0.356932 ) 							#name: #component3 							#flags: 0 							#isOpaque: true 							#minorKey: #list3 							#clientKey: #component3 ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.401099 0 0 0 1.0 0 0.356932 ) 							#name: #component4 							#flags: 0 							#isOpaque: true 							#minorKey: #list4 							#clientKey: #component4 ) 						#(#{UI.ResizingSplitterSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.348083 0 1.0 0 0.371681 ) 							#name: #horizontalResizer 							#horizontal: true 							#minAboveSize: 50 							#minBelowSize: 25 							#aboveWidgets: 'component1 component2 component3 component4' 							#belowWidgets: 'text' ) 						#(#{UI.TextEditorSpec} 							#layout: #(#{Graphics.LayoutFrame} 1 0 0 0.359882 0 1.0 0 1.0 ) 							#name: #text 							#model: #text 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: 								#textAccepted: ) 							#menu: #textMenu 							#tabRequiresControl: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0.4 26 0 -7 1 -16 1 ) 						#name: #rightPane ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 27 0 -18 1 -44 1 0 1 ) 					#name: #status 					#flags: 32 					#label: '[ ... ]' 					#style: #'AragonBrowser.Small' ) ) ) )</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>resources</category><body>iconsMenu	"MenuEditor new openOnClass: self andSelector: #iconsMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;VisualLauncher' 				#value: #toolsLauncher 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #parcPlace ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Parcel Browser' 				#nameKey: #toolsParcelBrowser 				#value: #toolsParcelBrowser 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #package_paleRed ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Change Set Browser' 				#nameKey: #toolsChangeSet 				#value: #toolsChangeSet 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #bookOpen ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;File Browser' 				#nameKey: #toolsFileBrowser 				#value: #toolsFileBrowser 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #openFolder ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Workspace' 				#nameKey: #toolsWorkspace 				#value: #toolsWorkspace 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #fileNew ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Perm &amp;Undo Image...' 				#nameKey: #permUndoImage 				#value: #permUndoImage 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #monitor ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&lt;new item&gt;' 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #disk ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&lt;new item&gt;' 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #resourceCanvas ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&lt;new item&gt;' 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #station ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'E&amp;xit VisualWorks...' 				#nameKey: #exitImage 				#value: #exitImage 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 8 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #delete ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Aragon Examples...' 				#nameKey: #toolsAragonExamples 				#value: #toolsAragonExamples 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #Aragon ) ) ) #(1 4 4 1 1 ) nil ) decodeAsLiteralArray</body><body>menuBarEnd	"MenuEditor new openOnClass: self andSelector: #menuBarEnd"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AmpEdit 					#defaultString: '&amp;Edit' ) 				#nameKey: #edit ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AmpFile 					#defaultString: '&amp;View' ) 				#nameKey: #view 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Refresh' 							#nameKey: #refresh 							#value: #updateLists 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 0 ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AmpHelp 					#defaultString: '&amp;Help' ) 				#nameKey: #help 				#value: #openHelpBrowser 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Topics\b' 							#value: #displayHelp 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body><body>menuBarStart	"MenuEditor new openOnClass: self andSelector: #menuBarStart"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;System' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Browse...\b' 							#value: #promptAndBrowseClass 							#shortcutKeyCharacter: #'*B' 							#shortcutModifiers: 0 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #exploreParts ) 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '&amp;Class Named...\b' 										#value: #promptAndBrowseClass 										#shortcutKeyCharacter: #'*B' 										#shortcutModifiers: 0 ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Definition/Usage Of...' 										#value: #promptAndBrowseSymbol ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;References/Senders To...' 										#value: #promptAndBrowseReferences ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Implementors Of...' 										#value: #promptAndBrowseImplementors ) ) #(1 3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Save Image...' 							#nameKey: #saveImage 							#value: #systemSaveImage 							#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #fileSaveAll ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Perm Save Image...' 							#nameKey: #permSaveImage 							#value: #systemPermSaveImage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Perm &amp;Undo Image...' 							#nameKey: #permUndoImage 							#value: #systemPermUndoImage ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Collect Garbage' 							#value: #systemCollectGarbage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Collect All &amp;Garbage' 							#nameKey: #collectAllGarbage 							#value: #systemCollectAllGarbage ) 						#(#{UI.MenuItem} 							#rawLabel: 'S&amp;ettings...' 							#nameKey: #systemSettings 							#value: #systemSettings 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #installWindow ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'E&amp;xit VisualWorks...\b' 							#nameKey: #exitImage 							#value: #systemExit 							#shortcutKeyCharacter: $X 							#shortcutModifiers: 8 							#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #delete ) ) ) #(1 3 2 1 1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body><body>menuBarStuff	"MenuEditor new openOnClass: self andSelector: #menuBarStuff"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'E&amp;xit\b' 				#nameKey: #exit 				#value: #closeRequest 				#shortcutKeyCharacter: #'*Q' 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Refresh View\b' 				#nameKey: #refreshView 				#value: #updateLists 				#shortcutKeyCharacter: #'*F5' 				#shortcutModifiers: 0 ) ) #(2 ) nil ) decodeAsLiteralArray</body><body>textMenu	"MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;Browse...' 				#value: #browseSymbol 				#shortcutKeyCharacter: #'*B' 				#shortcutModifiers: 0 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #exploreParts ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Definition/Usage\b' 							#value: #browseSymbol 							#shortcutKeyCharacter: #'*B' 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;References/Senders' 							#value: #browseReferences 							#shortcutKeyCharacter: #'*R' 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Implementors' 							#value: #browseImplementors 							#shortcutKeyCharacter: #'*I' 							#shortcutModifiers: 0 ) ) #(1 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Find...' 				#value: #find 				#shortcutKeyCharacter: #'*F' 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Replace...' 				#value: #replace 				#shortcutKeyCharacter: #'*R' 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Cu&amp;t' 				#value: #cut ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Copy' 				#value: #copySelection ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Paste' 				#value: #paste ) 			#(#{UI.MenuItem} 				#rawLabel: 'E&amp;valuate...' 				#value: #doIt 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Do it' 							#nameKey: #Doit 							#value: #doIt 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Print it' 							#nameKey: #PrintIt 							#value: #printIt 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #printIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Inspect...' 							#value: #inspectIt 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspectIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Debu&amp;g...' 							#value: #debugIt 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugIt ) ) ) #(4 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Accept' 				#value: #accept 				#shortcutKeyCharacter: #'*S' 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Cancel' 				#value: #textCancelled 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Undo' 				#value: #undo 				#shortcutKeyCharacter: #'*Z' 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: 'For&amp;mat' 				#value: #format 				#shortcutKeyCharacter: #'*F' 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: 'E&amp;xplain this?' 				#value: #explain 				#shortcutKeyCharacter: #'*X' 				#shortcutModifiers: 0 ) ) #(1 2 3 1 3 2 ) nil ) decodeAsLiteralArray</body><body>toolsMenu	"MenuEditor new openOnClass: self andSelector: #toolsMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;VisualLauncher' 				#value: #toolsLauncher 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #parcPlace ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;File Browser' 				#nameKey: #toolsFileBrowser 				#value: #toolsFileBrowser 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileFinder ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Fon&amp;t Panel' 				#value: #toolsFonts 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #labelWidget ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Workspace' 				#nameKey: #toolsWorkspace 				#value: #toolsWorkspace 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #fileNew ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;New Canvas' 				#nameKey: #toolsCanvas 				#value: #toolsCanvas 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #canvas ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Data Modeler' 				#nameKey: #dataModeler 				#value: #toolsDataModeler 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #database ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Load Parcel...' 				#nameKey: #toolsLoadParcel 				#value: #toolsLoadParcel 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #fileOpen ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Help' 				#nameKey: #toolsHelp 				#value: #toolsHelp 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #thought ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Aragon Examples...' 				#nameKey: #toolsAragonExamples 				#value: #toolsAragonExamples 				#labelImage: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #Aragon ) ) ) #(1 3 3 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.SystemBrowser class</class-id> <category>old</category><body>showCategoriesImage	"UIMaskEditor new openOnClass: self andSelector: #showCategoriesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@71 depth: 5 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 23) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5020 scaledBlue: 5020); at: 3 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 4 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 1321 scaledBlue: 1321); at: 5 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4491 scaledBlue: 4491); at: 6 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 792 scaledBlue: 792); at: 7 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 5812 scaledBlue: 5812); at: 8 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 2642 scaledBlue: 2642); at: 9 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 3963 scaledBlue: 3963); at: 10 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2113 scaledBlue: 2113); at: 11 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 12 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 5284 scaledBlue: 5284); at: 13 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3434 scaledBlue: 3434); at: 14 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 1585 scaledBlue: 1585); at: 15 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 4756 scaledBlue: 4756); at: 16 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 1056); at: 17 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 18 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 19 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 528); at: 20 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2378 scaledBlue: 2378); at: 21 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 22 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 1849 scaledBlue: 1849); at: 23 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 3699 scaledBlue: 3699); yourself)) usingBits: (ByteArray fromPackedString: 'DA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@NAQ@AD @QDA@PDA@PDA@PC0PFB!XQ@A@PDA@PDA@PD@@PA@(PD@@PDA@PDA@PDA@@E!TMDADODA@PDA@PDA@PDP@MA!@OC!@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PA!LE@A@CB1@PDA@PDA@PD@4QD@@PB@&ltlt;@@@@@@@@@EQ@PDA@PDA@PD@@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PE (@@@@@@A@PDA@PDA@PDAHHD@TKA0HPDA@PDA@PDA@@DA@IA@XJDA@PDA@PDA@PC0PP@ HAAQ@PDA@PDA@PD@8OD@XCB  PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PC@$PD@XECA@PDA@PDA@PE@4KDA@P@P&lt;BDA@PDA@PDALTDA@PDA@KD!@PDA@PDA@JDA@PDA@PD@@PDA@PDA@P@0PPDA@PD@PODA@PDA@PD@8EE XPA!XEAA@PDA@PDA@P@QTJ@AHIC!@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@b'))</body><body>showCategoriesShape	"UIMaskEditor new openOnClass: self andSelector: #showCategoriesShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@71 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A/@@@@_0@@@E4@@@A;@@@@^0@@@@@@@@@@@@@@^0@@@F,@@@AI@@@@Z0@@@G&lt;@@@@@@@@@@@@@@W&lt;@@@@@@@@@@@@@@F@@@@A0@@@@_0@@@@@@@@@@@@@@_0@@@G\@@@AA@@@@]0@@@G&lt;@@@@@@@@@@@@@@G?@@@A70@@@X4@@@G]@@@A?P@@@@@@@@@@@@@A;@@@@Z0@@@D$@@@A+@@@@_0@@@@@@@@AC@@@C?0@@@D@@@@@@@@@@_0@@@F&lt;@@@AO@@@@[0@@@F&lt;@@@@@@@@@@@@@@L8@@@GG@@@A 0@@@XD@@@FC@@@A;0@@@O8@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body>showHierarchyImage	"UIMaskEditor new openOnClass: self andSelector: #showHierarchyImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@63 depth: 5 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 24) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5020 scaledBlue: 5020); at: 3 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 4 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 1321 scaledBlue: 1321); at: 5 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4491 scaledBlue: 4491); at: 6 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 2642 scaledBlue: 2642); at: 7 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 5812 scaledBlue: 5812); at: 8 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 792 scaledBlue: 792); at: 9 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 3963 scaledBlue: 3963); at: 10 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2113 scaledBlue: 2113); at: 11 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 12 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3434 scaledBlue: 3434); at: 13 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 5284 scaledBlue: 5284); at: 14 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 1585 scaledBlue: 1585); at: 15 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 1056); at: 16 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 2906 scaledBlue: 2906); at: 17 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 4756 scaledBlue: 4756); at: 18 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 19 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 20 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 528); at: 21 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 22 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2378 scaledBlue: 2378); at: 23 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 1849 scaledBlue: 1849); at: 24 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 3699 scaledBlue: 3699); yourself)) usingBits: (ByteArray fromPackedString: 'DQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQC &lt;DDQDQDQDQDQDQDQDQDP0KE!LVE1PQDQDQDQDQDQDQDQDFAP@@C  QDQDQDQDQC@,MA1TDA!@JDQDQDQDQDP\ODADQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQD @@@@@@@ADQDQDQDQDQDP@RDQDQDQDQDQDQDQDQDQDJDQDQDQDQDQDQDQDQDQDQB@&lt;FDQDQDQDQDQDQDQD@@@@@@@@@@@@QDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQHGDQDQA1HQDQDQDQDQDQDJDADQDPDJDQDQDQDQDQDQA0,FDPXWA1DQDQDQDQDQDP0VB @JE 0QDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQA1DQDQDQDQDQDQDQDQDQDPHHA!DQDQDQDQDQDQDQDQD@@@@@@@@@DQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDWB @@@@@@DQDQDQDQDQDQD0 QA00E@!DQDQDQDQDQDP@QDP$DA (QDQDQDQDQDQDNAADB@ DGDQDQDQDQDQDQD@8QA LJBADQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDGDQDQDQDQDQDQDQDQDQDQ@  FDQDQDQDQDQDQDQDQDP@@@@@@@@@QDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDPXUA0@Q@00QDQDQDQDQDQDMD!D@DP NDQDQDQDQDQDQ@ADQ@ADQ@ADQDQDQDQDQDP4LDP@QC@4QDQDQDQDQDQDFEQL@B!TTDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQ@AD@@@@@@@@@DQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQ@@@@@@@@@@@@DQDQDQDQDQDQDQD@DQDQDQDQDQDQDQDQDQDQ@ADQDQDQDQDQDQDQDQDQDP@QDQDQDQDQDQDQDQDQDQD@DQDQDQDQDQDQDQDQDQDQ@ADQDQDQDQDQDQDQ@@@@@@@@@@@@DQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQ'))</body><body>showHierarchyShape	"UIMaskEditor new openOnClass: self andSelector: #showHierarchyShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@63 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^@@@@G&lt;@@@@O0@@@_&lt;@@@G@@@@@@@@@@_0@@@F@@@@A @@@@\@@@@_&lt;@@@@@@@@@@@@@@FL@@@A#@@@@]0@@@G&lt;@@@@@@@@@X@@@@G@@@@A?@@@@@@@@@@@@@@A?@@@@[0@@@D&lt;@@@A/@@@@[0@@@@@@@@A @@@@\@@@@G&lt;@@@@@@@@@@@@@@G,@@@A+@@@@RP@@@F,@@@A?@@@@@@@@@@@@@@E?@@@@@@@@@@@@@@G?@@@@D@@@@A@@@@@P@@@@D@@@@A@@@@G?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'))</body><body>_toolBar	"MenuEditor new openOnClass: self andSelector: #toolBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File.Save' 				#nameKey: #fileSave 				#value: #fileSave 				#labelImage: #(#{UI.ResourceRetriever} nil #fileSave ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit.Cut' 				#nameKey: #editCut 				#value: #editCut 				#labelImage: #(#{UI.ResourceRetriever} nil #cut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit.Copy' 				#nameKey: #editCopy 				#value: #editCopy 				#labelImage: #(#{UI.ResourceRetriever} nil #xcopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit.Paste' 				#nameKey: #editPaste 				#value: #editPaste 				#labelImage: #(#{UI.ResourceRetriever} nil #paste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit.Remove' 				#nameKey: #editRemove 				#value: #editRemove 				#labelImage: #(#{UI.ResourceRetriever} nil #delete ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit.Resource' 				#nameKey: #editResource 				#value: #editResource 				#labelImage: #(#{UI.ResourceRetriever} nil #tools ) ) ) #(1 4 1 ) nil ) decodeAsLiteralArray</body><body>__windowSpec4	"UIPainter new openOnClass: self andSelector: #windowSpec4"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #windowLabel 			#bounds: #(#{Graphics.Rectangle} 640 512 1194 911 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 3 0 -1 0.33 -16 1 ) 					#name: #hierarchyBrowser 					#flags: 0 					#majorKey: #{Aragon.ClassHierarchyBrowser} 					#minorKey: #windowSpec 					#clientKey: #hierarchyBrowser ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.DividerSpec} 							#layout: #(#{Graphics.Rectangle} 7 1 9 22 ) 							#name: #Divider1 							#orientation: #vertical ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 14 0 0 0 0 1 24 0 ) 							#name: #toolbar 							#flags: 0 							#minorKey: #toolBarSpec ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 23 0 0 0.4 -1 0.4 ) 							#name: #component3 							#flags: 0 							#minorKey: #list3 							#clientKey: #component3 ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.4 23 0 0 1 -1 0.4 ) 							#name: #component4 							#flags: 0 							#minorKey: #list4 							#clientKey: #component4 ) 						#(#{UI.TextEditorSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 1 0 1 ) 							#name: #text 							#model: #text 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: 								#textAccepted: ) 							#menu: #textMenu 							#tabRequiresControl: true ) 						#(#{UI.ResizingSplitterSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 -4 0.4 0 1 4 0.4 ) 							#name: #ResizingSplitter1 							#horizontal: true 							#minAboveSize: 50 							#minBelowSize: 25 							#aboveWidgets: 'component1 component2 component3 component4' 							#belowWidgets: 'text' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0.33 3 0 0 1 -16 1 ) 						#name: #rightPane ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -4 0.33 2 0 4 0.33 -1 1 ) 					#name: #ResizingSplitter2 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'hierarchyBrowser' 					#belowWidgets: 'rightPane' ) 				#(#{Aragon.WindowResizeCornerSpec} 					#layout: #(#{Graphics.LayoutFrame} -14 1 -14 1 0 1 0 1 ) 					#name: #WindowResizer ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 2 0 ) 					#name: #Divider2 ) ) ) )</body><body>____windowSpec4	"UIPainter new openOnClass: self andSelector: #windowSpec4"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #windowLabel 			#bounds: #(#{Graphics.Rectangle} 640 512 1194 911 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#flags: 32 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6176 6176 6176 ) ) 					#tabable: false 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 3 0 -1 0.33 -16 1 ) 					#name: #hierarchyBrowser 					#flags: 0 					#majorKey: #{Aragon.ClassHierarchyBrowser} 					#minorKey: #windowSpec 					#clientKey: #hierarchyBrowser ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.DividerSpec} 							#layout: #(#{Graphics.Rectangle} 7 1 9 22 ) 							#name: #Divider1 							#orientation: #vertical ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 14 0 0 0 0 1 24 0 ) 							#name: #toolbar 							#flags: 0 							#minorKey: #toolBarSpec ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 23 0 0 0.4 -1 0.4 ) 							#name: #component3 							#flags: 0 							#isOpaque: true 							#minorKey: #list3 							#clientKey: #component3 ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.4 23 0 0 1 -1 0.4 ) 							#name: #component4 							#flags: 0 							#isOpaque: true 							#minorKey: #list4 							#clientKey: #component4 ) 						#(#{UI.TextEditorSpec} 							#layout: #(#{Graphics.LayoutFrame} 1 0 0 0.4 0 1 0 1 ) 							#name: #text 							#model: #text 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: 								#textAccepted: ) 							#menu: #textMenu 							#tabRequiresControl: true ) 						#(#{UI.ResizingSplitterSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 -4 0.4 0 1 4 0.4 ) 							#name: #horizontalResizer 							#horizontal: true 							#minAboveSize: 50 							#minBelowSize: 25 							#aboveWidgets: 'component1 component2 component3 component4' 							#belowWidgets: 'text' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0.33 3 0 -7 1 -16 1 ) 						#name: #rightPane 						#colors: 						#(#{UI.LookPreferences} 							#setBackgroundColor: #(#{Graphics.ColorValue} 5734 5734 5734 ) ) ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -4 0.33 2 0 4 0.33 -1 1 ) 					#name: #verticalResizer 					#horizontal: false 					#minAboveSize: 0 					#minBelowSize: 200 					#aboveWidgets: 'hierarchyBrowser' 					#belowWidgets: 'rightPane' ) 				#(#{Aragon.EnhancedActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 -20 19 244 ) 					#name: #leftBar 					#flags: 0 					#isOpaque: true 					#defaultable: true ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 0 18 70 ) 					#name: #toggleShowClassBrowser 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #toggleShowClassBrowser 					#defaultable: true 					#enabledImage: #'|Classes' ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 70 18 140 ) 					#name: #systemMenu 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #systemMenu 					#defaultable: true 					#enabledImage: #'|System' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 0 0 10 1 10 1 ) 					#name: #GroupBox1 ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} -1 140 18 210 ) 					#name: #toolsMenu 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 4915 4915 4915 ) ) 					#model: #toolsMenu 					#defaultable: true 					#enabledImage: #'|Tools' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 27 0 -18 1 -200 1 0 1 ) 					#name: #status 					#flags: 32 					#label: '[ ... ]' 					#style: #'AragonBrowser.Small' ) ) ) )</body></methods><methods><class-id>Aragon.AragonExamplesBrowser class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Framework Enhancements - Examples' 			#min: #(#{Core.Point} 584 288 ) 			#max: #(#{Core.Point} 584 288 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1224 800 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 238 242 326 269 ) 					#name: #start 					#model: #start 					#label: 'Start' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 330 242 418 269 ) 					#name: #browse 					#model: #browse 					#label: 'Browse' 					#defaultable: true ) 				#(#{Aragon.TreeViewSpec} 					#layout: #(#{Graphics.Rectangle} 16 28 223 268 ) 					#name: #examples 					#model: #examples 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClick ) 					#useModifierKeys: true 					#selectionType: #highlight 					#displayImages: false 					#linesAtRoot: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 13 7 ) 					#label: 'Examples:' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 238 0 21 0 -17 1 188 0 ) 					#label: 'Comment' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 252 0 45 0 -30 1 173 0 ) 					#name: #explanation 					#flags: 4 					#model: #explanation 					#isReadOnly: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 260 203 ) 					#name: #install 					#flags: 32 					#model: #install 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #installOrUnInstall ) 					#label: 'Use in VisualLauncher' ) ) ) )</body></methods><methods><class-id>Aragon.ChangeSetBrowser30 class</class-id> <category>interface specs</category><body>defineChangeSetSpec	"UIPainter new openOnClass: self andSelector: #defineChangeSetSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Define Change Set' 			#min: #(#Point 420 201 ) 			#max: #(#Point 420 201 ) 			#bounds: #(#Rectangle 430 412 850 613 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SequenceViewSpec 					#layout: #(#Rectangle 21 33 284 143 ) 					#name: #changeSetList 					#isOpaque: true 					#model: #changeSetList 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#doubleClickSelector: #setAsDefault ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#LabelSpec 					#layout: #(#Point 19 13 ) 					#label: 'Defined Change Sets:' ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 296 32 398 57 ) 					#model: #newChangeSet 					#label: '&amp;New...' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 296 58 398 83 ) 					#name: #renameChangeSet 					#model: #renameChangeSet 					#label: '&amp;Rename...' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 296 84 398 109 ) 					#name: #deleteChangeSet 					#model: #deleteChangeSet 					#label: '&amp;Delete...' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 296 118 398 143 ) 					#name: #setAsDefault 					#model: #setAsDefault 					#label: '&amp;Be Default' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 312 165 404 190 ) 					#model: #accept 					#label: '&amp;Close' 					#defaultable: true ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Changes Set' 			#bounds: #(#{Graphics.Rectangle} 640 512 990 804 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragStartSelector 						#dragFrom: #dragOkSelector 						#canDragFrom: ) 					#layout: #(#{Graphics.LayoutFrame} 7 0 39 0 -7 1 -14 1 ) 					#name: #changes 					#model: #changes 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectionChanged 						#doubleClickSelector: #browseSelection ) 					#menu: #changesMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 92 0 8 0 -7 1 30 0 ) 					#name: #changeSet 					#model: #changeSet 					#menu: #changeSetMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 9 8 ) 					#label: 'Change Set:' ) ) ) )</body></methods><methods><class-id>Aragon.ChangeSetBrowser30 class</class-id> <category>resources</category><body>menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;ChangeSet' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Browse Selected Entry\b' 							#value: #browseSelection ) 						#(#MenuItem 							#rawLabel: 'Default &amp;Inspector' 							#value: #defaultInspect ) 						#(#MenuItem 							#rawLabel: '&amp;Freshen' 							#nameKey: #freshenChanges 							#value: #freshenChanges ) 						#(#MenuItem 							#rawLabel: '&amp;Synchronize...' 							#nameKey: #synchronizeChanges 							#value: #synchronizeChanges ) 						#(#MenuItem 							#rawLabel: 'E&amp;dit' 							#value: #editChangeSet ) 						#(#MenuItem 							#rawLabel: '&amp;Empty...' 							#nameKey: #emptyChangeSet 							#value: #emptyChangeSet ) 						#(#MenuItem 							#rawLabel: 'File &amp;In...' 							#value: #fileIn ) 						#(#MenuItem 							#rawLabel: 'File &amp;Out...' 							#value: #fileOut 							#shortcutKeyCharacter: $f ) ) #(2 4 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;View' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Refresh\b' 							#value: #refreshView ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.GaugeExample class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Gauge Examples' 			#bounds: #(#{Graphics.Rectangle} 640 512 1007 832 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.Rectangle} 55 91 314 92 ) 					#flags: 0 					#orientation: #horizontal ) 				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.LayoutFrame} 44 0 44 0 -44 1 60 0 ) 					#model: #progress 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#style: #discrete 					#isProgressBar: true ) 				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.Rectangle} 62 150 77 295 ) 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #green ) ) 					#model: #gauge1 					#orientation: #vertical 					#start: 100 					#stop: 0 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 24 0 14 0 -24 1 114 0 ) 					#label: 'Progress Indicator' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -120 1 72 0 -44 1 98 0 ) 					#model: #resetProgress 					#label: 'Reset' 					#defaultable: true ) 				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.Rectangle} 127 206 329 221 ) 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #yellow ) ) 					#model: #gauge2 					#orientation: #horizontal 					#start: 0 					#stop: 1 					#style: #continuous ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 127 227 329 251 ) 					#model: #gauge2 					#orientation: #horizontal 					#start: 0 					#stop: 1 					#step: 0.01 ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 80 150 96 295 ) 					#model: #gauge1 					#orientation: #vertical 					#start: 100 					#stop: -100 					#step: -10 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 42 125 98 146 ) 					#model: #gauge1 					#alignment: #center 					#isReadOnly: true 					#type: #number 					#formatString: '$#,##0;[Red]-$#,##0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 198 186 253 204 ) 					#flags: 0 					#model: #gauge2 					#alignment: #center 					#isReadOnly: true 					#type: #number 					#formatString: '0%' ) 				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.Rectangle} 44 150 59 295 ) 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) ) 					#model: #gauge1 					#orientation: #vertical 					#start: -100 					#stop: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -198 1 72 0 -122 1 98 0 ) 					#model: #simulateProgress 					#label: 'Start' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Aragon.Win32FontPanel class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Font Panel' 			#min: #(#Point 393 283 ) 			#bounds: #(#Rectangle 366 565 759 848 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin -100 1 138 0 1 0 ) 					#isOpaque: true 					#label: 'Size:' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame -130 1 15 0 -12 1 130 0 ) 					#isOpaque: true 					#label: 'Style' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 14 0 165 0 -10 1 -40 1 ) 					#isOpaque: true 					#label: 'Sample' ) 				#(#LabelSpec 					#layout: #(#Point 10 3 ) 					#label: 'Family:' 					#style: #default ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 14 0 22 0 -142 1 156 0 ) 					#name: #fontList 					#isOpaque: true 					#model: #fontList 					#menu: #fontsMenu 					#multipleSelections: false 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin -108 1 42 0 ) 					#name: #regular 					#isOpaque: true 					#model: #style 					#label: 'Regular' 					#select: #regular ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin -108 1 60 0 ) 					#name: #bold 					#isOpaque: true 					#model: #style 					#label: 'Bold' 					#select: #bold ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin -108 1 78 0 ) 					#name: #italic 					#isOpaque: true 					#model: #style 					#label: 'Italic' 					#select: #italic ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin -108 1 96 0 ) 					#name: #boldItalic 					#isOpaque: true 					#model: #style 					#label: 'Bold Italic' 					#select: #boldItalic ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame -96 1 136 0 -15 1 158 0 ) 					#name: #sizeMenu 					#flags: 24 					#isOpaque: true 					#model: #pixelSize 					#menu: #sizeMenu 					#isPopUp: true ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame -96 1 136 0 -15 1 158 0 ) 					#name: #sizeField 					#isOpaque: true 					#model: #pixelSize 					#tabable: true 					#type: #number 					#formatString: '0' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 26 0 186 0 -24 1 -53 1 ) 					#name: #example 					#flags: 0 					#model: #exampleText 					#tabable: true 					#isReadOnly: false 					#type: #text ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -315 1 -31 1 -215 1 -7 1 ) 					#name: #applyButton 					#flags: 40 					#model: #apply 					#label: 'Apply' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -212 1 -31 1 -112 1 -7 1 ) 					#model: #installAs 					#label: 'Install As...' 					#isDefault: false 					#defaultable: true ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame -109 1 -31 1 -9 1 -7 1 ) 					#tabable: true 					#label: 'Textstyles' 					#menu: #stylesMenu ) ) ) )</body></methods><methods><class-id>Aragon.SimpleClassBrowser class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Simple Class Browser' 			#bounds: #(#{Graphics.Rectangle} 640 512 990 804 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 9 0 -7 1 -7 1 ) 					#model: #classes 					#menu: #classesMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Aragon.SimpleClassBrowser class</class-id> <category>resources</category><body>classesMenu	"MenuEditor new openOnClass: self andSelector: #classesMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: 'Find Class...\b' 				#nameKey: #findClass 				#value: #findClass ) 			#(#MenuItem 				#rawLabel: 'Add ...' 				#value: #addEntry ) 			#(#MenuItem 				#rawLabel: 'Remove' 				#value: #removeEntry ) 			#(#MenuItem 				#rawLabel: 'Expand' 				#value: #expand ) 			#(#MenuItem 				#rawLabel: 'Collapse' 				#value: #collapse ) 			#(#MenuItem 				#rawLabel: 'Expand/Collapse Subtree' 				#value: #toggleExpandSubtree ) 			#(#MenuItem 				#rawLabel: 'Expand All' 				#value: #expandAll ) ) #(1 2 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.CardViewExample3 class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'CardView Example' 			#bounds: #(#{Graphics.Rectangle} 640 512 1035 744 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.CardViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 4 0 -4 1 -33 1 ) 					#name: #tabs 					#flags: 8 					#model: #tabs 					#tabable: true 					#style: #Label 					#cachePages: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -181 1 -27 1 -95 1 -4 1 ) 					#model: #closeRequest 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -91 1 -27 1 -5 1 -4 1 ) 					#model: #closeRequest 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Aragon.ResizerExample class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1144 786 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.SequenceViewSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -4 0.33 0 1 ) 							#name: #w1 							#isOpaque: true 							#model: #classNames 							#useModifierKeys: true 							#selectionType: #highlight ) 						#(#{UI.CompositeSpecCollection} 							#collection: #(								#(#{UI.TextEditorSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 90 0 ) 									#name: #w21 									#model: #text21 									#tabRequiresControl: true ) 								#(#{UI.TextEditorSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 92 0 0 1 0 1 ) 									#name: #w22 									#model: #text22 									#tabRequiresControl: true ) 								#(#{Aragon.ResizerSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 88 0 0 1 94 0 ) 									#widget1: #w21 									#widget2: #w22 									#orientation: #horizontal ) ) 							#compositeSpec: 							#(#{UI.CompositeSpec} 								#layout: #(#{Graphics.LayoutFrame} 4 0.33 0 0 0 1 0 1 ) 								#name: #w2 ) ) 						#(#{Aragon.ResizerSpec} 							#layout: #(#{Graphics.LayoutFrame} -6 0.33 0 0 6 0.33 0 1 ) 							#widget1: #w1 							#widget2: #w2 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 7 0 29 0 -7 1 -19 1 ) ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 6 ) 					#label: 'Drag the ridges between the text fields:' ) ) ) )</body></methods><methods><class-id>Aragon.CardViewExample1 class</class-id> <category>interface specs</category><body>canvasSpec	"UIPainter new openOnClass: self andSelector: #canvasSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'CardView Example 1' 			#bounds: #(#Rectangle 443 396 838 628 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 4 0 4 0 -4 1 -4 1 ) 					#isOpaque: true 					#model: #classes 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: #windowTitle 			#bounds: #(#Rectangle 443 396 838 628 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#CardViewSpec  					#layout: #(#LayoutFrame 3 0 4 0 -5 1 -5 1 ) 					#name: #tabs 					#flags: 8 					#model: #tabs 					#tabable: true 					#style: #Label ) ) ) )</body></methods><methods><class-id>Aragon.CategoriesBrowser class</class-id> <category>interface specs</category><body>categoriesSpec	"UIPainter new openOnClass: self andSelector: #categoriesSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Categories Spec' 			#bounds: #(#Rectangle 465 366 815 658 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#'Aragon.TreeViewSpec' 					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 					#name: #categories 					#model: #categories 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #selectionChanged 						#doubleClickSelector: #browseSelection ) 					#menu: #categoriesMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Categories Browser' 			#bounds: #(#Rectangle 465 366 815 658 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 7 0 2 0 -7 1 -11 1 ) 					#flags: 0 					#minorKey: #categoriesSpec ) ) ) )</body></methods><methods><class-id>Aragon.CategoriesBrowser class</class-id> <category>resources</category><body>changesMenu	"MenuEditor new openOnClass: self andSelector: #changesMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Browse\b' 				#nameKey: #browseSelection 				#value: #browseSelection ) 			#(#MenuItem 				#rawLabel: '&amp;Remove' 				#value: #removeSelection ) 			#(#MenuItem 				#rawLabel: '&amp;Refresh' 				#value: #refreshView ) ) #(2 1 ) nil ) decodeAsLiteralArray</body><body>menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;Browse' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Selected Entry\b' 							#value: #browseSelection ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;View' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Refresh\b' 							#value: #refreshDisplay ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.NewParcelBrowser class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Parcel Browser' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 910 849 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 0 1 3 0 ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 -20 1 -20 1 -2 1 ) 					#name: #status 					#label: 'Status Line' 					#style: #('Arial' #italic 15 ) ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 4 4 32 32 ) 					#name: #browseParcel 					#flags: 0 					#model: #browseParcel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#showHelpFor: ) 					#tabable: false 					#hasCharacterOrientedLabel: false 					#enabledImage: #browseIcon ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 34 4 62 32 ) 					#name: #inspectParcel 					#flags: 0 					#model: #inspectParcel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#showHelpFor: ) 					#tabable: false 					#hasCharacterOrientedLabel: false 					#defaultable: true 					#enabledImage: #inspectIcon ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 64 4 92 32 ) 					#name: #loadParcel 					#flags: 0 					#model: #loadParcel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#showHelpFor: ) 					#tabable: false 					#hasCharacterOrientedLabel: false 					#defaultable: true 					#enabledImage: #openIcon ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.Rectangle} 94 4 122 32 ) 					#name: #saveParcel 					#flags: 0 					#model: #saveParcel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#showHelpFor: ) 					#tabable: false 					#hasCharacterOrientedLabel: false 					#defaultable: true 					#enabledImage: #saveIcon ) 				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterWith: #dragStartSelector 						#dragFrom: #dropSelector 						#dropWith: #dragOverSelector 						#dropOverWith: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 32 0 0 1.0 -22 1 ) 					#name: #parcels 					#model: #parcels 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #browseParcel ) 					#menu: #parcelMenu 					#style: #'ParcelBrowser.Hierarchy' 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{Aragon.EnhancedGroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -20 1 0 1.0 0 1.0 ) 					#bevel: -1 ) ) ) )</body></methods><methods><class-id>Aragon.PopupTreeView class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 352 313 632 603 ) 			#colors: 			#(#LookPreferences 				#setForegroundColor: nil 				#setBackgroundColor: #(#ColorValue #black ) 				#setSelectionForegroundColor: nil 				#setSelectionBackgroundColor: nil 				#setBorderColor: nil ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#TreeViewSpec 					#layout: #(#LayoutFrame 1 0 1 0 -1 1 -1 1 ) 					#flags: 5 					#useModifierKeys: true 					#selectionType: #highlight 					#displayImages: true 					#displayLines: true 					#displayButtons: true ) ) ) )</body></methods><methods><class-id>Aragon.NdsFileBrowser class</class-id> <category>interface specs</category><body>optionsSpec	"UIPainter new openOnClass: self andSelector: #optionsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'NdsTreeView - Options' 			#min: #(#{Core.Point} 196 134 ) 			#max: #(#{Core.Point} 196 134 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 836 646 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 48 42 ) 					#name: #showImages 					#model: #showImages 					#label: 'Show Images' 					#style: #DataSetLabel ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 48 81 ) 					#name: #linesAtRoot 					#model: #linesAtRoot 					#label: 'Lines At Root' 					#style: #DataSetLabel ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 48 23 ) 					#name: #showButtons 					#model: #showButtons 					#label: 'Show Buttons' 					#style: #DataSetLabel ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 48 62 ) 					#name: #showLines 					#model: #showLines 					#label: 'Show Lines' 					#style: #DataSetLabel ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'A Simple File Browser' 			#bounds: #(#{Graphics.Rectangle} 640 512 1242 817 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.NewDataSetSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 6 0 -11 1 -18 1 ) 					#name: #tree 					#model: #tree 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#labelIsImage: false 							#width: 17 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #rowx 							#label: 'Name' 							#labelIsImage: false 							#width: 387 							#rendererType: #Text 							#editorType: #TreeView 							#font: #DataSetEntries 							#alignment: #(true true true true ) 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row fileSize' 							#label: 'Size' 							#labelIsImage: false 							#width: 78 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row isDirectory' 							#label: 'is Dir' 							#labelIsImage: false 							#width: 80 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#type: #boolean 							#noScroll: false 							#formatString: '' ) ) 					#multipleSelections: true 					#useModifierKeys: true ) ) ) )</body></methods><methods><class-id>Aragon.NdsFileBrowser class</class-id> <category>resources</category><body>menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;File' 				#nameKey: #productMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Edit' 							#value: #startEditing ) 						#(#MenuItem 							#rawLabel: '&amp;Browse' 							#value: #stopEditing ) 						#(#MenuItem 							#rawLabel: '&amp;Quit' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(2 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;View' 				#nameKey: #viewMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #showOptions 							#value: #showOptions ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.OldDatasetExample class</class-id> <category>interface specs</category><body>pollingSpec	"UIPainter new openOnClass: self andSelector: #pollingSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Old DatasetView Example' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 399 412 881 612 ) 			#isEventDriven: false ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#DataSetSpec 					#layout: #(#LayoutFrame 12 0 26 0 -12 1 -30 1 ) 					#name: #entries 					#model: #entries 					#columns: #(						#(#DataSetColumnSpec 							#labelIsImage: false 							#width: 17 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#DataSetColumnSpec 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#DataSetColumnSpec 							#model: #'row 2' 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: true ) 						#(#DataSetColumnSpec 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#DataSetColumnSpec 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#DataSetColumnSpec 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 30 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) ) 				#(#LabelSpec 					#layout: #(#Point 10 7 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 -20 1 0 1.0 0 1.00714 ) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 3 0 2 1 0 1 ) 					#name: #info 					#label: 'Info' 					#style: #DataSetLabel ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Old DatasetView Example' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 399 412 881 612 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#DataSetSpec 					#layout: #(#LayoutFrame 12 0 26 0 -12 1 -30 1 ) 					#name: #entries 					#model: #entries 					#columns: #(						#(#DataSetColumnSpec 							#labelIsImage: false 							#width: 17 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#DataSetColumnSpec 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#DataSetColumnSpec 							#model: #'row 2' 							#callbacksSpec: 							#(#UIEventCallbackSubSpec 								#requestFocusOutSelector: 								#validateProductName								#requestValueChangeSelector: 								#validateProductName ) 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: true ) 						#(#DataSetColumnSpec 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#DataSetColumnSpec 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#DataSetColumnSpec 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 30 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) 					#verticalPolicy: #wrap 					#horizontalPolicy: #noWrap ) 				#(#LabelSpec 					#layout: #(#Point 10 7 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 -20 1 0 1.0 0 1.00714 ) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 3 0 2 1 0 1 ) 					#name: #info 					#label: 'Info' 					#style: #DataSetLabel ) ) ) )</body><body>windowWithNewDatasetSpec	"UIPainter new openOnClass: self andSelector: #windowWithNewDatasetSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Old DatasetView Example' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1122 712 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.NewDataSetSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 26 0 -12 1 -30 1 ) 					#name: #entries 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #entries 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#labelIsImage: false 							#width: 17 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 2' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#requestFocusOutSelector: 								#validateProductName: 								#requestValueChangeSelector: 								#validateProductName: ) 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: true ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 30 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) 					#initiallyUseEditingMode: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 7 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -20 1 0 1.0 0 1.00714 ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 3 0 2 1 0 1 ) 					#name: #info 					#label: 'Info' 					#style: #DataSetLabel ) ) ) )</body></methods><methods><class-id>Aragon.NewDatasetExample class</class-id> <category>interface specs</category><body>optionsSpec	"UIPainter new openOnClass: self andSelector: #optionsSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'NewDataSet - Options' 			#min: #(#Point 234 247 ) 			#max: #(#Point 234 247 ) 			#bounds: #(#Rectangle 683 522 917 769 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#CheckBoxSpec 					#layout: #(#Point 28 30 ) 					#name: #useRowSelectors 					#model: #useRowSelectors 					#label: 'Show Row Selectors' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 69 ) 					#name: #useDecoratedEditors 					#model: #useDecoratedEditors 					#label: 'Use Decorated Editors' 					#style: #DataSetLabel ) 				#(#GroupBoxSpec 					#layout: #(#Rectangle 24 98 178 175 ) 					#label: 'Show Grid Lines' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 50 122 ) 					#name: #showHorizontalLines 					#model: #showHorizontalLines 					#tabable: true 					#label: 'Horizontal' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 50 141 ) 					#name: #showVerticalLines 					#model: #showVerticalLines 					#tabable: true 					#label: 'Vertical' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 11 ) 					#name: #showLabels 					#model: #showLabels 					#label: 'Show Column Labels' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 194 ) 					#name: #allowForColumnDragging 					#model: #allowForColumnDragging 					#label: 'Allow for Column Dragging' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 213 ) 					#name: #allowForSorting 					#model: #allowForSorting 					#label: 'Allow for Sorting' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 50 ) 					#name: #showLineNumbers 					#model: #showLineNumbers 					#label: 'Show Line Numbers' 					#style: #DataSetLabel ) ) ) )</body><body>pollingSpec	"UIPainter new openOnClass: self andSelector: #pollingSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'NewDatasetView Example' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 550 522 1050 758 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: false ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#NewDataSetSpec 					#layout: #(#LayoutFrame 12 0 24 0 -12 1 -34 1 ) 					#name: #entries 					#model: #entries 					#menu: #listMenu 					#columns: #(						#(#DataSetColumnSpec 							#labelIsImage: false 							#width: 16 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: true ) 						#(#DataSetColumnSpec 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#DataSetColumnSpec 							#model: #'row 2' 							#callbacksSpec: 							#(#UIEventCallbackSubSpec 								#requestFocusOutSelector: 								#validateProductName: 								#requestValueChangeSelector: 								#validateProductName: ) 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: false ) 						#(#DataSetColumnSpec 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#DataSetColumnSpec 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#DataSetColumnSpec 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 29 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) 					#multipleSelections: true 					#useModifierKeys: true 					#initiallyUseEditingMode: false 					#showHorizontalLines: false 					#showVerticalLines: false 					#showLabels: true ) 				#(#LabelSpec 					#layout: #(#Point 10 6 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 -21 1 0 1.0 0 1.0 ) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 3 0 2 1 0 1 ) 					#name: #info 					#label: 'Press F2 to toggle edit / browsing mode' 					#style: #DataSetLabel ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'NewDatasetView Example' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1140 748 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.NewDataSetSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 22 0 -12 1 -32 1 ) 					#name: #entries 					#model: #entries 					#menu: #listMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 16 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: true ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 2' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#requestFocusOutSelector: 								#validateProductName: 								#requestValueChangeSelector: 								#validateProductName: ) 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 29 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) 					#multipleSelections: true 					#useModifierKeys: true 					#showHorizontalLines: false 					#showVerticalLines: false 					#showLabels: true 					#allowForColumnDragging: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 4 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 3 0 0 1.0 0 1 ) 					#name: #info 					#label: 'Press F2 to toggle edit / browsing mode' 					#style: #DataSetLabel ) 				#(#{Aragon.EnhancedGroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -21 1 -102 1 0 1 ) 					#bevel: -1 ) 				#(#{Aragon.EnhancedGroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -100 1 -21 1 0 1 0 1 ) 					#bevel: -1 ) ) ) )</body></methods><methods><class-id>Aragon.NewDatasetExample class</class-id> <category>resources</category><body>menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Product' 				#nameKey: #productMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Edit' 							#value: #startEditing ) 						#(#MenuItem 							#rawLabel: '&amp;Browse' 							#value: #stopEditing ) 						#(#MenuItem 							#rawLabel: 'Show &amp;Prices' 							#nameKey: #showPrices 							#value: #showPrices 							#indication: true ) 						#(#MenuItem 							#rawLabel: '&amp;Quit' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(3 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Appearance' 				#nameKey: #appearanceMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Colouring' 							#submenu: #(#Menu #(									#(#MenuItem 										#rawLabel: '&amp;Column 2' 										#value: #colorColumn2 ) 									#(#MenuItem 										#rawLabel: 'C&amp;hess' 										#value: #colorChess ) 									#(#MenuItem 										#rawLabel: '&amp;Flag' 										#value: #colorFlag ) 									#(#MenuItem 										#rawLabel: '&amp;None' 										#value: #colorNone ) ) #(3 1 ) nil ) ) 						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #showOptions 							#value: #showOptions ) ) #(1 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser class</class-id> <category>interface specs</category><body>hierarchySpec	"UIPainter new openOnClass: self andSelector: #hierarchySpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Categories Spec' 			#bounds: #(#Rectangle 465 366 815 658 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#TreeViewSpec 					#properties: 					#(#PropertyListDictionary #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterWith: #dragStartSelector 						#startDraggingFrom: #dropSelector 						#dropWith: #dragOverSelector 						#dropOverWith: ) 					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 					#name: #hierarchy 					#model: #hierarchy 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#doubleClickSelector: #doubleClick 						#requestValueChangeSelector: #changeRequest ) 					#menu: #menu 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) ) ) )</body><body>toolbarSpec	"UIPainter new openOnClass: self andSelector: #toolbarSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Toolbar' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 754 695 1047 746 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ToolbarButtonSpec 					#layout: #(#Rectangle 0 0 24 23 ) 					#name: #toggleDisplay 					#flags: 0 					#model: #toggleShowInheritance 					#tabable: false 					#defaultable: true 					#enabledImage: #classIcon ) 				#(#ComboBoxSpec 					#layout: #(#LayoutFrame 27 0 4 0 -53 1 19 0 ) 					#name: #history 					#flags: 0 					#isOpaque: true 					#model: #selectionInHistory 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#focusInSelector: 						#historyGotFocus: 						#valueChangeSelector: #historyChanged 						#requestFocusOutSelector: 						#historyChangeRequest: 						#requestValueChangeSelector: 						#historyChangeRequest: ) 					#tabable: true 					#menu: #historyMenu 					#style: #'AragonBrowser.Small' 					#isReadOnly: false 					#type: #string 					#comboList: #historyList ) 				#(#ToolbarButtonSpec 					#layout: #(#LayoutFrame -48 1 0 0 -24 1 23 0 ) 					#name: #back 					#flags: 0 					#model: #goBack 					#tabable: false 					#defaultable: true 					#enabledImage: #arrowLeft 					#labelPos: #below ) 				#(#ToolbarButtonSpec 					#layout: #(#LayoutFrame -24 1 0 0 0 1.0 23 0 ) 					#name: #forward 					#flags: 32 					#model: #goForward 					#tabable: false 					#defaultable: true 					#enabledImage: #arrowRight ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ClassHierarchyBrowser' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 891 845 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 24 0 ) 					#name: #historyBar 					#flags: 0 					#minorKey: #toolbarSpec ) 				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterWith: #dragStartSelector 						#startDraggingFrom: #dropSelector 						#dropWith: #dragOverSelector 						#dropOverWith: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1 0 1 ) 					#name: #hierarchy 					#model: #hierarchy 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClick ) 					#menu: #menu 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>enhanced - Aragon</category><body>toolsAragonChangeSetBrowser	&lt;menuItem: '&amp;Change Sets'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.5&gt;	self openAragonApp: #ChangeSetBrowser</body><body>toolsAragonFontPanel	&lt;menuItem: '&amp;Font Panel'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.3&gt;	self openAragonApp: #FontPanel</body><body>toolsAragonSetup	&lt;menuItem: '&amp;Setup...\b'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 0.0&gt;	self openAragonApp: #AragonSetup</body><body>toolsAragonSubMenu	&lt;submenu: 'A&amp;ragon'		nameKey: #aragon		menu: #(#menuBar #tools)		position: 12.0&gt;	Aragon.AragonStuff explore</body><body>toolsAragon	&lt;menuItem: 'Aragon Tools'		icon: #AragonIcon		nameKey: #AragonTools		menu: #(#launcherToolBar)		position: 4711.01&gt;	| menu choice |	menu := ((menuBar atNameKey: #tools) submenu atNameKey: #aragon) submenu.	choice := builder window controller trackMenu: menu at: InputState default mousePoint centered: false.	menu selectionMemory: nil.	(choice isKindOf: MenuItem) ifTrue: [choice := choice value].	choice isSymbol ifTrue: [self perform: choice].</body><body>toolsAragonExamplesBrowser	&lt;menuItem: '&amp;Examples...'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 2.1&gt;	self openAragonApp: #AragonExamplesBrowser</body><body>toolsAragonClassBrowser	"Open a ClassBrowser."	&lt;menuItem: '&amp;Class Browser'		icon: #AragonClassBrowserIcon		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.0&gt;	self openAragonApp: #SystemBrowser</body><body>toolsAragonFileBrowser	"Open a NewFileBrowser."	&lt;menuItem: '&amp;New File Browser'		icon: #AragonFolderIcon		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.2&gt;	self openAragonApp: #NewFileBrowser</body><body>toolsAragonTextEditor	&lt;menuItem: '&amp;Text Editor'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.4&gt;	self openAragonApp: #TextEditor</body><body>toolsAragonParcelBrowser	"Open a NewParcelBrowser."	&lt;menuItem: '&amp;Parcel Browser'		icon: #AragonParcelBrowserIcon		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.1&gt;	self openAragonApp: #NewParcelBrowser</body></methods><initialize><class-id>Aragon.TextEditor</class-id></initialize><initialize><class-id>Aragon.CardViewExample</class-id></initialize><initialize><class-id>Aragon.NewFileBrowser</class-id></initialize><initialize><class-id>Aragon.FontPanel</class-id></initialize><initialize><class-id>Aragon.AragonMenuEditor</class-id></initialize><initialize><class-id>Aragon.ParcelBrowser</class-id></initialize><initialize><class-id>Aragon.SystemBrowser</class-id></initialize><initialize><class-id>Aragon.AragonExamplesBrowser</class-id></initialize><initialize><class-id>Aragon.Win32FileBrowser</class-id></initialize><initialize><class-id>Aragon.CategoriesBrowser</class-id></initialize><initialize><class-id>Aragon.NewParcelBrowser</class-id></initialize><initialize><class-id>Aragon.NewDatasetExample</class-id></initialize><initialize><class-id>Aragon.ClassHierarchyBrowser</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category></class><class><name>ParcelTabApplication</name><environment>Tools</environment><super>Tools.BrowserTabApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars>manager parcelFilterOn unparceledFilterOn conflictsFilterOn savedParcels parcelDefType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Name Spaces</category></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category></class><class><name>MenuEditor</name><environment>Tools</environment><super>Tools.UIPainterWatcher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetClass targetSelector menu menuBar menuBarView menuList currentItem modified properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Tools</category></class><class><name>SimpleBrowserModule</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>list forcedValue nextModule browser selectionCandidates helpers deselectNext cachedComponents allowsMultiSelect specName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Name Spaces</category></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar oldHeight textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category></class><class><name>TabApplicationSystemBrowser</name><environment>Tools</environment><super>Tools.FullSystemBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabApplication </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Name Spaces</category></class><class><name>NamespaceTabApplication</name><environment>Tools</environment><super>Tools.BrowserTabApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Name Spaces</category></class></st-source>