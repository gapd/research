<?xml version="1.0"?><st-source><!-- Name: Aragon.Coding AssistantComment: Adds text completer functionality to each text input field. The implementations resembles the look and feel of text completers as known from Windows and various IDEs such as Eclipse. Whenever you type a text press Ctrl-Space to get a drop down list of possible completions. While the drop down list is displayed you can continue to type in more characters, the list will adjust the available completions automatically. You can use the mouse or the Up/Down keys to choose an entry from the drop-down list in which case the corresponding completion characters will be added as selected text. Press Enter to accept the selected completion. Alternatively, press Arrow-Right to start over with another completion run. Press Escape or Space to discard the completion.  For example, try the following: Start typing in the character "S" and press Ctrl-Space -> a drop-down list with matching completions is displayed. Continue typing in the characters "ma" -> The list of possible complitions is adjusted to match the prefix "Sma" (watch the list's scrollbar shrink).Move the list's selection to the entry 'Smalltalk' (don't press Enter yet!) -> Smalltalk is filled into your text editor with the last 6 characters being selected.Press Arrow-Right -> 'Smalltalk' is accepted as type-in and the list is adjusted to display possible completions for 'Smalltalk'.Press Enter -> The first entry (usually 'SmalltalkCompiler') is accepted.By default the completions are computed from the systems symbol table. Custom converters such as FilenameConverter and ConfigurableConverter allow to introduce other completion policies. FilenameConverter is active by default on Windows platforms: Type in C:\ and press Ctrl-Space. This will bring up a drop-down list with all the files and directories found in volume C: as possible completions. Pressing Return accept the selected completion. In addition, it will immediatelly bring up another completion list if the selected entry was a directory. Note: You might have to re-open your windows in order for the completer functionality to be available in the respective text-panes. HideSource: falseParcel: #('Aragon.Coding Assistant')PrerequisiteParcels: #(#('Aragon.Basics' ''))SaveSource: trueVersion: 7.1Date: 6:42:16 am May 28, 2003 --><time-stamp>From VisualWorks®, Release 7.1 of 18. März 2003 on 28. Mai 2003 at 6:42:16</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CompleterPopup</name><environment>Aragon</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editor phrase items result </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Coding Assistant</category></class><class><name>CompleterPopupController</name><environment>Aragon</environment><super>UI.ApplicationDialogController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Coding Assistant</category></class><class><name>Completer</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>defaultInstance </class-inst-vars><imports></imports><category>Aragon.Coding Assistant</category></class><class><name>CompleterExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename text </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Coding Assistant</category></class><class><name>FilenameCompleter</name><environment>Aragon</environment><super>Aragon.Completer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Coding Assistant</category></class><shared-variable><name>RegisteredResponsibilities</name><environment>Aragon.Completer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category></shared-variable><methods><class-id>Aragon.CompleterPopup</class-id> <category>interface opening</category><body>postBuildWith: aBuilder	(builder componentAt: #list) widget controller 		keyboardHook: [:ev :c | self keyPress: ev in: c].	items selectionIndexHolder onChangeSend: #selectionChanged to: self.	items selectionIndex: 1.</body></methods><methods><class-id>Aragon.CompleterPopup</class-id> <category>accessing</category><body>editor: aValue	editor := aValue</body><body>phrase: aString	phrase := String new writeStream nextPutAll: aString; yourself.</body><body>result	^result</body></methods><methods><class-id>Aragon.CompleterPopup</class-id> <category>aspects</category><body>items	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^items isNil		ifTrue:			[items := SelectionInList new]		ifFalse:			[items]</body></methods><methods><class-id>Aragon.CompleterPopup</class-id> <category>actions</category><body>abort	self completeWith: nil.	super close.</body><body>accept	| i |	result := items selection.	(i := result indexOf: $:) &gt; 0 ifTrue: [i := result size - i].	editor insertAndSelect: '' at: editor selectionStopIndex - i.	self close</body><body>addTypeIn: aCharacter	Completer add: aCharacter in: editor.		phrase nextPut: aCharacter.	self doContinue.</body><body>continue	editor insertAndSelect: '' at: editor selectionStopIndex.	self phrase: items selection.	self doContinue.</body><body>selectionChanged	| s |	(s := items selection) notNil ifTrue: [self completeWith: s]</body></methods><methods><class-id>Aragon.CompleterPopup</class-id> <category>private</category><body>adjustWindowSize	| xt box defaultExtent list |	xt := ((list := builder componentAt: #list) widget measureWidth: true) preferredBounds extent.	defaultExtent := 400@144.	box := builder window globalOrigin extent: (xt min: defaultExtent) + (27@2).	builder window displayBox: box.	xt y &lt; defaultExtent y 		ifTrue: 			[| c | (c := builder componentAt: #resizer) notNil ifTrue: [c isVisible: false].			list decorator noVerticalScrollBar].	^box</body><body>completeWith: choice	| s |	s := choice isNil ifFalse: [choice displayString].	Completer complete: phrase contents with: s in: editor.</body><body>doContinue	| completions |	completions := Completer findCompletionsFor: phrase contents in: items list.	completions size == 0 ifTrue: [^self abort].	items list: completions.	items selectionIndex: 1.	self adjustWindowSize."	completions size == 1 ifTrue: [self close]."</body><body>keyPress: anEvent in: aController	| kv |	kv := anEvent keyValue.	(kv == #Right) ifTrue: [self continue. ^nil].	(kv == Character cr) ifTrue: [self accept. ^nil].	(kv == Character esc) ifTrue: [self abort. ^nil].	(kv == Character backspace) ifTrue: [self abort. ^nil].	(kv == Character space and: [anEvent hasCtrl]) ifTrue: [self continue. ^nil].	(#(Up Down PageUp PageDown Home End) includes: kv)		ifTrue: [^anEvent].	kv isSymbol ifFalse: [self addTypeIn: kv. ^nil].	self close.	^anEvent</body></methods><methods><class-id>Aragon.CompleterPopup class</class-id> <category>interface opening</category><body>openFor: editor with: phrase in: items 	| instance bounds builder index pt |	(instance := self new editor: editor; phrase: phrase) items list: items.	builder := instance allButOpenInterface: ((Aragon includesKey: #WindowResizeCornerSpec) ifTrue: [#windowSpec] ifFalse: [#windowSpec2]).		index := editor view startBlock stringIndex.	pt := (editor view characterBlockForIndex: index - phrase size) corner.	builder window changeOrigin: editor sensor globalOrigin + pt - (7@0).	bounds := instance adjustWindowSize.	builder doFinalHookup.	builder window controller: CompleterPopupController new.	builder window isEventDriven: true.	builder window openTransientIn: bounds type: #postedMenu postOpen: [].	^instance result</body></methods><methods><class-id>Aragon.CompleterPopup class</class-id> <category>class initialization</category><body>initialize	Fonts install: #(Helvetica italic 15) as: #'Aragon.Completer.Small'.</body></methods><methods><class-id>Aragon.CompleterPopupController</class-id> <category>event driven</category><body>eventLoop	"Need to grab all events for this window so that dialogs can act like	they are application modal."		| window |	window := self view topComponent.	[eventDispatcher grabMouseEventForWindow.		[| event | 		event := window windowManager processNextEventForDropDown: window.		self isFinishedWithEvent: event] whileFalse	] ensure: [eventDispatcher ungrabMouseEventForWindow]</body><body>isFinishedWithEvent: event 	"1) Does model flag finished?	2) Is it a close event?	3) Ignore other non mouse events	4) mouse button has gone down outside of my area."	(super isFinishedWithEvent: event) ifTrue: [^true].	(event isKindOf: CloseEvent) ifTrue: [^true].	event isMouseEvent ifFalse: [^false].	(event isButtonPressedEvent and: [(self viewHasCursorWithEvent: event) not]) 		ifTrue: [model abort. ^true].	^false</body></methods><methods><class-id>Aragon.Completer</class-id> <category>public completion</category><body>completeFor: aTextEditor	| s i0 didComplete |	self class == FilenameCompleter 		ifFalse: 			[((s := aTextEditor text string) size &gt; 0 and: [(s at: aTextEditor selectionStartIndex - 1) = $\]) 				ifTrue: [^FilenameCompleter default completeFor: aTextEditor]].	i0 := aTextEditor selectionStartIndex.	s := self fragmentAt: i0 in: aTextEditor text string."	s size &gt; 1 ifTrue: [aTextEditor selectionStartIndex: aTextEditor selectionStartIndex - s size]."	didComplete := self class 		completeTypeIn: s		fromPool: (self completionPoolsFor: aTextEditor)		editor: aTextEditor		withPopup: true		allowEmpty: self completeEmptyFragments."	didComplete ifFalse: [aTextEditor selectionStartIndex: i0; replaceSelectionWith: '']"</body></methods><methods><class-id>Aragon.Completer</class-id> <category>responsibilities</category><body>beResponsibleFor: aTarget	RegisteredResponsibilities at: aTarget put: self</body></methods><methods><class-id>Aragon.Completer</class-id> <category>extension</category><body>completeEmptyFragments	"Subclasses could answer true if they allow conpletions when no 	characters were typed in which could be considered as a start of 	a possible completions. The default answer denotes that there 	must be something to match the completions against."	^false</body><body>completionPoolsFor: aTextEditor	"The answer must be a collection of sets of possible completions, i.e.:"	^Array with: Symbol defaultImplementor allInstances</body><body>fragmentAt: anIndex in: aText 	"Answer the text fragment which is to be completed in aText. 	anIndex denotes the current cursor position in the text."	| i |	((i := anIndex) &lt;= 1 or: [(aText at: i - 1) isAlphaNumeric not])		ifTrue: [^''].	[i &gt; 1 and: [(aText at: i - 1) isAlphaNumeric]]		whileTrue: [i := i - 1].	^(aText copyFrom: i to: anIndex - 1) asString</body></methods><methods><class-id>Aragon.Completer class</class-id> <category>class initialization</category><body>extendKeyboardMap: aKeyboardMap	aKeyboardMap		bindValue:	#completeKey:		to: Character space	modifiers: #(control);		bindValue:	#completeKey:		to: Character space	modifiers: #(shift);		bindValue:	#completeKey:		to: Character space	modifiers: #(alt);	yourself.</body><body>initialize	"self initialize"	(ObjectMemory dependents includes: self) ifFalse: [ObjectMemory addDependent: self].	RegisteredResponsibilities := IdentityDictionary new.	ParagraphEditor allInstances do: [:i | i flushKeyboardMap].	ParagraphEditor allSubclasses do: [:c | (c initialize) allInstances do: [:i | i flushKeyboardMap]].</body><body>obsolete	self uninstall</body><body>releaseAllInstances	self withAllSubclasses do: [:each | each releaseInstances].	RegisteredResponsibilities := IdentityDictionary new.</body><body>releaseInstances	defaultInstance := nil</body><body>resetKeyboardMap	(ParagraphEditor classPool at: #Keyboard)		bindValue:	#normalCharacterKey:		to: Character space	modifiers: #(control);		bindValue:	#normalCharacterKey:		to: Character space	modifiers: #(shift);		bindValue:	#normalCharacterKey:		to: Character space	modifiers: #(alt);	yourself.	ParagraphEditor allInstances do: [:i | i flushKeyboardMap].	ParagraphEditor allSubclasses do: [:c | (c initialize) allInstances do: [:i | i flushKeyboardMap]]</body><body>uninstall	"self uninstall""	KeyboardMapModified		ifTrue: 			[self resetKeyboardMap.			KeyboardMapModified := false]."	ObjectMemory removeDependent: self.	self releaseAllInstances</body><body>update: anAspect with: arguments from: anObject 	"Check for return from snapshot to install."	(anObject == ObjectMemory and: [anAspect == #aboutToSnapshot or: [anAspect == #returnFromSnapshot]])		ifTrue: [self releaseAllInstances]</body></methods><methods><class-id>Aragon.Completer class</class-id> <category>instance creation</category><body>default	defaultInstance isNil ifTrue: [defaultInstance := self new].	^defaultInstance</body><body>for: aTarget	^self new target: aTarget</body></methods><methods><class-id>Aragon.Completer class</class-id> <category>responsibilities</category><body>beResponsibleFor: aTarget	self default beResponsibleFor: aTarget</body><body>removeResponsibilityFor: aTarget	^(RegisteredResponsibilities includesKey: aTarget) ifTrue: [RegisteredResponsibilities removeKey: aTarget]</body><body>responsibilityFor: aTarget 	"Subclasses which provide special factilities for completing the input in aTarget, thus somewhat 	feeling responsible for aTarget, should answer a higher value than I do."	^1</body><body>responsibleFor: aTarget 	| responsible |	(RegisteredResponsibilities includesKey: aTarget)		ifTrue: [responsible := RegisteredResponsibilities at: aTarget]		ifFalse: 			[responsible := self.			self withAllSubclasses do: [:each | (each responsibilityFor: aTarget)					&gt; (responsible responsibilityFor: aTarget) ifTrue: [responsible := each]].			responsible := responsible default].	^responsible</body></methods><methods><class-id>Aragon.Completer class</class-id> <category>utilities</category><body>completeTypeIn: aString fromPool: completionPool editor: editor withPopup: doPopup allowEmpty: completeEmptyFragments	"NOTE: The parameter 'editor' is expected to be an instance of 	TextEditorController or of a subclass thereof."	| completions |	(completeEmptyFragments not and: [aString isEmpty]) ifTrue: [^false].	completions := OrderedCollection new.	completionPool		do: [:items | completions addAll: (self findCompletionsFor: aString in: items)].	completions isEmpty ifTrue: [^false].	(doPopup 		and: [completions size &gt; 0 		and: [(editor view topComponent controller isKindOf: ApplicationDialogController) not]])			ifTrue: [^(CompleterPopup openFor: editor with: aString in: completions) notNil].	self cycleComplete: aString from: completions for: editor.	^true</body><body>completeTypeInFor: editor from: items 	"NOTE: The parameter 'editor' is expected to be an instance of 	TextEditorController or of a subclass thereof."	self		completeTypeIn: editor view displayContents asString		fromPool: (Array with: items)		editor: editor		withPopup: true		allowEmpty: false</body></methods><methods><class-id>Aragon.Completer class</class-id> <category>private</category><body>add: aCharacter in: anEditor 	anEditor appendToSelection: (String with: aCharacter).</body><body>complete: aString with: choice in: anEditor 	| answer s |	anEditor replaceSelectionWith: ''.	choice isNil 		ifTrue: [^anEditor insertAndSelect: '' at: anEditor selectionStopIndex.].	answer := (s := choice displayString) copyFrom: aString size + 1 to: s size.	anEditor insertAndSelect: answer at: anEditor selectionStopIndex.	^answer</body><body>completionsSortBlock	"Answer a sort block to be used when browsing through a set of found completions. By default the 	shortest names in a set of completions will come before longer ones. Subclasses can redefinie this 	method to provide a different sorting scheme."	^[:a :b | a size &lt; b size]</body><body>cycleComplete: aString from: completions for: editor	| stream save cblock |	save := editor instVarAt: (editor class instVarIndexFor: 'keyboardHook').	stream := completions readStream.	cblock := [:s | self complete: aString with: s in: editor].	cblock value: stream next.	editor keyboardHook: [:ev :c |		(self keyPress: ev stream: stream with: cblock) isNil 			ifFalse: [editor keyboardHook: save. ev].	].</body><body>findCompletionsFor: aString in: completionsPool	| pattern completions |	pattern := aString , '#*'.	completions := SortedCollection sortBlock: self completionsSortBlock.	completionsPool do: [:s | (pattern match: s displayString ignoreCase: false) ifTrue: [completions add: s]].	(completions isEmpty or: [completions size = 1 and: [completions first size == aString size]])		ifTrue: [^#()].	^completions</body><body>keyPress: ev stream: stream with: aBlock	(ev keyValue == Character space and: [ev hasShift]) 		ifTrue: 			[stream position &lt; 2 ifTrue: [stream setToEnd].			aBlock value: (stream skip: -2; next).			^nil].	(ev keyValue == Character space and: [ev hasCtrl]) 		ifTrue: 			[stream atEnd ifTrue: [stream reset].			aBlock value: stream next.			^nil].	^ev</body></methods><methods><class-id>Aragon.CompleterExample</class-id> <category>initialize-release</category><body>initialize	text := 'Sm' asValue.	filename := 'C:\' asValue.</body></methods><methods><class-id>Aragon.CompleterExample</class-id> <category>interface opening</category><body>noticeOfWindowClose: aWindow	FilenameCompleter removeResponsibilityFor: (builder componentAt: #filename) widget controller</body><body>postBuildWith: aBuilder	FilenameCompleter beResponsibleFor: (aBuilder componentAt: #filename) widget controller</body></methods><methods><class-id>Aragon.CompleterExample</class-id> <category>aspects</category><body>filename	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^filename</body><body>text	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^text</body></methods><methods><class-id>Aragon.CompleterExample</class-id> <category>actions</category><body>browseFile	| fname w32 |	w32 := Aragon at: #Win32 ifAbsent: [^Dialog warn: 'Requires Win32 Connect!'].	fname := w32 		openFilename: (self filename value asFilename) asString 		filters: #(			'Parcel Files'		'*.pcl' 			'Source Files'	'*.st' 			'Change Files'	'*.cha').	fname isNil ifTrue: [^self].	self filename value: fname</body><body>doFileIn	| f |	f := filename value.	('*.pcl' match: f)		ifTrue: [Parcel loadParcelFrom: f]		ifFalse: [f asFilename fileIn]</body></methods><methods><class-id>Aragon.FilenameCompleter</class-id> <category>extension</category><body>completeEmptyFragments	^true</body><body>completeFor: aTextEditor 		[| t f n |	n := aTextEditor text string size.	super completeFor: aTextEditor.	aTextEditor text string size &gt; n ifFalse: [^self].	t := self filenameIn: aTextEditor.	((f := t asFilename) exists and: [f isDirectory])		ifTrue: 			[aTextEditor insertAndSelect: '' at: aTextEditor selectionStopIndex.			self class add: Filename separator in: aTextEditor.			true]		ifFalse: [false]	] 	whileTrue</body><body>completionPoolsFor: aTextEditor 	"The receivers pool for completions are the contents of the 	directory denoted by the text. NOTE: This only works, 	when the whole text in target is used as a  filename"	| directory t stopIndex |	t := self filenameIn: aTextEditor.	stopIndex := t lastIndexOf: Filename separator.	directory := (t copyFrom: 1 to: stopIndex) asFilename.	Object errorSignal handle: [:ex | ^#()]		do: [^Array with: directory directoryContents]</body><body>filenameIn: aTextEditor 	| t startIndex |	t := aTextEditor text string.	startIndex := t indexOfSubCollection: ':\' startingAt: 1 ifAbsent: [1].	^t copyFrom: startIndex-1 to: aTextEditor selectionStartIndex-1.</body><body>fragmentAt: anIndex in: aText 	| startIndex |	aText isEmpty ifTrue: [^''].	startIndex := aText lastIndexOf: Filename separator.	startIndex &gt; anIndex ifTrue: [^super fragmentAt: anIndex in: aText].	^aText copyFrom: startIndex + 1 to: anIndex - 1</body></methods><methods><class-id>Aragon.FilenameCompleter class</class-id> <category>responsibilities</category><body>responsibilityFor: aTarget 	"Try to detect whether aTarget is used to enter a filename. If so, answer a higher responsibility value 	than the default"	| context |	context := thisContext sender.	[context sender notNil]		whileTrue: 			[('requestFilename*' match: context selector)				ifTrue: [^100].			context := context sender].	^super responsibilityFor: aTarget</body></methods><methods><class-id>UI.UIFeelPolicy</class-id> <category>initialize</category><body>initialize	self keyboardDispatchTable.	self altEditKeys.	self metaEditKeys.	Aragon.Completer extendKeyboardMap: keyboard.</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>Aragon.Coding Assistant</category><body>completeKey: aCharEvent 	(Aragon.Completer responsibleFor: self) completeFor: self</body></methods><methods><class-id>Aragon.CompleterPopup class</class-id> <category>interface specs</category><body>windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Completer' 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #list 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #items 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #accept ) 					#style: #'Aragon.Completer.Small' 					#useModifierKeys: true 					#selectionType: #highlight 					#autoSelect: true ) 				#(#{Aragon.WindowResizeCornerSpec} 					#layout: #(#{Graphics.LayoutFrame} -16 1 -16 1 -1 1 -1 1 ) 					#name: #resizer ) ) ) )</body><body>windowSpec2	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec2"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Completer' 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #list 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #items 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #accept ) 					#style: #'Aragon.Completer.Small' 					#useModifierKeys: true 					#selectionType: #highlight 					#autoSelect: true ) ) ) )</body></methods><methods><class-id>Aragon.CompleterExample class</class-id> <category>interface specs</category><body>fileInSpec	"UIPainter new openOnClass: self andSelector: #fileInSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'File In...' 			#min: #(#Point 408 135 ) 			#max: #(#Point 408 135 ) 			#bounds: #(#Rectangle 423 360 831 495 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 23 25 ) 					#label: 'File in from:' ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 29 50 290 74 ) 					#name: #filename 					#model: #filename 					#type: #string ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 296 50 372 74 ) 					#model: #browseFile 					#label: 'Browse...' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 181 99 287 124 ) 					#model: #doFileIn 					#label: 'Ok' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 289 99 395 124 ) 					#model: #closeRequest 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Completer Example' 			#min: #(#{Core.Point} 392 357 ) 			#max: #(#{Core.Point} 392 357 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1032 869 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 37 40 ) 					#label: 'Type in the leading characters of a symbol, such as ' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 38 109 337 131 ) 					#name: #text 					#model: #text ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 37 57 ) 					#label: 'a class or a method name and press [Ctrl-Space] ' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 9 172 379 304 ) 					#label: 'Filename Completer' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 37 200 ) 					#label: 'Type in fragements of  filenames, absolute or relative,' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 37 218 ) 					#label: 'and press [Ctrl-Space] for completion:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 38 255 337 277 ) 					#name: #filename 					#model: #filename ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 322 ) 					#name: #Label1 					#label: 'In a completer list, try [Arrow Right] to enhance a selection. ' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 9 12 379 156 ) 					#label: 'Standard Completer' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 37 75 ) 					#label: 'and for completion:' ) ) ) )</body></methods><initialize><class-id>Aragon.CompleterPopup</class-id></initialize><initialize><class-id>Aragon.Completer</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category></class><class><name>UIFeelPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>altKeys keyboard metaKeys supportsCodeEditing </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBuilder-Support</category></class><class><name>ApplicationDialogController</name><environment>UI</environment><super>UI.ApplicationStandardSystemController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Controllers</category></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category></class><class><name>ParagraphEditor</name><environment>UI</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>beginTypeInIndex anchorIndex emphasisHere dispatchTable charComposer textHasChanged feelPolicy supportCodeEditingFeels localMenuItems </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBasics-Support</category></class></st-source>