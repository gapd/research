<?xml version="1.0"?><st-source><!-- Name: SLesson TestsNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.DbIdentifier: bear73DbTrace: 33624DevelopmentPrerequisites: #(#(#package 'SLesson Base' '') #(#package 'SLesson Intro Content' '') #(#any 'SUnit' ''))PackageName: SLesson TestsParcel: #('SLesson Tests')ParcelName: SLesson TestsPrerequisiteParcels: #(#('SLesson Intro Content' ''))PrintStringCache: (0.7.3,bobw)Version: 7.2Pre-Load Block: 	[:pkg | ]Date: 1:31:51 pm October 20, 2003 --><time-stamp>From VisualWorks®, 7.2 of October 20, 2003 on October 20, 2003 at 1:31:51 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>LessonTestCase</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>StepCodeTest</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>LessonBuilderTests</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lesson step topic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>LessonModelTest</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>StepEditorTest</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>LessonStepTest</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>LessonTextTest</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>LessonBrowserBaseTest</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>ContentIntegrityTest</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>LessonBrowserWithNotebookTest</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><class><name>LessonBuilderTests2</name><environment>Smalltalk</environment><super>LessonTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Tests</category><attributes><package>SLesson Tests</package></attributes></class><methods><class-id>StepCodeTest</class-id> <category>tests</category><body package="SLesson Tests">testAddToRevealList	| method code revealList |	revealList := Dictionary new.	method := 'laDeDaaa \^self' withCRs.	code := (StepCode new) 				className: 'TESTClassNeverCreated';				methodCode: method.	code addToRevealList: revealList.		self assert: ( revealList includesKey: 'TESTClassNeverCreated' ).</body><body package="SLesson Tests">testIsValid	| valid notValid method |	method := 'laDeDaaa \^self' withCRs.	notValid := StepCode new.	self assert: notValid isValid not.	valid  := (StepCode new) 				className: 'TESTClasNeverCreated';				methodCode: method;				yourself.	self assert:  valid isValid.</body><body package="SLesson Tests">testMakeAndRemoveClass	| code aClass |	code := (StepCode new)					setObject;				className: 'TESTCLASS'.	aClass := Smalltalk at: #TESTCLASS ifAbsent: [nil ].	aClass isNil ifFalse: [ code removeClass. ].	self assert: (Smalltalk at: #TESTCLASS ifAbsent: [nil] )isNil.	code makeClass.	self assert: (Smalltalk at: #TESTCLASS ifAbsent: [nil] )isNil not.	code removeClass.	self assert: (Smalltalk at: #TESTCLASS ifAbsent: [nil] )isNil.</body><body package="SLesson Tests">testMakeAndRemoveMethod	| code aClass|	code := (StepCode new)					setObject;				className: 'TESTCLASS'.	aClass := Smalltalk at: #TESTCLASS ifAbsent: [nil ].	aClass isNil ifFalse: [ code removeClass. ].	self assert: (Smalltalk at: #TESTCLASS ifAbsent: [nil] )isNil.	code makeClass.	self assert: (Smalltalk at: #TESTCLASS ifAbsent: [nil] )isNil not.		code methodCode: 'test001 ^333 '.	code compile.	aClass :=  Smalltalk at: #TESTCLASS ifAbsent: [nil] .  	self assert: ( aClass canUnderstand: #test001).	self should:  [((aClass new) perform: #test001) = 333 ].	code removeMethod.  	self assert: ( aClass canUnderstand: #test001) not.	code removeClass.	self assert: (Smalltalk at: #TESTCLASS ifAbsent: [nil] )isNil.</body><body package="SLesson Tests">testMethodSelector	| method code |	method := 'laDeDaaa \^self' withCRs.	code := (StepCode new) 				methodCode: method.	self assert: code methodSelector = 'laDeDaaa' .</body></methods><methods><class-id>LessonBuilderTests</class-id> <category>setup - teardown</category><body package="SLesson Tests">removeClassNamed: aClassName 	| aClass |	aClass := Smalltalk at: aClassName asSymbol ifAbsent: [nil].	aClass isNil 		ifFalse: [aClass removeFromSystem].</body><body package="SLesson Tests">setUp	topic := 'XYZ002_Topic'.	lesson := 'XYZ002_Lesson'.	step := 'XYZ002_Lesson_01'.	(LessonBuilder new)		browseOff;		makeTopic: topic lesson: lesson</body><body package="SLesson Tests">tearDown	self removeClassNamed: topic.	self removeClassNamed: lesson.	self removeClassNamed: step</body></methods><methods><class-id>LessonBuilderTests</class-id> <category>tests</category><body package="SLesson Tests">testLesson	| lessonClass stepClass  aLesson |	lessonClass := (Smalltalk at: lesson asSymbol ifAbsent: [nil]).	stepClass := (Smalltalk at: step asSymbol ifAbsent: [nil]).	self assert: ( lessonClass isNil not). 	self assert: (stepClass isNil not).		aLesson := 	lessonClass new.	self assert: ((aLesson stepObjects at: 1) isKindOf: stepClass).	self assert: ((aLesson stepNames at: 1) = step).	self assert: (aLesson isClassAStep: stepClass).</body><body package="SLesson Tests">testMakeTopicAndLesson	self assert: (Smalltalk at: topic asSymbol ifAbsent: [nil]) isNil not.	self assert: (Smalltalk at: lesson asSymbol ifAbsent: [nil]) isNil not.	self assert: (Smalltalk at: step asSymbol ifAbsent: [nil]) isNil not</body></methods><methods><class-id>LessonModelTest</class-id> <category>tests</category><body package="SLesson Tests">testAllVisibileClasses	self assert: (LessonModel new allVisibileClasses includes: Object).</body><body package="SLesson Tests">testBrowserClass	self assert: self lessonObject browserClass = LessonBrowser_01</body><body package="SLesson Tests">testDefaultClassName	self assert: self lessonObject defaultTestClassName = #A01_SetupTest</body><body package="SLesson Tests">testIsClassAStep	| lesson |	lesson := self lessonObject. 	self assert: ( lesson isClassAStep: self stepClass ). 	self deny: ( lesson isClassAStep: String ).</body><body package="SLesson Tests">testLastStepName	| aLesson step |  	aLesson := self lessonObject. 	self assert: LessonModel new lastStepName = #UndefinedObject.	self assert: aLesson lastStepName = #UndefinedObject.	step := aLesson stepObjects first.	aLesson currentStep: (aLesson stepObjects at: 2).	self assert: aLesson lastStepName = step class name</body><body package="SLesson Tests">testLookupClass	self assert: (( LessonModel new ) lookupClass: 'String' ) = String.</body></methods><methods><class-id>LessonModelTest</class-id> <category>support</category><body package="SLesson Tests">lessonClass	^A01_Setup</body><body package="SLesson Tests">lessonObject	^ self lessonClass new</body><body package="SLesson Tests">stepClass	^A01_Setup_01</body><body package="SLesson Tests">stepObject	^ self stepClass new</body><body package="SLesson Tests">topicClass	^A00_Intro</body><body package="SLesson Tests">topicObject	^ self topicClass new</body></methods><methods><class-id>StepEditorTest</class-id> <category>tests</category><body package="SLesson Tests">testEscapeSpecialChars		| singleQuoteString string |	singleQuoteString := ''''.	self assert: singleQuoteString size = 1.	string := StepEditor new escapeSpecialChars: singleQuoteString.	self assert: string size = 2.	self assert: ((string at: 1) = $' ).	self assert: ((string at: 2) = $' ).</body></methods><methods><class-id>LessonStepTest</class-id> <category>tests</category><body package="SLesson Tests">testCodeBundle	| step |	step := A02_LessonRunner_01 new.	self assert: step codeBundle key = #A02_LessonRunner_01.	self assert: step codeBundle value = OrderedCollection new</body><body package="SLesson Tests">testSelectorsInStepCode	| step |	step := A02_LessonRunner_01 new.	self assert: step selectorsInStepCode = OrderedCollection new</body><body package="SLesson Tests">testSelectorsInStepContent	| step |	step := A02_LessonRunner_01 new.	self assert: step selectorsInStepContent 				= #(#defaultWorkspaceText #what) asOrderedCollection</body></methods><methods><class-id>LessonTextTest</class-id> <category>tests</category><body package="SLesson Tests">testAddHtmlBoldTags	| all  embedded multi | 	all := ('more' asText allBold) addHtmlBoldTags.	self assert: (all  = '&lt;B&gt;more&lt;/B&gt;').	embedded := 'some ' asText , ('more' asText allBold), ' text' asText.	embedded := embedded addHtmlBoldTags.	self assert: (embedded  = 'some &lt;B&gt;more&lt;/B&gt; text').	multi := 'some ' asText , ('more' asText allBold), ' text ' asText, ('wow' asText allBold).	multi := multi addHtmlBoldTags.	self assert: (multi  = 'some &lt;B&gt;more&lt;/B&gt; text &lt;B&gt;wow&lt;/B&gt;' ).</body><body package="SLesson Tests">testBoldAllQuotesEmbedded	| embedded  |	embedded := 'some text "in" quotes and out' asText.	self assert: nil = (embedded boldAllQuotes emphasisAt: 11) .	self assert: #bold = (embedded boldAllQuotes emphasisAt: 12) .	self assert: #bold = (embedded boldAllQuotes emphasisAt: 13) .	self assert: nil = (embedded boldAllQuotes emphasisAt: 14) .</body><body package="SLesson Tests">testBoldAllQuotesEmbeddedAndOpen	| embedded open  both |	embedded := 'some text "in" quotes and out' asText.	open := 'more text with "open quote' asText.	both := 'last text "em"bedded and "open quotes' asText.	self assert: #bold = (embedded boldAllQuotes emphasisAt: 12) .</body><body package="SLesson Tests">testBoldAllQuotesOpen	| open  |	open := 'more text with "open quote' asText.	self assert: nil = (open boldAllQuotes emphasisAt: 14) .	self assert: nil = (open boldAllQuotes emphasisAt: 15) .	self assert: nil = (open boldAllQuotes emphasisAt: 16) .	self assert: nil = (open boldAllQuotes emphasisAt: 17) .	self assert: nil = (open boldAllQuotes emphasisAt: 18) .</body><body package="SLesson Tests">testBoldHtmlTagsEmbedded	| embedded  answer| 	embedded := 'some text &lt;B&gt;in&lt;/B&gt; quotes and out' asText.	answer := embedded boldHtmlTags.	self assert: nil = ( answer emphasisAt: 10) .	self assert: #bold = (answer  emphasisAt: 11) .	self assert: #bold = (answer  emphasisAt: 12) .	self assert: nil = (answer  emphasisAt: 13) .</body><body package="SLesson Tests">testBoldHtmlTagsEmbeddedAndOpen	|  both |	both := 'last text &lt;B&gt;em&lt;/B&gt;bedded and &lt;B&gt;open quotes' asText.	self assert: nil = (both boldHtmlTags emphasisAt: 10) .	self assert: #bold = (both boldHtmlTags emphasisAt: 11) .	self assert: #bold = (both boldHtmlTags emphasisAt: 12) .	self assert: nil = (both boldHtmlTags emphasisAt: 13) .	self assert: nil = (both boldHtmlTags emphasisAt: ( both size -1)) .</body><body package="SLesson Tests">testBoldHtmlTagsEmbeddedLowCase	| embedded  answer| 	embedded := 'some text &lt;b&gt;in&lt;/b&gt; quotes and out' asText.	answer := embedded boldHtmlTags.	self assert: nil = ( answer emphasisAt: 10) .	self assert: #bold = (answer  emphasisAt: 11) .	self assert: #bold = (answer  emphasisAt: 12) .	self assert: nil = (answer  emphasisAt: 13) .</body><body package="SLesson Tests">testBoldHtmlTagsLessThan	| lessThan  |	lessThan := 'Is 4 &lt; 400 &lt;B&gt;?&lt;/B&gt;' asText.	self assert: (lessThan boldHtmlTags size = 12 ) .	self assert: nil = (lessThan boldHtmlTags emphasisAt: 11 ) .	self assert: #bold = (lessThan boldHtmlTags emphasisAt: 12 ) .</body><body package="SLesson Tests">testBoldHtmlTagsMultiEmbedded	| multi  answer return | 	multi := 'some text in &lt;B&gt;bold&lt;/B&gt; and &lt;B&gt;out&lt;/B&gt;' asText.	answer := 'some text in ' asText , 				('bold' asText allBold), ' and ' asText, ('out' asText allBold).	return := multi  boldHtmlTags.	self assert: (answer equalStringAndEmphasis: return).</body><body package="SLesson Tests">testBoldHtmlTagsOpen	| open  |	open := 'more text with &lt;B&gt;open quote' asText.	self assert: nil = (open boldAllQuotes emphasisAt: 14) .	self assert: nil = (open boldAllQuotes emphasisAt: 15) .	self assert: nil = (open boldAllQuotes emphasisAt: 16) .	self assert: nil = (open boldAllQuotes emphasisAt: 17) .	self assert: nil = (open boldAllQuotes emphasisAt: 18) .</body><body package="SLesson Tests">testBoldHtmlTagsSize 	| open  valid |   	open := 'more text with &lt;B&gt;open quote'  asText.	self assert: (open boldHtmlTags size = 28) .	valid := 'more text with &lt;B&gt;open&lt;/B&gt; quote'  asText.	self assert: (valid boldHtmlTags size = 25 ) .</body><body package="SLesson Tests">testHtmlTagIntervals	| html |	html := 'text with &lt;B&gt;embedded&lt;/B&gt; quote' asText.	self assert: (html htmlTagIntervals at: 1)  = (11 to: 13).	self assert: (html htmlTagIntervals at: 2)  = (22 to: 25 ).</body><body package="SLesson Tests">testHtmlTagStartingAt	| html | 	html := 'text with &lt;B&gt;open quote' asText.	self assert: (html htmlTagStartingAt: 1) = (11 to: 13).	self assert: (html htmlTagStartingAt: 5) = (11 to: 13).	self assert: (html htmlTagStartingAt: 11) = (11 to: 13).	self assert: (html htmlTagStartingAt: 12) = (0 to: 0).	self assert: (html htmlTagStartingAt: 15) = (0 to: 0).	self assert: (html htmlTagStartingAt: 50) = (0 to: 0).</body></methods><methods><class-id>ContentIntegrityTest</class-id> <category>tests</category><body package="SLesson Tests">removeSuffixClass: each 	| index classString |	classString := (index := each findString: ' class' startingAt: 1) = 0 				ifTrue: [each]				ifFalse: [each copyFrom: 1 to: index - 1].	^classString</body><body package="SLesson Tests">testAllStepCodeMethodsReturnStepCodeOrNil	"&gt; Note: nil is returned by generated but still unused 'step code'  methods&lt;"	| return isStepCode |	self eachStepDo: [ :eachStep | 			eachStep selectorsInStepCode do: [ :selector | 					return :=  eachStep perform: selector.						isStepCode := return isKindOf: StepCode.  					self assert: ( isStepCode | return isNil  ). 	]].</body><body package="SLesson Tests">testAllStepContentHasNoTODOs	| content |	self eachStepDo: [ :eachStep | 			eachStep selectorsInStepContent do: [ :selector | 					content :=  eachStep perform: selector.						self assert: ( 0 = (content asString findString: 'TODO'  startingAt: 1  ifAbsent: [ 0 ] )).]].</body><body package="SLesson Tests">testAllStepContentMethodsReturnText	| return |	self eachStepDo: [ :eachStep | 			eachStep selectorsInStepContent do: [ :selector | 					return :=  eachStep perform: selector.						self assert: (  return isKindOf: Text ). 	]].</body><body package="SLesson Tests">testAllStepsHaveSomeContent	|  selectors allTabs |	self eachStepDo: [ :eachStep | 			selectors := eachStep selectorsInStepContent.			selectors remove: #defaultWorkspaceText.			allTabs := selectors select: [ :selector | (eachStep isPageBlank: selector) not ].			self assert: (  allTabs isEmpty not ). 	].</body><body package="SLesson Tests">testAtLeastOneTopic	self assert: ( LessonModel subclasses isEmpty not) .</body><body package="SLesson Tests">testEachLessonHasBrowserClass	self eachLessonDo: 	[:eachLesson | 			 self assert: ( eachLesson selectors includes: #browserClass)  ].</body><body package="SLesson Tests">testEachLessonHasDescription	self eachLessonDo: 	[:eachLesson | 				self assert: ( eachLesson selectors includes: #description)  ].</body><body package="SLesson Tests">testEachLessonHasDisplayString	self eachLessonDo: 	[:eachLesson | 					self assert: ( eachLesson selectors includes: #displayString ) ].</body><body package="SLesson Tests">testEachLessonHasRevealList	self eachLessonDo: 	[:eachLesson | 			eachLesson selectors includes: #revealList  ].</body><body package="SLesson Tests">testEachLessonHasSomeSteps	self eachLessonDo: 	[:eachLesson | 			self assert: eachLesson new stepObjects isEmpty not]</body><body package="SLesson Tests">testEachLessonValidRevealListClasses	| allClasses |	self eachLessonDo: 			[:eachLesson | 			| oneLesson revealList revealClasses |			oneLesson := eachLesson new.			revealList := oneLesson revealList.			oneLesson codeForAllStepsInOneList 				do: [:each | each removeFromRevealList: revealList].			revealClasses := OrderedCollection new.			revealList keys do: 					[:each | 					| classString |					classString := self removeSuffixClass: each.					revealClasses add: classString].			allClasses := oneLesson classNames.			revealClasses do: [:each | self assert: (allClasses includes: each)]]</body><body package="SLesson Tests">testEachLessonValidRevealListSelectors	self eachLessonDo: 	[:eachLesson | | oneLesson  revealList |			oneLesson := eachLesson new. 			revealList := oneLesson revealList.			oneLesson codeForAllStepsInOneList 							do: [ :each | each removeFromRevealList: revealList  ].			revealList associationsDo: [ :eachAssociation  | | class |					class := oneLesson lookupClass: ( self removeSuffixClass: eachAssociation key) asSymbol.					(eachAssociation key findString: ' class' startingAt: 1) &gt; 0 						ifTrue: [ class := class class ].					eachAssociation value do:  [ :eachSelector |							self assert: (class canUnderstand: eachSelector ). ]]].</body><body package="SLesson Tests">testEachTopicHasSomeLessons	LessonModel subclasses do: 			[:eachTopic | 			self assert: ( eachTopic subclasses isEmpty not) ]</body><body package="SLesson Tests">testEachTopicNameHasLetterAndTwoDigitsUnderscore	LessonModel subclasses do: 			[:eachTopic | | topicName |			topicName := eachTopic class name.			self assert: (topicName at: 1 ) isLetter.			"&gt; self assert: (topicName at: 2 ) isDigit. &lt;"  			self flag: #TODO. 			 "&gt; needs a different connection design for topics and lessons &lt;"			self assert: (topicName at: 3 ) isDigit.			self assert: (topicName at: 4 ) = $_. ].</body><body package="SLesson Tests">testStepContentMatchesBrowserStage	self eachLessonDo:  [ :eachLesson | | browser |					browser := eachLesson new browserClass.					eachLesson new stepObjects do: [ :eachStep | 							self validateStep: eachStep for: browser ]].</body><body package="SLesson Tests">validateStep: aLessonStep for: aBrowser		aBrowser new requiredSelectors do: [ :each |		self assert: ( aLessonStep class selectors includes: each) ].</body><body package="SLesson Tests">validateStepNotEmpty: aLessonStep	"&gt; Note: 'EMPTY:'  is stamped into the generated 'step content' methods. &lt;"	"&gt; These methods need to be edited (valid text entered) before the 	&lt;" 	"&gt; lesson/step is finished											&lt;"	| firstSix |	aLessonStep selectorsInStepContent do: [ :each |		 firstSix := ( aLessonStep perform: each) copyFrom: 1 to: 6.		self assert: firstSix ~= 'EMPTY:'.	].</body><body package="SLesson Tests">validTopicName: aString	self assert: (aString at: 1 ) isLetter.	self assert: (aString at: 2 ) isDigit.	self assert: (aString at: 3 ) isDigit.	self assert: (aString at: 4 ) = $_.</body></methods><methods><class-id>ContentIntegrityTest</class-id> <category>iterators</category><body package="SLesson Tests">eachLessonDo: aBlock	LessonModel subclasses do: 			[:eachTopic | 			eachTopic subclasses do: 					[:eachLesson | 						aBlock value: eachLesson ]].</body><body package="SLesson Tests">eachStepDo: aBlock	self eachLessonDo:  [ :eachLesson | 			eachLesson new stepObjects do: [ :eachStep | 					aBlock value: eachStep  ]].</body><body package="SLesson Tests">eachTopicDo: aBlock	LessonModel subclasses do: [ :eachTopic|		aBlock value: eachTopic  ] .</body></methods><methods><class-id>ContentIntegrityTest</class-id> <category>utility</category><body package="SLesson Tests">fileOutAllStepsTo: aFilenameString	"&gt;		ContentIntegrityTest new fileOutAllStepsTo: 'textDump.txt'.	&lt;"	| fileManager |	fileManager := SourceCodeStream on: aFilenameString asFilename writeStream.	self eachStepDo: [ :eachStep | 			eachStep class fileOutSourceOn: fileManager ].	fileManager close.</body><body package="SLesson Tests">makeFileForSpellChecker	"&gt;		ContentIntegrityTest new makeFileForSpellChecker.	&lt;"	| return write |	write := 'textDump.txt' asFilename writeStream.	self eachStepDo: [ :eachStep | 			write 				nextPut: Character cr;				nextPutAll: '&lt;class=''', eachStep class name asString, '''&gt;';				nextPut: Character cr.			eachStep selectorsInStepContent do: [ :selector | 					return :=  eachStep perform: selector.						write 						nextPut: Character cr;						nextPut: Character cr;						nextPutAll: '&lt;selector=''', eachStep class name asString;						nextPutAll:  '&gt;&gt;', selector asString, '''&gt;';						nextPut: Character cr;						nextPut: Character cr;						nextPutAll: return;						nextPut: Character cr;						nextPutAll: '&lt;/selector&gt;';						nextPut: Character cr.  ].			write 				nextPut: Character cr;				nextPutAll: '&lt;/class&gt;';				nextPut: Character cr. ].	write close.</body></methods><methods><class-id>LessonBrowserWithNotebookTest</class-id> <category>tests</category><body package="SLesson Tests">testSortTabs	| browser tabs answer |	browser := LessonBrowserWithNotebook new.	tabs := #( why how what ) asOrderedCollection.	answer := #( what how why ) asOrderedCollection.	self assert: (answer = (browser sortTabs: tabs )).</body></methods><methods><class-id>LessonBuilderTests2</class-id> <category>tests</category><body package="SLesson Tests">testPad2digits	self assert: (( LessonBuilder new ) pad2digits: 10) = '10'.	self assert: (( LessonBuilder new ) pad2digits: 1) = '01'.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>