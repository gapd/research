<?xml version="1.0"?><st-source><!-- Name: SLesson Intro ContentNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.Comment: Contains the content classes for the Lesson Browser. The following topics are included:	* Introduction	* Fundamentals	* Class Library 1	* Class Library 2DbIdentifier: bear73DbTrace: 33623DevelopmentPrerequisites: #(#(#package 'SLesson Base' ''))PackageName: SLesson Intro ContentParcel: #('SLesson Intro Content')ParcelName: SLesson Intro ContentPrerequisiteParcels: #(#('SLesson Base' ''))PrintStringCache: (0.8.12,bobw)Version: 7.2Date: 1:31:48 pm October 20, 2003 --><time-stamp>From VisualWorks®, 7.2 of October 20, 2003 on October 20, 2003 at 1:31:48 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>F02_Iterators_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B05_MoreConcepts_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs_06</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F03_Streams_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E04_Blocks_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B04_Classes_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections_07</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections_08</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E01_TheLibrary_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E03_Numbers_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E04_Blocks_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_005</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_07</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_08</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F02_Iterators_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F03_Streams_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B05_MoreConcepts_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A02_LessonRunner_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs_07</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B05_MoreConcepts_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_10</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B04_Classes_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E03_Numbers_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B02_Interaction_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E03_Numbers_07</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B04_Classes_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F02_Iterators_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E04_Blocks_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E04_Blocks_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E01_TheLibrary_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B04_Classes_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E03_Numbers_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E03_Numbers_06</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F02_Iterators_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_09</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B02_Interaction_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A02_LessonRunner_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B00_Fundamentals</name><environment>Smalltalk</environment><super>LessonModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics</name><environment>Smalltalk</environment><super>B00_Fundamentals</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output_07</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E03_Numbers_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output_08</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B02_Interaction</name><environment>Smalltalk</environment><super>B00_Fundamentals</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output_06</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F02_Iterators_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E02_Strings_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A01_Setup_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_11</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B02_Interaction_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections_06</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A02_LessonRunner_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F00_LibraryTwo</name><environment>Smalltalk</environment><super>LessonModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F03_Streams</name><environment>Smalltalk</environment><super>F00_LibraryTwo</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F02_Iterators</name><environment>Smalltalk</environment><super>F00_LibraryTwo</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F04_Files</name><environment>Smalltalk</environment><super>F00_LibraryTwo</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_009</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B04_Classes</name><environment>Smalltalk</environment><super>B00_Fundamentals</super><private>false</private><indexed-type>none</indexed-type><inst-vars>revealList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B05_MoreConcepts</name><environment>Smalltalk</environment><super>B00_Fundamentals</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F04_Files_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B05_MoreConcepts_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A02_LessonRunner_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A02_LessonRunner_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F02_Iterators_06</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A00_Intro</name><environment>Smalltalk</environment><super>LessonModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A01_Setup</name><environment>Smalltalk</environment><super>A00_Intro</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A02_LessonRunner</name><environment>Smalltalk</environment><super>A00_Intro</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections</name><environment>Smalltalk</environment><super>F00_LibraryTwo</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F01_Collections_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E02_Strings_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs_08</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output_03</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B04_Classes_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E03_Numbers_05</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output</name><environment>Smalltalk</environment><super>B00_Fundamentals</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>A01_Setup_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B05_MoreConcepts_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B01_Basics_06</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>B03_Output_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F03_Streams_02</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E02_Strings_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E00_LibraryOne</name><environment>Smalltalk</environment><super>LessonModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E04_Blocks</name><environment>Smalltalk</environment><super>E00_LibraryOne</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E01_TheLibrary</name><environment>Smalltalk</environment><super>E00_LibraryOne</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E02_Strings</name><environment>Smalltalk</environment><super>E00_LibraryOne</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E03_Numbers</name><environment>Smalltalk</environment><super>E00_LibraryOne</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>F03_Streams_04</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E04_Blocks_01</name><environment>Smalltalk</environment><super>LessonStep</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><class><name>E05_ControlStructs</name><environment>Smalltalk</environment><super>E00_LibraryOne</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Intro Content</category><attributes><package>SLesson Intro Content</package></attributes></class><methods><class-id>F02_Iterators_03</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F02_Iterators_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'This example will find the first odd number in the collection and return it. Select the code and &lt;B&gt;print it&lt;/B&gt;:&lt;B&gt;| oc | oc := OrderedCollection new.oc	add: 40;	add: 30;	add: -99;	add: 493.oc	detect:	[:eachItem | 			eachItem odd ].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to find a particular item in a collection using &lt;B&gt;detect:&lt;/B&gt;.The &lt;B&gt;detect:&lt;/B&gt; method uses the block to find the &lt;B&gt;first&lt;/B&gt; object that fulfils a condition. When the block evaluates to &lt;B&gt;true&lt;/B&gt; the current item is returned.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'detect: [ ]'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F02_Iterators #F02_Iterators_03)</body></methods><methods><class-id>B05_MoreConcepts_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Objects of class &lt;B&gt;Number, Character, and Symbol&lt;/B&gt; cannot be modified. Each instance exists only once in the system.Example (1)  Select each line and &lt;B&gt;print it&lt;/B&gt;.Not Immutable&lt;B&gt;''Yippe'' == ''Yippe''.''Yippe'' == ''Yippe'' copy.&lt;/B&gt;Immutable Number&lt;B&gt;5 == 5 copy.5 == 5 .&lt;/B&gt;Immutable Character&lt;B&gt;$A == $A copy.$A == $A .&lt;/B&gt;Immutable Symbol&lt;B&gt;#Yippie == #Yippie copy.#Yippie == #Yippie .&lt;/B&gt;Error Changing a SymbolClick ''Terminate'' in the debugger when you &lt;B&gt;do it&lt;/B&gt; below.&lt;B&gt;#Yippie at: 1 put: $H&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'What are &lt;B&gt;immutable&lt;/B&gt; objects?All objects inherit common behavior from the superclass &lt;B&gt;Object&lt;/B&gt;. Among these behaviors is the method &lt;B&gt;#copy&lt;/B&gt;. This method creates a new object just like the current object, but as a different instance. See Example (1).There are some objects that exist only once in the system, and they cannot be copied or changed in any way. These are called &lt;B&gt;immutable objects&lt;/B&gt;.Immutable objects are instances of the classes and subclasses of: &lt;B&gt;Number, Character, and Symbol&lt;/B&gt;. For example, you cannot change the object 5 into the object 2, and when you copy the object 5, it just returns itself. See Example (2).'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>B05_MoreConcepts_01</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>B05_MoreConcepts_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Immutable Objects'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B05_MoreConcepts #B05_MoreConcepts_01)</body></methods><methods><class-id>E05_ControlStructs_06</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E05_ControlStructs_06</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Example of #whileTrue:. Select the following code and &lt;B&gt;Do it&lt;/B&gt;.&lt;B&gt;| count |count := 0.[count &lt; 100] 	whileTrue: [count := count + 1].MyTranscript 	show: count printString; cr.&lt;/B&gt;Example of #whileFalse:. Select the following code and &lt;B&gt;Do it&lt;/B&gt;.&lt;B&gt;| count |count := 0.[count squared &gt; 100] 	whileFalse: [count := count + 1].MyTranscript 	show: count printString; cr.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Here''s an example of a simple looping statement.&lt;B&gt;[ blockReturningABoolean ] 	whileTrue: [ blockToEvaluate ].&lt;/B&gt;Look in the class browser below at &lt;B&gt;BlockClosure&gt;&gt;whileTrue:&lt;/B&gt;.  This is a little complicated so we will walk through the code.(1) Evaluate the block &lt;B&gt;[ blockReturningABoolean ]&lt;/B&gt;, which is actually self, but you can ignore that for now.(2) If it is false, return implicitly.(3) If it is true, evaluate the block &lt;B&gt;[ blockToEvaluate ]&lt;/B&gt; once.(4) Call BlockClosure&gt;&gt;whileTrue: recursively until the block &lt;B&gt;[ blockReturningABoolean ]&lt;/B&gt; returns false.In short, run &lt;B&gt;[ blockToEvaluate ]&lt;/B&gt; as long as &lt;B&gt;[ blockReturningABoolean ]&lt;/B&gt; is true.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the Smalltalk way to write loops.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_06</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Loops'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs #E05_ControlStructs_06)</body></methods><methods><class-id>B01_Basics_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Literal Constants'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_04)</body></methods><methods><class-id>B01_Basics_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Constants&lt;/B&gt; are objects that are instances of the classes shown in the list on the left (our goal for this lesson).A &lt;B&gt;literal&lt;/B&gt; is an object that is referred to or created '' in-line'' in a method.  To understand these ideas, select the examples (below) one line at a time and evaluate them using &lt;B&gt;Print it&lt;/B&gt;. Since each example is a constant, the result will often just be a repeat of what you selected. However, some of the results may give you some food for thought.A &lt;B&gt;String&lt;/B&gt; is a collection of characters inside &lt;B&gt;single quotes&lt;/B&gt;.''Hello World''.''Go Smalltalk!''.An &lt;B&gt;Integer&lt;/B&gt; is a kind of number.1  1000  -2312412841234123141531A &lt;B&gt;Float&lt;/B&gt; is another kind of number.1.234 	-4444.234A &lt;B&gt;Float&lt;/B&gt; can also be in exponent notation.3.0e110.3e10-10.3e20Numbers can also be written in &lt;B&gt;other bases&lt;/B&gt; (radixes). Prefix the number with the base, using the lower-case ''r''.10r9118r76716rFFF16r1002r1036rSmalltalkA &lt;B&gt;Fraction&lt;/B&gt; is written ''numerator / denominator'' and is also stored that way without losing precision.100 / 300 100001 / 300000( 2/3 ) + ( 1/3 )A &lt;B&gt;Character&lt;/B&gt; constant is written with a leading dollar sign ($)$A  "the character capital A"$b 	"the character lowercase b"$4	"the character 4"$. 	"the character period (.)"$ 	"the space character"$$	"the dollar sign character"A &lt;B&gt;Boolean&lt;/B&gt;  is either the constant true or the constant false.true 	"the object of value: true"false 	"the object of value: false"A &lt;B&gt;Symbol&lt;/B&gt; is a unique identifier, used for message names and other symbolic constants. It is written with a hash (also called a sharp sign, or a pound sign) preceding an identifier name. Symbols are like strings, but each symbol is unique.#openWindow  #on#off#blueAn &lt;B&gt;Array&lt;/B&gt; can be written as a constant with items directly represented inside parenthesis and preceded by a hash sign. Notice that we do not need to separate the items with commas or semicolons -- a space is all we need. The syntax is clean enough to allow each element to stand by itself.#(  ''ringo''  ''paul''  ''george'' ).#( 1  800  888  5551212 ).#( true true true false false true ).A &lt;B&gt;Byte Array&lt;/B&gt; is an array which only holds Integers from with values from 0 to 255. It appears as a list of the integers surrounded by square brackets. (Square brackets without the hash (#) symbol also surround code blocks, which is covered in under the topic: Class Library 1.)#[ 2  23  55 255 255 0 0 123 ].#[ ].#[ 0 0 0 ].'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how the following constants are represented:&lt;B&gt;StringIntegerFloatFractionCharacterBooleanSymbolArrayByteArray&lt;/B&gt;'  asText boldHtmlTags.</body></methods><methods><class-id>F03_Streams_01</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F03_Streams_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'A &lt;B&gt;stream&lt;/B&gt; is a object that allows sequential or positional processing of a series of objects.A pattern that occurs frequently in programming requires that your application repeatedly fetch input from some source (a file, keyboard, network stream, etc.), process each element, and then pass it as output. &lt;B&gt;Streams&lt;/B&gt; provide a consistent and easily usable vocabulary for this common programming task.Smalltalk supports this input-process-output metaphor with a set of classes named &lt;B&gt;Streams&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'   '  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about the &lt;B&gt;Stream&lt;/B&gt; classes.Some of the most useful Stream classes include:  &lt;B&gt;ReadStream&lt;/B&gt; -- used to read objects.&lt;B&gt;WriteStream&lt;/B&gt; -- used to write objects.&lt;B&gt;PositionableStream&lt;/B&gt; -- an abstract superclass.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Just like the iteration messages for collections, streams provide an easy, consistent, and pre-debugged way to perform common programming tasks.'  asText boldHtmlTags.</body></methods><methods><class-id>F03_Streams_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Overview of Streams'.</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F03_Streams #F03_Streams_01)</body></methods><methods><class-id>E05_ControlStructs_02</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E05_ControlStructs_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Exercise (1)Select the following lines and choose &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt; true.&lt;/B&gt;&lt;B&gt; true not.&lt;/B&gt;	"logical negation"&lt;B&gt; false.&lt;/B&gt;&lt;B&gt; false not.&lt;/B&gt;Exercise (2)Select the following lines and choose &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt; true &amp; true.&lt;/B&gt;  	"logical AND"&lt;B&gt; false &amp; true.&lt;/B&gt;&lt;B&gt; false | true.&lt;/B&gt;	"logical OR"Use the browser and study how these messages are implemented in the &lt;B&gt;True&lt;/B&gt; and &lt;B&gt;False&lt;/B&gt; classes. See how they use polymorphism to accomplish the expected behavior.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Now that we know the object names, we can send them messages.  See Exercise (1).In the class browser below select class &lt;B&gt;True&lt;/B&gt; and method &lt;B&gt;#not&lt;/B&gt;.  See that simply returns the object &lt;B&gt;false&lt;/B&gt;.   No calculation is required. It knows that it is the &lt;B&gt;true&lt;/B&gt; object so the behavior for #not is to return the other.Look at &lt;B&gt;False&gt;&gt;not&lt;/B&gt;.Think about what you just read in the browser. That''s &lt;B&gt;polymorphism&lt;/B&gt; in action.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Boolean&lt;/B&gt;.A &lt;B&gt;branches&lt;/B&gt; changes the flow of control, based on a Boolean value.A &lt;B&gt;loop&lt;/B&gt; iterates over a block of code, using on a Boolean value.The class &lt;B&gt;Boolean&lt;/B&gt; is an abstract class with two subclasses. Can you guess what they are?Yes, the subclasses are class &lt;B&gt;True&lt;/B&gt; and class &lt;B&gt;False&lt;/B&gt;. Notice that these names are capitalized -- they are class names. There is one and only one instance of each of these classes in the system, and the names of these instances are &lt;B&gt;true&lt;/B&gt; and &lt;B&gt;false&lt;/B&gt;.Click on the &lt;B&gt;How&lt;/B&gt; tab to continue.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'What makes a Branch branch but not plot?	&lt;B&gt;Booleans !&lt;/B&gt;What makes a Loop loop and not hop? 	&lt;B&gt;Booleans !&lt;/B&gt;What puts the ape in apricot? 	&lt;B&gt;Booleans ?&lt;/B&gt;What''s Smalltalk got that they ain''t got. 	&lt;B&gt;Booleans ! ! !&lt;/B&gt;- - - -paraphrase of the Cowardly Lion from "Wizard of OZ".'  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Boolean'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs #E05_ControlStructs_02)</body></methods><methods><class-id>E04_Blocks_03</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E04_Blocks_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Evaluating Blocks'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E04_Blocks #E04_Blocks_03)</body></methods><methods><class-id>E04_Blocks_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Select both examples (1) and (2) together and choose &lt;B&gt;Do it.&lt;/B&gt;&lt;B&gt;"Example (1)"| aBlock |aBlock := [ MyTranscript 	show: '' I am in a block. '' ]."Example (2)"aBlock value. &lt;/B&gt;Example (3) Blocks return the value of their last statement. To see this, select example (3) and choose &lt;B&gt;Do it.&lt;/B&gt;&lt;B&gt;| answer |answer := [  ''ignore this'' asUppercase.			4 factorial ] value.MyTranscript cr; show: answer printString.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Since code blocks are objects, you can &lt;B&gt;assign&lt;/B&gt; them to a variable. See &lt;B&gt;example (1)&lt;/B&gt;.To evaluate a block object, send it the message &lt;B&gt;#value&lt;/B&gt;  See &lt;B&gt;example (2)&lt;/B&gt;.The result of the value method is the value of the &lt;B&gt;last statement in the block&lt;/B&gt;.  See &lt;B&gt;example (3)&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to evaluate a Block.See &lt;B&gt;How&lt;/B&gt; for details.'  asText boldHtmlTags.</body></methods><methods><class-id>B03_Output_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'The Inspector'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output #B03_Output_04)</body></methods><methods><class-id>B03_Output_04</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>B03_Output_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'VisualWorks includes a standard tool called the &lt;B&gt;Inspector&lt;/B&gt;.To see it in action, select the following character string and choose &lt;B&gt;Inspect.&lt;/B&gt;&lt;B&gt;''abcdefg'' &lt;/B&gt;An inspector is displayed. There are different kinds of inspectors, depending on the kind of object inspected. Each object knows what inspector to use for itself. (This is  another example of the notion of polymorphism.)The title bar of the Inspector window tells us that it is a &lt;B&gt;ByteString&lt;/B&gt; inspector. In the middle of the tool, a row of tabs provide different views on the object being inspected. Click on the tab &lt;B&gt;Elements&lt;/B&gt; to see more details.Along the left of the elements view, a list appears. The list shows the components parts of the String -- the individual &lt;B&gt;Character&lt;/B&gt; objects. Select one of the index numbers on the list, and notice how the individual characters are displayed in the inspector''s right-hand panel.If you select index &lt;B&gt;5&lt;/B&gt; and select &lt;B&gt;Inspect&lt;/B&gt; again (using the right-hand mouse button), you''ll open another inspector window on the Character object. In this way, you can inspect from one object to another and move around the entire system.You can use the inspector to look at the internal values of any object in the image.&lt;B&gt;In Smalltalk, nothing is off-limits.&lt;/B&gt;Now you can close the inspector window and go to the next step.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about the &lt;B&gt;Inspector&lt;/B&gt;.The inspector is a powerful tool that enables you to easily examine and change the state of any object in the image.'  asText boldHtmlTags.</body></methods><methods><class-id>B04_Classes_01</class-id> <category>initialize release</category><body package="SLesson Intro Content">initialize	super initialize.	workspaceText := self defaultWorkspaceText asValue.	^self</body></methods><methods><class-id>B04_Classes_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Introduction to Stage Four Browser'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B04_Classes #B04_Classes_01)</body></methods><methods><class-id>B04_Classes_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'VisualWorks provides a set of &lt;B&gt;browsers&lt;/B&gt; for viewing and writing code. Many different browsers are available, depending on the task at hand. (The general idea is that you can choose the right tool for the job.)In this stage of the Lesson Browser, we''ll introduce a special &lt;B&gt;Read-Only Class Browser&lt;/B&gt; (at the bottom of this window). This browser shows you the elements within classes, and to keep things simple, it shows only the classes and methods discussed in the current lesson.&lt;B&gt;Overview of the Class Browser&lt;/B&gt;Some of the concepts such as &lt;B&gt;class&lt;/B&gt; will be explained in the next step. For now we just want you to be a little more familiar with the panels in this browser.1. The &lt;B&gt;left list&lt;/B&gt; shows the names of classes.2. The &lt;B&gt;middle list&lt;/B&gt; shows the methods for the selected class, this list varies based upon which radio button you have selected.3. The &lt;B&gt;radio buttons&lt;/B&gt; allow you to choose what goes into the middle list.4. The &lt;B&gt;right-hand text field&lt;/B&gt; shows the selected method''s code.Click on the class names and method names to become familiar with the Read-Only Class Browser.The next few steps explain objects and classes.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'This is the &lt;B&gt;How&lt;/B&gt; tab of the instructions notebook.  The instructions notebook will provide you with three things.  1. &lt;B&gt;What&lt;/B&gt; is the objective.2. &lt;B&gt;How&lt;/B&gt; do we accomplish it.3. &lt;B&gt;Why&lt;/B&gt; is this important.The &lt;B&gt;Workspace&lt;/B&gt; to the right will provide the examples and exercises to try.  &lt;B&gt;MyTranscript&lt;/B&gt; is a place for output. And &lt;B&gt;Class Browser&lt;/B&gt; at the bottom of the window gives you a targeted view of the vast Smalltalk class hierarchy.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the basic concepts of Smalltalk objects and classes in Smalltalk.&lt;B&gt;Note:&lt;/B&gt; to read text more easily, &lt;B&gt;Maximize&lt;/B&gt; this window.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'The Stage Four Browser allows you to see classes and method code, and learn more about the class library.'  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_07</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F01_Collections_07</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'The simplest way to create an Association is to send the #-&gt; message to any object&lt;B&gt;Inspect&lt;/B&gt; each of these objects:&lt;B&gt;''IL'' -&gt; ''Illinois''.&lt;/B&gt;&lt;B&gt;''OH'' -&gt; ''Ohio''.&lt;/B&gt;&lt;B&gt;''HH'' -&gt; ''Hansestadt Hamburg''.&lt;/B&gt;Or build an &lt;B&gt;Association&lt;/B&gt; in code as in the following example. Select the code and then &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| pair |pair := Association key: ''JP'' value: ''Japan''.MyTranscript 	show: ''The key is: '', pair key; cr;	show: ''The value is: '', pair value; cr.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Association&lt;/B&gt;, which may be used to create key-value pairs.An &lt;B&gt;Association&lt;/B&gt; is a pair of objects. One is named &lt;B&gt;key&lt;/B&gt; and the other is named &lt;B&gt;value&lt;/B&gt;. An Association is not a typical collection, and is not a subclass of the class Collection. However, they are handy for keeping two items together, and are used as the internal data structure for a &lt;B&gt;Dictionary&lt;/B&gt;, which is the topic of the next step.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_07</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Association '</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections #F01_Collections_07)</body></methods><methods><class-id>F01_Collections_08</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F01_Collections_08</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Review the following example, select, and &lt;B&gt;Do it&lt;/B&gt; to see a Dictionary in action.&lt;B&gt;| table |table := (Dictionary new).table	at: ''JP'' put: ''Japan'';	at: ''FR'' put: ''France'';	at: ''DE'' put: ''Germany'';	at: ''HK'' put: ''Hong Kong''.MyTranscript	show: (table at: ''FR''); cr;	show: (table keys) printString; cr;	show: (table values) printString; cr.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;Dictionaries&lt;/B&gt;, which may be used to quickly look up pairs of objects.A &lt;B&gt;Dictionary&lt;/B&gt; is a set of associations, used to hold and look up key-value pairs.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_08</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Dictionary'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections #F01_Collections_08)</body></methods><methods><class-id>E01_TheLibrary_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'What''s in the Library?'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E01_TheLibrary #E01_TheLibrary_01)</body></methods><methods><class-id>E01_TheLibrary_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Reading is Fundamental&lt;/B&gt;By the standards of any programming language, the Smalltalk library is extraordinarily comprehensive. Often, you may be surprised how much functionality is already there.This means that you can write less code yourself, provided that you can find the functionally you want in the library. One of the fundamental skills in Smalltalk development is the &lt;B&gt;habit of reading the code library&lt;/B&gt;. We should acknowledge up front that this is a difficult thing to teach.  The lessons and steps in this topic will get you started on reading the library. As with any other skill, this gets easier with practice.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'An introduction to the Smalltalk class library.As you have seen, Smalltalk syntax is very simple. Most of the power of Smalltalk is in the &lt;B&gt;class library&lt;/B&gt;. Smalltalk takes a distinctive approach: all of the source code in the class library is made available to you. This allows you to extend the features of the library itself.  It is not necessary (or even possible) to learn the entire library at once. In this lesson you''ll learn some of the fundamental classes. These classes provide building blocks that may be used in much of your development work.'  asText boldHtmlTags.</body></methods><methods><class-id>E03_Numbers_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Overview of the Number Hierarchy&lt;/B&gt;Object    Magnitude        ArithmeticValue 	      Point            Number                Fraction                Integer                      LargeInteger	                      SmallInteger                LimitedPrecisionReal                      Float                      Double '  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Let''s look first at the number types and the ranges they hold.&lt;B&gt;Integer&lt;/B&gt; -- is an abstract class.  Integer numbers are stored as either SmallIntegers or LargeIntegers.&lt;B&gt;SmallInteger&lt;/B&gt; -- Optimized for computing speed. The range is limited to between - 536870912 and 536870911 or (-2**29 and 2**29 -1) .&lt;B&gt;LargeInteger&lt;/B&gt; -- are limited only by the size of the computer''s memory. Can represent googles, googleplexes, and beyond.&lt;B&gt;Float&lt;/B&gt; -- between -10**38 and 10**38.&lt;B&gt;Double&lt;/B&gt; -- between -10**307 and 10**307&lt;B&gt;Fraction&lt;/B&gt; -- integer parts, no limits.&lt;B&gt;Point&lt;/B&gt; -- integer parts,  no limits.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the behavior and basic concepts of Smalltalk numbers.This step gives an overview of the Number hierarchy.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'&lt;B&gt;Why?&lt;/B&gt; Everybody knows why you need numbers. Jeepers, I don''t need to explain that!'  asText boldHtmlTags.</body></methods><methods><class-id>E03_Numbers_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Numbers Overview'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E03_Numbers #E03_Numbers_01)</body></methods><methods><class-id>E04_Blocks_04</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E04_Blocks_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Select each whole example and choose &lt;B&gt;Do it&lt;/B&gt;. "Example (1)"&lt;B&gt;| printBlock |printBlock := [ :argument | 	 MyTranscript show: argument; cr. ].printBlock 	value: ''Blocks are Reusable.'';	value: ''Blocks are Fun !'';	value: ''I wish every language...'';	value: ''... also had some''.&lt;/B&gt;"Example (2)"&lt;B&gt;| adderBlock |adderBlock := [ :first :second |			 ( first + second) printString ].MyTranscript 	show: (adderBlock value: 1 value: 9);	cr .&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Take a look at the class browser below.  See the class &lt;B&gt;BlockClosure&lt;/B&gt;?   As we mentioned before, all blocks are objects which are instances of BlockClosure.  So, we can look at the methods of BlockClosure to learn what it can do for us.In the last step we already learned about &lt;B&gt;#value&lt;/B&gt;, but as you see in the browser there are two other similar methods.  &lt;B&gt;#value:&lt;/B&gt; ends in a &lt;B&gt;colon&lt;/B&gt;.  This tells us that it accepts an object as an argument.   &lt;B&gt;#value:value:&lt;/B&gt; accepts two objects as arguments.  The arguments to  &lt;B&gt;#value:&lt;/B&gt; and  &lt;B&gt;#value:value:&lt;/B&gt; are passed to the block as it is evaluated.  The block captures these objects in variables indicated at the beginning of the block and prefixed with a colon.  The argument section of the block ends with a vertical bar.  &lt;B&gt;See the workspace Examples&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to pass arguments to a block when evaluating it.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>E04_Blocks_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Block Arguments '</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E04_Blocks #E04_Blocks_04)</body></methods><methods><class-id>B01_Basics_005</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Basic Step 5'</body></methods><methods><class-id>B01_Basics_005</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText	^'Part 4: Developing a Smalltalk application1. What is a Smalltalk application?A Smalltalk application consists of a collection of classes stored in an image file, and an executable containing the virtual machine. The image contains a snapshot of the environment as you last saved it, with all its objects and executable code, and its contents is identical for all platforms. To run it, you only need to add the virtual machine executable, which varies from one machine to another. Typically, an application has a user interface with one or more windows, and its operation is triggered by user actions. When you start the application up, it will typically open one or more widnows and the operation is activated by user interaction with widgets, which send messages to other objects. There is no ''main program'' or ''main object''.Most of the classes in the application usually come from the library (numbers, windows, etc.), some may have been extended by the programmer, and some are typically developed specifically for the application - for example Book, Patron, Clerk, and Catalog classes for a book library application.Classes in an application are typically divided into two groups - the domain classes that represent objects from the problem domain (such as Book, Patron, Clerk, and Catalog above), and user interface classes (windows with widgets). In most situations, an application is started by sending the open message to its main window. As an example, the Browser is an application and you can open it by executing (with Do it) FullSystemBrowser open or, for a different configuration FullSystemBrowser openOnAllNamespacesSometimes, the opening message requires an argument or uses a different message selector, as inInspector openOn: Time nowCreating a new application thus requires creating new methods and classes. These topics are addressed below.2. Developing an applicationTo develop an application means planning (designing) and coding extensions of existing classes and new ones. The subject of design is beyond the scope of this introduction but many Smalltalk programmers like to use the very direct methodology known as Extreme Programming or XP and described in Kent Beck''s book referenced below. In essence, XP consists of the following principles:- in close cooperation with the customer, develop a very short description of the general nature of the desired product and use stories - description of elementary tasks performed by the anticipated user- rank use stories by importance, possibly dividing them into tasks so that a task or a story can be implemented and tested in one day at most- implement the stories/tasks:-- program in pairs, with two programmers sharing one screen, one keyboard, one mouse, one computer-- before implementing a story/task write Smalltalk code to implement all tests that you can think of that will prove to you that the implementation of the story/task works; Smalltalk programmers generally use Kent Beck''s Testing Framework (see references) to do this-- combine all test cases into a test suite-- implement code required by the test cases and run the test suite repeatedly until the code passes all tests-- integrate the new code and the new test cases with previously tested code, add new tests to the existing test suite and run. Correct any problems and don''t finalize integration until the whole test suite fully works. As a consequence, all integrated code is known to be fully functional at any time.In coding, XP developers mercilessly apply the following principles:- Do the simplest thing that will work - in other words, don''t anticipate future needs, code strictly to satisfy the given tests.- Refactor. Refactoring means modifying the code to improve its structure and readability, without changing its function. This often means inserting an abstract class into the class hierarchy, moving a method from a concrete class to an abstract class, or extracting a part of a method and creating a new method from it. To do this, XP programmers use the Refactoring Browser, which is among the parcels that can be loaded into the image.Smalltalk developers prefer to first develop and test domain objects, and then implement the user interface. Developing the user interface is relatively easy with the UIPainter tool of VisualWorks that allows you to ''paint'' windows with widgets on the screen and link them with your domain objects. On-line help explains the details.Assuming now that we know what we want to program, the following sections explain how to enter the code into the library.3. Defining a new methodTo define a new method in a given class, select  the instance or the class view in the Browser as appropriate, select a protocol (or create a new one using Add in the &lt;operate&gt; menu of the protocol view), and write the method in the text view at the bottom of the browser according to the displayed template. As an example, add the following into protocol mathematical functions in class ArithmeticValuecubed"Calculate the cube of a number"	^self * self * selfThen click Accept in the &lt;operate&gt; menu and if you have not made any mistakes, the new mehod will be added to the library. (To save it in the image file, use File -&gt; Save in the launcher, either now or later, or save on exit. If you exit VisualWorks without saving, all work done since the last save is lost because the image file doesn''t change.) Test that the method work by trying3 cubedand(3/5) cubedNotes:- if you make a mistake, Smalltalk will indicate its cause and suggest corrections in simple spelling mistakes- self in the method refers to the receiver. As an example, in 3 cubed, self would be 3- the return operator ^ in the code means ''exit from this method and return the result of the following expression''. You don''t have to use the return operator but if you don''t, the method will return the receiver. To see the difference, remove the ^ from the definition of cubed and run the tests again.- Note that cubed is available to all numbers because we defined it in the abstract supeclass ArithmeticValue. This is what abstract  classes ar for.- If the code does not work quite as expected or if you want to make cosmetic changes, open the method, edit it, and Accept again.4. DebuggingYour method may not work the first time. If the error is in your logic, your code may execute, but incorrectly. If your error is in sending an illegal message to an object, Smalltalk will open an Exception window that can be used to open the debugger to see what is wrong and make corrections. Try3 asUppercaseand you will get the exception window saying, in essence, SmallInteger doesNotUnderstand #asUppercase. In the Exception window, you can now open the debugger, where you will see a stack of messages currently active, with the offending message near the top. If you select it, you will see its definition with the message to be sent next highlighted. You can now correct the code as in the Browser (Accept), edit the data (two inspectors at the bottom of the Debuger), or terminate the execution - all without leaving Smalltalk.You can also open the Debugger programmatically by inserting a ''breakpoint'' to interrupt execution at some point and continue executing step by step. Try| price tax total |price := (Dialog request: ''Please enter price'' initialAnswer: ''100'')asNumber.tax := (Dialog request: ''Please enter price %''  initialAnswer: ''10'')asNumber.self halt.total := price + (price * tax / 100).Transcript clear;	show: ''price: '', price printString; cr;	show: ''tax: '', tax printString; cr;	show: ''total: '', total printStringAt the indicated point, Smalltalk will open an Exception window saying ''Halt encountered''. Open the debugger, select ''unbound method'' (referring to the code from this workspace), and continue executing it using either Step or Send.The inspectors at  the bottom show the instance variables of the receiver (left) and temporary variables and message arguments (right). You can also change their values by selecting the variable, entering a new value, and accepting it (Accept). You can then continue executing the code in the Debugger. You can also exit from the Debugger and proceed (command Proceed in the &lt;operate&gt; menu in the stack view at the top of the Debugger).5. Defining a classAs you already know, classes are gathered into categories. At a different level, classes are collected in namespaces. A namespace is simply a way to get around the problem that earlier versions of VisualWorks required that classes have unique names. This meant code from different sources could only be combined if their developers didn''t use the same name for any of the classes in their respective products. A namespace makes it possible to ignore class names in other namespaces. Within one namespace, class names must be unique, but two different namespaces may contain classes with identical names without any conflict.To create a class, you must thus decide on the namespace - either use an existing one or create a new namespace. See on-line help for details.The next step is to decide on a category for your class. Select an existing one if appropriate, or create a new one if necessary, using the &lt;operate&gt; menu in the category view of the Browser. The next decision is to select the superclass of your new class. A superclass is generalization, and a subclass is specialization. So your superclass should be a class that performs a more general purpose than your new class. As an example, Vehicle and Car are a reasonable superclass - subclass pair. Similarly Account and SavingsAccount. If you can''t think of a suitable existing superclass, make your class a subclass of Object.Next, fill in the Browser template for a new class. It appears in the Browser when you select a category and it looks like this:Smalltalk.Root defineClass: #NameOfClass	superclass: #{NameOfSuperclass}	indexedType: #none	private: false	instanceVariableNames: ''instVarName1 instVarName2''	classInstanceVariableNames: ''''	imports: ''''	category: ''Interface-Dialogs''Edit the text by using your clas name on the first line, superclass name on the second line, and adding instance variables on the fifth line. (The rest are more advanced parameters that you initially don''t need.) Then execute Accept from the &lt;operate&gt; menu.Add a comment to the class (command View -&gt; Comment from the menu bar displays a comment template).And then add instance and class protocols and define methods as necessary.Example: Create class Name with superclass Object. The class should have instance variables firstName and lastName and accessor instance methods  firstName and lastName (''getters'') and  firstName: and lastName: (''setters'') defined as infirstName	^firstNameandfirstName: aString	firstName := aStringTest your class by executing| name |name := Name new.name firstName: ''John'';	   lastName: ''Smith''.Transcript clear;	show: name firstName; cr;	show: name lastNamein the Workspace. All classes understand message new and most classes use it to create a new uninitialized instance.It is interesting to note that a variable that has not been assigned a value initially has the value nil (an instance of UndefinedValue).Exercise: Modify the above code fragment to print the initial unassigned value of name in the Transcript.6. Deploying an applicationAs you know, a VisualWorks application consists of an image file and the virtual machine executable. Delivering an application thus means delivering two files - an image file and the virtual machine executable. However, the image file contains a lot of code that the application probably does not need (the Browser, the Inspector, the compiler, and many other classes necessary for development). To decrease the size of the image file, it is thus desirable to strip-off as many unnecessary classes as possible. You can do much of this manually, for example by unloading unnecessary parcels, and the rest by using a ''stripper'' or ''packager'' programmer. The most popular packager by Advanced Boolean Concepts, Ltd. is included as a parcel with instructions.'</body><body package="SLesson Intro Content">what	^'This is lesson 01 step 05 objective'</body></methods><methods><class-id>B01_Basics_07</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Examples of Evaluation'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_07)</body></methods><methods><class-id>B01_Basics_07</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Remember that all rules are applied from &lt;B&gt;left to right&lt;/B&gt;. This applies to everything. There are no other preferences in the evaluation of a message -- not even algebra!Evaluate the examples with &lt;B&gt;Print it&lt;/B&gt;:  5 + 3 * 4 		" is the same as ... "( 5 + 3 ) * 4		" may not be what you expect. "Execute, and try to understand each of the following examples.Try to execute the sub-parts of the statements too. Use &lt;B&gt;Print it&lt;/B&gt;:"&lt;B&gt;Unary before Binary&lt;/B&gt;"15 + 3 negated"&lt;B&gt;Binary before Keyword&lt;/B&gt; (#quo: is explained in the pane on the left.)"15 quo: 5 + 3"&lt;B&gt;Parenthesis before Binary&lt;/B&gt;"(15 quo: 5) + 3 "&lt;B&gt;Now you tell me in what order the rules apply&lt;/B&gt;" 15 quo: 5 + 3 negated(15 quo: 5) + 3 negated(15 quo: 5 + 3) negated'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how the rules of evaluation affect code.From Left to Right.(1) &lt;B&gt;Parenthesis&lt;/B&gt; (jobs size)(2) &lt;B&gt;Unary&lt;/B&gt;		''asdf'' size.(3) &lt;B&gt;Binary&lt;/B&gt;		2 +9.(4) &lt;B&gt;Keyword	&lt;/B&gt; ''asdf'' add: $r.(5) &lt;B&gt;Assignment&lt;/B&gt;  a := 5.(6) &lt;B&gt;Return&lt;/B&gt;		^ true.&lt;B&gt;Note:&lt;/B&gt; The examples on the right use the #quo: method. &lt;B&gt;#quo:&lt;/B&gt; (i.e., quotient) divides the receiver by the argument and -- ignoring the remainder -- it returns the result. That is, &lt;B&gt;15 / 6 = 2 r 3 &lt;/B&gt; so &lt;B&gt;15 quo: 6&lt;/B&gt; returns 2 '  asText boldHtmlTags.</body></methods><methods><class-id>B01_Basics_08</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Cascaded Messages'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_08)</body></methods><methods><class-id>B01_Basics_08</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'A sequence of messages to the same receiver can be cascaded."Normally, Smalltalk statements end with a period, e.g.:"&lt;B&gt;Transcript clear.&lt;/B&gt;&lt;B&gt;Transcript show: ''Hello world''&lt;/B&gt;Select these two consecutive lines of code (including the comment) and execute them with &lt;B&gt;Do it&lt;/B&gt;. To see the result, look at the Launcher window in the upper right corner of the screen. The text area of the Launcher is called the &lt;B&gt;Transcript&lt;/B&gt;. This is accessed by the global name Transcript.Now let''s look at an example of a cascaded message:&lt;B&gt;Transcript&lt;/B&gt;					"receiver is Transcript"	&lt;B&gt;clear ;&lt;/B&gt;					"send the #clear message, and"	&lt;B&gt;show: ''Hello world''.&lt;/B&gt;	"send the #show: message"This is one statement with two cascaded message-sends. Each message is sent to the same object (Transcript), and the state of that object may change after each message. In this example, the original Transcript may contain text, but after the clear message, it is empty.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn to send multiple messages to a single object. This is called &lt;B&gt;cascading&lt;/B&gt;Elements of Smalltalk syntax:(1) Statements generally end with a &lt;B&gt;period&lt;/B&gt;.(2) Messages can be cascaded in a single statement using a &lt;B&gt;semi-colon&lt;/B&gt;.'  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_02</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F02_Iterators_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Example (1) Evaluate this with &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;#(1 2 3 4) 	do:	[:item | 		MyTranscript show: item printString; cr].&lt;/B&gt;In this example:	#(1 2 3 4)  	"is an Array object."	do:  		"the iteration message."		[:item |   	"the argument of the block."		MyTranscript  	"the rest of the block."			show: item printString; cr]. Each item in the collection is passed to the block as it (the block) is evaluated. In this example, each item is printed to MyTranscript, though more complex processing could be done in the block.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'What can you do with &lt;B&gt;do:&lt;/B&gt;?(1) Send #do: to a collection.(2) Pass in a one-argument block.(3) The block is evaluated for each item.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'do: []'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F02_Iterators #F02_Iterators_02)</body></methods><methods><class-id>F03_Streams_03</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F03_Streams_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Select the following code and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| read write input |input := ''Smalltalk, using VisualWorks by Hopkins &amp; Horan''.read := ReadStream on: input.write := WriteStream on: String new.[read atEnd] whileFalse: [ | aChar | 	aChar := read next.	aChar isVowel 		ifFalse: [write nextPut: aChar]].MyTranscript show: write contents; cr.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;WriteStream&lt;/B&gt;, which can be used to write objects sequentially.The example in the workspace is similar to the example in the previous step, but it uses a &lt;B&gt;WriteStream&lt;/B&gt; instead of string concatenation to create the output string.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F03_Streams_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'WriteStream'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F03_Streams #F03_Streams_03)</body></methods><methods><class-id>B05_MoreConcepts_05</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>B05_MoreConcepts_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'If we want to refer to a class method instead of an instance method we can write:&lt;B&gt; Classname class&gt;&gt;methodName &lt;/B&gt; &lt;B&gt; Date class&gt;&gt;today &lt;/B&gt; &lt;B&gt; Time class&gt;&gt;now &lt;/B&gt; And to refer to keyword method names, we put all the keywords together like this:&lt;B&gt; Date class&gt;&gt;newDay:monthNumber:year: &lt;/B&gt; You will also notice the keywords jammed together like this in the class browser.To observe this yourself, find the method above in the browser now.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about the &lt;B&gt;notation&lt;/B&gt; used to refer to Smalltalk methods.All objects and classes in Smalltalk are represented directly in the image. Since there is no need to store code as text in a files, there is no need to refer to file names.That leads to a question: since the same method name may exist in a number of different classes, how do we refer to specific classes and methods? Smalltalkers use a common notation:&lt;B&gt; Classname&gt;&gt;methodName &lt;/B&gt; &lt;B&gt; Date&gt;&gt;day &lt;/B&gt; &lt;B&gt; Date&gt;&gt;year &lt;/B&gt; Remember: this has nothing to do with executable code. This is just a way to write the names of methods.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>B05_MoreConcepts_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Notation'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B05_MoreConcepts #B05_MoreConcepts_05)</body></methods><methods><class-id>A02_LessonRunner_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Using the Lesson Runner '.</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A02_LessonRunner #A02_LessonRunner_05)</body></methods><methods><class-id>A02_LessonRunner_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'The lessons in this introduction to VisualWorks use three types of windows:  (1) &lt;B&gt;Lesson Browser&lt;/B&gt; windows provide the content for the steps in a single lesson.  (2) The &lt;B&gt;Lesson Runner&lt;/B&gt; window shows all the &lt;B&gt;topics&lt;/B&gt; and &lt;B&gt;lessons&lt;/B&gt; for you to explore. This is the window you start from.(3) Standard &lt;B&gt;VisualWorks&lt;/B&gt; windows that are used for some exercises.In a &lt;B&gt;Lesson Runner&lt;/B&gt; window, you can launch an individual lesson by selecting it in the upper-right-hand list and then pressing the &lt;B&gt;Begin Lesson...&lt;/B&gt; button. You may also begin the lesson by double-clicking on the list item.In a &lt;B&gt;Lesson Browser&lt;/B&gt; window, you can return to the Lesson Runner by pressing the &lt;B&gt;Back To Topics&lt;/B&gt; button in the top-right corner.Next, click the &lt;B&gt;Return To Topics&lt;/B&gt; button and select the topic &lt;B&gt;Fundamentals&lt;/B&gt; and the lesson &lt;B&gt;Basics&lt;/B&gt;.  In this lesson, we''ll cover all the basics of the Smalltalk language -- hold onto your hat!'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the three types of windows used for lessons.(1) Lesson Browser(2) Lesson Runner(3) Normal VisualWorks'  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_07</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code 		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E05_ControlStructs_07</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Select each example and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| dorothy |dorothy := MyTranscript.3 timesRepeat: 	[dorothy show: ''No place like home'';cr].&lt;/B&gt;&lt;B&gt;4 to: 7 do: [ :num | 	MyTranscript 		show: num printString; tab; 		show: num squared printString; cr].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'In the last few steps, you saw that branching and looping is handled by the classes Boolean and BlockClosure. But wait -- there''s more!!The class Integer lets you evaluate a block a given number of times.And another class named &lt;B&gt;Interval&lt;/B&gt; lets you loop over a range.  The Interval is generated by sending &lt;B&gt;#to:do:&lt;/B&gt; to a Number.  The block is then evaluated once for each item in the Interval.&lt;B&gt;Interval&lt;/B&gt; is a collection of Numbers.  And &lt;B&gt;Collections&lt;/B&gt; are the next topic in the yellow LessonRunner window.  &lt;B&gt;Happy Looping and Branching !&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'What are Smalltalk power loops?Well, actually they are just loops that are useful (and powerful) but unique to Smalltalk.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_07</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Power Loops'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs #E05_ControlStructs_07)</body></methods><methods><class-id>B05_MoreConcepts_03</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>B05_MoreConcepts_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Instance variables&lt;/B&gt; hold data for the objects (or instances) of a class.(1) Select the &lt;B&gt;Date&lt;/B&gt; class in the browser below. Select &lt;B&gt;Definition Of Class&lt;/B&gt;. In the text window you see that Date has &lt;B&gt;instanceVariableNames:&lt;/B&gt; ''day year'' .Date also includes &lt;B&gt;shared variables&lt;/B&gt;, which are not visible in this browser. For purposes of this tutorial, these variables can be regarded as belonging to the class itself. For Date, these include DaysInMonth, FirstDayOfMonth, MonthNames, SecondsInDay, and WeekDayNames.(2) Select &lt;B&gt;Instance Methods&lt;/B&gt;. You can see that an instance of Date provides behavior from methods &lt;B&gt;#day&lt;/B&gt; and &lt;B&gt;year&lt;/B&gt; that return the instance variables.&lt;B&gt;Shared variables&lt;/B&gt; hold data for the whole class. They are always capitalized.(3) Select &lt;B&gt;Class Methods&lt;/B&gt;. You''ll see that  &lt;B&gt;#nameOfMonth:&lt;/B&gt; uses the MonthNames class variable to look up a month name.&lt;B&gt;Method variables&lt;/B&gt; (or "temporaries") are declared in a method or code fragment and hold data just for the life of the method.(4) Select &lt;B&gt;Instance Methods&lt;/B&gt;.  Look at the method &lt;B&gt;#monthIndex&lt;/B&gt;.  This method declares two method variables: &lt;B&gt;leap&lt;/B&gt; and &lt;B&gt;firstDay&lt;/B&gt;.  These are declared at the top of the method and surrounded by verticle bars or ''fence posts''.&lt;B&gt;Block variables&lt;/B&gt; are declared inside a block and hold data just for the life of the block.Block variables are declared at the top of the block and surrounded by verticle bars or ''fence posts''.  Block variables are rarely needed, though they may be used for efficiency reasons.&lt;B&gt;#( 1 2 3 4 5 ) do: [ :each |   | squared  cubed |	squared := each squared.	cubed := each ** 3. 	MyTranscript 		show: squared printString;		show: '' '';		show: cubed printString; cr ].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;variable scoping&lt;/B&gt;, and which scopes are most common in Smalltalk.Concepts to understand:&lt;B&gt;Instance variablesShared variablesMethod variablesBlock variables&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>B05_MoreConcepts_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Variable scoping '</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B05_MoreConcepts #B05_MoreConcepts_03)</body></methods><methods><class-id>B01_Basics_10</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Blocks and Branching'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_10)</body></methods><methods><class-id>B01_Basics_10</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Blocks&lt;/B&gt; are &lt;B&gt;deferred message sequences&lt;/B&gt;. That is, code statements surrounded by square brackets to be executed later. Here are a few examples.&lt;B&gt;[ 1 + 1 ].[ Dialog warn: ''Hello World'' ].&lt;/B&gt;Like everything else, a block is also an object. So, when we want to execute the code in a block, we send it the message #value. To see how this works, select the following code and choose &lt;B&gt;Do it&lt;/B&gt;&lt;B&gt;[ Dialog warn: ''Hello World'' ] value.&lt;/B&gt;Since blocks are objects, we can assign them to variables. We can then send #value to the variable. Try the following paragraph using &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| aBlock |aBlock := [ Dialog warn: ''Hello World'' ].aBlock value.&lt;/B&gt;Blocks are used in many different ways. Often you will use them in branching statements with the message &lt;B&gt;#ifTrue:&lt;/B&gt;. Try the following example, using &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt; 5 &gt; 3  	ifTrue: [ Dialog warn: ''Yippee! 5 is still greater than 3'' ].&lt;/B&gt;We can check the alternate condition by sending the message &lt;B&gt;#ifTrue:ifFalse:&lt;/B&gt;.  But now we need to provide two blocks as arguments for the message. Try the following, again with &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt; 5 &gt; 3  	ifTrue: [ Dialog warn: ''Yippee! 5 is still greater than 3'' ]	ifFalse: [ Dialog warn: ''Something is very wrong''].&lt;/B&gt;You can learn more about Blocks and flow control in the topic &lt;B&gt;Class Library&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the basics of code blocks and simple branching.Elements of syntax:A &lt;B&gt;Block&lt;/B&gt; is a piece of Smalltalk code surrounded by square brackets, e.g., &lt;B&gt;[&lt;/B&gt; anOnbject doSomething &lt;B&gt;]&lt;/B&gt;.'  asText boldHtmlTags.</body></methods><methods><class-id>B01_Basics_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Everything is an Object'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_03)</body></methods><methods><class-id>B01_Basics_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'You have perhaps heard the statement that:&lt;B&gt;1. Everything in Smalltalk is an object.&lt;/B&gt;or:&lt;B&gt;2. Objects are only affected by messages sent to them.&lt;/B&gt;These ideas may take a while to sink in. Take your time with them, but keep these ideas in mind.In Smalltalk, numbers, strings, applications, windows, and everything else are objects. Even the Smalltalk compiler is an object. Objects only do work in response to messages. That''s why we say that Smalltalk is a "pure" object-oriented language.All Smalltalk expressions follow the form: &lt;B&gt;anObject aMessage.&lt;/B&gt;The whole trick to reading Smalltalk is in seeing this simple pattern in a few different forms. The receiver object always comes first, followed by a message. Comments are in "double-quotes". Here are some examples for you to try. Select the code one line at a time and choose &lt;B&gt;Print it&lt;/B&gt;."Code in Bold"		"Comments in double-quotes"&lt;B&gt;3 squared.&lt;/B&gt;			"Receiver object is small integer 3."					"The message sent is   #squared"&lt;B&gt;''abc'' asUppercase.&lt;/B&gt;	"Receiver object is string ''abc''."					"The message sent is   #asUppercase"&lt;B&gt;200 factorial.&lt;/B&gt;		"Receiver object is small integer 200."					"The message sent is   #factorial"Later in this lesson we''ll look at the three types of messages that can be sent to an object. But before that, we will learn about literals in Smalltalk.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'A first look at the concepts and syntax of Smalltalk.Terms to know:A &lt;B&gt;message&lt;/B&gt; is a request to an object to do something.A &lt;B&gt;method&lt;/B&gt; is a piece of source code belonging to a class.Basic concepts:An object executes a method when it receives a message. A method shares the name of a message. For example: the #reverse message sent to a String causes the #reverse method to execute.(Parts of these lessons provided by &lt;B&gt;Ivan Tomek, ivan.tomek@acadiau.ca&lt;/B&gt;)'  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;An Overview of Smalltalk Collection Classes&lt;/B&gt;&lt;B&gt;Array&lt;/B&gt; -- fixed size, very efficient, automatically checks that index is within bounds. Cannot grow.&lt;B&gt;OrderedCollection&lt;/B&gt; -- similar to Array but can grow.&lt;B&gt;SortedCollection&lt;/B&gt; -- like OrderedCollection but automatically sorts its elements.&lt;B&gt;Set&lt;/B&gt; -- unordered collection, no index, automatically eliminates duplicates.&lt;B&gt;Bag&lt;/B&gt; -- unordered collection, no index, maintains duplicates.&lt;B&gt;Association&lt;/B&gt; -- a key-value pair. Used by class Dictionary to wrap values. This is not strictly a Collection, it is actually a descendant of Magnitude.&lt;B&gt;Dictionary&lt;/B&gt; -- a set of Associations, where an Association is a key-value pair, as an entry in a dictionary.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to work with collections of objects.This lesson explores objects called &lt;B&gt;Collections&lt;/B&gt;. There are many different kinds of Collections. Programming languages generally provide arrays for organizing data. Smalltalk also includes an Array class, but it also provides a number of more powerful ways to handle groups of objects.Smalltalk Collections free you from the burden of managing data structures and let you concentrate on your application.The steps that follow highlight the most common Collections. All collection classes share an abstract superclass named &lt;B&gt;Collection&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Overview of Collections'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections #F01_Collections_01)</body></methods><methods><class-id>B04_Classes_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'What is a Class?'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B04_Classes #B04_Classes_03)</body></methods><methods><class-id>B04_Classes_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Creation Examples # 1&lt;/B&gt;Select the following code, one line at a time, and choose &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;Time now.Date today.Point x: 40 y: 50.&lt;/B&gt;&lt;B&gt;Information Example&lt;/B&gt;Select the following code and choose &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;Date daysInYear: 2000&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'1. Select the class name &lt;B&gt;Time&lt;/B&gt; in the class browser below.2. Select the radio button &lt;B&gt;Definition Of Class&lt;/B&gt;. You''ll see that &lt;B&gt;Time&lt;/B&gt; has &lt;B&gt;instanceVariableNames&lt;/B&gt; named: hours, minutes, seconds.  These hold the internal data, or state, for Time objects.3. Select the radio button &lt;B&gt;Instance Methods&lt;/B&gt;. You''ll see the methods including #hours #minutes #seconds. These are the messages you can send to a &lt;B&gt;Time object&lt;/B&gt;. The Time object understands instance messages. More precisely, an &lt;B&gt;instance&lt;/B&gt; of Time understands instance methods. Here, &lt;B&gt;instance&lt;/B&gt; is another name for an &lt;B&gt;object&lt;/B&gt;. As you look at the code, you''ll see that the methods merely return the value of the instance variables. 4. Select the radio button &lt;B&gt;Class Methods&lt;/B&gt;. You should see the method #now.  To invoke a class method send a message to the &lt;B&gt;class&lt;/B&gt; itself. When you send #now to the Time class, you will receive a particular instance of a Time object.Class names begin with upper case letters. In Smalltalk we send messages to classes to ask them to create new objects for us. To try this out, use the &lt;B&gt;Creation&lt;/B&gt; and &lt;B&gt;Information&lt;/B&gt; examples in the workspace.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;classes&lt;/B&gt;, which are the basic organizing unit for methods and variables.Concepts to understand:&lt;B&gt;Methods and variables&lt;/B&gt; provide the &lt;B&gt;state and behavior&lt;/B&gt; for objects. We use a &lt;B&gt;class&lt;/B&gt; to define the variables and group the methods.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Everything in Smalltalk is an object. Objects are of various classes. Understanding classes is central to understanding Smalltalk.'  asText boldHtmlTags.</body></methods><methods><class-id>B03_Output_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Dialog output'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output #B03_Output_05)</body></methods><methods><class-id>B03_Output_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Sometimes you may want to notify the user that something has happened. One way to do this is by using a &lt;B&gt;Dialog&lt;/B&gt;. To try a Dialog, select the following code and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;Dialog warn: ''Finished Saving the Super Important Data''.&lt;/B&gt;Since this string is very long, we may want to insert a carriage return into it. To do this, we''ll place a back-slash character &lt;B&gt;\&lt;/B&gt; in the string and send it the message &lt;B&gt;#withCRs&lt;/B&gt;. Let''s see how that works -- select the following code and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;Dialog warn: ''Finished Saving the\Super Important Data'' withCRs.&lt;/B&gt;The message &lt;B&gt;#withCRs&lt;/B&gt; tells the String object to replace all backslash characters with (you guessed it) carriage return characters.Now try this yourself. Add the backslash and #withCRs message to the code below and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;Dialog warn: ''Finished Saving the Super Important Data''.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to show output with a &lt;B&gt;Dialog&lt;/B&gt;.Messages to know:&lt;B&gt;#warn:&lt;/B&gt;	- sent to &lt;B&gt;Dialog&lt;/B&gt;, notifies the user with a message.&lt;B&gt;#withCRs&lt;/B&gt; - sent to a String, changes all &lt;B&gt;\&lt;/B&gt; into carriage returns.'  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_04</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F01_Collections_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'This step presents a simple, commented example showing the use of an OrderedCollection. Read the whole paragraoh first, then select and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| oc date |&lt;/B&gt;"Just create a new OrderedCollection. No initial size required."&lt;B&gt;oc  := OrderedCollection new.&lt;/B&gt;"adding items"&lt;B&gt;date := Date today.oc add: date.oc add: Time now.oc 	add: ''You Are Not Gonna Need It (YAGNI)'';	add: ''Once And Only Once''.&lt;/B&gt;"referencing an item"&lt;B&gt;MyTranscript 	show: (oc at: 3);cr;	show: (oc last);cr.&lt;/B&gt;"look for a particular item"&lt;B&gt;MyTranscript show: ''Is previous date object in there? '';	show: (oc includes: date) printString; cr;	show: ''What index is it at? '';	show: (oc indexOf: date 				 ifAbsent: [''no date'' ] ) printString; cr.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;OrderedCollection&lt;/B&gt;.Properties of class OrderedCollection:-- Similar to an &lt;B&gt;Array&lt;/B&gt; but instances can grow in size.-- An instance grows automatically when its current capacity is filled.-- The mechanism that allows growing makes it less efficient for accessing than an Array.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'OrderedCollection'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections #F01_Collections_04)</body></methods><methods><class-id>E03_Numbers_03</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code 		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E03_Numbers_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'ArithmeticValue and Number'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E03_Numbers #E03_Numbers_03)</body></methods><methods><class-id>E03_Numbers_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'More examples of Numbers.Select each of the following lines and choose &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;50 = 50.0.5/10 = 0.5.3 cos.3 even.5 negated.5 negative.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'(1) In the browser below, look at the code for both &lt;B&gt;ArithmeticValue&lt;/B&gt; and &lt;B&gt;Number&lt;/B&gt;. Can you tell why they''re &lt;B&gt;abstract classes?&lt;/B&gt;  (Answer is on the &lt;B&gt;Why&lt;/B&gt; tab).(2) As you can probably tell from the names of these classes, &lt;B&gt;ArithmeticValue&lt;/B&gt; provides basic arithmetic and &lt;B&gt;Number&lt;/B&gt; provides basic number behavior. Look at the methods (3) See that &lt;B&gt;Number&lt;/B&gt; has the same methods as ArithmeticValue but also adds some more like #cos and #**.  &lt;B&gt;What does #** do?&lt;/B&gt;  Look at the code.  Read the comments. (4) The comments in #** refer to &lt;B&gt;the receiver&lt;/B&gt;.  What does that mean?'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about two abstract classes: &lt;B&gt;ArithmeticValue&lt;/B&gt; and &lt;B&gt;Number&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'&lt;B&gt;Answer for (1)&lt;/B&gt;Both &lt;B&gt;ArithmeticValue&lt;/B&gt; and &lt;B&gt;Number&lt;/B&gt; are considered abstract classes because they rely on their subclasses to provide behavior. If you look at the &lt;B&gt;#*&lt;/B&gt; method of each of these you will see the message send &lt;B&gt;#subclassResponsibility&lt;/B&gt;. Unless this is overridden in each of the subclasses, you will receive an error during your unit testing.&lt;B&gt;Answer for (3)&lt;/B&gt;Raises the receiver to the power of the argument.&lt;B&gt;Answer for (4)&lt;/B&gt;The &lt;B&gt;receiver&lt;/B&gt; is the object that receives a message. When you see this in a method comment it means an instance of the current class or a subclass of the current class. When you hear this on Sunday afternoon TV, it probably means something else.'  asText boldHtmlTags.</body></methods><methods><class-id>B02_Interaction_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^ 'Saving the image'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B02_Interaction #B02_Interaction_02)</body></methods><methods><class-id>B02_Interaction_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'The &lt;B&gt;Launcher&lt;/B&gt; window allows you to save your image. It is usually located at the top of your screen, when you start VisualWorks.&lt;B&gt;Saving an Image&lt;/B&gt;Under the Launcher''s &lt;B&gt;File Menu&lt;/B&gt;, you can save your image by selecting the &lt;B&gt;Save Image&lt;/B&gt; menu item. This will save the image under the &lt;B&gt;current name&lt;/B&gt;, and allow you to continue working. You will probabaly want to use the &lt;B&gt;Save Image as...&lt;/B&gt; menu item, which prompts for the name of the image file.  The default is the name of your current image file. If you choose another name, your current image will be saved under that (new) name.&lt;B&gt;Saving an Image and Exiting&lt;/B&gt;Under the &lt;B&gt;File Menu&lt;/B&gt;, you can save your image and exit the environment with the &lt;B&gt;Exit VisualWorks...&lt;/B&gt; menu item.  A small dialog asks how you want to exit.  Clicking on &lt;B&gt;Yes&lt;/B&gt; saves the image and exits. &lt;B&gt;No&lt;/B&gt; will abandon any changes you made to the image since you last saved, and then exit the development environment. &lt;B&gt;Cancel&lt;/B&gt; returns you to VisualWorks.To restore a previously saved image, use the operating system to launch VisualWorks with the saved image file.The next step describes the files that are created when you save the image.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to save and load an image.Terms to know:A &lt;B&gt;snapshot&lt;/B&gt; is another term for &lt;B&gt;a saved image&lt;/B&gt;.'  asText boldHtmlTags.</body></methods><methods><class-id>E03_Numbers_07</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E03_Numbers_07</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Point'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E03_Numbers #E03_Numbers_07)</body></methods><methods><class-id>E03_Numbers_07</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Point&lt;/B&gt; literals can be written in any of the following ways.&lt;B&gt;20 @ 300&lt;/B&gt;  "sending #@ to a Number"&lt;B&gt;Point x: 20 y: 300.Point r: 100 theta: 30 .&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Point&lt;/B&gt;.'  asText boldHtmlTags.</body></methods><methods><class-id>B04_Classes_04</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	| |	"&gt; 	code := StepCode new setObject.	code methodCode:  'test08	^ self '.	code className: self lessonTestClassName.	^code.	&lt;"	^ nil</body></methods><methods><class-id>B04_Classes_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^ 'Inheritance'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B04_Classes #B04_Classes_04)</body></methods><methods><class-id>B04_Classes_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'(1) In the class browser, select the class &lt;B&gt;Object&lt;/B&gt; and the instance method #==. Ignore the strange syntax, we will explain primitives later on. The point here is that the class Object implements the identity operator #==. Since every other class is derived from Object, every object can test its identity.  No other class ...	... implements &lt;B&gt;#==&lt;/B&gt;.	... needs to implement &lt;B&gt;#==&lt;/B&gt;.	... should implement &lt;B&gt;#==&lt;/B&gt;.Every object uses this method to check identity.In this way, subclasses get the wealth of features defined by all the classes above them in the class hierarchy.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;inheritance&lt;/B&gt;, which is a feature of all Smalltalk classes.Concepts to understand:&lt;B&gt;Inheritance&lt;/B&gt; is the idea of receiving wealth that someone else has accumulated (an aunt, uncle, or another relative).In Smalltalk, we use this idea to explain the relationship between subclasses and superclasses. That is, subclasses always receive the wealth of features their superclasses have accumulated.Every subclass &lt;B&gt;inherits&lt;/B&gt; the features (or behavior) of its superclass, the superclass of its superclass, and so on, all the way up to class Object. Let''s look at an example.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Inheritance is a useful tool for sharing code among classes that behave in similar ways. Inheritance is a feature of the Smalltalk language that allows you to follow the rule: &lt;B&gt;once and only once&lt;/B&gt; that is so important in efficient design.'  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_04</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F02_Iterators_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'To see the OrderedCollection holding only the odd numbers from the first OrderedCollection, select the following code and &lt;B&gt;Print it&lt;/B&gt;:"find the all odd numbers"&lt;B&gt;| oc | oc := OrderedCollection new.oc add: 40; add: 30; add: -99; add: 493.oc select: [ :eachItem | 	eachItem odd ].&lt;/B&gt;	'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to extract a subset of a collection using the &lt;B&gt;select:&lt;/B&gt; message.The &lt;B&gt;select:&lt;/B&gt; method expects the block to find &lt;B&gt;all&lt;/B&gt; of the objects that fulfill some condition.When the block evaluates to &lt;B&gt;true&lt;/B&gt; that item is &lt;B&gt;included&lt;/B&gt; in the result collection.The object returned by &lt;B&gt;select:&lt;/B&gt; is a collection of the same class as the collection that received the &lt;B&gt;select:&lt;/B&gt; message.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'select: [ ]'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F02_Iterators #F02_Iterators_04)</body></methods><methods><class-id>E04_Blocks_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Defining Blocks'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E04_Blocks #E04_Blocks_02)</body></methods><methods><class-id>E04_Blocks_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Blocks are objects of class &lt;B&gt;BlockClosure&lt;/B&gt;.A Blocks share the scope (or context) of the method it is defined in. If you print the block below it will show you its class (i.e. &lt;B&gt;BlockClosure&lt;/B&gt;) and its context (i.e. &lt;B&gt;unboundMethod&lt;/B&gt;).Unbound Method? This means that we have not embedded this block into a method that is part of a class in the system.Select the code below and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;[ 1 + 1 ] &lt;/B&gt;This is not terribly useful, so in the next step we will get Blocks to do something more interesting.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'A block can contain any valid Smalltalk statements.  Multiple, and cascaded statements are also allowed.&lt;B&gt;[ MyTranscript 		show: ''I am in a block''; cr;  		show: ''I''''m still in a block''; cr.  MyTranscript show: ''LET ME OUT !'';cr].&lt;/B&gt;If a return statement is encountered in a Block, both the block, AND the method in which the block executes are exited.&lt;B&gt;[ ^ 42 ].&lt;/B&gt;The above block will exit its method, returning 42 to the caller.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to define a block.See &lt;B&gt;How&lt;/B&gt; for details.'  asText boldHtmlTags.</body></methods><methods><class-id>E04_Blocks_05</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E04_Blocks_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Block Variables'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E04_Blocks #E04_Blocks_05)</body></methods><methods><class-id>E04_Blocks_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Select the whole example below and choose &lt;B&gt;Do it&lt;/B&gt;.&lt;B&gt;| calcBlock |calcBlock := 	[ :number |     | square cube | 	  square := number squared. 	  cube := square * number.	  MyTranscript 		cr;  show: number printString; 		tab; show: square printString; 		tab; show: cube printString.   ].calcBlock	value: 1;			value: 2;			value: 3.	&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'A variable local to the block can only be sent messages from within the block.  It is declared between its own set of &lt;B&gt;"fence posts"&lt;/B&gt;, otherwise referred to as double vertical bars.  Do not confuse these with the vertical bar that ends the parameter section of the block. That is something completely different.&lt;B&gt;[ :argument :anotherArgument | 		| localVariable1 localVariable2 |		"other block statements"		"for example ... " 		localVariable2 := argument 							message1; 							message2.	].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to use variables local to a block.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Most code you write in Smalltalk will be in very small pieces. In object-oriented development, long methods and large blocks are considered to be poor style.However, there are times when holding on to a locally generated value will be helpful. That''s when you can use local variables in a block.'  asText boldHtmlTags.</body></methods><methods><class-id>E01_TheLibrary_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'You may be surprised to learn that everything is in the class library. The Smalltalk class library includes many common types of classes, and we''ll investigate some of them in the next few lessons. The library includes many classes that we won''t directly investigate, but are available to you as your experience grows.   The library even contains the VisualWorks development environment and everything needed to execute Smalltalk.  So, you will occasionally see classes such as &lt;B&gt;Compiler&lt;/B&gt;, &lt;B&gt;Parser&lt;/B&gt;, and even seemingly low-level objects like &lt;B&gt;Process&lt;/B&gt; and &lt;B&gt;Semaphore&lt;/B&gt;.  We won''t cover these low-level classes, but as you advance in skill you''ll find interesting ways to use the power of these classes too.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Everything is in the Library !'  asText boldAllQuotes.</body></methods><methods><class-id>E01_TheLibrary_02</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E01_TheLibrary_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Everything is in the Class Library '</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E01_TheLibrary #E01_TheLibrary_02)</body></methods><methods><class-id>B04_Classes_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'What is an Object?'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B04_Classes #B04_Classes_02)</body></methods><methods><class-id>B04_Classes_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'In Smalltalk, all work is done by sending messages to &lt;B&gt;objects&lt;/B&gt;. For this reason, understanding objects is central.To see a simple object in action, select the following line of code and &lt;B&gt;Do it&lt;/B&gt;.&lt;B&gt;MyTranscript 	show: Date today printString; cr.&lt;/B&gt;At the center of this code fragment, a Date object with the value of today''s date is created, used, and then released. This happens all in one line of code.Here''s another example. Select the following lines of code and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| aDate days |aDate := Date 		newDay: 20 		monthNumber: 7 		year: 1969.days := Date today subtractDate:  aDate.MyTranscript 	show: days printString; 	show: '' days since moon walk '';	show: aDate printString; cr.&lt;/B&gt;Here we &lt;B&gt;create&lt;/B&gt; an object, &lt;B&gt;assign&lt;/B&gt; it to a local variable named &lt;B&gt;aDate&lt;/B&gt;, and then use it to do some work. When we are finished, the object referred to by &lt;B&gt;aDate&lt;/B&gt; is garbage collected, and so ends its life-cycle.The garbage collection process is transparent. As a developer, you''ll never have to worry about it.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn what an &lt;B&gt;object&lt;/B&gt; is.Three concepts to understand:1. &lt;B&gt;Behavior&lt;/B&gt;An object''s behavior is &lt;B&gt;what&lt;/B&gt; it knows how to do.2. &lt;B&gt;State&lt;/B&gt;An object''s state is the &lt;B&gt;private data&lt;/B&gt; that belongs to it. When performing its behavior, an object refers to its state.3. &lt;B&gt;Instance&lt;/B&gt;An instance is a particular object which has a life-cycle. When a new object is created it is said to be &lt;B&gt;instantiated&lt;/B&gt;. At that point it can receive messages. When it is no longer needed, and when no other objects reference it, the virtual machine removes the object from memory. This clean-up operation is called &lt;B&gt;garbage collection&lt;/B&gt;, and is automatic.'  asText boldHtmlTags.</body></methods><methods><class-id>E03_Numbers_04</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E03_Numbers_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Integer&lt;/B&gt; literals are just the number itself.&lt;B&gt;1  1000  2312412841234123141531&lt;/B&gt;Now, see to which classes these instances belong.Select each of the following and choose &lt;B&gt;Print it&lt;/B&gt;&lt;B&gt;1000  class2312412841234123141531 class &lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'In the browser, you''ll find some handy messages that Integer responds to.  Notice the conversion messages like &lt;B&gt;asCharacter&lt;/B&gt; and &lt;B&gt;asDouble&lt;/B&gt;.Also, take a look at &lt;B&gt;asInteger&lt;/B&gt;. Why would an Integer need a conversion method to change it into an Integer? (Answer on the &lt;B&gt;Why&lt;/B&gt; tab)Look at the source code in &lt;B&gt;asInteger&lt;/B&gt;. What does it do?'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Integer&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Answer #1&lt;B&gt;asInteger&lt;/B&gt; returns itself.This is so that you can use a collection of Numbers of unknown type (Float, Integer, etc) and convert them all to Integer by sending each the #asInteger message.  Each one will then respond &lt;B&gt;polymorphically&lt;/B&gt; and behave according to their own type.'  asText boldHtmlTags.</body></methods><methods><class-id>E03_Numbers_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Integer'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E03_Numbers #E03_Numbers_04)</body></methods><methods><class-id>E03_Numbers_06</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E03_Numbers_06</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Fraction '</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E03_Numbers #E03_Numbers_06)</body></methods><methods><class-id>E03_Numbers_06</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Fraction&lt;/B&gt; literals are written: numerator / denominator. A Fraction object stores both a numerator and a denominator, so it doesn''t lose precision.&lt;B&gt;100 / 300 100001 / 300000(2/3 ) + ( 1/3 )&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Fraction&lt;/B&gt;.'  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Here are some short examples of common &lt;B&gt;iteration&lt;/B&gt; messages.The general pattern is send the message to the collection with a one argument block as the parameter. The block is evaluated once for each item in the collection.In this example, the block parameter is named &lt;B&gt;each&lt;/B&gt;. This is a common practice in Smalltalk, you will see it often. To try out the different kinds of iterators, select each example and &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;#(1 2 3 4) 	do: [:each | 		MyTranscript show: each squared printString; cr].&lt;/B&gt;&lt;B&gt;#(1 5 2 89 34 53)	detect: [:each | each &gt; 28].&lt;/B&gt;&lt;B&gt;#(1 5 2 89 34 53) 	select: [:each | each &gt; 28].&lt;/B&gt;&lt;B&gt;#(1 5 2 89 34 53) 	reject: [:each | each &gt; 28].&lt;/B&gt;&lt;B&gt;#(1 5 2 89 34 53) 	collect: [:each | each + 10].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to process each element in a collection by using an &lt;B&gt;iteration message&lt;/B&gt;.Collections understand five basic iteration messages:&lt;B&gt;do:&lt;/B&gt; -- pass over each item.&lt;B&gt;detect:&lt;/B&gt; -- find an item, the first item in the collection to satisfy a condition.&lt;B&gt;select:&lt;/B&gt; -- get a subset of items.&lt;B&gt;reject:&lt;/B&gt; -- get everything but a subset of items.&lt;B&gt;collect:&lt;/B&gt; -- process each item and return results.The class browser below includes these iteration methods and their supporting methods for &lt;B&gt;Collection&lt;/B&gt; and &lt;B&gt;Array&lt;/B&gt;. Feel free to review the code for these methods.Thanks to polymorphism, you only have to learn these few methods to manipulate any &lt;B&gt;Collection&lt;/B&gt;. Never again will you have to write code to loop through an array.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Overview of Iteration'.</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F02_Iterators #F02_Iterators_01)</body></methods><methods><class-id>B01_Basics_09</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Local Variables'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_09)</body></methods><methods><class-id>B01_Basics_09</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Remember that every method execution returns an object. The object returned is discarded unless it is &lt;B&gt;assigned&lt;/B&gt; to a variable. Variables may be used to keep an object for later use. All variables must be declared before they are used. Variables declared in methods are called &lt;B&gt;local variables&lt;/B&gt;.Local variables are declared at the beginning of a method. The declaration lists the variable names, but does not specify type. The variable names are listed between vertical bars &lt;B&gt;|&lt;/B&gt;. In Smalltalker slang these are also called "&lt;B&gt;fence posts&lt;/B&gt;".An assignment is accomplished by the &lt;B&gt;:=&lt;/B&gt; operator. In Smalltalk slang this is called: &lt;B&gt;gets&lt;/B&gt;. This is not a message send because a variable is just a name for the object we want to remember. The &lt;B&gt;:=&lt;/B&gt; operator assigns a real object to a variable. To understand how this works, select the following paragraph of code and choose &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;| price tax total |&lt;/B&gt;  "Declaration: Variable names separated by spaces"&lt;B&gt;price := (Dialog request: ''Please enter price'' initialAnswer: ''100'') asNumber.tax := (Dialog request: ''Please enter tax rate %''  initialAnswer: ''10'') asNumber.total := price + (price * tax / 100).''price and tax total: '' , total printString.&lt;/B&gt;You may be wondering, where did the output came from?  Remember, &lt;B&gt;all&lt;/B&gt; code that is evaluated returns an object. Here, we have a piece of code but we did not specify what to return. In this case, what we get back is the result of the last statement that was executed. That statement is a string (''price and tax total: '') concatenated by the comma with a number also expressed as a string (total printString).The variables &lt;B&gt;price&lt;/B&gt;, &lt;B&gt;tax&lt;/B&gt;, and &lt;B&gt;total&lt;/B&gt; are called local or &lt;B&gt;temporary&lt;/B&gt; variables because they are local to the script we have written. We will see other types of (differently scoped) variables later.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the syntax for local variables.  Terms to know:The &lt;B&gt;:=&lt;/B&gt; operator (assignment) is called &lt;B&gt;gets&lt;/B&gt;. So, you can read this statement aloud....&lt;B&gt;total := price * quantity.&lt;/B&gt;as... &lt;B&gt;total gets price times quanity.&lt;/B&gt;&lt;B&gt;Hint:&lt;/B&gt; Make this window bigger, so that the code in the workspace does not wrap across lines. This will make it code easier to read.'  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_03</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>E05_ControlStructs_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Example (1) Select each of the following and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;true and: [ false ].&lt;/B&gt;&lt;B&gt;false and: [ false ].&lt;/B&gt;&lt;B&gt;false and: [ true ].&lt;/B&gt;Example (2) Select the following and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt; true or: [ false]. &lt;/B&gt;Example (3) Select the following and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt; false or: [ true]. &lt;/B&gt;Example (4) Select each of the following and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;(3 &lt; 4) &amp; (5 &lt; 6).&lt;/B&gt;	"logical AND"&lt;B&gt;(3 &lt; 4) | (5 &lt; 6).&lt;/B&gt;		"logical OR"&lt;B&gt;(3 &lt; 4) not.&lt;/B&gt;			"logical negation"Example (5) Select each of the following and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;(3 &lt; 4) and: [MyTranscript show: ''This block gets executed.''; cr. 5 &lt; 6].&lt;/B&gt;&lt;B&gt;(3 &lt; 4) or: [MyTranscript show: ''This block does not.''; cr. 5 &lt; 6].&lt;/B&gt;Notice that the text from the second example block is not printed to the Transcript. As you have seen in the browser and prior examples, the block is not executed if it does not need to be evaluated.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Look in the class browser below at the &lt;B&gt;False&lt;/B&gt; class and the &lt;B&gt;#and:&lt;/B&gt; method.  Example (1) shows #and: at work.  It compares the boolean value of the receiver to the boolean value returned by evaluating the block.This method is also implemented in the &lt;B&gt;True&lt;/B&gt; class.  Take a look at &lt;B&gt;True&gt;&gt;and:&lt;/B&gt; and notice how it differs from &lt;B&gt;False&gt;&gt;and:&lt;/B&gt;.For example, look at this code:&lt;B&gt; true or: [ false] &lt;/B&gt;You can see that the method True&gt;&gt;or: in the browser doesn''t care about the block.  It already knows that "true or: anything" is always true.  So, it quickly returns true.  On the other hand, look at this code:&lt;B&gt;false or: [ true ]&lt;/B&gt;Looking at False&gt;&gt;or: you see that it blindly executes the block because "false or: anything" is always the same answer as the value of anything. &lt;B&gt;This is polymorphism at work&lt;/B&gt;.  Code gets smaller and objects decide their own behavior.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn more about using Booleans'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'The Boolean class implements branches and loops in Smalltalk. It is also a great place to refine your understanding of polymorphism.'  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'More Boolean'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs #E05_ControlStructs_03)</body></methods><methods><class-id>B02_Interaction_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'The Smalltalk Image'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B02_Interaction #B02_Interaction_01)</body></methods><methods><class-id>B02_Interaction_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Smalltalk is different&lt;/B&gt;  Developers using Smalltalk can be more productive because the Smalltalk &lt;B&gt;environment&lt;/B&gt; is different from that used with traditional computer languages. For instance, most languages store their source code in separate disk files. This means that while you are writing code in a language like C, you often need to leave the development environment in order to move, rename, or copy files. In Smalltalk we want to stay focused on the programming task at hand. So, in Smalltalk source code is managed by the environment.There are two main parts to the Smalltalk development environment: the &lt;B&gt;virtual machine&lt;/B&gt; and the &lt;B&gt;virtual image&lt;/B&gt;.(1) The VisualWorks &lt;B&gt;virtual machine&lt;/B&gt; translates between the platform-independent Smalltalk byte codes, and the particular processor and operating system of the computer. For VisualWorks 7.x, there are virtual machines for the following operating systems: &lt;B&gt;ADUX, IBM-AIX, HPUnix, intel Linux, Mac OS 8/9, Mac OS X, SGI, Solaris, Windows98/ME, and Windows NT/2000/XP&lt;/B&gt; (support for some other operating systems is available at a beta level). This means that the code you write in standard VisualWorks is portable across all supported platforms. By using a virtual machine, Smalltalk achieves full platform independence.(2) The &lt;B&gt;image&lt;/B&gt; is where the action is. The image contains all the objects in your system, including the class library, tools, and your own code. When you start the image with a virtual machine, you already have a running Smalltalk program. The development environment itself is written entirely in Smalltalk.What surprises many people is that when developing in Smalltalk, you don''t create a new program from scratch. Instead, you start with a program that is already running and you change it, step by little step -- until it becomes the program you''re aiming to build.As you add your own code, it becomes part of the image. Thus, the simplest way to save your code is to save the image to disk. Saving the image will preserve the entire state of your environment, code, objects, and tools. Saving the image while working through these lessons will preserve the Lesson Browser at the current step, so that you can continue next time from exactly where you stopped.The next step shows how to save and restore the VisualWorks image.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;image-based software development&lt;/B&gt;, and the notion of a &lt;B&gt;virtual machine&lt;/B&gt;.Questions we will address:(1) What is an &lt;B&gt;image&lt;/B&gt;? (2) How to save an image?'  asText boldHtmlTags.</body></methods><methods><class-id>A02_LessonRunner_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Hello World'.</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A02_LessonRunner #A02_LessonRunner_04)</body></methods><methods><class-id>A02_LessonRunner_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'It''s a tradition to begin with a new programming language by writing a little program that displays &lt;B&gt;Hello World&lt;/B&gt; to the user.But I bet you''ve never seen one this short before!Try this: select the line of code below and with the right mouse button choose &lt;B&gt;Do it&lt;/B&gt;. &lt;B&gt;Dialog warn: ''Hello World''.&lt;/B&gt;(If you partially select the code you may get an error dialog or message. No problem, just press the &lt;B&gt;Cancel&lt;/B&gt; button and try again. Or, if you get an error message, just press the delete key -- delete the error text and try again.)Here''s how it works: you just sent the &lt;B&gt;#warn:&lt;/B&gt; message to the &lt;B&gt;Dialog&lt;/B&gt; object with an argument that was a &lt;B&gt;String&lt;/B&gt; object containing the characters &lt;B&gt;Hello World&lt;/B&gt;.  Now, you may reply that sending a message called #warn: is a little odd when we are not really warning anybody. And, you''re right. There are a number of other ways to write a ''Hello World'' program, but the code we just used is so short and simple that it makes a pretty good example.In a nutshell, then, this is how we send messages to objects.You can learn more about reading this message-sending syntax in the topic called &lt;B&gt;Fundamentals&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn to write a simple &lt;B&gt;Hello World&lt;/B&gt; program.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>B00_Fundamentals</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Fundamentals'</body><body package="SLesson Intro Content">sortArray	^#(#B00_Fundamentals nil nil)</body></methods><methods><class-id>B01_Basics</class-id> <category>info</category><body package="SLesson Intro Content">browserClass	^LessonBrowser_01</body><body package="SLesson Intro Content">description	^'Learn the basics of the Smalltalk language and the power behind the idea that "everything is an object".\Q1: What does that mean?\Q2: How could that possibly work?\Q3: Why is this important?' withCRs.</body><body package="SLesson Intro Content">displayString	^'Language Basics'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics nil)</body></methods><methods><class-id>B03_Output_07</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Popup Menu input'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output #B03_Output_07)</body></methods><methods><class-id>B03_Output_07</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'To create a menu you simply send the &lt;B&gt;#labels:&lt;/B&gt; message to class &lt;B&gt;Menu&lt;/B&gt;. The argument should be a String with embedded carriage returns.  After you create a new menu, send it &lt;B&gt;#startUp&lt;/B&gt; and it will display itself.  Here''s an example. Select the following code and choose &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;(Menu labels: ''OnceandOnlyOnce'' ) startUp.&lt;/B&gt;What was returned? The number is the index of the choice. Even though we have a little joke about repeating the word ''Once'' twice (a very little joke, you might say), we get a different answer depending on which ''Once'' the user chooses.You may recall from a previous step that we can use &lt;B&gt;#withCRs&lt;/B&gt; to insert carriage returns into a String. Let''s also add a local variable to our code. Select the following chunk of code and choose &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;| menu |menu := Menu labels:''Once\and\Only\Once'' withCRs.menu startUp. &lt;/B&gt;You should see that it behaves the same as the previous example, but looks a little cleaner.  Usually, you''ll want a better return value than just the index of the selection. So let''s give the menu an array of values that we want to get back from it. The array of values corresponds to the labels we give it. Select the following code and choose &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;| menu |menu := Menu 			labels: ''Binary\Octal\Decimal\Hexadecimal'' withCRs			values: #( 2 8 10 16 ).16 printStringRadix: menu startUp &lt;/B&gt;In this example, we got a value from the menu and immediately used that value as an argument. Then we asked the &lt;B&gt;Integer&lt;/B&gt; 16 to print itself in the base that was chosen from the menu.Of course, you can also place separators between menu items. Just give the menu an array of indicies toindicate where you what to place the separators. To see this, select the following code and choose &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| menu |menu := Menu 			labels: ''red\green\blue\cancel'' withCRs			lines: #(1 3)			values: #( #red #green #blue #cancel ).MyTranscript show: menu startUp. &lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to use pop-up menus to get user input.Messages to know:&lt;B&gt;#labels:&lt;/B&gt;-- sent to &lt;B&gt;class Menu&lt;/B&gt;, creates a menu object.&lt;B&gt;#labels:values:&lt;/B&gt;-- sent to &lt;B&gt;class Menu&lt;/B&gt;, creates a menu object with return values.&lt;B&gt;#labels:lines:values:&lt;/B&gt;-- sent to &lt;B&gt;class Menu&lt;/B&gt;, creates a menu object with return values and seperaters.&lt;B&gt;#startUp&lt;/B&gt;-- sent to a &lt;B&gt;Menu object&lt;/B&gt;, shows the menu.'  asText boldHtmlTags.</body></methods><methods><class-id>E03_Numbers_02</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code 		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E03_Numbers_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Magnitude'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E03_Numbers #E03_Numbers_02)</body></methods><methods><class-id>E03_Numbers_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Examples of Magnitude operations.Select each of the following lines and &lt;B&gt;Print it&lt;/B&gt;&lt;B&gt;1 &lt; 2.40 min: 100.99.392 max: 99.391.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'&lt;B&gt;Magnitude&lt;/B&gt; provides the operations that objects use to order themselves in relation to other objects.Specifically, that means it responds to the messages  #&lt; and #=.Take a close look at the other operations in Magnitude and you will see that many of them are defined in terms of #&lt; and #=.Magnitudes can be easily sorted with &lt;B&gt;SortedCollection&lt;/B&gt;. We will dicuss collections later. Select the class &lt;B&gt;Magnitude&lt;/B&gt; and method &lt;B&gt;#&lt;&lt;/B&gt;.(1) notice in the source code for the method it only sends &lt;B&gt;#subclassResponsibility&lt;/B&gt;.  This means that the subclasses of Magnitude are required to provide some behavior for this message.  If they do not there will be an error message during testing.(2) When any method in a class sends #subclassResponsibility, we consider that class to be an abstract class. There should be no instances created of an abstract class. For example, you would never say &lt;B&gt;Magnitude new&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Magnitude&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Magnitude provides a basis for objects that order themselves. I.e., all Numbers, Points, Dates, and Times.'  asText boldHtmlTags.</body></methods><methods><class-id>B03_Output_08</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'More Complex GUIs'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output #B03_Output_08)</body></methods><methods><class-id>B03_Output_08</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>B03_Output_08</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Naturally, more complex GUIs (Graphical User Interfaces) can be built in Smalltalk. VisualWorks includes a special tool called the &lt;B&gt;UI Painter&lt;/B&gt; that enables you to build GUIs with a minimum of coding. In fact, all the tools in VisualWorks are written in VisualWorks itself. This makes the VisualWorks toolset extremely scalable, allowing you to build large enterprise client-server, distributed, or Web applications.These lessons aim to explain the Smalltalk language, its core concepts, and its class library. Our goal for now is to help you build a solid understanding of the fundamentals, and an ability to use Smalltalk quickly for all types of application development. For this reason, these lessons won''t go into details about the specialized parts of the library used for building a GUI, or a database, Web, or distributed application.To learn about building GUIs with VisualWorks you''ll find complete documentation in the &lt;B&gt;GUI Developer''s Guide&lt;/B&gt;, located in /doc directory of your VisualWorks installation.That''s the end of this lesson. To proceed, click onward to &lt;B&gt;Objects and Classes&lt;/B&gt;, under the topic on &lt;B&gt;Fundamentals&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Summarize, and give references to more documentation on complex GUI development.Recommend Books:&lt;B&gt;VisualWorks GUI Developer''s Guide&lt;/B&gt;, in the /doc directory of your VisualWorks installation.&lt;B&gt;VisualWorks Application Developer''s Guide&lt;/B&gt;, also in the /doc directory.&lt;B&gt;Smalltalk, an Introduction to Application Development Using VisualWorks&lt;/B&gt;, by Trevor Hopkins and Bernard Horan. ISBN (Prentice Hall 1995) 0-13-318387-4&lt;B&gt;Smalltalk by Example, the Developer''s Guide&lt;/B&gt;, by Alec Sharp. (McGraw-Hill, 1997) ISBN 0-07-913036-4'  asText boldHtmlTags.</body></methods><methods><class-id>B02_Interaction</class-id> <category>info</category><body package="SLesson Intro Content">browserClass	^LessonBrowser_01</body><body package="SLesson Intro Content">description	^'Learn about the Smalltalk image, and how to save your own image in VisualWorks.' withCRs.</body><body package="SLesson Intro Content">displayString	^'Image Management'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B02_Interaction nil)</body></methods><methods><class-id>B03_Output_06</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Dialog input'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output #B03_Output_06)</body></methods><methods><class-id>B03_Output_06</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'You can also use a &lt;B&gt;Dialog&lt;/B&gt; to get text input from the user. To see this, select the following code, and choose &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;Dialog request: ''What is your name?''&lt;/B&gt;In this example, the Dialog object does not know what to use as the initial value for your answer. In lieu of a default response, it uses whatever text it finds in the copy-paste buffer. In order to give it an initial answer, try the following paragraph of code using &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;Dialog 	request: ''What is your name?''	 initialAnswer: ''Albert Einstein''.&lt;/B&gt;There are more ways to give the user a choice of options. For example, in the first variation shown below, the user chooses from a list. In the second variation, the user chooses a button to press. Select each of the following code pieces, one at a time, and choose &lt;B&gt;Print it&lt;/B&gt;, for each of them.To choose from a list:&lt;B&gt;Dialog 		choose: ''Which one do you want?'' 		fromList: #(''first'' ''second'' ''third'' ''fourth'') 		values: #(1 2 3 4) 		lines: 8 		cancel: [#noChoice].&lt;/B&gt;To choose a button to press:&lt;B&gt;Dialog		choose: ''Are you tired yet?''		labels: #( ''absolutely'' ''sort of'' ''not really'')		values: #(#yes #maybe #no)		default: #maybe.&lt;/B&gt;In both cases, you see that when the user selects a label, the corresponding value is returned.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to get user input with a &lt;B&gt;Dialog&lt;/B&gt;.Messages to know:&lt;B&gt;#request:&lt;/B&gt;	-- sent to &lt;B&gt;Dialog&lt;/B&gt;, prompts the users for input with a message.&lt;B&gt;#request:initialAnswer:&lt;/B&gt;  -- sent to &lt;B&gt;Dialog&lt;/B&gt;, prompts the users for input with a message and provides a default answer.&lt;B&gt;#choose:fromList:values:lines:cancel:&lt;/B&gt;-- sent to &lt;B&gt;Dialog&lt;/B&gt;, prompts with a list. &lt;B&gt;#choose:labels:values:default:&lt;/B&gt;-- sent to &lt;B&gt;Dialog&lt;/B&gt;, prompts with buttons. '  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_05</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F02_Iterators_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'To see the OrderedCollection holding only the numbers that are not odd from the first OrderedCollection, select the following code and &lt;B&gt;Print it&lt;/B&gt;:"reject the all odd numbers"&lt;B&gt;| oc | oc := OrderedCollection new.oc	add: 40;	add: 30;	add: -99;	add: 493.oc	reject:	[:eachItem | 			eachItem odd ].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to extract everything &lt;B&gt;except&lt;/B&gt; a particular subset of a collection, by using the &lt;B&gt;reject:&lt;/B&gt; message.The &lt;B&gt;reject:&lt;/B&gt; method uses a block to find &lt;B&gt;all&lt;/B&gt; of the objects that do not fulfill some condition.When the block evaluates to &lt;B&gt;true&lt;/B&gt; the corresponding item is &lt;B&gt;excluded&lt;/B&gt; from the result collection.The object returned by &lt;B&gt;reject:&lt;/B&gt; is a collection of the same class as the collection that received the &lt;B&gt;reject:&lt;/B&gt; message.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'reject: [ ] '</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F02_Iterators #F02_Iterators_05)</body></methods><methods><class-id>E02_Strings_02</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E02_Strings_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Equality =    Identity =='</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E02_Strings #E02_Strings_02)</body></methods><methods><class-id>E02_Strings_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Equality =    Identity ==&lt;/B&gt;Select the code below and &lt;B&gt;Do it&lt;/B&gt;. &lt;B&gt;| string1 string2 string3|string1 := ''Excellent''.string2 := ''Excellent''.string3 := string2.MyTranscript 	show: ''(string1 =   string2) is '' ;	show: (string1 =   string2) printString; cr;	show: ''(string1 == string2) is '' ;	show: (string1 == string2) printString;cr;	show: ''(string2 =   string3) is '' ;	show: (string2 =   string3) printString;cr;	show: ''(string2 == string3) is '' ;	show: (string2 == string3) printString; cr.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'A test for &lt;B&gt;equality&lt;/B&gt; returns true if the two items are the same internal values.A test for &lt;B&gt;identity&lt;/B&gt; is more restrictive -- it only returns true if the two items are the same object.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the difference between equality and identityTerms to know:&lt;B&gt;Equality = &lt;/B&gt; same internal values.&lt;B&gt;Identity ==&lt;/B&gt; same object instance.Two strings can be &lt;B&gt;equal&lt;/B&gt; in contents while at the same time they are not the &lt;B&gt;identical&lt;/B&gt; string object (i.e., not equivalent).'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Knowing the difference between &lt;B&gt;equality&lt;/B&gt; and &lt;B&gt;identity&lt;/B&gt; helps you understand object-orientation in a deeper way.In the code example in the workspace, you saw that string1 is &lt;B&gt;not&lt;/B&gt; identical to string2.  (In the MyTranscript window the test returned &lt;B&gt;false&lt;/B&gt;). This is because each of these variables pointed to a completely different object.'  asText boldHtmlTags.</body></methods><methods><class-id>A01_Setup_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'To test that your mouse is configured correctly, press the right-hand mouse button in this window pane. You should see a sub-menu with only (3) three items: &lt;B&gt;Do it&lt;/B&gt;, &lt;B&gt;Print it&lt;/B&gt;, &lt;B&gt;Inspect it&lt;/B&gt;. If a longer menu appears, you must change the &lt;B&gt;Mouse button order&lt;/B&gt; setting.To change mouse button order:&lt;B&gt;1.&lt;/B&gt; Open the VisualWorks Settings window (described in the previous step), and find the &lt;B&gt;Look and Feel&lt;/B&gt; option -- this should appear at the top-left of the Settings window.&lt;B&gt;2.&lt;/B&gt; Under the &lt;B&gt;Look and Feel&lt;/B&gt; settings, toggle the option for &lt;B&gt;Mouse button order&lt;/B&gt;.The default option (upper radio-button) uses the third button (on a three button mouse) or the second button (on a two button mouse). Henceforth, we will refer to this right-most button as the &lt;B&gt;Operate&lt;/B&gt; menu.&lt;B&gt;3.&lt;/B&gt; Click the &lt;B&gt;OK&lt;/B&gt; button to close the Settings window.We will not use the longer menu in these tutorials. It provides some seldom needed commands to move windows around. If you have a 3-button mouse, the long menu will be available to you in the standard VisualWorks browsers.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how   ^'This is the HOW text for: A1_Setup_02 ' asText.</body><body package="SLesson Intro Content">what^'Learn the steps to set up the VisualWorks environment.(2) Configure VisualWorks for a two or three button mouse.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'This is the WHY text for: A1_Setup_02'  asText .</body></methods><methods><class-id>A01_Setup_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Mouse Buttons Setup'.</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A01_Setup #A01_Setup_02)</body></methods><methods><class-id>B01_Basics_11</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Short Cuts'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_11)</body></methods><methods><class-id>B01_Basics_11</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'The following list provides some code editing short-cut keys. You can try all these features out in this window.&lt;B&gt;Selection short-cuts&lt;/B&gt;------------------------------------To select text, use the following &lt;B&gt;Double-click shortcuts&lt;/B&gt;.Double-click at start or end of &lt;B&gt;line&lt;/B&gt;  	- select line.Double-click &lt;B&gt;inside a word&lt;/B&gt; 			- select word.Double-click just &lt;B&gt;after an opening or closing&lt;/B&gt;:	''single quote''  		- select enclosed text.	"double quote"	 	- select enclosed text.	[ square bracket ] 	- select enclosed text.	( parenthesis )  	- select enclosed text.&lt;B&gt;Control hot-keys&lt;/B&gt;------------------------------------&lt;B&gt;&lt;Ctrl&gt; a&lt;/B&gt;	selects all&lt;B&gt;&lt;Ctrl&gt; x&lt;/B&gt;  	cut&lt;B&gt;&lt;Ctrl&gt; c&lt;/B&gt;  	copy&lt;B&gt;&lt;Ctrl&gt; v&lt;/B&gt; 	paste&lt;B&gt;&lt;Ctrl&gt; z&lt;/B&gt; 	undo the most recent text change&lt;B&gt;&lt;Ctrl&gt; r&lt;/B&gt; 	opens the ''replace'' dialog&lt;B&gt;&lt;Ctrl&gt; f&lt;/B&gt;		inserts '' ifFalse: ''&lt;B&gt;&lt;Ctrl&gt; t&lt;/B&gt;		inserts '' ifTrue: ''&lt;B&gt;&lt;Ctrl&gt; g&lt;/B&gt;	inserts  '' := ''&lt;B&gt;&lt;Ctrl&gt; e&lt;/B&gt;	replace -- opens a dialog'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn some of the short-cut keys that are available in VisualWorks.Smalltalk has a very concise and non-cluttered syntax. Research has show that programmers only need to write half as many lines of code in Smalltalk as in Java or C++. But we can be just a little bit faster yet by using short-cut keys.'  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_02</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F01_Collections_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'A &lt;B&gt;literal&lt;/B&gt; is an object that is referred to or created ''in-line'' in the code.An &lt;B&gt;Array Literal&lt;/B&gt; begins with a hash-parenthesis and ends with a parenthesis. Items are separated by white space. The following example creates an array of ten integers. Select the example and try both &lt;B&gt;Print it&lt;/B&gt; and &lt;B&gt;Inspect&lt;/B&gt;:&lt;B&gt;#( 10 20 30 40 50 60 70 80 90 100 )&lt;/B&gt;As with any object, it can be assigned to a variable, and you can send it messages. To try this, select the following and then &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| grades |grades := #(1 2 3 4 5).MyTranscript cr; 	show: ''Array has a four? '' ;	show: (grades includes: 4) printString.&lt;/B&gt;A literal array can contain items that are also string literals. As a literal, it cannot contain variables. For example, the following code does &lt;B&gt;not&lt;/B&gt; place the value of a variable into a literal array. To see why &lt;B&gt;Inspect&lt;/B&gt; the follow paragraph of code:&lt;B&gt;| variable |variable := ''Movie: Princes Bride''.variable reverse.#( variable )&lt;/B&gt;You see!  It interprets the name ''variable'' as a literal symbol.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;Literal Arrays&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Literal Array'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections #F01_Collections_02)</body></methods><methods><class-id>B02_Interaction_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^ 'Source files'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B02_Interaction #B02_Interaction_03)</body></methods><methods><class-id>B02_Interaction_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'VisualWorks maintains three files automatically: the &lt;B&gt;image&lt;/B&gt;, &lt;B&gt;sources&lt;/B&gt;, and &lt;B&gt;changes&lt;/B&gt; files. If you use the host operating system to move or copy an image during development, you should always be sure to keep these three files in sync.For example, if you back-up (or restore) one of these files, make sure to backup (or restore) the other two at the same time. Assuming that we saved the image file under the name &lt;B&gt;visualnc&lt;/B&gt; (which is the default image filename for VisualWorks non-Commercial) we would find the following files in the &lt;B&gt;/image&lt;/B&gt; sub-directory.&lt;B&gt;visualnc.cha&lt;/B&gt;	- change log&lt;B&gt;visualnc.im&lt;/B&gt;	- image (all objects)&lt;B&gt;visualnc.sou&lt;/B&gt;	- source codeNote: under MacOS the image file does not have the &lt;B&gt;.im&lt;/B&gt; extension.If we were to use the Launcher to save a backup image file under the name &lt;B&gt;visualbackup&lt;/B&gt;, VisualWorks would create two new files in the same directory named: &lt;B&gt;visualbackup.im&lt;/B&gt;, and &lt;B&gt;visualbackup.cha&lt;/B&gt;. The source code file remains the same, because it does not change as we add code to the image. Source code changes are stored either in the changes file, or in a parcel source file. Parcel source files are not part of this lesson and will be discussed later.The VisualWorks virtual machine (often called the "object engine") may be found in the &lt;B&gt;bin&lt;/B&gt; sub-directory:&lt;B&gt;visualnc.exe&lt;/B&gt;	- for Windows platforms&lt;B&gt;visualnc&lt;/B&gt;		- for UNIX or MacOS platforms'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about the files used by VisualWorks to manage the image.The three important files:(1) &lt;B&gt;Image&lt;/B&gt; (extension ".im")(2) &lt;B&gt;Sources&lt;/B&gt; (extension ".sou")(3) &lt;B&gt;Changes&lt;/B&gt; (extension ".cha")'  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_06</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F01_Collections_06</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'To see Sets in action, select each code sample below and &lt;B&gt;Print it&lt;/B&gt;:Eliminate duplicate objects:&lt;B&gt;#(1 1 1 2 2 2 3 3 3) asSet&lt;/B&gt;Count distinct objects:&lt;B&gt;#( 45200 45200 45200  45200 123456 94900 ) asSet size.&lt;/B&gt;Creating and modifying a &lt;B&gt;Set&lt;/B&gt;:&lt;B&gt;| mySet |mySet := Set new.mySet	add: 1;		add: 1;		add: 7;		add: 7;		add: 7;		yourself. &lt;/B&gt;Note: #add: always returns the item just added. To get the collection at the end of a series of cascaded #add: messages you must send &lt;B&gt;#yourself&lt;/B&gt;, which returns the collection object itself.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Set&lt;/B&gt;, which may be used to ensure that each item is only kept once in a Collection.Features of class Set:-- Unordered-- Automatically eliminates duplicates-- Can hold any value except &lt;B&gt;nil&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_06</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Set'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections #F01_Collections_06)</body></methods><methods><class-id>A02_LessonRunner_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Parts of the Lesson Browser'</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A02_LessonRunner #A02_LessonRunner_01)</body></methods><methods><class-id>A02_LessonRunner_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'This is the &lt;B&gt;Workspace&lt;/B&gt; panel of the Lesson Browser.In the Lesson Browser, we will present step-by-step instructions in this Workspace. You can also use this panel as a scratch area for simple exercises (hence the name). All of this will be explained more in upcoming steps.For now, take a quick look at the buttons above this panel. You will find a list box with a list of the steps in this lesson (currently: &lt;B&gt;Parts of the Lesson Browser&lt;/B&gt;), two arrow buttons, and a button &lt;B&gt;Return To Topics&lt;/B&gt;.The list box lets you jump to directly to any step in this lesson. The two arrow buttons let you navigate backwards and forwards one step at a time. The &lt;B&gt;Return To Topics&lt;/B&gt; button will take you back to the Lesson Runner window.Now press the forward arrow button and move ahead to the next step.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'This panel states the &lt;B&gt;goal&lt;/B&gt; of each step. This is &lt;B&gt;what&lt;/B&gt; we will accomplish for this step of the lesson.So, what do we want to accomplish first? This step introduces you to the Lesson browser itself -- this window. We begin with the &lt;B&gt;Lesson Browser 01&lt;/B&gt;, which is the simplest incarnation of the Lesson Browser.Continue now by reading the workspace area on the right side of this window, and follow the instructions there.'  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_04</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E05_ControlStructs_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'With Booleans and Blocks, branches are simple.  (1) generate a boolean. (2) send it a branching message. Here are some examples ... &lt;B&gt;Do it&lt;/B&gt; on each separately.&lt;B&gt;| someBoolean |someBoolean := true.someBoolean 	ifTrue: [MyTranscript cr; 				show: ''someBoolean is true''].14 odd  	ifTrue: [MyTranscript cr; 				show: ''Should never print.''].4 &lt; 5 	ifTrue: [MyTranscript cr; 				show: ''4 is less than 5'']	ifFalse: [MyTranscript cr; 				show: ''Oh-oh !''].14 &lt; 5	ifTrue: [MyTranscript cr; 				show: ''Math is broken'']	ifFalse: [MyTranscript cr; 				show: ''Math works fine.''].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Here is the format for a simple branching statement.&lt;B&gt;someBoolean 	ifTrue: [ "evaluate this block" ].&lt;/B&gt;Look in the class browser below at &lt;B&gt;False&gt;&gt;ifTrue:&lt;/B&gt;. You see that if &lt;B&gt;someBoolean&lt;/B&gt; is false the method does nothing.  That''s exactly what we want it to do!  Now look at &lt;B&gt;True&gt;&gt;ifTrue:&lt;/B&gt; all it does is revaluate the block and return its value.  Wow, this really works!This is kind of like the phrase: &lt;B&gt;The answer you get depends on who you ask.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to &lt;B&gt;branch&lt;/B&gt; using Booleans and Blocks.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Branches'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs #E05_ControlStructs_04)</body></methods><methods><class-id>F00_LibraryTwo</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Class Library 2'.</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo nil nil)</body></methods><methods><class-id>F03_Streams</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description   ^ 'Learn about the Stream classes, and how to use them in your applications.'.</body><body package="SLesson Intro Content">displayString	^'Streams '</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F03_Streams nil)</body></methods><methods><class-id>F03_Streams</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList	| revealList |	revealList := super revealList.	revealList at: 'PositionableStream class' put: #(#on:).	revealList at: 'PositionableStream' put: #(#atEnd #isEmpty #contents #skip: #reset #position #position:).	revealList at: 'ReadStream' put: #(#next #isReadable #isWritable #peek).	revealList at: 'ReadStream class' put: #(#on:).	revealList at: 'WriteStream' put: #(#nextPut: #nextPutAll: #isReadable #isWritable #cr #tab #space).	^revealList</body></methods><methods><class-id>F02_Iterators</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description	^'Learn how to iterate over the contents of a collection objects.'</body><body package="SLesson Intro Content">displayString	^'Iterators'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F02_Iterators nil)</body></methods><methods><class-id>F02_Iterators</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList	| revealList |	revealList := super revealList.	revealList at: 'Date class' put: #(#today).	revealList at: 'Date' put: #(#addDays:).	revealList at: 'Collection' put: #(#do: #detect: #select: #reject: #collect: #detect:ifNone:).	revealList at: 'Array' put: #(#do: #detect: #select: #reject: #collect: #detect:ifNone:).	revealList at: 'Number' put: #(#to:do:).	revealList at: 'Interval class' put: #(#from:to:by:).	^revealList</body></methods><methods><class-id>F04_Files</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description	^'Learn how to read and write disk files using the File system class hierarchy.'</body><body package="SLesson Intro Content">displayString	^'Files'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F04_Files nil)</body></methods><methods><class-id>F04_Files</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList    |revealList|    revealList :=  super revealList.    revealList at: 'Filename class' put: #( named:  currentDirectory separator splitPath: ).    revealList at: 'Filename' put: #( contentsOfEntireFile dates edit directory extension head tail exists delete directoryContents filenamesMatching: fileSize copyTo:  makeDirectory renameTo:  readStream writeStream ).    ^revealList.</body></methods><methods><class-id>B01_Basics_009</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Smalltalk Style'</body></methods><methods><class-id>B01_Basics_009</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Smalltalk programmers take programming style seriously because they consider program readability to be very important.  Smalltalk does not need the ''syntatic noise'' of other programming languages.  What is left over in a Smalltalk program looks very close to English.  The "golden rule" of Smalltalk Style is: "you should comforterably be able to read aloud a single method in a single breath".  Here are a few Smalltalk style rules:- Choose meaningful names of classes, variables, and messages.- Start names of classes and class variables with a capital letter, all other identifiers with lowercase letters.- Use "camelBackCase"  i.e. combine several names into a single identifier and capitalize the second and consecutive words as in raisedTo: asUppercase, etc.- Avoid unnecessary comments. If the code is not clear, write better code instead.- Methods should be short, not more than 10 lines long. A method should fit into the Browser without scrolling.- If a method does not fit into 10 lines, it should probably be divided into several methods.- Use available methods whenever possible. In particular, use enumeration methods for collections.' withCRs asText boldAllQuotes.</body><body package="SLesson Intro Content">what^'You will learn some simple Smalltalk style guidlines.' withCRs asText boldAllQuotes.</body></methods><methods><class-id>B04_Classes</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList	revealList :=  super revealList.	revealList at: 'String' put: #( reverse  size printOn: ).	revealList at: 'Date' put: #( addDays:  printOn: ).	revealList at: 'Date class' put: #( today newDay:monthNumber:year:  daysInYear:).	revealList at: 'Time class' put: #( now ).	revealList at: 'Time' put: #( hours minutes seconds printOn: ).	revealList at: 'Object' put: #( printOn: == ).	^ revealList</body></methods><methods><class-id>B04_Classes</class-id> <category>info</category><body package="SLesson Intro Content">browserClass	^LessonBrowser_04</body><body package="SLesson Intro Content">description	^'Learn the basics of objects, classes, and methods.'</body><body package="SLesson Intro Content">displayString	^'Objects and Classes'</body><body package="SLesson Intro Content">sortArray	^#(#B00_Fundamentals #B04_Classes nil)</body></methods><methods><class-id>B05_MoreConcepts</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description   ^ 'Learn more advanced Smalltalk concepts such as:\immutable objects, special variables, variable scoping, primitives, and Smalltalk''s notation.' withCRs</body><body package="SLesson Intro Content">displayString	^ 'More Concepts '.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B05_MoreConcepts nil)</body></methods><methods><class-id>B05_MoreConcepts</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList    |revealList|    revealList :=  super revealList.    "&gt; classNameString and ArrayOfSelectors &lt;"    revealList at: 'Date class' put: #( nameOfMonth: newDay:monthNumber:year:).    revealList at: 'Date' put: #( day year monthIndex).    revealList at: 'Object' put: #(  == ).    ^revealList.</body></methods><methods><class-id>F01_Collections_05</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F01_Collections_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'When you add items to a SortedCollection, they are added in their correct sorted position in the collection. You can specify a sort order or accept the default (ascending) order.To see an example, select the following examples and use &lt;B&gt;Print it&lt;/B&gt;."Start with Literal Arrays and convert them."&lt;B&gt;#( 4 1 3 0 6 9 5 4 8 0 ) asSortedCollection.&lt;/B&gt;&lt;B&gt;#( ''first'' ''second'' ''third'' ''fourth'' ) asSortedCollection.&lt;/B&gt;You can change the sort algorithm by setting a different sort block. By default SortedCollection uses the following sort block: 	[:element1 :element2 | element1 &lt; element2]This block decides whether element1 should be located before element2 or not. You can define your own sort block, as in the example below where we sort by the second letter of the strings in the collection. To see how this works, select the code and &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;#( ''ab'' ''ac'' ''ae'' ''ag'' ''ba'' ''bc'' ''bd'' ''bf'' ) 	asSortedCollection: [:x :y | (x at: 2) &lt; (y at: 2)].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;SortedCollection&lt;/B&gt; which keeps objects in a particular sort order. Properties of class SortedCollection:-- Like OrderedCollection but it automatically sorts its elements in ascending order.-- Each object being stored must know how to respond to #&lt; or #=.-- A custom sorting algorithm can be specified, using a Block.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'SortedCollection'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections #F01_Collections_05)</body></methods><methods><class-id>E05_ControlStructs_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;To read the code more easily, you may maximize this window&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'In object-oriented programming, the flow of control is primarily controlled by &lt;B&gt;polymorphism&lt;/B&gt;, and secondarily by &lt;B&gt;branches&lt;/B&gt; and &lt;B&gt;loops&lt;/B&gt;.A good OO programmer maximizes use of polymorphism and minimizes branches and loops. For this reason, it makes sense that Smalltalk implements branches and loops polymorphically. Let''s see how this works...'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Overview of Branches and Loops'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs #E05_ControlStructs_01)</body></methods><methods><class-id>F04_Files_01</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F04_Files_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Class &lt;B&gt;Filename&lt;/B&gt; lets you work with files on the disk. It is a platform-independent view of the file system and isolates you from as many operating system specific file issues as possible."Example (1) - write a file"&lt;B&gt;| file write |file := ''lessonFile.txt'' asFilename.write := file writeStream.1 to: 200 by: 3 do: [ :number |	write nextPutAll: number printString, '', ''  ].write close.file edit.&lt;/B&gt;"Example (2) - read and display a file"&lt;B&gt;| file |file := ''lessonFile.txt'' asFilename.MyTranscript show: file contentsOfEntireFile.&lt;/B&gt;"Example (3) - filter non alphanumeric characters from a file"&lt;B&gt;| file read write |write := WriteStream on: String new.file := ''lessonFile.txt'' asFilename.read := file readStream.[ read atEnd ] whileFalse: [ | aChar |	aChar := read next.	aChar isAlphaNumeric		ifTrue: [ write nextPut: aChar ]].read close.write close.MyTranscript show: write contents.&lt;/B&gt;"Example (4) - delete a file"&lt;B&gt;| file |file := ''lessonFile.txt'' asFilename.file delete &lt;/B&gt;This is the end of the last lesson.You have now completed everything in this version of the Lesson Browser, and are now ready to use the standard VisualWorks environment.Happy programming!'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Filename&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F04_Files_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Overview of Files'.</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F04_Files #F04_Files_01)</body></methods><methods><class-id>B05_MoreConcepts_02</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>B05_MoreConcepts_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Special variables are used in methods, but you cannot assign a value to them. For example, the following statements are illegal. Try &lt;B&gt;Do it&lt;/B&gt; and see what happens. (Press the Terminate button to dismiss the exception window. Exceptions will be discussed later)&lt;B&gt;nil := ''nothing''.true := ''Honest Iago''.false := ''Desdemona''.self := Date today.super := ''Clark Kent''.&lt;/B&gt;Reserved words have a permanent and immutable meaning&lt;B&gt;true&lt;/B&gt;	- the boolean value true.&lt;B&gt;false&lt;/B&gt;	- the boolean value false.&lt;B&gt;nil&lt;/B&gt;		- the nil object.&lt;B&gt;super&lt;/B&gt;	- refers to the super-class.&lt;B&gt;self&lt;/B&gt;		- refers to the sender itself.  Similar to the C/C++/Java reserved word &lt;B&gt;"this"&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;special variables&lt;/B&gt; used in Smalltalk methods.Smalltalk has five special variables, which are reserved words:(1) &lt;B&gt;true&lt;/B&gt;(2) &lt;B&gt;false&lt;/B&gt; (3) &lt;B&gt;nil&lt;/B&gt;(4) &lt;B&gt;super&lt;/B&gt;(5) &lt;B&gt;self&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>B05_MoreConcepts_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Special Variables'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B05_MoreConcepts #B05_MoreConcepts_02)</body></methods><methods><class-id>A02_LessonRunner_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Printing in workspace'.</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A02_LessonRunner #A02_LessonRunner_03)</body></methods><methods><class-id>A02_LessonRunner_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'OK, now let''s run some Smalltalk code!Select (by highlighting) the following line of code and choose &lt;B&gt;Print it&lt;/B&gt; from the right-hand mouse button menu: 1 + 1 Pretty cool, eh? (Well, it''s a start anyway). So, what happened here is that VisualWorks compiled the code, evaluated it, and printed the result in the Workspace. The code ran like any other piece of Smalltalk code. In this example, VisualWorks returned the answer &lt;B&gt;2&lt;/B&gt; in the form of an object. Since we can''t see objects directly (yet), the environment automatically converted the object into a string and printed it next to the selected area.What makes this &lt;B&gt;very cool&lt;/B&gt;, is that as you learn the different tools in the VisualWorks environment, this simple &lt;B&gt;select and Print it&lt;/B&gt; ability will be available in all of them. It is very useful to be able to run small bits of code to learn if you are on the right track. This &lt;B&gt;immediate feedback&lt;/B&gt; is one of the features that makes Smalltalk such a productive environment.In general, you''ll find that the Smalltalk style is to &lt;B&gt;just try it&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to run Smalltalk code in the Workspace.'  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_05</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>E05_ControlStructs_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Here is a re-write of the last example in the previous step. Select the following and &lt;B&gt;Do it&lt;/B&gt;.&lt;B&gt;| outputLine |outputLine := 14 &lt; 5 		ifTrue: [''is broken'']		ifFalse: [''works fine.''].MyTranscript 		show: ''Math '' ;		show: outputLine; cr. &lt;/B&gt;Occasionally you will see a return statement written this way. Select the following and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;   | aNumber |   aNumber := 34.   ^aNumber odd		ifTrue: [ ''odd'' ]		ifFalse: [ ''even''].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Much earlier we said that every message-send returns an object. At this point, you may be wondering what is returned from a branching message send.Answer: the value of the evaluated block or nil is returned.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about the value returned by a branch message.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'More Branches'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs #E05_ControlStructs_05)</body></methods><methods><class-id>A02_LessonRunner_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Using the Workspace '.</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A02_LessonRunner #A02_LessonRunner_02)</body></methods><methods><class-id>A02_LessonRunner_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'This workspace area is where you will do small exercises. Sometimes this will involve typing in little bits of Smalltalk code and running it. You can select anywhere in this scratch window and enter some text.You can run code in this workspace by selecting it with the mouse, and then clicking on the right-hand mouse button to show a menu of options. In the full environment there are many options, but the Lesson Browser only presents three: &lt;B&gt;Do it&lt;/B&gt;, &lt;B&gt;Print it&lt;/B&gt;, and &lt;B&gt;Inspect&lt;/B&gt;. (If a different menu appears, see the topic: &lt;B&gt;Introduction&lt;/B&gt;, and the lesson: &lt;B&gt;VisualWorks Setup&lt;/B&gt; to configure your mouse buttons correctly).When you select a valid piece of code and then choose &lt;B&gt;Print it&lt;/B&gt; the code will execute and print the results directly into this workspace.If you select an invalid piece of code you will see a small window asking you how to proceed. Simply &lt;B&gt;press the cancel button&lt;/B&gt; and try again, selecting a valid piece of code. We will explain in a later lesson what a valid piece of code is.  For now, we''ll proceed slowly. Advance to the next step where you will execute your first piece of Smalltalk code.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Lean how to use the workspace panel.'  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_06</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F02_Iterators_06</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'To get a collection of the squares of an OrderedCollection of numbers, select the following code and &lt;B&gt;Print it&lt;/B&gt;:"collects the squares of the numbers"&lt;B&gt;| oc | oc := OrderedCollection new.oc	add: 1;	add: 2;	add: 3;	add: 4;	add: 5.oc	collect:	[:eachItem | 			eachItem squared].&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn how to create a new collection, using the &lt;B&gt;collect:&lt;/B&gt; message.The block passed to &lt;B&gt;collect:&lt;/B&gt; is executed once for each object in the original collection. The result of the last statement in the block is added to the new collection.As with the other iteration methods you have seen, the collection returned is of the same class as the collection receiving the &lt;B&gt;collect:&lt;/B&gt; message.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F02_Iterators_06</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'collect: [ ]  '</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F02_Iterators #F02_Iterators_06)</body></methods><methods><class-id>A00_Intro</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Introduction'.</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro nil nil)</body></methods><methods><class-id>A01_Setup</class-id> <category>info</category><body package="SLesson Intro Content">browserClass	^LessonBrowser_01</body><body package="SLesson Intro Content">description	^'Set up VisualWorks for the first time. \(1) Set the VisualWorks home directory \(2) Configure for use with a two- or three-button mouse' withCRs.</body><body package="SLesson Intro Content">displayString	^'VisualWorks Setup' .</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A01_Setup nil)</body></methods><methods><class-id>A01_Setup</class-id> <category>step support</category><body package="SLesson Intro Content">how	^self currentStep how</body></methods><methods><class-id>A02_LessonRunner</class-id> <category>info</category><body package="SLesson Intro Content">browserClass	^LessonBrowser_01</body><body package="SLesson Intro Content">description	^'Learn about the Lesson Runner tutorial for VisualWorks'</body><body package="SLesson Intro Content">displayString	^'Lesson Runner'.</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A02_LessonRunner nil)</body></methods><methods><class-id>F01_Collections</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description   ^ 'How do you deal with many objects?\Collect them!\Learn the how to work with Smalltalk Collection classes. Discover how to use them to shrink the size and complexity of your code.'  withCRs</body><body package="SLesson Intro Content">displayString	^'Collections'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections nil)</body></methods><methods><class-id>F01_Collections</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList    |revealList|    revealList :=  super revealList.    revealList at: 'Collection' put: #( add: ).    revealList at: 'Dictionary' put: #( add: at:put:).    revealList at: 'OrderedCollection' put: #( add: ).    revealList at: 'SortedCollection' put: #( add: ).    revealList at: 'Set' put: #( add: ).    revealList at: 'Association' put: #( key key:  value: value ).    revealList at: 'Association class' put: #( key:value: ).    revealList at: 'Bag' put: #( add: ).    revealList at: 'Object' put: #( -&gt; ).    ^revealList.</body></methods><methods><class-id>F01_Collections_03</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F01_Collections_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'This step presents a simple, commented example showing the use of an Array. Read it first, then select the whole paragraph and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;| array date |&lt;/B&gt;&lt;B&gt;array := Array new: 5.&lt;/B&gt; "create an array""adding items"&lt;B&gt;date := Date today.array at: 2 put: date.array at: 1 put: Time now.array	at: 4 put: ''You Are Not Gonna Need It (YAGNI)'';	at: 5 put: ''Once And Only Once''.&lt;/B&gt;"referencing an item"&lt;B&gt;MyTranscript show: (array at: 4);cr.&lt;/B&gt;"un-initialized slot is nil"&lt;B&gt;MyTranscript show: (array at: 3) printString;cr.&lt;/B&gt;"look for a particular item"&lt;B&gt;MyTranscript show: ''Is previous date object in there? '';	show: (array includes: date) printString; cr.&lt;/B&gt;&lt;B&gt;MyTranscript show: ''What index is it at? '';	show: (array indexOf: date 				 ifAbsent: [''no date'' ] ) printString; cr.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;Arrays&lt;/B&gt;.Properties of class Array:-- Instances are of fixed size, and is very efficient.-- Automatically checks that an index is within bounds.-- Cannot grow.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^' '  asText boldHtmlTags.</body></methods><methods><class-id>F01_Collections_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Array'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F01_Collections #F01_Collections_03)</body></methods><methods><class-id>E02_Strings_03</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E02_Strings_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'The following are examples of Symbols. Select each line below and &lt;B&gt;Print it&lt;/B&gt;.#new#red#georgeIt is rare for a symbol to contain a space character. If there is a space in the symbol, you must place it inside single quotes, like this:#''only once'' Symbols of the same name are the same object. That is, they will respond to the #== message. To see this, select the code below and &lt;B&gt;Do it&lt;/B&gt;. &lt;B&gt;MyTranscript cr;	show: ''Same symbols are Identical''  ; cr;	show: ''(#Excellent == #Excellent) is '';	show: (#Excellent == #Excellent) printString; cr;	show: ''Same strings are NOT Identical''; cr;	show: ''(''''Excellent''''  == ''''Excellent'''' ) is '';	show: (''Excellent'' == ''Excellent'') printString; cr.&lt;/B&gt; '  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Specify a literal symbol beginning with a hash (or pound sign).'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Symbol&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Symbols are used for method selectors and as named constants.'  asText boldAllQuotes.</body></methods><methods><class-id>E02_Strings_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Symbols'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E02_Strings #E02_Strings_03)</body></methods><methods><class-id>B03_Output_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Transcript and MyTranscript'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output #B03_Output_02)</body></methods><methods><class-id>B03_Output_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'The &lt;B&gt;MyTranscipt&lt;/B&gt; pane appears below and is only used for code associated with these lessons.The &lt;B&gt;Transcript&lt;/B&gt; is the text area attached to the bottom of the VisualWorks Launcher window. The Transcript is used by the Smalltalk environment to provide system messages. You can also use it to provide status and debugging messages from your programs.From now on, in these lessons we''ll only refer to the &lt;B&gt;MyTranscript&lt;/B&gt; area, but as you learn about &lt;B&gt;MyTranscript&lt;/B&gt; remember that &lt;B&gt;Transcript&lt;/B&gt; understands all the same messages and behaves in a similar way. The next step demonstrates some messages we can send to MyTranscript.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about the &lt;B&gt;Transcript&lt;/B&gt; and the &lt;B&gt;MyTranscript&lt;/B&gt; area used in these lessons.'  asText boldHtmlTags.</body></methods><methods><class-id>B01_Basics_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Three Kinds of Messages'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_05)</body></methods><methods><class-id>B01_Basics_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Messages follow three distinct patterns.To understand these patterns, execute the following examples line-by-line with &lt;B&gt;Print it&lt;/B&gt;:&lt;B&gt;(1) Unary messages&lt;/B&gt; (the selector is a single (unary) identifier, and there are no arguments)&lt;B&gt;3 negated&lt;/B&gt;			"selector is  #negated"&lt;B&gt;''abcdefg'' reverse&lt;/B&gt;	"selector is  #reverse"&lt;B&gt;(2) Binary messages&lt;/B&gt; (the selector is one or two non-alphanumeric characters, followed by exactly one argument object)&lt;B&gt;3 + 5&lt;/B&gt;				"selector is  #+"					"argument is the Integer object 5"&lt;B&gt;''abc'' , ''xyz''&lt;/B&gt;			"selector is  #,  (comma character)"					"argument is the String ''xyz''"&lt;B&gt;20 &lt;= 20&lt;/B&gt;			"selector is  #&lt;="					"argument is the Integer object 20"&lt;B&gt;(3) Keyword messages&lt;/B&gt;(a keyword is an identifier followed by colon &lt;B&gt;":"&lt;/B&gt;  )(the selector is one or more keywords, and when the message is sent, each keyword is followed by an argument object)&lt;B&gt;3 raisedTo: 17.&lt;/B&gt;			"selector is  #raisedTo:"						"argument is 17"&lt;B&gt;3 between: 5 and: 10.&lt;/B&gt;	"selector is  #between:and:"						"arguments are 5 and 10"&lt;B&gt;Point x: 4 y: 200.&lt;/B&gt; 		"receiver is the object Point"						"selector is  #x:y"						"arguments are 4 and 200"You might be a bit surprised to see how arguments are interspaced by keywords in a single message. While this may seem odd at first, it helps make source code easy to understand.For example, when we write the expression &lt;B&gt;Point x: 4 y: 200 &lt;/B&gt; we can see immediately which argument for &lt;B&gt;x&lt;/B&gt; and which is for &lt;B&gt;y&lt;/B&gt;. By comparison, in the syntax of the ''C'' language you would write something like &lt;B&gt;new Point (4,200)&lt;/B&gt; and you would have to look up if the 4 was x or y.  Yes, &lt;B&gt;Point&lt;/B&gt; is a simple example. Most people know the convention that x comes before y when writing Cartesian coordinates. However, not all arguments are this obvious. As the code becomes more complex in larger applications, this self-documenting aspect of keyword messages helps keep Smalltalk code easy to read.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the three kinds of messages: (1) &lt;B&gt;Unary&lt;/B&gt;, (2) &lt;B&gt;Binary&lt;/B&gt;,(3) &lt;B&gt;Keyword&lt;/B&gt;.Terms to know:A &lt;B&gt;selector&lt;/B&gt; is the name of a message. When we talk about the message reverse, #reverse is the selector.An &lt;B&gt;identifier&lt;/B&gt; starts with a letter and contains only letters and digits. identifiers are case sensitive and unlimited in length.A &lt;B&gt;keyword&lt;/B&gt; is an identifier followed by a colon &lt;B&gt;:&lt;/B&gt;.'  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_08</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>E05_ControlStructs_08</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Compared to the Java example in the &lt;B&gt;How&lt;/B&gt; tab, a Smalltalk programmer would generate a LotteryResult class and subclasses LotteryFirstPlace, LotterySecondPlace, LotteryThirdPlace, and LotteryLost.In Smalltalk, the switch statement is unnecessay because we can write:&lt;B&gt;| lotteryResult |lotteryResult := generator result.Dialog warn: lotteryResult message. &lt;/B&gt;This is a long-term win, because if requirements change and, for example, we need a forth-place prize, polymorphism can easily accommodate that by adding a new LotteryFourthPlace class.Note: If you tried to execute the code above, it didn''t work because there is no Lottery class yet. Of course, you can create these classes once you start using the full VisualWorks environment.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'/*&lt;B&gt;Java&lt;/B&gt; might require the following ...*/&lt;B&gt;lotteryNumber = generator.getNumber();switch (lotteryNumber) {	case 1: 		message("First Prize");		break;	case 2: 		message("Second Prize");		break;	case 3: 		message("Third Prize");		break;	default: 		message("You Lose");		break;} &lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn why Smalltalk has no switch or case statement.In object-oriented programming most uses of switch / case statements can be handled with &lt;B&gt;polymorphism&lt;/B&gt;. Switch statements are used in less OO languages to determine the state of an object and then tell it what to do.In Smalltalk, we prefer to let the object decide what to do on its own.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs_08</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Why no switch-case?'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs #E05_ControlStructs_08)</body></methods><methods><class-id>B03_Output_03</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Output to MyTranscript'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output #B03_Output_03)</body></methods><methods><class-id>B03_Output_03</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'We''ll start with a clean &lt;B&gt;MyTranscript&lt;/B&gt;, so let''s send the MyTranscript object a message telling it to clear itself. Select and evaluate the following code:&lt;B&gt;MyTranscript clear.&lt;/B&gt;We can now fill MyTranscript with some text. Select the following paragraph of code, and &lt;B&gt;Do it&lt;/B&gt;. Notice that we use semi-colons to send multiple messages to the MyTranscript object.&lt;B&gt;MyTranscript 		show: ''Grocery List''; cr;		tab; show: ''Milk''; cr;		tab; show: ''Eggs''; cr;		tab; show: ''Jalapenos''.&lt;/B&gt;Let''s clean-up again before moving to the next step. Select and &lt;B&gt;Do it&lt;/B&gt;:&lt;B&gt;MyTranscript clear.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn some important messages understood by &lt;B&gt;MyTranscript&lt;/B&gt;.Messages to know:&lt;B&gt;#show:&lt;/B&gt;	- print a string&lt;B&gt;#clear&lt;/B&gt;	- clear the window&lt;B&gt;#cr&lt;/B&gt;		- carriage return&lt;B&gt;#tab&lt;/B&gt;	- tab'  asText boldHtmlTags.</body></methods><methods><class-id>B04_Classes_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Example #1Select the following and choose &lt;B&gt;print it&lt;/B&gt;.&lt;B&gt;Object new.Dialog new.&lt;/B&gt;Both of the above create a new object and when you choose &lt;B&gt;print it&lt;/B&gt; they use the &lt;B&gt;default #printOn:&lt;/B&gt; method available in Object.Example #2Select the following and choose &lt;B&gt;print it&lt;/B&gt;.&lt;B&gt;Date today.Time now.&lt;/B&gt;Both of the above create a new object and when you choose &lt;B&gt;print it&lt;/B&gt; they use a &lt;B&gt;customized version of  #printOn:&lt;/B&gt; that they each provide.You can view the code for each version of #printOn: in the Class Browser below.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;polymorpism&lt;/B&gt;, an often-misunderstood feature of Smalltalk classes.If &lt;B&gt;inheritance&lt;/B&gt; is the idea of receiving the wealth that someone else has accumulated, then &lt;B&gt;polymorphism&lt;/B&gt; might be described as receiving the wealth and then using it for your own needs.For example, every object can print itself in an ASCII format. The class Object guarantees this because it supplies a default method called &lt;B&gt;#printOn:&lt;/B&gt;. The default is rather dumb. It simply prints the name of the object''s class preceded by &lt;B&gt;a&lt;/B&gt; or &lt;B&gt;an&lt;/B&gt;. Look at &lt;B&gt;Example #1&lt;/B&gt; in the workspace.&lt;B&gt;Polymorphism&lt;/B&gt; is the ability of an object to respond in a customized way to a standard message. In &lt;B&gt;Example #2&lt;/B&gt; you see that a &lt;B&gt;Date object&lt;/B&gt; and a &lt;B&gt;Time object&lt;/B&gt; print themselves in very different ways, even though they receive the same message.  In this case, they both receive the #printOn: message when you choose &lt;B&gt;print it&lt;/B&gt; with the mouse.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'&lt;B&gt;Polymorphism&lt;/B&gt; is a central concept in object-oriented design, no matter which language you work with.Polymorphism allows you to write less complex code.Polymorphism is the idea that when you send a message to an object, the object itself decides &lt;B&gt;how&lt;/B&gt; it will fulfill your request.'  asText boldHtmlTags.</body></methods><methods><class-id>B04_Classes_05</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>B04_Classes_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^ 'Polymorphism '.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B04_Classes #B04_Classes_05)</body></methods><methods><class-id>E03_Numbers_05</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample	"&gt; remove comment lines and ^nil to activate this code		| code |		code := StepCode new.		code methodCode:  'example01	^ self '.		^code.	&lt;"	^ nil</body></methods><methods><class-id>E03_Numbers_05</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Float and Double '</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E03_Numbers #E03_Numbers_05)</body></methods><methods><class-id>E03_Numbers_05</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;Float&lt;/B&gt; literals are just the number itself.&lt;B&gt;1.234 	-4444.234&lt;/B&gt;Floats can be in exponent notation, i.e.:&lt;B&gt;3.0e110.3e10-10.3e20&lt;/B&gt;Floats can also be written in other bases (radixes).  Prefix the number with the base, as follows:&lt;B&gt;10r9118r76716rFFF16r1002r1036rSMALLTALK&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;Float&lt;/B&gt; and class &lt;B&gt;Double&lt;/B&gt;.'  asText boldHtmlTags.</body></methods><methods><class-id>B03_Output</class-id> <category>info</category><body package="SLesson Intro Content">browserClass	^LessonBrowser_02</body><body package="SLesson Intro Content">description	^'Discover simple ways to provide input and get output from your Smalltalk code.' .</body><body package="SLesson Intro Content">displayString	^'Input-Output'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output nil)</body></methods><methods><class-id>A01_Setup_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'VISUALWORKS Home'</body><body package="SLesson Intro Content">sortArray	^#(#A00_Intro #A01_Setup #A01_Setup_01)</body></methods><methods><class-id>A01_Setup_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'Use the &lt;B&gt;Launcher&lt;/B&gt; window to open the VisualWorks environment settings. The Launcher is the small window appearing on the top left of your screen. It has a menu, and a toolbar with icons on it.&lt;B&gt;1.&lt;/B&gt;	In the Launcher, click on the &lt;B&gt;System&lt;/B&gt; menu, and pick &lt;B&gt;Settings&lt;/B&gt;. The &lt;B&gt;Settings Window&lt;/B&gt; should open.&lt;B&gt;2.&lt;/B&gt;	Select the &lt;B&gt;System&lt;/B&gt; item in the Settings window. This displays the current VisualWorks home directory path in the right-hand side of the Settings window.The VisualWorks home directory is the main directory where you installed VisualWorks on your system. Sub-directories of this directory include: &lt;B&gt;image&lt;/B&gt;, &lt;B&gt;parcels&lt;/B&gt;, and &lt;B&gt;bin&lt;/B&gt;.&lt;B&gt;3.&lt;/B&gt;	Confirm that this directory is correct -- it should match the directory you chose during installation.For example, under Windows, the directory might be set to: &lt;B&gt;C:\vwnc7.1&lt;/B&gt;.This directory is normally pre-set by the VisualWorks installer. If you need to change it, either enter the path in the input field, or use &lt;B&gt;Browse...&lt;/B&gt; to locate the target directory.&lt;B&gt;4.&lt;/B&gt;	If you are using UNIX, you should also set the environment variable VISUALWORKS in your .cshrc or .profile file.&lt;B&gt;5.&lt;/B&gt;	Click on &lt;B&gt;OK&lt;/B&gt; to close the Settings window.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the steps to set up the VisualWorks environment.(1) Set the VISUALWORKS home directory'  asText boldHtmlTags.</body></methods><methods><class-id>B05_MoreConcepts_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'To see a primitive:(1) Select &lt;B&gt;Object&lt;/B&gt; in the class browser below.(2) Select the &lt;B&gt;Instance Methods&lt;/B&gt; radio button.(3) Select the method &lt;B&gt;# ==&lt;/B&gt;.(4) Look at the source code.	&lt;primitive: 110&gt;That all there is. At this point, VisualWorks transfers control to the virtual machine. The behavior of #== is implemented there.Since primitives are platform-specific, you can safely ignore them.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about &lt;B&gt;primitive methods&lt;/B&gt;.A &lt;B&gt;primitive method&lt;/B&gt; is the means by which the image sends a message to the virtual machine. These are usually in very low-level methods.Primitives use a separate syntax that is distinct from regular Smalltalk code. Fortunately, you''ll probably never need to write a primitive. Primitives are an advanced topic, which we won''t address here.If you encounter a method with a primitive, you can safely ignore it.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>B05_MoreConcepts_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'&lt;primitive: 123&gt;'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B05_MoreConcepts #B05_MoreConcepts_04)</body></methods><methods><class-id>B01_Basics_06</class-id> <category>info</category><body package="SLesson Intro Content">displayString   ^ 'Order of Evaluation'.</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B01_Basics #B01_Basics_06)</body></methods><methods><class-id>B01_Basics_06</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'When a method is evaluated, it always returns an object. This allows you to combine messages, forming more complex statements.Since there are often multiple message sends in a single statement, we are prompted to ask: in which order in which they are executed?Here are the six rules. (The next step shows examples).* All rules are applied &lt;B&gt;left to right&lt;/B&gt; with no exceptions.  The rules are applied from #1 to #6, in that order."&lt;B&gt;(1) Messages in parenthesis.&lt;/B&gt;"  	&lt;B&gt;1 + 2 * 3.&lt;/B&gt; 		" =  9 "	&lt;B&gt;1 + (2 * 3).&lt;/B&gt;		" =  7 ""&lt;B&gt;(2) Unary messages.&lt;/B&gt;"			''Amadeus'' reverse.	''chocolate!'' asUppercase.	''red dwarf'' size."&lt;B&gt;(3) Binary messages.&lt;/B&gt;"	3 * 4.	3 &lt;=  6.	''first string'' , ''second string''."&lt;B&gt;(4) Keyword messages.&lt;/B&gt;"	300 min:  500.	300 max: 500.	Point x:  300 y: 500.	300 between: 50 and: 1000."&lt;B&gt;(5) Assignment to a variable.&lt;/B&gt;" 	| temp |   	temp := 500."&lt;B&gt;(6) Return from the method.&lt;/B&gt;"	^ true.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn the order of evaluation in a Smalltalk expression.Evaluation, from left to right:(1) &lt;B&gt;Parenthesis&lt;/B&gt; ( jobs size)(2) &lt;B&gt;Unary&lt;/B&gt;		''asdf'' size.(3) &lt;B&gt;Binary&lt;/B&gt;		2 +9.(4) &lt;B&gt;Keyword	&lt;/B&gt; ''asdf'' add: $r.(5) &lt;B&gt;Assignment&lt;/B&gt; a := 5.(6) &lt;B&gt;Return&lt;/B&gt;		^ true.There are six rules, provided here for completeness. The last two rules may not be clear until a later step or lesson. These will be explored in due course.'  asText boldHtmlTags.</body></methods><methods><class-id>B03_Output_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Stage Two Lesson Browser.'</body><body package="SLesson Intro Content">sortArray 		^#(#B00_Fundamentals #B03_Output #B03_Output_01)</body></methods><methods><class-id>B03_Output_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'As these lessons advance, the Lesson Browser window will include more tools for you to use.We have now moved to the Stage Two Lesson Browser. You will notice the addition of a new pane below, called the &lt;B&gt;MyTranscript&lt;/B&gt; pane. This is a read only area, but our local Smalltalk code can write to it by sending messages. To see how this works, select the line below and &lt;B&gt;Do it&lt;/B&gt;.&lt;B&gt;MyTranscript show: ''Go Smalltalk!''&lt;/B&gt;All the other parts of this browser are just like those of the previous browser, the Stage One Lesson Browser.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Introduce the new parts of the Stage Two Lesson Browser.'  asText boldHtmlTags.</body></methods><methods><class-id>F03_Streams_02</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F03_Streams_02</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'This example uses a stream to remove all the vowels from the input string. Select the code and then &lt;B&gt;do it&lt;/B&gt;:&lt;B&gt;| read output input |output := String new.input := ''Extreme Programming Explained by Kent Beck''.read := ReadStream on: input.[read atEnd]	whileFalse:		[ | aChar | 		aChar := read next.		aChar isVowel 			ifFalse: [output := output copyWith: aChar ]].MyTranscript show: output; cr.&lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;ReadStream&lt;/B&gt;, which can be used to read objects sequentially.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F03_Streams_02</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'ReadStream'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F03_Streams #F03_Streams_02)</body></methods><methods><class-id>E02_Strings_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'The following shows how to extract an element from a string. Select the code below and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;''Liberty, Equality, Fraternity''  at: 1&lt;/B&gt;To copy a string, send it #copy. Select the code below and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;''ABC'' copy.&lt;/B&gt;Or you can copy a part of a string. Select the code below and &lt;B&gt;Print it&lt;/B&gt;.&lt;B&gt;''Liberty, Equality, Fraternity''  copyFrom: 10 to: 17.&lt;/B&gt;To find the index of a character:&lt;B&gt;''Liberty, Equality, Fraternity''  indexOf: $E.&lt;/B&gt;To find out how long a String is:&lt;B&gt;''123456789'' size.&lt;/B&gt;To compare two different strings:&lt;B&gt;''ABC'' &lt; ''abc''''abc'' &lt; ''ABC''''ABC'' = ''abc''&lt;/B&gt;To find the location of a substring:&lt;B&gt;''Now is the time for all good men to ...''   findString: '' thedd''   startingAt: 1   "start at beginning"  ifAbsent: [ 0 ]. "return zero"&lt;/B&gt;To concatenate several Strings, use the "," (comma) message:&lt;B&gt;''abc'' , ''def'' &lt;/B&gt;'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Strings are often specified as literals. A string literal is characters surrounded by &lt;B&gt;single-quotes&lt;/B&gt;.''Liberty, Equality, Fraternity''The elements of a string are instances of the class Character. Note that &lt;B&gt;the index of the first element is always 1&lt;/B&gt;. This is different from languages like ''C'', where indexes start with 0.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about class &lt;B&gt;String&lt;/B&gt;, and its close relative, class &lt;B&gt;Symbol&lt;/B&gt;.In this step, we''ll begin with class String.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Strings are used to manage collections of Characters.'  asText boldAllQuotes.</body></methods><methods><class-id>E02_Strings_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'String Basics'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E02_Strings #E02_Strings_01)</body></methods><methods><class-id>E00_LibraryOne</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Class Library 1'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne nil nil)</body></methods><methods><class-id>E04_Blocks</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description   ^ 'What are code blocks and how are they used in Smalltalk?'.</body><body package="SLesson Intro Content">displayString	^'Code Blocks'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E04_Blocks nil)</body></methods><methods><class-id>E04_Blocks</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList    |revealList|    revealList :=  super revealList.    revealList at: 'BlockClosure' put: #(  value value: value:value:  ).    ^revealList.</body></methods><methods><class-id>E01_TheLibrary</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_01.</body><body package="SLesson Intro Content">description	^'Take a short tour of the Smalltalk class library'</body><body package="SLesson Intro Content">displayString	^'The Smalltalk Class Library '</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E01_TheLibrary nil)</body></methods><methods><class-id>E01_TheLibrary</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList    |revealList|    revealList :=  super revealList.    revealList at: 'Date class' put: #( #today).    revealList at: 'Date' put: #( #addDays:).    ^revealList.</body></methods><methods><class-id>E02_Strings</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description   ^ 'Learn about the String class and how to use it in your own projects.'.</body><body package="SLesson Intro Content">displayString	^'Strings '</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E02_Strings nil)</body></methods><methods><class-id>E02_Strings</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList    |revealList|    revealList :=  super revealList.    revealList at: 'String class' put: #( ).    revealList at: 'String' put: #( #at: #copy #copyFrom:to: #indexOf: #&lt; #size #findString:startingAt:ifAbsent: #,  #= #==).    revealList at: 'Symbol' put: #( #copy ).    ^revealList.</body></methods><methods><class-id>E03_Numbers</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description   ^ 'Learn about the Number class hierarchy and how to use numbers in your Smalltalk code.'.</body><body package="SLesson Intro Content">displayString	^'Numbers '</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E03_Numbers nil)</body></methods><methods><class-id>E03_Numbers</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList    |revealList|    revealList :=  super revealList.    revealList at: 'Float' put: #( + - * =  ==).    revealList at: 'Double' put: #( + -  * = ==).    revealList at: 'Point' put: #( + -  * = == theta r x x: y y: ).    revealList at: 'Point class' put: #(  r:theta:   x:y: ).    revealList at: 'ArithmeticValue' put: #( + - * / =  ).     revealList at: 'Integer' put: #( + - * = == asDouble asInteger asCharacter ).    revealList at: 'Number' put: #(  + - * = = even odd cos log **  negated  negative @ ).    revealList at: 'Magnitude' put: #( &lt; = &lt;= &gt; min: max: ).    revealList at: 'Fraction' put: #( * + - / numerator denominator reciprocal ).    ^revealList.</body></methods><methods><class-id>F03_Streams_04</class-id> <category>step code</category><body package="SLesson Intro Content">codeExample"&gt; remove comment lines and ^nil to activate this code 	| code |	code := StepCode new.	code methodCode:  'example01	^ self '.	^code.&lt;"	^ nil</body></methods><methods><class-id>F03_Streams_04</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'&lt;B&gt;PositionableStream&lt;/B&gt; is an abstract superclass that provides features to both ReadStream and WriteStreamSince PositionableStream is an abstract class, we won''t show any examples of its use.To see its behavior and find some useful protocol, look through the methods in the class browser below.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^''  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about the abstract class &lt;B&gt;PositionalStream&lt;/B&gt;.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^''  asText boldHtmlTags.</body></methods><methods><class-id>F03_Streams_04</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'PositionalStream'</body><body package="SLesson Intro Content">sortArray 		^#(#F00_LibraryTwo #F03_Streams #F03_Streams_04)</body></methods><methods><class-id>E04_Blocks_01</class-id> <category>info</category><body package="SLesson Intro Content">displayString	^'Overview of Blocks'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E04_Blocks #E04_Blocks_01)</body></methods><methods><class-id>E04_Blocks_01</class-id> <category>step content</category><body package="SLesson Intro Content">defaultWorkspaceText^'(...continued from the &lt;B&gt;How&lt;/B&gt; tab)A block can hold multiple statements too. The period at the end of the last statement inside the block is optional.&lt;B&gt;[ MyTranscript show: ''I''''m a square block''.  MyTranscript show: ''I''''m a square block''.  MyTranscript show: ''I''''m a square block'' ].&lt;/B&gt;The recommended style when formatting a block is to make it look square. Programmers with a background in ''C''-style languages often open or close a block on its own line.&lt;B&gt;[ 	MyTranscript show: ''I''''m an ugly block''.]&lt;/B&gt;Smalltalk pros know that blocks are square.&lt;B&gt;[ MyTranscript show: ''I''''m a pro''''s block''.]&lt;/B&gt;Square blocks help make it clear that blocks are objects.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">how^'Blocks are code statements that can be defined apart from a class. Interestingly, Blocks are also objects. In its simplest form, a Block is a Smalltalk statement surrounded by square brackets.  &lt;B&gt;[ MyTranscript show: ''I''''m in a block'' ].&lt;/B&gt;In the next few steps we shall discuss variations of this form.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">what^'Learn about Smalltalk Blocks.'  asText boldHtmlTags.</body><body package="SLesson Intro Content">why^'Blocks are a very flexible and powerful feature of Smalltalk. They are used in flow and control messages that we''ll learn shortly.'  asText boldHtmlTags.</body></methods><methods><class-id>E05_ControlStructs</class-id> <category>info</category><body package="SLesson Intro Content">browserClass   ^LessonBrowser_04.</body><body package="SLesson Intro Content">description   ^ 'Learn how Smalltalk handles &lt;B&gt;branching&lt;/B&gt; and &lt;B&gt;looping&lt;/B&gt; in programs and how these constructs are built into the libraries.' asText boldHtmlTags.</body><body package="SLesson Intro Content">displayString	^'Branches and Loops'</body><body package="SLesson Intro Content">sortArray 		^#(#E00_LibraryOne #E05_ControlStructs nil)</body></methods><methods><class-id>E05_ControlStructs</class-id> <category>step reveal</category><body package="SLesson Intro Content">revealList    |revealList|    revealList :=  super revealList.    revealList at: 'True' put: #( not &amp; | and: or: ifTrue: ifFalse: #ifTrue:ifFalse:  #ifFalse:ifTrue:).    revealList at: 'False' put: #( not &amp; | and: or: #ifTrue: #ifFalse: ).    revealList at: 'BlockClosure' put: #( whileTrue: whileFalse: ).    revealList at: 'Boolean' put: #( not &amp; | and: or: #ifTrue: #ifFalse: ).    revealList at: 'Integer' put: #( timesRepeat: #to:do: ).    ^revealList.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>LessonModel</name><environment>Smalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentStepVH stepsList codeForAllSteps lastStepName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonStep</name><environment>Smalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>workspaceText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class></st-source>