<?xml version="1.0"?><st-source><!-- Name: SLesson BaseNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.Comment: The Lesson Browser is a tool that provides an interactive walkthrough for a new Smalltalk developer. It explains, in a step-by-step fashion, how to get started with VisualWorks and Smalltalk. A langauge tutorial is provided for novices, and a brief introduction to the VisualWorks class library is offered.This version is compatible with VisualWorks 7.x. For more information on installing and starting with VisualWorks, refer to the VisualWorks Installation Guide, and the VisualWorks Application Developer's Guide, located in the /doc subdirectory of the VisualWorks installation.DbIdentifier: bear73DbTrace: 33622DevelopmentPrerequisites: #(#(#package 'SLesson Tests PreLoad' ''))PackageName: SLesson BaseParcel: #('SLesson Base')ParcelName: SLesson BasePrerequisiteParcels: #(#('SLesson Tests PreLoad' ''))PrintStringCache: (0.8.12,bobw)Version: 7.2Date: 1:31:42 pm October 20, 2003 --><time-stamp>From VisualWorks®, 7.2 of October 20, 2003 on October 20, 2003 at 1:31:42 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>LessonModel</name><environment>Smalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentStepVH stepsList codeForAllSteps lastStepName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>SelectionInListWithDisplay</name><environment>Smalltalk</environment><super>UI.SelectionInList</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listObjects displaySelector objectsWithDisplay </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonStep</name><environment>Smalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>workspaceText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonBuilder</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doBrowse </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonRunnerState</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edit topicIndex lessonIndex displayBox </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>ReadOnlyBrowserPanel</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>methodListSIL methodModeVH classListSIL methodSourceVH lesson </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>StepCode</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>className parentName methodCode protocolName isClassMethod currentPackage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonRunner</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description lessonSIL topicSIL state </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonTextCollector</name><environment>Smalltalk</environment><super>UI.TextCollector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonBrowserBase</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lessonVH myTranscript isLessonRunnerEdit lessonRunnerState </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonStepsBrowser</name><environment>Smalltalk</environment><super>LessonBrowserBase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedStepVH workspaceTextSC howSC whatSC </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonBrowserWithNotebook</name><environment>Smalltalk</environment><super>LessonStepsBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>labelsSelectionInList pageTextEditorHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonBrowser_01</name><environment>Smalltalk</environment><super>LessonStepsBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonBrowser_03</name><environment>Smalltalk</environment><super>LessonBrowserWithNotebook</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonBrowser_04</name><environment>Smalltalk</environment><super>LessonBrowserWithNotebook</super><private>false</private><indexed-type>none</indexed-type><inst-vars>theReadOnlyBrowser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>StepEditor</name><environment>Smalltalk</environment><super>LessonStepsBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dynamicLabelsSIL textEditorVH </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><class><name>LessonBrowser_02</name><environment>Smalltalk</environment><super>LessonStepsBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SLesson Base</category><attributes><package>SLesson Base</package></attributes></class><methods><class-id>LessonModel</class-id> <category>access</category><body package="SLesson Base">allVisibileClasses	| classes |	classes := Object allSubclasses.	classes add: Object.	^classes</body><body package="SLesson Base">classMethodNamesFor: aClass 	| list selectors |	aClass isNil ifTrue: [^ OrderedCollection new].	list := self revealList at: aClass class printString ifAbsent: [ OrderedCollection new ].	selectors := aClass class allSelectors select: [:each | list includes: each].	^selectors asSortedCollection</body><body package="SLesson Base">classNames		| list classes |	list := self revealList.	classes := self allVisibileClasses.	classes := classes select: [:each | list includesKey: each name asString].	classes := classes collect: 					[:each | 					| aClass |					aClass := each isMeta ifFalse: [each] ifTrue: [each soleInstance].					aClass name asString].	^classes asSet asSortedCollection</body><body package="SLesson Base">instMethodNamesFor: aClass 	| list selectors |  	aClass isNil ifTrue: [^ OrderedCollection new].	list := self revealList at: aClass printString  ifAbsent: [ OrderedCollection new ].	selectors := aClass allSelectors select: [:each | list includes: each].	^selectors asSortedCollection</body><body package="SLesson Base">lastStepName	^lastStepName isNil		ifFalse: [ lastStepName ]		ifTrue: [ nil class name ].</body></methods><methods><class-id>LessonModel</class-id> <category>info</category><body package="SLesson Base">isClassAStep: aClass 	^(aClass canUnderstand: #lessonSymbol )		ifFalse: [false]		ifTrue: [ self lessonSymbol = aClass new  lessonSymbol ].</body><body package="SLesson Base">lessonSymbol	^self sortArray at: 2.</body><body package="SLesson Base">lookupClass: aSymbol	^self class lookupClass: aSymbol.</body><body package="SLesson Base">selectorsInStepCode	self  currentStep isNil		ifTrue: [ ^ OrderedCollection new ].	^ 	self  currentStep selectorsInStepCode.</body><body package="SLesson Base">selectorsInStepContent	self  currentStep isNil		ifTrue: [ ^ OrderedCollection new ].	^ 	self  currentStep selectorsInStepContent.</body><body package="SLesson Base">sortKey	^self sortArray printString.</body><body package="SLesson Base">stepNames	^self stepObjects collect: [:each | each class  printString]</body><body package="SLesson Base">stepObjects 	stepsList isNil ifFalse: [^stepsList].	stepsList := LessonStep allSubclasses 				select: [:each | self isClassAStep: each].	stepsList := stepsList asSortedCollection: [:x :y | x new sortKey  &lt; y new sortKey ].	stepsList := stepsList collect: [:eachClass | eachClass new].	^stepsList</body><body package="SLesson Base">stepSymbol	^self sortArray at: 3.</body><body package="SLesson Base">topicSymbol	^self sortArray at: 1.</body></methods><methods><class-id>LessonModel</class-id> <category>code loading</category><body package="SLesson Base">adjustLoadedCode	"&gt; adjust the loaded code to the current step. &lt;"	| codeOpAndBundles operation codeSteps |	self hasCodeToLoad ifFalse: [^self].	codeOpAndBundles := self codeBetweenCurrentAndPrev.	operation := codeOpAndBundles key.	codeSteps := codeOpAndBundles value.	codeSteps do: [:each | self performABundle: each with: operation].</body><body package="SLesson Base">allLoadedCode	| currentIndex delta start |	self hasCodeToLoad  ifFalse: [ ^ OrderedCollection new].	 	currentIndex := self currentStepIndex.	start := currentIndex.	start =0 ifTrue: [ start := 1].	delta := self codeForAllSteps copyFrom: 1 to: start.	^delta.</body><body package="SLesson Base">codeBetweenCurrentAndPrev	| currentIndex previousIndex difference operation delta start stop |	currentIndex := self currentStepIndex.	previousIndex := self previousStepIndex.	difference := currentIndex - previousIndex.	difference &gt; 0 		ifTrue: 			[operation := #loadCode.			start := previousIndex + 1.			stop := currentIndex]		ifFalse: 			[operation := #removeCode.			start := currentIndex + 1.			stop := previousIndex].	start = 0 ifTrue: [start := 1].	stop = 0 ifTrue: [stop := 1].	delta := self codeForAllSteps copyFrom: start to: stop.	difference &lt; 0 ifTrue: [delta := delta reverse].	^operation -&gt; delta</body><body package="SLesson Base">codeForAllSteps		codeForAllSteps isNil			ifFalse: [ ^ codeForAllSteps].	codeForAllSteps := 	self stepObjects collect: [ :each | each codeBundle ].	^ codeForAllSteps.</body><body package="SLesson Base">codeForAllStepsInOneList	| oneList |		oneList := OrderedCollection new.	self stepObjects do:  [ :each | oneList addAll: each codeBundle value ].	^ oneList</body><body package="SLesson Base">currentStepIndex	^self codeForAllSteps 		findFirst: [:each | each key = self currentStep class name]</body><body package="SLesson Base">defaultTestClassName	^(self class name, 'Test') asSymbol .</body><body package="SLesson Base">hasCodeToLoad	| realCode |	realCode := self codeForAllSteps select: [ :each |						each value isEmpty  not].	^realCode isEmpty not.</body><body package="SLesson Base">performABundle: anAssociation with: anOperation	anAssociation value do: [ :eachCodeStep |		eachCodeStep perform:  anOperation ].</body><body package="SLesson Base">previousStepIndex	^self codeForAllSteps findFirst: [:each | each key = self lastStepName]</body><body package="SLesson Base">removeAllLoadedCode	self allLoadedCode reverse do: [ :each | self performABundle: each with: #removeCode ].</body><body package="SLesson Base">revealList	| tab codeSteps |		tab :=Dictionary  new.	codeSteps := self codeForAllStepsInOneList.	codeSteps do: [ :each | each addToRevealList: tab. ].	^tab.</body></methods><methods><class-id>LessonModel</class-id> <category>printing</category><body package="SLesson Base">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (', self displayString , ')'.</body></methods><methods><class-id>LessonModel</class-id> <category>step support</category><body package="SLesson Base">what	^self currentStep what</body><body package="SLesson Base">workspaceText	^self currentStep workspaceText</body><body package="SLesson Base">workspaceText: aString	self currentStep workspaceText: aString.	self changed: #workspaceText.</body></methods><methods><class-id>LessonModel</class-id> <category>subclassResponsibility</category><body package="SLesson Base">browserClass	self subclassResponsibility.</body><body package="SLesson Base">description	self subclassResponsibility.</body><body package="SLesson Base">displayString	self subclassResponsibility.</body></methods><methods><class-id>LessonModel</class-id> <category>open close</category><body package="SLesson Base">initialize	"&gt; no-op &lt;"</body><body package="SLesson Base">open	^self browserClass openWith: self.</body></methods><methods><class-id>LessonModel</class-id> <category>aspects</category><body package="SLesson Base">currentStep	^ self currentStepVH value.</body><body package="SLesson Base">currentStep: aStep 	 	self release.	lastStepName := self currentStep class name.	self currentStepVH value: aStep</body><body package="SLesson Base">currentStepVH	| aStep |	currentStepVH isNil ifFalse: [^currentStepVH].	currentStepVH := nil asValue.	currentStepVH onChangeSend: #currentStepChanged to: self.	self stepObjects isEmpty 		ifFalse: 			[aStep := self stepObjects first.			currentStepVH value: aStep].	^currentStepVH</body></methods><methods><class-id>LessonModel</class-id> <category>update</category><body package="SLesson Base">currentStepChanged	self adjustLoadedCode.</body></methods><methods><class-id>LessonModel class</class-id> <category>info</category><body package="SLesson Base">loadedLessons: aTrack	| lessons |	lessons := aTrack class subclasses asSortedCollection: [  :x :y | x new sortKey &lt; y new sortKey  ].	lessons := lessons collect: [ :eachClass | eachClass new ].	^lessons.</body><body package="SLesson Base">loadedTopics	| tracks |	tracks := self subclasses 				asSortedCollection: [:x :y | x new sortKey  &lt; y new sortKey ].	tracks := tracks collect: [:eachClass | eachClass new].	^tracks</body><body package="SLesson Base">lookupClass: aSymbol	^Smalltalk at: aSymbol		ifAbsent: 			[self error: 'Class: ' , aSymbol printString , ' not Found' ].</body></methods><methods><class-id>LessonModel class</class-id> <category>instance creation</category><body package="SLesson Base">new	^super new initialize.</body></methods><methods><class-id>SelectionInListWithDisplay</class-id> <category>private</category><body package="SLesson Base">displayStringFor: each 	^each perform: self displaySelector</body><body package="SLesson Base">objectsWithDisplayKeys	| keys |	keys := OrderedCollection new.	objectsWithDisplay	do: [ :each | keys add: each key ].	^ keys</body><body package="SLesson Base">objectsWithDisplayValues	| values |	values := OrderedCollection new.	objectsWithDisplay	do: [ :each | values add: each value ].	^ values</body><body package="SLesson Base">objectWithKey: aKey	| keys index |	keys := self objectsWithDisplayKeys.	index := keys indexOf: aKey.	^ self objectsWithDisplayValues at: index .</body></methods><methods><class-id>SelectionInListWithDisplay</class-id> <category>selection in list</category><body package="SLesson Base">displaySelector	displaySelector isNil		ifTrue: [  displaySelector := #displayString ].	^ displaySelector.</body><body package="SLesson Base">displaySelector: aSelector	displaySelector := aSelector.	"&gt; redisplay with new selector &lt;"	self listObjects: self listObjects.</body><body package="SLesson Base">listObjects	^self objectsWithDisplayValues.</body><body package="SLesson Base">listObjects: aSequenceableCollection 	listObjects := aSequenceableCollection.	objectsWithDisplay := OrderedCollection new.	listObjects do: [:each |			objectsWithDisplay  add: (self displayStringFor: each) -&gt; each ].	self list: self objectsWithDisplayKeys.</body><body package="SLesson Base">selectionObject	self selection isNil		ifTrue: [ ^ nil ].	^ self objectWithKey: self selection.</body></methods><methods><class-id>LessonStep</class-id> <category>info</category><body package="SLesson Base">displayString	^self class name.</body><body package="SLesson Base">isPageBlank: aSymbol	| content |	(self respondsTo: aSymbol) 		ifFalse: [ ^true ].			content := self  perform: aSymbol.	content := content copyWithout: Character space.	content := content copyWithout: $\.	content := content copyWithout: Character cr.	^content isEmpty.</body><body package="SLesson Base">lessonSymbol	^self sortArray at: 2.</body><body package="SLesson Base">selectorsInStepContent	| selects |	selects := self  class organization 				listAtCategoryNamed: 'step content' asSymbol.	^selects asOrderedCollection.</body><body package="SLesson Base">sortKey	^self sortArray printString.</body><body package="SLesson Base">stepSymbol	^self sortArray at: 3.</body><body package="SLesson Base">topicSymbol	^self sortArray at: 1.</body></methods><methods><class-id>LessonStep</class-id> <category>step content</category><body package="SLesson Base">defaultWorkspaceText	^ String new.</body><body package="SLesson Base">what: aThrowAwayString</body><body package="SLesson Base">workspaceText		^  workspaceText value</body><body package="SLesson Base">workspaceText: aString	"&gt; keep worskspace changes during current lesson &lt;"	workspaceText value: aString.	^self</body></methods><methods><class-id>LessonStep</class-id> <category>code loading</category><body package="SLesson Base">codeBundle	| bundle  list | 	list := OrderedCollection new.	self selectorsInStepCode do: [ :each |  list add: (self perform: each)].	list := list removeAllSuchThat: [ :each | each ~= nil ].	bundle := ( self class name ) -&gt;list.	^bundle.</body><body package="SLesson Base">lessonTestClassName	| name |	name := self class name.	name := name copyFrom: 1 to: ( name size -3).	^ name, 'Test'.</body><body package="SLesson Base">selectorsInStepCode	| selects |	selects := self  class organization 				listAtCategoryNamed: 'step code' asSymbol.	^ selects asOrderedCollection.</body></methods><methods><class-id>LessonStep</class-id> <category>printing</category><body package="SLesson Base">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (', self displayString , ')'.</body></methods><methods><class-id>LessonStep</class-id> <category>instance creation</category><body package="SLesson Base">initialize	workspaceText := self defaultWorkspaceText asValue.	^self</body></methods><methods><class-id>LessonStep class</class-id> <category>instance creation</category><body package="SLesson Base">new	^super new initialize</body></methods><methods><class-id>LessonBuilder</class-id> <category>flags</category><body package="SLesson Base">browseOff	self doBrowse:  false.</body><body package="SLesson Base">doBrowse	^ doBrowse isNil 		ifTrue: [ true  ]		ifFalse: [ doBrowse ].</body><body package="SLesson Base">doBrowse: aBoolean	doBrowse := aBoolean</body></methods><methods><class-id>LessonBuilder</class-id> <category>info</category><body package="SLesson Base">nextFreeLetter	| lettersInUse  |	lettersInUse := LessonModel loadedTopics 						collect: [ :each | each class name at: 1 ].	lettersInUse := lettersInUse asSet asSortedCollection.	lettersInUse last = $Z		ifTrue: [ 	lettersInUse removeLast. ].	^ Character digitValue: (lettersInUse last digitValue) +1.</body></methods><methods><class-id>LessonBuilder</class-id> <category>build classes</category><body package="SLesson Base">buildNextVaildLessonName: aTopic	| rest firstLetter lessonNumber aLessonNameString |	lessonNumber := self pad2digits: aTopic subclasses size + 1.	firstLetter := String with: (aTopic name asString at: 1).	rest := aTopic name asString copyFrom: 4 to: aTopic name asString size.	aLessonNameString := firstLetter , lessonNumber , rest.	^aLessonNameString</body><body package="SLesson Base">makeLesson: aLessonNameString forTopic: topicClass 	| lessonClass |	lessonClass := topicClass 				subclass: aLessonNameString asSymbol				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'SLesson Intro Content'.	self makeSortKeyFor: lessonClass  			topic: topicClass name asSymbol  			lesson: aLessonNameString asSymbol			step: nil.	self makeDescriptionFor: lessonClass.	self makeDisplayStringFor: lessonClass.	self makeBrowserClassFor: lessonClass.	self makeRevealListFor: lessonClass.	self makeStepFor: lessonClass.	self doBrowse ifTrue: [lessonClass browse].	^lessonClass</body><body package="SLesson Base">makeStepFor: lessonClass 	| stepClass stepName stepNumber |	stepNumber := self pad2digits: lessonClass new stepObjects size + 1.	stepName := lessonClass name , '_' , stepNumber.	stepClass := LessonStep 				subclass: stepName asSymbol				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'SLesson Intro Content'.	self makeDisplayStringFor: stepClass.	self makeHowWhatWhyFor: stepClass.	self makeWorkspaceFor: stepClass.	self makeCodeExampleFor: stepClass.	self makeSortKeyFor: stepClass  			topic: lessonClass new topicSymbol  			lesson: lessonClass name asSymbol 			step: stepName asSymbol.	self doBrowse ifTrue: [stepClass browse].	^stepClass</body><body package="SLesson Base">makeTopicClass: aTopicNameString 	| topicClass |	topicClass := LessonModel 				subclass: aTopicNameString asSymbol				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'SLesson Intro Content'.	self makeSortKeyFor: topicClass topic: aTopicNameString asSymbol lesson: nil  step: nil.	self makeDisplayStringFor: topicClass.	self doBrowse ifTrue: [topicClass browse].	^topicClass</body><body package="SLesson Base">pad2digits: aStepNumber	| aStream |	aStream := WriteStream on: String new.	aStepNumber printOn: aStream paddedWith: $0 to: 2 base: 10.	^aStream contents.</body></methods><methods><class-id>LessonBuilder</class-id> <category>build methods</category><body package="SLesson Base">initialize</body><body package="SLesson Base">makeBrowserClassFor: aClass 	aClass compile: ('browserClass\   ^LessonBrowser_04.') withCRs				classified: 'info'.</body><body package="SLesson Base">makeCodeExampleFor: aClass 	| code |	code := 	 	('codeExample\',		'"&gt; remove comment lines and ^nil to activate this code \',		'	| code |\',		'	code := StepCode new.\',		'	code methodCode:  ''example01	^ self ''.\',		'	^code.\',		'&lt;"\',		'	^ nil ' ) withCRs.	aClass compile: code classified: 'step code'.</body><body package="SLesson Base">makeDescriptionFor: aClass 	aClass compile: ('description\   ^ ''' , aClass name , '''.') withCRs			classified: 'info'.</body><body package="SLesson Base">makeDisplayStringFor: aClass 	aClass compile: ('displayString\   ^ '' ', aClass name , ' ''.') withCRs		classified: 'info'.</body><body package="SLesson Base">makeHowWhatWhyFor: aClass 	| classification |	classification :=  'step content'.	aClass compile: ('how\   ^''&lt;B&gt;HOW&lt;/B&gt; text for: ',  aClass name, ' ''  asText boldHtmlTags.') withCRs			classified: classification.	aClass compile: ('what\   ^''&lt;B&gt;WHAT&lt;/B&gt; text for: ',  aClass name, ' '' asText boldHtmlTags.') withCRs			classified: classification.	aClass compile: ('why\   ^''&lt;B&gt;WHY&lt;/B&gt; text for: ',  aClass name, ' '' asText boldHtmlTags.') withCRs			classified: classification.</body><body package="SLesson Base">makeRevealListFor: aClass 	| code |	code := 	 	('revealList\',		'    |revealList|\',		'    revealList :=  super revealList.\',		'    "&gt; classNameString and ArrayOfSelectors &lt;"\',      	'    revealList at: ''Date class'' put: #( #today). "&gt;example class method&lt;"\',		'    revealList at: ''Date'' put: #( #addDays:).	"&gt;example instance method&lt;"\',	 	'    ^revealList.' ) withCRs.	aClass compile: code classified: 'step reveal'.</body><body package="SLesson Base">makeSortKeyFor: aTargetClass  topic: aTopicSymbol lesson: aLessonSymbol  step: aStepSymbol	| key |	key := Array with: aTopicSymbol with: aLessonSymbol with: aStepSymbol.	aTargetClass 		compile: ('sortArray \\		^' withCRs , key printString)		classified: 'info'.</body><body package="SLesson Base">makeWorkspaceFor: aClass 	aClass compile: ('defaultWorkspaceText\  ^''WORKSPACE TEXT&lt;/B&gt; for: ',  aClass name, '''  \    withCRs asText boldHtmlTags. '  ) withCRs			classified: 'step content'.</body></methods><methods><class-id>LessonBuilder</class-id> <category>lesson templates</category><body package="SLesson Base">makeTopic: aTopicNameString lesson: aLessonNameString 	"&gt;	LessonBuilder new makeTopic: 'A002_Topic' lesson: 'A002_Lesson'	&lt;"	| topicClass |	topicClass := self makeTopicClass: aTopicNameString.	self makeLesson: aLessonNameString forTopic: topicClass</body></methods><methods><class-id>LessonBuilder class</class-id> <category>instance creation</category><body package="SLesson Base">new	^super new initialize.</body></methods><methods><class-id>LessonRunnerState</class-id> <category>accessing</category><body package="SLesson Base">displayBox	displayBox isNil 		ifTrue: [displayBox := Rectangle origin: 50 @ 210 corner: 400 @ 400].	^displayBox</body><body package="SLesson Base">displayBox: aRectangle 	displayBox := aRectangle</body><body package="SLesson Base">edit	^edit</body><body package="SLesson Base">edit: anObject	edit := anObject</body><body package="SLesson Base">initialize 	topicIndex := 1 .	lessonIndex := 1.	edit := false.</body><body package="SLesson Base">lessonIndex	^lessonIndex</body><body package="SLesson Base">lessonIndex: anObject	lessonIndex := anObject</body><body package="SLesson Base">topicIndex	^topicIndex</body><body package="SLesson Base">topicIndex: anObject	topicIndex = anObject		ifFalse: [ self lessonIndex: 1 ].	topicIndex := anObject</body></methods><methods><class-id>LessonRunnerState</class-id> <category>printing</category><body package="SLesson Base">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (edit:', edit printString, ' T#:', topicIndex printString, ' L#:', lessonIndex printString, ')'.	^aStream.</body></methods><methods><class-id>LessonRunnerState class</class-id> <category>create instance</category><body package="SLesson Base">new	^(super new) 		initialize; 		yourself.</body></methods><methods><class-id>ReadOnlyBrowserPanel</class-id> <category>accessing</category><body package="SLesson Base">lesson	^lesson</body><body package="SLesson Base">lesson: anObject	lesson := anObject</body></methods><methods><class-id>ReadOnlyBrowserPanel</class-id> <category>menu actions</category><body package="SLesson Base">browseOnMethod: aClass 	| selector |	selector := methodListSIL selection.	selector isNil 		ifFalse: 			[VWBaseAdaptor new 				browse: aClass				onMethod: selector				mode: self isClassMode]</body><body package="SLesson Base">browseSelectedClass	classListSIL selection isNil ifTrue: [ ^ self ].	self isDefinitionMode		ifTrue: [ self selectedClass browse]		ifFalse: [ self browseOnMethod:  self selectedClass ].	^self</body><body package="SLesson Base">showMethodSourceCode 	| aClass symbol source |	classListSIL selection isNil ifTrue: [ ^ self ].	aClass := self lesson  lookupClass: classListSIL selection.	symbol := methodListSIL selection.	source := ((aClass findSelector: symbol) at: 2)				 getSourceForUserIfNone: ['sorry -- this source is not accessable.'].	self methodSourceVH value:  source.</body></methods><methods><class-id>ReadOnlyBrowserPanel</class-id> <category>state</category><body package="SLesson Base">isClassMode	^methodModeVH value = #class</body><body package="SLesson Base">isDefinitionMode	^methodModeVH value = #definition</body><body package="SLesson Base">labelBasedOnMode	| label |	self isDefinitionMode		ifTrue: [^'Class definition for:   ' , self selectedClass name].	self selectedMethod isEmpty		ifTrue: [ ^ 'Nothing selected'].	label := 'Source code for:   ' , self selectedClass name , ' &gt;&gt; ' 				, self selectedMethod.	^label</body><body package="SLesson Base">selectedClass	| aClass |	classListSIL selection isNil ifTrue: [^nil].	aClass := self lesson lookupClass: classListSIL selection.	self isClassMode ifTrue: [aClass := aClass class].	^aClass</body><body package="SLesson Base">selectedMethod	| methodName  |	^ (methodName := methodListSIL selection) isNil		ifTrue: [ String new ]		ifFalse: [ methodName ].</body><body package="SLesson Base">sourceForClass: aClass selector: aSymbol 	| arrayClassAndMethod  compiledMethod |      arrayClassAndMethod := aClass findSelector: aSymbol. 	compiledMethod :=  arrayClassAndMethod at: 2.	^compiledMethod getSourceForUserIfNone: ['sorry -- this source is not accessable.']</body><body package="SLesson Base">theReadOnlyBrowser	^ ReadOnlyBrowserPanel new.</body></methods><methods><class-id>ReadOnlyBrowserPanel</class-id> <category>updating</category><body package="SLesson Base">classListChanged	self classListSIL selection isNil		ifTrue: [ self defaultClassListSelection ].	^self refreshMethodList</body><body package="SLesson Base">defaultClassListSelection 	self classListSIL list isEmpty		ifTrue: [ ^ self ].	self classListSIL selectionIndex: 1.</body><body package="SLesson Base">defaultMethodListSelection 	self methodListSIL list isEmpty		ifTrue: [ ^ self ].	self methodListSIL selectionIndex: 1.</body><body package="SLesson Base">methodListChanged	| aClass source |	(aClass := self selectedClass)  isNil			 ifTrue: [^self].	methodModeVH value = #definition 		ifTrue: [source := aClass definition]		ifFalse: 			[source := methodListSIL selection isNil 						ifTrue: [String new]						ifFalse: [self sourceForClass: aClass selector: methodListSIL selection]].	self methodSourceVH value: source.	self refreshSourcePanelLabel.	^self</body><body package="SLesson Base">methodModeChanged  	^self refreshMethodList.</body><body package="SLesson Base">methodNames: aClass 	^methodModeVH value = #class 		ifTrue: [self lesson classMethodNamesFor: aClass]		ifFalse: [self lesson instMethodNamesFor: aClass]</body><body package="SLesson Base">refreshClassList	self classListSIL list: self lesson classNames</body><body package="SLesson Base">refreshMethodList	| aSymbol aClass methodNames |	aSymbol := classListSIL selection.	methodModeVH value = #definition		ifTrue: [  aSymbol := nil].	aSymbol isNil 		ifTrue: [^self methodListSIL list: OrderedCollection new].	aClass := self lesson  lookupClass: aSymbol.	methodNames := self methodNames: aClass.	self methodListSIL list: methodNames.	self methodListSIL selection isNil		ifTrue: [ self defaultMethodListSelection. ].	^self</body><body package="SLesson Base">refreshSourcePanelLabel	| label |	label := self labelBasedOnMode.	(builder componentAt: #sourcePanelLabel) labelString: label</body></methods><methods><class-id>ReadOnlyBrowserPanel</class-id> <category>menu messages</category><body package="SLesson Base">classListMenu	| mb |	(mb := MenuBuilder new) add: 'browser class' -&gt; #browseSelectedClass.	^mb menu</body><body package="SLesson Base">learningMenu	| mb menu item |	(mb := MenuBuilder new) addEvaluation.	menu := mb menu.	item := menu menuItemWithValue: #inspect 				ifNone: [menu addItem: 'Inspect it' -&gt; #inspectIt].	item value: #inspectIt.	^menu</body><body package="SLesson Base">noMenu	^  MenuBuilder new menu.</body></methods><methods><class-id>ReadOnlyBrowserPanel</class-id> <category>aspects</category><body package="SLesson Base">classListSIL	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	classListSIL isNil		ifTrue:			[classListSIL := SelectionInList new.			classListSIL selectionIndexHolder onChangeSend: #classListChanged to: self.	].	^classListSIL.</body><body package="SLesson Base">methodListSIL	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	methodListSIL isNil		ifTrue:			[methodListSIL := SelectionInList new.			methodListSIL  selectionIndexHolder  onChangeSend: #methodListChanged to: self.].	^methodListSIL</body><body package="SLesson Base">methodModeVH	methodModeVH isNil		ifTrue: [ 	methodModeVH := #instance asValue.				methodModeVH onChangeSend: #methodModeChanged to: self. ].	^methodModeVH</body><body package="SLesson Base">methodSourceVH	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^methodSourceVH isNil		ifTrue:			[methodSourceVH := String new asValue]		ifFalse:			[methodSourceVH]</body></methods><methods><class-id>ReadOnlyBrowserPanel</class-id> <category>open close</category><body package="SLesson Base">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self refreshClassList.</body></methods><methods><class-id>StepCode</class-id> <category>settings</category><body package="SLesson Base">setModel	self parentName: #Model.</body><body package="SLesson Base">setObject	self parentName: #Object.</body><body package="SLesson Base">setTestCase	self parentName:  'LessonTestCase' asSymbol</body></methods><methods><class-id>StepCode</class-id> <category>actions</category><body package="SLesson Base">addToRevealList: aDictionary	| list name |	name := self isClassMethod				ifTrue: [ self className, ' class' ]				ifFalse: [ self className ].	list := aDictionary at: name				 ifAbsentPut:  [ OrderedCollection new ].	list add: self methodSelector asSymbol.	aDictionary at: name asString put: list.</body><body package="SLesson Base">classObject	^ Smalltalk at: self className ifAbsent: [ self makeClass ].</body><body package="SLesson Base">compile	self targetClassObject compile: self methodCode classified: self protocolName</body><body package="SLesson Base">makeClass	^[| testClass |	self setCurrentPackage.	testClass := self parentObject			subclass: self className 			instanceVariableNames: ''			classVariableNames: ''			poolDictionaries: ''			category: 'SLesson Temporary'.	testClass] ensure: [self unsetCurrentPackage]</body><body package="SLesson Base">methodSelector	| firstBlank selector |	self methodCode isNil ifTrue: [ ^ 'no method set' ].	firstBlank := self methodCode findFirst: [:each | each isSeparator].	selector := self methodCode  copyFrom: 1 to: firstBlank - 1.	^selector</body><body package="SLesson Base">parentObject	^ Smalltalk at: self parentName ifAbsent: [ self error: 'parent not loaded'  ].</body><body package="SLesson Base">removeClass		| aClass |	(aClass := Smalltalk at: self className ifAbsent: [nil]) isNil		ifFalse: [  aClass removeFromSystem ].</body><body package="SLesson Base">removeFromRevealList: aDictionary	| list name |	name := self isClassMethod				ifTrue: [ self className, ' class' ]				ifFalse: [ self className ].	list := aDictionary at: name				 ifAbsentPut:  [ OrderedCollection new ].	list remove: self methodSelector asSymbol ifAbsent: [].	list isEmpty		ifFalse: [ aDictionary at: name asString put: list.]		ifTrue:  [  aDictionary removeKey: name asString ].</body><body package="SLesson Base">removeMethod	| selector |	selector := self methodSelector.	self  targetClassObject removeSelector: selector asSymbol</body><body package="SLesson Base">targetClassObject	| aClass |	aClass := self isClassMethod 				ifFalse: [self classObject]				ifTrue: [self classObject class].	^aClass</body></methods><methods><class-id>StepCode</class-id> <category>accessing</category><body package="SLesson Base">classMethodCode: aString	methodCode := aString.	self isClassMethod: true.</body><body package="SLesson Base">className	className isNil		ifTrue: [ className := #ExampleCode ].	^className asString</body><body package="SLesson Base">className: aStringOrSymbol	className :=  aStringOrSymbol asSymbol.</body><body package="SLesson Base">isClassMethod	^isClassMethod isNil 		ifTrue: [ false ]		ifFalse: [ isClassMethod ].</body><body package="SLesson Base">isClassMethod: aBoolean	isClassMethod := aBoolean</body><body package="SLesson Base">methodCode	^methodCode</body><body package="SLesson Base">methodCode: aString	methodCode := aString</body><body package="SLesson Base">parentName	^parentName isNil		ifTrue: [ #Object ]		ifFalse: [ parentName ].</body><body package="SLesson Base">parentName: aStringOrSymbol	parentName := aStringOrSymbol asSymbol</body><body package="SLesson Base">protocolName	protocolName isNil		ifTrue: [ protocolName := 'generated step code' ].		^protocolName.</body><body package="SLesson Base">protocolName: aString	protocolName := aString.</body></methods><methods><class-id>StepCode</class-id> <category>printing</category><body package="SLesson Base">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (', self className, ', ', self methodSelector ,')'.</body></methods><methods><class-id>StepCode</class-id> <category>testing</category><body package="SLesson Base">isValid		self	className isNil 	ifTrue: [ ^false ].	self parentName isNil	ifTrue: [ ^false ].	self methodCode isNil	ifTrue: [ ^false ].	(Smalltalk at: self parentName ifAbsent: [nil]) isNil		ifTrue: [ ^false].	^true.</body></methods><methods><class-id>StepCode</class-id> <category>LessonModel interface</category><body package="SLesson Base">loadCode	self isValid		ifFalse: [ self error: 'StepCode not properly configured.'].	self compile.</body><body package="SLesson Base">removeCode	self isValid		ifFalse: [ self error: 'StepCode not properly configured.'].	self removeMethod.	self classObject hasMethods		ifFalse: [ self removeClass ].</body></methods><methods><class-id>StepCode</class-id> <category>private-store</category><body package="SLesson Base">setCurrentPackage	#{Store.Registry} ifDefinedDo: 		[:registry |		currentPackage := registry currentPackage.		registry currentPackage: (registry packageNamedOrCreate: 'SLessonClassHoldingBin')]</body><body package="SLesson Base">unsetCurrentPackage	#{Store.Registry} ifDefinedDo: 		[:registry |		registry currentPackage:currentPackage]</body></methods><methods><class-id>LessonRunner</class-id> <category>editing</category><body package="SLesson Base">browseLesson	lessonSIL selection  isNil		ifTrue: [  Screen default ringBell.				^ Dialog warn: 'A Lesson must be selected'   ].		lessonSIL selectionObject browse.</body><body package="SLesson Base">browseStep	| stepObject |	lessonSIL selection isNil 		ifTrue: [	 Screen default ringBell.				^Dialog warn: 'A Lesson must be selected'].	stepObject := self selectStepObject.	stepObject isNil ifTrue: [^self].	stepObject = 0 ifTrue: [^self].	stepObject browse</body><body package="SLesson Base">browseTopic	topicSIL selection isNil 		ifTrue: [ Screen default ringBell.				^Dialog warn: 'A Topic must be selected'].	topicSIL selectionObject browse</body><body package="SLesson Base">makeLesson	| aTrack lb aLessonNameString |	topicSIL selection isNil 		ifTrue: 			[Screen default ringBell.			^Dialog warn: 'A Lesson Topic must be selected'].	aTrack := topicSIL selectionObject class.	lb := LessonBuilder new.	aLessonNameString := lb buildNextVaildLessonName: aTrack.	aLessonNameString := self promptForLessonName: aLessonNameString.	aLessonNameString isEmpty not 		ifTrue: [lb makeLesson: aLessonNameString forTopic: aTrack]</body><body package="SLesson Base">makeStep 		| lb   aLesson |	lb := LessonBuilder new.	lessonSIL selection  isNil		ifTrue: [	 Screen default ringBell.				 Dialog warn: 'A Lesson must be selected'.				^ self   ].	aLesson := lessonSIL selectionObject class.	lb makeStepFor:  aLesson.</body><body package="SLesson Base">makeTopic	| lb aTopicNameString aLessonNameString |	lb := LessonBuilder new.	aTopicNameString := Dialog 				request: 'Enter a Topic Name \(UniqueLetter + Zero + Underscore + topicName)' 						withCRs				initialAnswer: lb nextFreeLetter  asSymbol , '00_MyTopic'				onCancel: [	Screen default ringBell.				                  ^ self].	aLessonNameString := Dialog 				request: 'Enter a Lesson Name \(SameLetter + LessonNumber + Underscore + LessonName)' 						withCRs				initialAnswer: lb nextFreeLetter asSymbol , '01_MyLesson'				onCancel: [Screen default ringBell.                                         ^self].	lb makeTopic: aTopicNameString lesson: aLessonNameString</body><body package="SLesson Base">promptForLessonName: aLessonNameString 	^Dialog 		request: 'Enter a Lesson Name \(Letter + Number + Underscore + yourName)' 				withCRs		initialAnswer: aLessonNameString		onCancel: [String new]</body><body package="SLesson Base">selectStepObject	| menu lesson labels |	lesson := lessonSIL selectionObject.	labels := lesson stepObjects inject: String new				into: [:string :each | string , each displayString , '\'].	labels := labels copyFrom: 1 to: labels size - 1.	menu := Menu labels: labels withCRs values: lesson stepObjects.	menu addItem: (MenuItem labeled: '* Cancel *') value: nil.	^menu startUp</body></methods><methods><class-id>LessonRunner</class-id> <category>aspects</category><body package="SLesson Base">description	description isNil ifTrue: [^description := String new asValue].	^description</body><body package="SLesson Base">description: aString		description value: aString.	^self</body><body package="SLesson Base">lessonSIL		^lessonSIL</body><body package="SLesson Base">topicSIL	^topicSIL</body></methods><methods><class-id>LessonRunner</class-id> <category>open close</category><body package="SLesson Base">initialize	| firstTrack |	super initialize.	state := LessonRunnerState new.	topicSIL := SelectionInListWithDisplay new.	topicSIL listObjects: LessonModel loadedTopics.	topicSIL selectionIndexHolder onChangeSend: #topicListChanged to: self.	firstTrack := LessonModel loadedTopics first.	firstTrack isNil ifTrue: [^self].	lessonSIL := SelectionInListWithDisplay new.	lessonSIL listObjects: (LessonModel loadedLessons: firstTrack).	lessonSIL selectionIndexHolder onChangeSend: #lessonListChanged to: self.</body><body package="SLesson Base">launchLesson	| selectedLesson browser |	self lessonSIL selection isNil 		ifTrue: [^Dialog warn: 'Please select a\Lesson from the List.' withCRs].	Cursor wait showWhile: [selectedLesson := self lessonSIL selectionObject .		self closeRequest.		browser := selectedLesson open source.		self state displayBox: builder window displayBox.		browser lessonRunnerState: self state].	^self</body><body package="SLesson Base">postBuildWith: aBuilder 	| label |	super postBuildWith: aBuilder.	self topicSIL selectionIndex: self state topicIndex.	label := 'Lesson Runner '.	self isEdit ifTrue: [label := label , '  (EDIT MODE)'].		builder window label: label.</body><body package="SLesson Base">postOpenWith: aBuilder 	"Commented out relocation code - looks very distracting.  James Robertson, 8/31/00"	super postOpenWith: aBuilder.	"aBuilder window moveTo: self state displayBox origin resize: self state displayBox extent."</body></methods><methods><class-id>LessonRunner</class-id> <category>access</category><body package="SLesson Base">enableEdit		self state edit: true.</body><body package="SLesson Base">isEdit		^ self state edit.</body><body package="SLesson Base">state	^ state</body><body package="SLesson Base">state: aLessonRunnerState		state := aLessonRunnerState.</body></methods><methods><class-id>LessonRunner</class-id> <category>menu</category><body package="SLesson Base">lessonMenu	| mb |	mb := MenuBuilder new.	self isEdit 		ifTrue: [ mb add: 'Generate New Step'-&gt;#makeStep;					line;					add: 'Browse Step' -&gt; #browseStep;					add: 'Browse Lesson' -&gt; #browseLesson ].	^ mb menu.</body><body package="SLesson Base">topicMenu	| mb |	mb := MenuBuilder new.	self isEdit 		ifTrue: 			[mb add: 'Generate New Topic' -&gt; #makeTopic;			 	add: 'Generate New Lesson' -&gt; #makeLesson;			 	line;			 	add: 'Browse Topic' -&gt; #browseTopic].	^mb menu</body></methods><methods><class-id>LessonRunner</class-id> <category>updating</category><body package="SLesson Base">lessonListChanged	| aClass |	self lessonSIL selection isNil ifTrue: [^nil].	aClass := self lessonSIL selectionObject.	self description: aClass description.	self state lessonIndex: self lessonSIL selectionIndex.	^self</body><body package="SLesson Base">topicListChanged	| aTopic |	aTopic := self topicSIL selectionObject.	aTopic isNil ifTrue: [^nil].	self state topicIndex: self topicSIL selectionIndex.	lessonSIL listObjects: (LessonModel loadedLessons: aTopic).	lessonSIL listObjects isEmpty ifFalse: [lessonSIL selectionIndex: self state lessonIndex].</body></methods><methods><class-id>LessonRunner class</class-id> <category>opening</category><body package="SLesson Base">openEdit	"&gt; 	LessonRunner openEdit 	&lt;"		^self openWithState: ((LessonRunnerState new)										edit: true;								yourself).</body><body package="SLesson Base">openWithState: aLessonRunnerState		^ self openOn: ((self new)						state: aLessonRunnerState;						yourself ).</body></methods><methods><class-id>LessonTextCollector</class-id> <category>accessing</category><body package="SLesson Base">changed: aParameter	aParameter == #appendEntry 		ifTrue: [	self value: (self value , entryStream contents).	 ].		^super changed: aParameter.</body></methods><methods><class-id>LessonBrowserBase</class-id> <category>menu</category><body package="SLesson Base">learningMenu	| mb menu item |	(mb := MenuBuilder new) addEvaluation.	menu := mb menu.	item := menu menuItemWithValue: #inspect 				ifNone: [menu addItem: 'Inspect it' -&gt; #inspectIt].	item value: #inspectIt.	^menu</body><body package="SLesson Base">noMenu	^  MenuBuilder new menu.</body></methods><methods><class-id>LessonBrowserBase</class-id> <category>open close</category><body package="SLesson Base">browserStage		| size |	size := self class name size.	^self class name copyFrom: size -1 to: size.</body><body package="SLesson Base">enableMaximize	| current |	current := builder window minimumSize.	builder window minimumSize: builder window maximumSize.	builder window minimumSize: current</body><body package="SLesson Base">loadMyTranscript	Smalltalk at: #MyTranscript put: self myTranscript</body><body package="SLesson Base">noticeOfWindowClose: aWindow 	super noticeOfWindowClose: aWindow.	self release.	self unloadLessonCode.	self unloadMyTranscript.	self launchLessonRunner</body><body package="SLesson Base">postBuildWith: aBuilder 	| label |	self enableMaximize.	super postBuildWith: aBuilder.	self loadMyTranscript.	label := 'Lesson Browser ' , self browserStage , ' (Lesson: ' 				, self lesson displayString , ')'.	aBuilder window label: label</body><body package="SLesson Base">release 	lessonVH retractInterestsFor: self.	lessonVH release.	myTranscript retractInterestsFor: self.	super release.</body><body package="SLesson Base">unloadLessonCode	self lesson removeAllLoadedCode</body><body package="SLesson Base">unloadMyTranscript	Smalltalk removeKey: #MyTranscript ifAbsent: [nil]</body></methods><methods><class-id>LessonBrowserBase</class-id> <category>accessing</category><body package="SLesson Base">isLessonRunnerEdit	^self lessonRunnerState edit</body><body package="SLesson Base">isLessonRunnerEdit: anObject	| label |	isLessonRunnerEdit := anObject.	label := builder window label.	isLessonRunnerEdit 		ifTrue: [ builder window label:  label, ' (EDIT MODE)' ].</body><body package="SLesson Base">lessonRunnerState	^lessonRunnerState</body><body package="SLesson Base">lessonRunnerState: anObject 	lessonRunnerState := anObject.	self  isLessonRunnerEdit: lessonRunnerState edit.</body></methods><methods><class-id>LessonBrowserBase</class-id> <category>aspects</category><body package="SLesson Base">lesson	^self lessonVH value</body><body package="SLesson Base">lesson: aLessonModel 	self lessonVH value: aLessonModel.	^self</body><body package="SLesson Base">lessonVH	^lessonVH</body><body package="SLesson Base">myTranscript	^myTranscript</body></methods><methods><class-id>LessonBrowserBase</class-id> <category>actions</category><body package="SLesson Base">clearMyTranscript	( builder componentAt: #myTranscript ) widget model clear.</body><body package="SLesson Base">initialize	super initialize.	(lessonVH := nil asValue) onChangeSend: #lessonChanged to: self.	myTranscript := LessonTextCollector new value: Text new.	^self</body><body package="SLesson Base">launchLessonRunner	LessonRunner openWithState: self lessonRunnerState.</body></methods><methods><class-id>LessonBrowserBase</class-id> <category>updating</category><body package="SLesson Base">lessonChanged	"hook for subclass"</body></methods><methods><class-id>LessonBrowserBase</class-id> <category>sunit tests</category><body package="SLesson Base">requiredSelectors	^OrderedCollection with: #displayString.</body></methods><methods><class-id>LessonBrowserBase class</class-id> <category>initialize create</category><body package="SLesson Base">open	Dialog warn: 'Use #openWith: aLessonModel to open a new lesson browser.'.	self error: 'Use #openWith: aLessonModel to open a new lesson browser.'.</body><body package="SLesson Base">openWith: aLessonModel 	^self openOn: (self new lesson: aLessonModel)</body></methods><methods><class-id>LessonStepsBrowser</class-id> <category>sunit tests</category><body package="SLesson Base">requiredSelectors	^(super requiredSelectors)		addAll: #( what  defaultWorkspaceText );		yourself.</body></methods><methods><class-id>LessonStepsBrowser</class-id> <category>aspects</category><body package="SLesson Base">displayButtonsFor: aStepObject 	| list prevButton nextButton |	self builder isNil	ifTrue: [^self ].	nextButton := self builder componentAt: #nextStep.	prevButton := self builder componentAt: #prevStep.	list := self lesson stepObjects.	list isEmpty ifTrue: [^self].	nextButton isEnabled: (list last ~= aStepObject).	prevButton isEnabled: (list first ~= aStepObject ).</body><body package="SLesson Base">howSC	^howSC isNil 		ifTrue: 			[howSC := AspectAdaptor subjectChannel: lessonVH sendsUpdates: true.			howSC forAspect: #how]		ifFalse: [howSC]</body><body package="SLesson Base">selectedStep	^selectedStepVH value</body><body package="SLesson Base">selectedStep: aStepObject 	selectedStepVH value = aStepObject 		ifFalse: 			["&gt; break update cycles &lt;"				selectedStepVH value: aStepObject]</body><body package="SLesson Base">selectedStepVH	^selectedStepVH</body><body package="SLesson Base">whatSC	^whatSC isNil 		ifTrue: 			[whatSC := AspectAdaptor subjectChannel: lessonVH sendsUpdates: true.			whatSC forAspect: #what]		ifFalse: [whatSC]</body><body package="SLesson Base">workspaceTextSC	^workspaceTextSC isNil		ifTrue:			[workspaceTextSC := AspectAdaptor						subjectChannel: lessonVH sendsUpdates: true.			 workspaceTextSC forAspect: #workspaceText. ]		ifFalse:			[workspaceTextSC]</body></methods><methods><class-id>LessonStepsBrowser</class-id> <category>open close</category><body package="SLesson Base">initialize	super initialize.	selectedStepVH := nil asValue.</body><body package="SLesson Base">initializeSteps	| list |	list := self lesson stepObjects.	list isEmpty ifTrue: [^self].</body><body package="SLesson Base">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self loadMyTranscript.	selectedStepVH onChangeSend: #selectedStepChanged to: self.	self selectedStep: self lesson currentStep.</body><body package="SLesson Base">release 	super release .	self selectedStepVH retractInterestsFor: self.	self selectedStepVH release.	self workspaceTextSC release.	self howSC release.	self whatSC release.</body></methods><methods><class-id>LessonStepsBrowser</class-id> <category>action buttons</category><body package="SLesson Base">editMe	self launchStepsEditor.</body><body package="SLesson Base">inspectMe	self inspect.</body><body package="SLesson Base">launchStepsEditor	StepEditor openWith: self lesson copy</body><body package="SLesson Base">nextStep	| current list |	current := self selectedStep.	list := self lesson stepObjects.	list isEmpty ifTrue: [^self].	list last = current ifTrue: [^self].	self selectedStep: (list after: current).</body><body package="SLesson Base">prevStep	| current list |	current := self selectedStep.	list := self lesson stepObjects.	list isEmpty ifTrue: [^self].	list first = current ifTrue: [^self].	self selectedStep: (list before: current).</body></methods><methods><class-id>LessonStepsBrowser</class-id> <category>updating</category><body package="SLesson Base">currentStepChanged 	self selectedStep: self lesson currentStep.	self displayButtonsFor: self lesson currentStep.	self lessonVH changed.</body><body package="SLesson Base">lessonChanged	self lesson currentStepVH			onChangeSend: #currentStepChanged to: self.	self initializeSteps.</body><body package="SLesson Base">selectedStepChanged	| aStep |		aStep := self selectedStep.	self lesson currentStep: aStep.</body></methods><methods><class-id>LessonStepsBrowser</class-id> <category>accessing</category><body package="SLesson Base">isLessonRunnerEdit: aBoolean	super isLessonRunnerEdit: aBoolean.	(builder componentAt: #inspectMe )  isVisible: aBoolean .	(builder componentAt: #editMe )   isVisible: aBoolean .</body></methods><methods><class-id>LessonStepsBrowser</class-id> <category>menu messages</category><body package="SLesson Base">stepsInLessonMenu	| mb |	mb := MenuBuilder new.	self lesson stepObjects do: [:each | mb add: (each  displayString)  -&gt; each ].	^mb menu</body></methods><methods><class-id>LessonBrowserWithNotebook</class-id> <category>updating</category><body package="SLesson Base">defaultTabNames	| how space |	how := 'How' asText.	space := ' ' asText.	^(OrderedCollection new)		add: 'What' asText;		add: 'How' asText;		add: 'Why' asText;		yourself</body><body package="SLesson Base">isPageBlank: aSymbol	| step |	step := self lesson currentStep.	^ step isPageBlank: aSymbol.</body><body package="SLesson Base">moveToFirst: tabs page: aSymbol	| item |	item := tabs remove: aSymbol ifAbsent: [nil].	item isNil ifFalse: [tabs addFirst: item].	^item</body><body package="SLesson Base">selectedStepChanged	super selectedStepChanged.	self labelsSelectionInList list: self tabNames.	self labelsSelectionInList selectionIndexHolder setValue: 1.	self pageChanged</body><body package="SLesson Base">sortTabs: anOrderedCollection 	| tabs |	tabs := anOrderedCollection.	self moveToFirst: tabs page: #why.	self moveToFirst: tabs page: #how.	self moveToFirst: tabs page: #what.	^tabs</body><body package="SLesson Base">tabNames	| tabNames |	self lesson isNil		ifTrue: [ 	^self defaultTabNames ].	tabNames := self lesson selectorsInStepContent.	tabNames remove: #defaultWorkspaceText.	tabNames := self sortTabs: tabNames.		tabNames := tabNames reject: [ :each | self isPageBlank: each ].	^ self tabNamesForDisplay: tabNames.</body><body package="SLesson Base">tabNamesForDisplay: aCollection	| tabNames |	tabNames := aCollection collect: [ :each | | string |			string := each asString.			string at: 1 put: ( string at: 1 ) asUppercase.			string		  ].	tabNames := tabNames collect: [ :each |			(' ', each, ' ') asText allBold. ].	^ tabNames.</body></methods><methods><class-id>LessonBrowserWithNotebook</class-id> <category>open close</category><body package="SLesson Base">initialize	super initialize.	self pageInitialize.	^self</body><body package="SLesson Base">pageInitialize	labelsSelectionInList := SelectionInList with: self tabNames.	labelsSelectionInList selectionIndexHolder onChangeSend: #pageChanged		to: self</body></methods><methods><class-id>LessonBrowserWithNotebook</class-id> <category>page actions</category><body package="SLesson Base">pageChanged	| page content |	page := self labelsSelectionInList selection.	page isNil 		ifTrue: [ ^self ].	page := page asLowercase asSymbol.	page := page copyFrom: 2 to: page size -1.	content := self lesson currentStep  perform: page asSymbol .	self pageTextEditorHolder value: content.</body><body package="SLesson Base">postOpenWith: aBuilder 	super postOpenWith: aBuilder.		(builder componentAt: #pageHolder) widget client: self				spec: #pageOfTextSpec.	labelsSelectionInList selectionIndex: 1.	self pageChanged.</body></methods><methods><class-id>LessonBrowserWithNotebook</class-id> <category>page aspects</category><body package="SLesson Base">labelsSelectionInList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^labelsSelectionInList isNil		ifTrue:			[labelsSelectionInList := SelectionInList new]		ifFalse:			[labelsSelectionInList]</body><body package="SLesson Base">pageTextEditorHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^pageTextEditorHolder isNil		ifTrue:			[pageTextEditorHolder := String new asValue]		ifFalse:			[pageTextEditorHolder]</body></methods><methods><class-id>LessonBrowserWithNotebook</class-id> <category>sunit tests</category><body package="SLesson Base">requiredSelectors	^super requiredSelectors		addAll: #( how why ).</body></methods><methods><class-id>LessonBrowser_04</class-id> <category>updating</category><body package="SLesson Base">selectedStepChanged	super selectedStepChanged.	self  theReadOnlyBrowser refreshClassList.</body></methods><methods><class-id>LessonBrowser_04</class-id> <category>open close</category><body package="SLesson Base">preBuildWith: aBuilder 	super preBuildWith: aBuilder.	self theReadOnlyBrowser lesson: self lesson.</body></methods><methods><class-id>LessonBrowser_04</class-id> <category>accessing</category><body package="SLesson Base">theReadOnlyBrowser	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^theReadOnlyBrowser isNil		ifTrue:			[theReadOnlyBrowser := ReadOnlyBrowserPanel new]		ifFalse:			[theReadOnlyBrowser]</body></methods><methods><class-id>StepEditor</class-id> <category>actions</category><body package="SLesson Base">browseLesson	self lesson class browse.</body><body package="SLesson Base">browseStep	self lesson currentStep class browse.</body><body package="SLesson Base">escapeSpecialChars: aString	| inStream outStream char |	inStream := ReadStream on: aString. 	outStream := WriteStream on: String new.	[ inStream atEnd ] 	whileFalse: 	[ char :=  inStream next. 				  char = $'  ifTrue: [ outStream  nextPut: $'.].				  outStream nextPut: char. ].	inStream close.	outStream close.	^ outStream contents.</body><body package="SLesson Base">recompileStepMethod	| page stepClass aText code1 code2 code3 allCode|	self dynamicLabelsSIL  list isEmpty		ifTrue: [ ^self error: 'no tab selected' ].	page := self dynamicLabelsSIL selection.	page isNil 		ifTrue: [ ^self error: 'no page selected ' ].	stepClass := self lesson currentStep class.	aText := (self builder componentAt: #textEditor) widget model value.		code1 := page, '\^''' withCRs.	code2 := self escapeSpecialChars: aText string.	code3 :=  '''  asText boldHtmlTags.'.	allCode := (code1, code2, code3) .	stepClass compile:  allCode classified:  'step content'.	"Dialog warn: (stepClass name, ' #', page, '\       Recompile Complete!\\Note: the Lesson Browser will not show\these changes until re-launched from the\Lesson Runner window' ) withCRs"</body></methods><methods><class-id>StepEditor</class-id> <category>open close</category><body package="SLesson Base">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	self release.</body><body package="SLesson Base">postBuildWith: aBuilder 	| label |	super postBuildWith: aBuilder.	(aBuilder componentAt: #returnToTopics) beInvisible.	(aBuilder componentAt: #inspectMe )  beInvisible.	(aBuilder componentAt: #editMe )  beInvisible.	label := 'Step Editor   (Lesson: ', self lesson displayString, ') (EDIT MODE)'.	aBuilder window label: label.</body><body package="SLesson Base">postOpenWith: aBuilder 	super postOpenWith: aBuilder.	self dynamicLabelsSIL selectionIndexHolder 			onChangeSend: #pageChanged	to: self.	self resetTabsForStep.</body><body package="SLesson Base">release		self dynamicLabelsSIL selectionIndexHolder retractInterestsFor: self.	self dynamicLabelsSIL selectionIndexHolder release.	self dynamicLabelsSIL  release.	self textEditorVH release.	super release.</body></methods><methods><class-id>StepEditor</class-id> <category>editing</category><body package="SLesson Base">textExit: aController	aController textHasChanged ifFalse: [ ^true ].	^(Dialog confirm: 			'The text showing has been altered.\Do you wish to discard those changes?'			 withCRs )</body></methods><methods><class-id>StepEditor</class-id> <category>disabled methods</category><body package="SLesson Base">launchLessonRunner			"&gt; no op &lt;"</body><body package="SLesson Base">loadMyTranscript			"&gt; no op &lt;"</body><body package="SLesson Base">unloadLessonCode			"&gt; no op &lt;"</body><body package="SLesson Base">unloadMyTranscript			"&gt; no op &lt;"</body></methods><methods><class-id>StepEditor</class-id> <category>updating</category><body package="SLesson Base">currentStepChanged	super currentStepChanged.	self resetTabsForStep.</body><body package="SLesson Base">pageChanged	| content |	self dynamicLabelsSIL list isEmpty ifTrue: [^self].	content := self selectionContentText.	self textEditorVH value: content</body><body package="SLesson Base">resetTabsForStep	| tabNames |	tabNames := self lesson selectorsInStepContent.	self dynamicLabelsSIL list: tabNames.	self dynamicLabelsSIL selectionIndex: 1</body><body package="SLesson Base">selectionContentText	| page step content |	page := self dynamicLabelsSIL selection.	page isNil		ifTrue: [ ^Text  new ].	page := page asSymbol.	step := self lesson currentStep.	content := (step class canUnderstand: page) 				ifTrue: [step perform: page]				ifFalse: [page printString , '  "&gt; NOT DEFINED &lt;" '].	^content asText addHtmlBoldTags.</body></methods><methods><class-id>StepEditor</class-id> <category>aspects</category><body package="SLesson Base">dynamicLabelsSIL	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dynamicLabelsSIL isNil		ifTrue:			[dynamicLabelsSIL := SelectionInList new]		ifFalse:			[dynamicLabelsSIL]</body><body package="SLesson Base">textEditorVH	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textEditorVH isNil		ifTrue:			[textEditorVH := Text new asValue]		ifFalse:			[textEditorVH]</body></methods><methods><class-id>StepEditor</class-id> <category>menu</category><body package="SLesson Base">textEditorMenuHolder	| mb |	(mb := MenuBuilder new)		addFindReplaceUndo;		line;		addCopyCutPaste;		line;		addEvaluation;		line.	mb 		addLabels: #('recompile step method'  ) 		andValues: #( #recompileStepMethod ).	^mb menu.</body></methods><methods><class-id>Core.Object</class-id> <category>SLesson Base</category><body package="SLesson Base">flag: aSymbol	"Used to place notes in the code."</body></methods><methods><class-id>Core.Text</class-id> <category>SLesson Base</category><body package="SLesson Base">addHtmlBoldTags	| length aString  index write |	write := WriteStream on: String new.	index := 1.	length := self runLengthFor: index.	[ length &gt; 0 ] 	whileTrue: 	[ 	aString := self string copyFrom: index to: (index +length -1).		(self emphasisAt: index ) = #bold			ifTrue: [ 	aString := self htmlSurround: aString with: 'B'. ].		write nextPutAll: aString. 		index := index + length.		length := self runLengthFor: index. ].	^ write contents.</body><body package="SLesson Base">boldAllQuotes	| quotes |	quotes := self findAllQuotes.	quotes do: [ :each | self emphasizeFrom: each key +1   to: each value -1  with: #bold ].	^self .</body><body package="SLesson Base">boldHtmlTags 	| tags write lastTag boldOn |	write := Text new.	tags := self htmlBoldTagIntervals.	tags isEmpty		ifTrue: [ 	^ self copy ].	lastTag :=  ( 0 to: 0) .	boldOn := false.	tags addLast: ( self string size +1 to: self string size +1 ).		tags do: [ :each |		write := write, (self textBetween: lastTag  and: each  bold: boldOn).		boldOn := boldOn not.		lastTag := each. ].	^write.</body><body package="SLesson Base">findAllQuotes	| stop start first second quotes |	quotes := OrderedCollection new.	start := 1.	stop := self size.	[(first := self 				nextIndexOf: $" 				from: start				to: stop) isNil] 		whileFalse: 			[second := self 						nextIndexOf: $"						from: first + 1						to: stop.			second isNil 				ifTrue: [^ quotes ]				ifFalse: 					[start := second + 1.					quotes add: first -&gt; second]].	^ quotes.</body><body package="SLesson Base">htmlBoldTagIntervals 	^self htmlTagIntervals select: [ :each |		 (self string at: each last -1) asUppercase  = $B ].</body><body package="SLesson Base">htmlSurround: aString with: tagString	^ '&lt;', tagString, '&gt;', aString, '&lt;/',tagString, '&gt;'.</body><body package="SLesson Base">htmlTagIntervals	| tagInterval tags |	tags := OrderedCollection new.	tagInterval := self htmlTagStartingAt: 1.	[tagInterval last &gt; 0] whileTrue: 			[tags add: tagInterval.			tagInterval := self htmlTagStartingAt: tagInterval last. ].	tags size odd		ifTrue: [ tags removeLast.].	^tags</body><body package="SLesson Base">htmlTagStartingAt: anInteger	| begin end |		begin := self string 		findString: '&lt;B&gt;'		startingAt: anInteger		ignoreCase: true		useWildcards: true.	end := self string 		findString: '&lt;/B&gt;'		startingAt: anInteger		ignoreCase: true		useWildcards: true.		begin first = 0 	ifTrue: [ ^ end ].	end first = 0 	ifTrue: [ ^ begin ].	^ begin first &lt; end first		ifTrue: [ begin ]		ifFalse: [ end].</body><body package="SLesson Base">textBetween: startInterval and: stopInterval  bold: aBoolean	| start stop text |	start :=  startInterval last +1.	stop  := stopInterval first -1.	text :=  (self string copyFrom: start to: stop ) asText.	^aBoolean		ifTrue: [ text allBold.]		ifFalse: [ text ].</body></methods><methods><class-id>ReadOnlyBrowserPanel class</class-id> <category>interface specs</category><body package="SLesson Base">browserSpec	"Tools.UIPainter new openOnClass: self andSelector: #browserSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 235 384 1024 586 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.373891 0 0.00990099 0 0.82763 0 0.113861 ) 					#name: #sourcePanelLabel 					#label: 'Source code for selected Class &amp; Method' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.00633714 0 0.00990099 ) 					#label: 'Smalltalk Classes' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.185044 0 0.0247525 ) 					#model: #methodModeVH 					#label: 'Instance Methods' 					#select: #instance ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.185044 0 0.108911 ) 					#model: #methodModeVH 					#label: 'Class Methods' 					#select: #class ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.185044 0 0.193069 ) 					#model: #methodModeVH 					#label: 'Definition Of Class' 					#select: #definition ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.123762 0 0.168568 0 1 ) 					#flags: 15 					#model: #classListSIL 					#menu: #classListMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.17744 0 0.30198 0 0.358682 -4 1 ) 					#model: #methodListSIL 					#menu: #noMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.17237 0 0 0 0.363752 0 1 ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.366286 0 0.123762 0 0.996198 0 1 ) 					#flags: 15 					#model: #methodSourceVH 					#menu: #noMenu 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>LessonRunner class</class-id> <category>interface specs</category><body package="SLesson Base">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'VisualWorks Lesson Browser' 			#min: #(#{Core.Point} 517 391 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 439 260 956 651 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.5 0 0.0576923 2 0.5 0 0.49359 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 20 					#minBelowSize: 20 					#aboveWidgets: '#topicList' 					#belowWidgets: '#lessonList' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.00773694 0 0 ) 					#name: #topicLabel 					#label: 'Topic' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.510638 0 0.0 ) 					#name: #lessonLabel 					#label: 'Lesson' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.0576923 0 0.5 0 0.4625 ) 					#name: #topicList 					#model: #topicSIL 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #launchLesson ) 					#menu: #topicMenu 					#style: #systemDefault 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.5 0 0.0576923 0 1 0 0.4625 ) 					#name: #lessonList 					#model: #lessonSIL 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #launchLesson ) 					#menu: #lessonMenu 					#style: #systemDefault 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.54 0 1 0 0.9 ) 					#name: #descriptionWidget 					#model: #description 					#isReadOnly: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.00773694 0 0.480818 ) 					#name: #descriptionLabel 					#label: 'Lesson Description' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.775 0 0.925 81 23 ) 					#name: #exitButton 					#model: #closeRequest 					#helpText: 'Exit the Lesson Runner' 					#label: 'Exit' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.525 0 0.925 121 23 ) 					#name: #launchButton 					#model: #launchLesson 					#helpText: 'Open the Selected Lesson' 					#label: 'Begin Lesson...' 					#isDefault: false ) ) ) )</body></methods><methods><class-id>LessonStepsBrowser class</class-id> <category>resources</category><body package="SLesson Base">backArrow20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #backArrow20x20"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 0 96 0 0 0 224 0 0 1 254 0 0 3 254 0 0 7 254 0 0 15 254 0 0 7 254 0 0 3 254 0 0 1 254 0 0 0 224 0 0 0 96 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="SLesson Base">forwardArrow20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #forwardArrow20x20"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 0 96 0 0 0 112 0 0 7 248 0 0 7 252 0 0 7 254 0 0 7 255 0 0 7 254 0 0 7 252 0 0 7 248 0 0 0 112 0 0 0 96 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>LessonStepsBrowser class</class-id> <category>interface specs</category><body package="SLesson Base">stepNavigatorPanel	"Tools.UIPainter new openOnClass: self andSelector: #stepNavigatorPanel"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 404 384 1024 428 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 4 0 0 0.0833333 0 0.431818 ) 					#name: #inspectMe 					#flags: 24 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 5119 8191 ) ) 					#model: #inspectMe 					#label: 'inspect' 					#style: #pixelDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 23 0 0 0.0833333 0 0.863636 ) 					#name: #editMe 					#flags: 24 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6655 8191 5119 ) ) 					#model: #editMe 					#label: 'edit' 					#style: #pixelDefault 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.240323 0 0.204545 0 0.627419 0 0.727273 ) 					#name: #stepsMenu 					#model: #selectedStepVH 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectedStepChanged ) 					#menu: #stepsInLessonMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 62 8 ) 					#name: #currentStepLabel 					#label: 'Current Step' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -8 0.666666 0 0.0227273 0 0.996774 0 0.954545 ) 					#name: #groupBox ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.79 0 0.181818 118 28 ) 					#name: #returnToTopics 					#model: #closeRequest 					#label: 'Return To Topics' ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} 0 0.666666 0 0.181818 28 0.666666 28 0.181818 ) 					#name: #prevStep 					#model: #prevStep 					#label: #backArrow20x20 					#hasCharacterOrientedLabel: false 					#style: #large ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} 32 0.666666 0 0.181818 60 0.666666 28 0.181818 ) 					#name: #nextStep 					#model: #nextStep 					#label: #forwardArrow20x20 					#hasCharacterOrientedLabel: false 					#style: #large ) ) ) )</body></methods><methods><class-id>LessonBrowserWithNotebook class</class-id> <category>interface specs</category><body package="SLesson Base">notebookSpec	"UIPainter new openOnClass: self andSelector: #notebookSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 427 247 627 447 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#NotebookSpec 					#layout: #(#LayoutFrame 2 0 2 0 0 1.0 0 0.99 ) 					#name: #pageHolder 					#model: #labelsSelectionInList 					#tabable: true 					#style: #large 					#binderWidth: 0 					#majorTabsOnRight: false 					#rightInset: 0 					#bottomInset: 30 					#tabsOnTop: true ) ) ) )</body><body package="SLesson Base">pageOfTextSpec	"Tools.UIPainter new openOnClass: self andSelector: #pageOfTextSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'NotebookPane' 			#bounds: #(#{Graphics.Rectangle} 512 384 756 624 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 0 0.00829876 0 0.987654 0 0.995851 ) 					#model: #pageTextEditorHolder 					#menu: #noMenu 					#isReadOnly: false 					#tabRequiresControl: true ) ) ) )</body><body package="SLesson Base">tabControlSpec	"Tools.UIPainter new openOnClass: self andSelector: #tabControlSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 2 0 0 1.0 0 0.99 ) 					#name: #pageHolder 					#model: #labelsSelectionInList 					#tabable: true 					#labels: #() ) ) ) )</body></methods><methods><class-id>LessonBrowser_01 class</class-id> <category>interface specs</category><body package="SLesson Base">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Lesson Browser (Stage 001)' 			#min: #(#{Core.Point} 640 643 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 260 88 900 731 ) 			#flags: 8 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 11 2 626 46 ) 					#flags: 0 					#minorKey: #stepNavigatorPanel ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.364078 0 0.104704 ) 					#label: 'Workspace' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.14 0 0.355346 0 1 ) 					#model: #whatSC 					#menu: #noMenu 					#tabRequiresControl: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.355346 0 0.14 0 1 0 1 ) 					#model: #workspaceTextSC 					#menu: #learningMenu 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.00970874 0 0.104704 ) 					#label: 'Goal' ) ) ) )</body></methods><methods><class-id>LessonBrowser_03 class</class-id> <category>interface specs</category><body package="SLesson Base">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Lesson Browser (Stage 003)' 			#min: #(#{Core.Point} 640 643 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 353 166 993 809 ) 			#flags: 8 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 1.25 0 0.728992 0 1.2956 0 0.781513 ) 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) ) 					#model: #inspect 					#label: 'bug' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 5 4 620 48 ) 					#flags: 0 					#minorKey: #stepNavigatorPanel ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.562893 0 0.104851 ) 					#label: 'Workspace' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.553459 0 0.140756 0 1.0 0 0.710084 ) 					#model: #workspaceTextSC 					#menu: #learningMenu 					#tabRequiresControl: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.781513 0 1 0 1 ) 					#name: #myTranscript 					#model: #myTranscript 					#tabable: true 					#menu: #noMenu 					#isReadOnly: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.00943396 0 0.744914 ) 					#label: 'MyTranscript' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.828616 0 0.729264 101 23 ) 					#name: #ActionButton1 					#model: #clearMyTranscript 					#label: 'Clear Transcript' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0 0 0.101721 352 392 ) 					#flags: 0 					#minorKey: #tabControlSpec ) ) ) )</body></methods><methods><class-id>LessonBrowser_04 class</class-id> <category>interface specs</category><body package="SLesson Base">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Lesson Browser (Stage 004)' 			#min: #(#{Core.Point} 800 600 ) 			#bounds: #(#{Graphics.Rectangle} 106 68 1024 768 ) 			#flags: 8 			#colors: #(#{UI.LookPreferences} ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.232456 0 0.00432277 0 0.99671 0 0.0691643 ) 					#flags: 0 					#minorKey: #stepNavigatorPanel ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 0 0.638695 0 0.997183 0 0.997669 ) 					#majorKey: #{ReadOnlyBrowserPanel} 					#minorKey: #browserSpec 					#clientKey: #theReadOnlyBrowser ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.0056338 0 0.608392 ) 					#label: 'Read-Only Class Browser' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.353392 0 0.091954 ) 					#label: 'Workspace' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.722101 0 0.091954 ) 					#label: 'MyTranscript' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.884026 0 0.0818966 101 23 ) 					#name: #ActionButton1 					#model: #clearMyTranscript 					#label: 'Clear Transcript' 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.715365 0 0.124579 0 1 0 0.597643 ) 					#name: #myTranscript 					#model: #myTranscript 					#menu: #noMenu 					#isReadOnly: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.347418 0 0.125 0 0.715536 0 0.597643 ) 					#model: #workspaceTextSC 					#menu: #learningMenu 					#tabRequiresControl: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0 0 0.091 318 357 ) 					#flags: 0 					#minorKey: #tabControlSpec ) ) ) )</body></methods><methods><class-id>StepEditor class</class-id> <category>interface specs</category><body package="SLesson Base">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Lesson Editor (EDIT MODE ONLY)' 			#bounds: #(#{Graphics.Rectangle} 397 249 993 655 ) 			#flags: 8 			#colors: 			#(#{UI.LookPreferences} 				#setBackgroundColor: #(#{Graphics.ColorValue} 6553 6553 6553 ) ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 4 0 591 53 ) 					#minorKey: #stepNavigatorPanel ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 0 0.185 0 0.998305 0 0.9875 ) 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6553 6553 6553 ) ) 					#model: #dynamicLabelsSIL 					#labels: #() ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 55 ) 					#label: 'Tabs appear below for each method of the step that is classified as ''step content''' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 465 0 4 0 120 22 ) 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #salmon ) ) 					#model: #browseStep 					#label: 'Browse Step' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 465 0 25 0 120 22 ) 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #salmon ) ) 					#model: #browseLesson 					#label: 'Browse Lesson' 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.015 0 0.2625 0 0.975 0 0.9625 ) 					#name: #textEditor 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7044 7044 7044 ) ) 					#model: #textEditorVH 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestFocusOutSelector: 						#textExit: ) 					#menu: #textEditorMenuHolder 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>LessonBrowser_02 class</class-id> <category>interface specs</category><body package="SLesson Base">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Lesson Browser (Stage 002)' 			#min: #(#{Core.Point} 640 643 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 353 80 993 723 ) 			#flags: 8 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 10 4 626 48 ) 					#flags: 0 					#minorKey: #stepNavigatorPanel ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.781513 0 1 0 1 ) 					#name: #myTranscript 					#model: #myTranscript 					#menu: #noMenu 					#isReadOnly: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.00786163 0 0.103286 ) 					#label: 'Goal' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.367925 0 0.103286 ) 					#label: 'Workspace' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.00943396 0 0.744914 ) 					#label: 'MyTranscript' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.358491 0 0.14 0 1 0 0.71 ) 					#model: #workspaceTextSC 					#menu: #learningMenu 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.830189 0 0.729264 101 23 ) 					#name: #clearTranscriptButton 					#model: #clearMyTranscript 					#label: 'Clear Transcript' 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.14 0 0.358491 0 0.71 ) 					#model: #whatSC 					#menu: #noMenu 					#isReadOnly: false 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="SLesson Base">helpLessonRunner	&lt;menuItem: #(#lessonBrowser #menus 'Lesson Browser')		nameKey: nil		menu: #(#menuBar #help)		position: 5.03&gt;		LessonRunner open</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Text</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars>string runs </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SelectionInList</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listHolder selectionIndexHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Collections</category><attributes><package>UIBasics-Collections</package></attributes></class><class><name>TextCollector</name><environment>UI</environment><super>UI.ValueHolder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>entryStream characterLimit writeSequencer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Support</category><attributes><package>Interface-Support</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>