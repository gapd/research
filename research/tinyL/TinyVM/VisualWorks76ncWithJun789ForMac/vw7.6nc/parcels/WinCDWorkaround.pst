<?xml version="1.0"?><st-source><!-- Name: Windows ColorDepth WorkaroundNotice: Copyright © 2008-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: If you are running VisualWorks on one of the MS Windows operating systems and change the color depth that the operarting system is currently displaying than the following error can occur:	Pixmap(Object)>>error:	Pixmap(Object)>>primitiveFailed	Pixmap>>deviceContentsOfAreaOriginX:y:width:height:into:startingAt:	Pixmap(DisplaySurface)>>contentsOfArea:into:startingAt:	Pixmap(DisplaySurface)>>contentsOfArea:	...This problem is known internally to Cincom as AR 47438 (Image crash when changing color depth on windows).  This package overrides some system classes to work around the problem.  Cincom is providing the package pre-loaded it VisualWorks 7.5.  Hopefully, in 7.5.1 or a future release these changes will not be needed or they will have been integrated into the Base VisualWorks bundle in some other form.  If you do not plan on deploying or running on any of the MS Windows operating systems, you can unload this package.DbIdentifier: bear73DbTrace: 81469DevelopmentPrerequisites: #(#(#any 'DLLCC' ''))PackageName: Windows ColorDepth WorkaroundParcel: #('Windows ColorDepth Workaround')ParcelName: Windows ColorDepth WorkaroundPrintStringCache: (0.9,bobw)Version: 7.6Date: 9:41:42 pm March 3, 2008 --><time-stamp>From VisualWorks®, 7.6 of February 8, 2008 on March 3, 2008 at 9:41:42 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Screen</name><environment>Graphics</environment><super>Graphics.HostGraphicsDevice</super><private>false</private><indexed-type>none</indexed-type><inst-vars>boundingBox subRegions resolution rendererName currentColorDepth currentBitsPerPixel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>Windows ColorDepth Workaround</package></attributes></class><comment><class-id>Graphics.Screen</class-id><body>Class Screen represents a display screen.  It supports screen-oriented protocol such as screen-wide user-interaction animation.Currently, Smalltalk supports only a single display screen, so this class only has one instance.Instance Variables:	boundingBox			&lt;Rectangle&gt;	 bounding box for the screen	subRegions				&lt;Array of: Rectangle&gt; rectangles that describe the screen's area	resolution				&lt;Point&gt; number of pixels per inch in the x and y directions	renderName				&lt;Symbol&gt;	platform nameClass variables:	AllScreens		&lt;HandleRegistry&gt; registry of all the available screens	DefaultScreen	&lt;Screen&gt; the default screenObject Reference:A Screen is the interface to a display monitor. Currently, only one screen at a time is supported -- that screen can be accessed by sending #default to this class. Applications usually interact with the screen indirectly, via display surfaces (windows, Pixmaps and Masks). In certain situations, however, direct communication with the screen may be necessary. The most common situation involves drag-and-drop animation, in which an object such as an icon is moved from one window to another. Screen's user-interaction methods enable you to perform such animations. Similarly, the zooming methods support the simulation of an expanding or shrinking object, which may also transcend window boundaries and require direct display on the screen. Other useful abilities of the screen, in addition to its inherited abilities, include: 	-Ringing a bell (utilities protocol) 	-Getting the window at a certain location on the screen (utilities) 	-Getting all windows on the screen (accessing) 	-Getting the size and resolution of the screen (accessing) 	-Creating an image from an area of the screen (accessing) 	-Getting and setting the contents of the operating system's clipboard (selection) </body></comment><methods><class-id>Graphics.Screen</class-id> <category>initialize-release</category><body package="Windows ColorDepth Workaround" selector="initialize">initialize	"Install my state"	super initialize.	self installBoundingBox.	resolution := 75@75.	currentColorDepth := currentBitsPerPixel := nil</body></methods><methods><class-id>Graphics.Screen</class-id> <category>accessing</category><body package="Windows ColorDepth Workaround" selector="contentsOfArea:">contentsOfArea: aRectangle 	"Obtain the bitmap contents of the specified area on my surface as	an Image.  The palette of the returned image may differ from the	receiver's default color palette.  For example, the captured image may	potentially use pixel values that are unallocated in the default color	palette.	Answer a two-element array:		Element 1 is an image with the bitmap contents.		Element 2 is an array of rectangles representing the areas of the			returned image that correspond to unobtainable portions of the			source display medium."	| image damageAndPalette newPalette actualDepth |	image := Image 				extent: aRectangle extent				depth: self currentColorDepth				bitsPerPixel: self currentBitsPerPixel				palette: self colorPalette.	damageAndPalette := self 				contentsOfArea: aRectangle				into: image bitsInstVar				startingAt: 1.	((newPalette := damageAndPalette at: 2) isNil 		and: [self currentColorDepth = self colorDepth]) 			ifFalse: 				[newPalette isNil 					ifFalse: 						[newPalette := self paletteForDeviceColormap: newPalette.						actualDepth := newPalette depth.						(actualDepth == 24 and: [self currentColorDepth == 32]) 							ifTrue: [actualDepth := 32]]					ifTrue: 						[newPalette := self currentColorPalette.						actualDepth := self currentColorDepth].				actualDepth = self colorBitsPerPixel 					ifFalse: 						[image := Image 									extent: aRectangle extent									depth: actualDepth									bitsPerPixel: actualDepth									palette: newPalette									usingBits: image bitsInstVar]					ifTrue: [image palette: newPalette]].	^Array with: image		with: ((damageAndPalette at: 1) collect: 					[:a | 					Rectangle origin: (a at: 1) @ (a at: 2) extent: (a at: 3) @ (a at: 4)])</body><body package="Windows ColorDepth Workaround" selector="currentBitsPerPixel">currentBitsPerPixel	currentBitsPerPixel == nil ifTrue: [^self colorBitsPerPixel].	^currentBitsPerPixel</body><body package="Windows ColorDepth Workaround" selector="currentColorDepth">currentColorDepth	currentColorDepth == nil ifTrue: [^self colorDepth].	^currentColorDepth</body><body package="Windows ColorDepth Workaround" selector="currentColorPalette">currentColorPalette	(self currentColorDepth = 32 or: [self currentColorDepth = 24])		ifTrue: [^FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255].	(self currentColorDepth = 16 or: [self currentColorDepth = 15])		ifTrue:  [^FixedPalette rgb5Bit].	self currentColorDepth = 8		ifTrue:  [^self class win256Palette].	^self colorPalette</body></methods><methods><class-id>Graphics.Screen</class-id> <category>private</category><body package="Windows ColorDepth Workaround" selector="setChangedColorDepth">setChangedColorDepth	currentColorDepth := currentBitsPerPixel := Win32SystemSupport new getScreenColorDepth.</body></methods><methods><class-id>Graphics.Screen class</class-id> <category>accessing</category><body package="Windows ColorDepth Workaround" selector="win256Palette">win256Palette	^MappedPalette 		withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4112 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4112 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4112 4112 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4112 0 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4112 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5525 5396 4915)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7581 7484 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 546 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2184 2184 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4369 4369 4369)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 4915 4915)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5461 5461 5461)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6007 6007 6007)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 6553 6553)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7099 7099 7099)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7645 7645 7645)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 0 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 0 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 0 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 0 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 0 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 0 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 0 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 0 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 0 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 0 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 0 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 0 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 0 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 0 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 0 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 0 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 1638 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 1638 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 1638 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 1638 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 1638 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 1638 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 1638 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 1638 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 1638 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 1638 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 1638 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 1638 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 1638 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 1638 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 1638 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 1638 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 1638 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 1638 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 1638 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 1638 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1638 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1638 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1638 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1638 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1638 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 3276 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 3276 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 3276 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 3276 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 3276 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 3276 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 3276 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 3276 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 3276 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 3276 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 3276 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 3276 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 3276 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 3276 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 3276 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 3276 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3276 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3276 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3276 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3276 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3276 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4915 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4915 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4915 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4915 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4915 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 4915 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 4915 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 4915 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 4915 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 4915 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 4915 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 4915 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 4915 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 4915 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 4915 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 4915 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 4915 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 4915 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 4915 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 4915 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 4915 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 4915 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 4915 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 4915 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 4915 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4915 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4915 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4915 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4915 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4915 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 6553 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 6553 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 6553 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 6553 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 6553 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 6553 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 6553 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 6553 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 6553 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 6553 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 6553 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 6553 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 6553 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 6553 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 6553 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 6553 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 6553 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 6553 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 6553 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 6553 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 6553 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 6553 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 6553 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 6553 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 6553 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 6553 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 6553 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 6553 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 6553 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 6553 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 8191 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 8191 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 8191 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 8191 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 8191 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 8191 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 8191 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 8191 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 8191 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4915 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 8191 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 8191 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 8191 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 2056)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8063 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 2505 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4112 4112 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191))) 				collect: 					[:each | 					(each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])</body></methods><methods><class-id>Graphics.Pixmap</class-id> <category>accessing</category><body package="Windows ColorDepth Workaround" selector="currentBitsPerPixel">currentBitsPerPixel	^self graphicsDevice currentBitsPerPixel</body><body package="Windows ColorDepth Workaround" selector="currentDepth">currentDepth	^self graphicsDevice currentColorDepth</body></methods><methods><class-id>Graphics.DisplaySurface</class-id> <category>accessing</category><body package="Windows ColorDepth Workaround" selector="contentsOfArea:">contentsOfArea: aRectangle 	"Obtain the bitmap contents of the specified area on my surface as	an Image.  The palette of the returned image may differ from the	receiver's default color palette.  For example, the captured image may	potentially use pixel values that are unallocated in the default color	palette.	Answer a two-element array:		Element 1 is an image with the bitmap contents.		Element 2 is an array of rectangles representing the areas of the			returned image that correspond to unobtainable portions of the			source display medium."	| image damageAndPalette newPalette actualDepth |	image := Image 				extent: aRectangle extent				depth: self currentDepth				bitsPerPixel: self currentBitsPerPixel				palette: self palette.	damageAndPalette := self 				contentsOfArea: aRectangle				into: image bitsInstVar				startingAt: 1.	((newPalette := damageAndPalette at: 2) isNil 		and: [self currentDepth = self depth]) 			ifFalse: 				[newPalette isNil 					ifFalse: 						[newPalette := self paletteForDeviceColormap: newPalette.						actualDepth := newPalette depth]					ifTrue: 						[newPalette := Screen default currentColorPalette.						actualDepth := self currentDepth].				actualDepth = self bitsPerPixel 					ifFalse: 						[image := Image 									extent: aRectangle extent									depth: actualDepth									bitsPerPixel: actualDepth									palette: newPalette									usingBits: image bitsInstVar]					ifTrue: [image palette: newPalette]].	^Array with: image		with: ((damageAndPalette at: 1) collect: 					[:a | 					Rectangle origin: (a at: 1) @ (a at: 2) extent: (a at: 3) @ (a at: 4)])</body></methods><methods><class-id>UI.InputState</class-id> <category>private</category><body package="Windows ColorDepth Workaround" selector="processUnknownEvent:for:">processUnknownEvent: event for: aWindow 	"Process an unknown event, which are general window system events 	that Smalltalk itself doesn't use."	Screen default platformName = 'MS-Windows' ifTrue: 		[| eventID |		eventID := (event at: 10) longAt: 9.		eventID = 16r51 ifTrue: 			[WindowsInputManager charSet: ((event at: 10) longAt: 13)].		eventID = 16r7E ifTrue: 			[ "WM_DISPLAYCHANGE" 			Screen default 				installBoundingBox; 				setChangedColorDepth.												CachedImage eraseCaches.			Icon eraseCaches]].	aWindow ifNil: [^self].	aWindow sensor ifNotNil: [:sensor | sensor eventUnknown: event]</body></methods><methods><class-id>Graphics.CachedImage class</class-id> <category>private</category><body package="Windows ColorDepth Workaround" selector="eraseCaches">eraseCaches	self allInstancesDo: [:inst | inst eraseCache]</body></methods><methods><class-id>Graphics.CachedImage</class-id> <category>private</category><body package="Windows ColorDepth Workaround" selector="eraseCache">eraseCache	retainedMedium := nil</body></methods><methods><class-id>Graphics.Mask</class-id> <category>accessing</category><body package="Windows ColorDepth Workaround" selector="currentBitsPerPixel">currentBitsPerPixel	^self bitsPerPixel</body><body package="Windows ColorDepth Workaround" selector="currentDepth">currentDepth	^self depth</body></methods><methods><class-id>OS.Win32SystemSupport</class-id> <category>constants</category><body package="Windows ColorDepth Workaround" selector="BITSPIXEL">BITSPIXEL	^12</body></methods><methods><class-id>OS.Win32SystemSupport</class-id> <category>procedures</category><body package="Windows ColorDepth Workaround" selector="getScreenColorDepth">getScreenColorDepth	| hdc |	hdc := self GetDC: nil.	^	[(self GetDeviceCaps: hdc for: self BITSPIXEL) 		* (self GetDeviceCaps: hdc for: self PLANES)] 			ensure: [self ReleaseDC: hdc forWindow: nil]</body></methods><methods><class-id>OS.Win32SystemSupport</class-id> <category>types</category><body package="Windows ColorDepth Workaround" selector="HWND">HWND	&lt;C: typedef HANDLE HWND&gt;</body></methods><methods><class-id>OS.Win32SystemSupport</class-id> <category>constants</category><body package="Windows ColorDepth Workaround" selector="PLANES">PLANES	^14</body></methods><methods><class-id>Graphics.Window</class-id> <category>accessing</category><body package="Windows ColorDepth Workaround" selector="currentBitsPerPixel">currentBitsPerPixel	^self graphicsDevice currentBitsPerPixel</body><body package="Windows ColorDepth Workaround" selector="currentDepth">currentDepth	^self graphicsDevice currentColorDepth</body></methods><methods><class-id>UI.Icon class</class-id> <category>private</category><body package="Windows ColorDepth Workaround" selector="eraseCaches">eraseCaches	| figure |	IconConstants do: [:icon |		figure := icon figure.		(figure isKindOf: CachedImage) ifTrue: [figure eraseCache]]</body></methods><methods><class-id>UI.Icon</class-id> <category>private accessing</category><body package="Windows ColorDepth Workaround" selector="figure">figure	^figure</body></methods><methods><class-id>OS.Win32SystemSupport</class-id> <category>procedures</category><body package="Windows ColorDepth Workaround" selector="GetDC:">GetDC: windowHndlOrNil	&lt;C:HDC GetDC(HWND windowHndlOrNil)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Windows ColorDepth Workaround" selector="GetDeviceCaps:for:">GetDeviceCaps: hdc for: nIndex	&lt;C: int GetDeviceCaps(HDC hdc, int nIndex)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Windows ColorDepth Workaround" selector="ReleaseDC:forWindow:">ReleaseDC: hdc forWindow: windowHndlOrNil 	&lt;C: int ReleaseDC(HWND windowHndlOrNil, HDC hdc)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Icon</name><environment>UI</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>figure shape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Support</category><attributes><package>Interface-Support</package></attributes></class><class><name>DisplaySurface</name><environment>Graphics</environment><super>Graphics.GraphicsMedium</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handle width height background </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>InputState</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y bitState shiftState ctrlState lockState metaState metaKeyState otherMetaKey1State lastClick eventDispatcher lastDownPoint lastUpPoint lastUpButton lastWindow </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>CachedImage</name><environment>Graphics</environment><super>Graphics.PixelArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars>image retainedMedium conversionMessage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category><attributes><package>Graphics-Images</package></attributes></class><class><name>Win32SystemSupport</name><environment>OS</environment><super>OS.OSSystemSupport</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			OS.Win32SystemSupportDictionary.*			</imports><category>OS-Support</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>kernel32.dll</item> <item>gdi32.dll</item> <item>advapi32.dll</item> <item>user32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual type="eval">false</beVirtual><optimizationLevel type="sym">full</optimizationLevel><package>OS-Support</package></attributes></class><class><name>Window</name><environment>Graphics</environment><super>Graphics.DisplaySurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputOrigin creationOrigin sensor iconic windowType effectiveWindowType statusLineHeight allowsStatusLine mapped eventHandlers windowManager </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>Mask</name><environment>Graphics</environment><super>Graphics.UnmappableSurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>HostGraphicsDevice</name><environment>Graphics</environment><super>Graphics.GraphicsDevice</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colorDepth colorBitsPerPixel coverageDepth coverageBitsPerPixel openFonts platName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>Pixmap</name><environment>Graphics</environment><super>Graphics.UnmappableSurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class></st-source>