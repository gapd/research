<?xml version="1.0"?><st-source><!-- Name: MacExtraNotice: Copyright © 2008-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: This parcel contains additions for Mac OS 9 specific IO (SoundManager and FileDialogs).It will not work on OS X and above.Additionally, it contains is a simple interface to AppleEvents.The MacEnvironmentBrowser allows easy administration of the environment variables.===========Version History:1.3		5i shipment1.31	fix for CEnvironment>commandLine to return an Array of Strings, new method introduced:			MacOSFilename->getStartUpFilesAsStrings1.32	fixed string conversion in SoundManager>enumerateSoundsFrom:,from now on the parcel/package is newly versioned:1.0/1.1		published for 5i.3 beta shipment,1.2		fixed AppleEvent stuff, was broken in beta1.4		fixed comment in SoundManager method1.9		Clarified intended platform: OS 9 onlyDbIdentifier: bear73DbTrace: 48176DevelopmentPrerequisites: #(#(#any 'DLLCC' ''))PackageName: MacExtraPackageName:: MacExtraParcel: #('MacExtra')ParcelName: MacExtraPrintStringCache: (1.11,bobw)Version: 7.6Date: 12:28:14 pm February 1, 2008 --><time-stamp>From VisualWorks®, 7.6 of February 1, 2008 on February 1, 2008 at 12:28:14 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MacToolBox</name><environment>OS</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			OS.MacToolBoxDictionary.*			</imports><category>MacInterfaces-Basic</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>InterfaceLib</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual type="eval">false</beVirtual><optimizationLevel type="sym">full</optimizationLevel><package>MacExtra</package></attributes></class><class><name>MacAliasManager</name><environment>OS</environment><super>OS.MacToolBox</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			OS.MacAliasManagerDictionary.*			</imports><category>MacInterfaces-AppleEvents</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual type="eval">false</beVirtual><optimizationLevel type="sym">full</optimizationLevel><package>MacExtra</package></attributes></class><class><name>MacEnvironmentBrowser</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>envVarList envVarValue oldSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>MacTools</category><attributes><package>MacExtra</package></attributes></class><comment><class-id>Tools.MacEnvironmentBrowser</class-id><body>This class implements a browser for environment variables on the Macintosh. Instance Variables:envVarList	&lt;SelectionInList&gt;		list of existing environment variablesenvVarValue	&lt;String&gt;				value of a selected environment variable</body></comment><class><name>AppleEventDescriptor</name><environment>OS</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>desc </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>MacInterfaces-AppleEvents</category><attributes><package>MacExtra</package></attributes></class><class><name>MacAppLaunchInterface</name><environment>OS</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			OS.MacAppLaunchInterfaceDictionary.*			</imports><category>OS-Mac</category><attributes><includeFiles><item>Files.h</item> <item>Processes.h</item></includeFiles><includeDirectories><item>HD:CIncludes:</item></includeDirectories><libraryFiles><item>InterfaceLib</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual type="eval">false</beVirtual><optimizationLevel type="sym">full</optimizationLevel><package>MacExtra</package></attributes></class><comment><class-id>OS.MacAppLaunchInterface</class-id><body>This class provides a way to launch other applications on a PowerMacintosh.  The typical usage would be:LaunchAppInterface launchApp: 'Hard disk:Applications:My Application'.</body></comment><class><name>MacAEManager</name><environment>OS</environment><super>OS.MacToolBox</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			OS.MacAEManagerDictionary.*			</imports><category>MacInterfaces-AppleEvents</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual type="eval">false</beVirtual><optimizationLevel type="sym">full</optimizationLevel><package>MacExtra</package></attributes></class><class><name>SoundManager</name><environment>OS</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Mac-Support</category><attributes><package>MacExtra</package></attributes></class><comment><class-id>OS.SoundManager</class-id><body>SoundManager allows the Advanced Macintosh/Smalltalk programmer to usethe Macintosh Sound Manager Utilities to enumerate and play available soundsfrom either the System file or a named file containing sound resources.</body></comment><methods><class-id>OS.MacToolBox</class-id> <category>types</category><body package="MacExtra" selector="Boolean">Boolean	&lt;C: typedef unsigned char Boolean&gt;</body><body package="MacExtra" selector="FSSpec">FSSpec	&lt;C: typedef struct {		short	vRefNum;		long	parID;		char	name[64];	} FSSpec&gt;</body><body package="MacExtra" selector="Handle">Handle	&lt;C: typedef Ptr *Handle&gt;</body><body package="MacExtra" selector="OSErr">OSErr	&lt;C: typedef short OSErr&gt;</body><body package="MacExtra" selector="OSType">OSType	&lt;C: typedef unsigned long OSType&gt;</body><body package="MacExtra" selector="Ptr">Ptr	&lt;C: typedef char * Ptr&gt;</body></methods><methods><class-id>OS.MacToolBox</class-id> <category>aux procedures</category><body package="MacExtra" selector="getHandleData:">getHandleData: handle 	| p size data |	handle isNull ifTrue: [^nil].	self HLock: handle.	p := handle contents.	size := self GetHandleSize: handle.	data := ByteArray new: size.	p		copyAt: 0		to: data		size: size		startingAt: 1.	self HUnlock: handle.	^data</body><body package="MacExtra" selector="getHandleData:as:">getHandleData: handle as: class 	| data |	data := self getHandleData: handle.	^data == nil ifFalse: [data changeClassToThatOf: class basicNew]</body><body package="MacExtra" selector="OSTypeFrom:">OSTypeFrom: aString 	| str t |	str := IOAccessor convertStringForPlatform: aString.	t := UninterpretedBytes new: 4.	t		replaceBytesFrom: 1		to: (4 min: str size)		with: str		startingAt: 1.	^t unsignedLongAt: 1</body></methods><methods><class-id>OS.MacAliasManager</class-id> <category>types</category><body package="MacExtra" selector="AliasHandle">AliasHandle	&lt;C: typedef AliasRecord ** AliasHandle&gt;</body><body package="MacExtra" selector="AliasRecord">AliasRecord	&lt;C: typedef struct { 		OSType			userType;		unsigned short	aliasSize;		char			aliasData[0];	} AliasRecord&gt;</body></methods><methods><class-id>OS.MacAliasManager</class-id> <category>utilities</category><body package="MacExtra" selector="aliasFromPath:">aliasFromPath: aString	"MacAliasManager new aliasFromPath: 	'Festplatte:MPW:Interfaces:CIncludes'"	| alias result |	alias := self Handle malloc.		[result := self				NewAliasMinimalFromFullPath: aString size				string: (String defaultPlatformClass fromString: aString)				zone: nil				server: nil				alias: alias.	result = 0 ifFalse: [self error: 'NewAlias: error ' , result printString]]		ifCurtailed: 			[alias contents isNull ifFalse: [self DisposeHandle: alias contents].			alias free.			alias := nil].	alias == nil		ifFalse: 			[result := self getHandleData: alias contents.			self DisposeHandle: alias contents.			alias free.			alias := result].	^alias</body></methods><methods><class-id>Tools.MacEnvironmentBrowser</class-id> <category>actions</category><body package="MacExtra" selector="cancel">cancel	"Reset the selected variable to the value in the preferences file."	self changedListSelection</body><body package="MacExtra" selector="changeSelection">changeSelection	"Set the selected environment variable to the new value in 	envVarValue."	| sel |	(sel := envVarList selection) notNil		ifTrue: 			[SystemUtils setEnvironmentVariable: sel value: envVarValue value.			self disableButtons]</body><body package="MacExtra" selector="deleteSelection">deleteSelection	"Delete the selected environment variable from the preferences 	file. Ignore changes in the envVarValue field."	| sel |	(sel := envVarList selection) notNil		ifTrue: 			[PowerMacSystemSupport deleteEnvironmentVariableNamed: sel.			envVarValue value: ''.			self disableButtons].	self updateList</body><body package="MacExtra" selector="newVariable">newVariable	"Create a new environment variable by asking the user for its 	name."	| res |	res := Dialog request: 'Enter a name for a new environment variable:' initialAnswer: 'NEWVAR'.	res notNil ifTrue: [SystemUtils setEnvironmentVariable: res value: '&lt; no value yet &gt;'].	self updateList.	envVarList selection: res</body></methods><methods><class-id>Tools.MacEnvironmentBrowser</class-id> <category>private</category><body package="MacExtra" selector="changedListSelection">changedListSelection	"If the user selects something in the envVarList, this method is 	invoked via 'onChangeSend:' mechanism. So look for changes in 	the envVarValue field, react when something is present, 	otherwise display the value of the now selected environment 	variable."	| save |	envVarValue retractInterestsFor: self.	(self builder componentAt: #changeButton) isEnabled ifTrue: [(Dialog confirm: 'Do you wish to discard those changes?')			ifFalse: 				[envVarList selectionIndexHolder retractInterestsFor: self.				save := envVarValue value.				envVarList selection: oldSelection.				envVarValue value: save.				envVarList selectionIndexHolder onChangeSend: #changedListSelection to: self.				envVarValue onChangeSend: #enableButtons to: self.				^self]].	envVarList selection isNil		ifTrue: [envVarValue value: '']		ifFalse: [envVarValue value: (SystemUtils getEnvironmentVariable: (oldSelection := envVarList selection))].	envVarValue onChangeSend: #enableButtons to: self.	self disableButtons</body><body package="MacExtra" selector="disableButtons">disableButtons	"Disable the cancel and change button."	| b |	b := self builder.	(b componentAt: #cancleButton) disable.	(b componentAt: #changeButton) disable</body><body package="MacExtra" selector="enableButtons">enableButtons	"Enable the cancel and change button."	| b |	b := self builder.	(b componentAt: #cancleButton) enable.	(b componentAt: #changeButton) enable</body><body package="MacExtra" selector="updateList">updateList	"Read all environment variables from the preferences file and 	display them in the list."	envVarList list: PowerMacSystemSupport getAllEnvironmentVariableNames</body></methods><methods><class-id>Tools.MacEnvironmentBrowser</class-id> <category>aspects</category><body package="MacExtra" selector="envVarList">envVarList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^envVarList isNil		ifTrue:			[envVarList := SelectionInList new]		ifFalse:			[envVarList]</body><body package="MacExtra" selector="envVarValue">envVarValue	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^envVarValue isNil		ifTrue:			[envVarValue := String new asValue]		ifFalse:			[envVarValue]</body></methods><methods><class-id>Tools.MacEnvironmentBrowser</class-id> <category>interface opening</category><body package="MacExtra" selector="postOpenWith:">postOpenWith: aBuilder 	"Set up all dependencies for envarList and 	envVarValue and fill the list with values."	envVarList selectionIndexHolder onChangeSend: #changedListSelection to: self.	(aBuilder componentAt: #valueField) widget controller continuousAccept: true.	envVarValue onChangeSend: #enableButtons to: self.	self disableButtons.	self updateList</body></methods><methods><class-id>Tools.MacEnvironmentBrowser</class-id> <category>initialize release</category><body package="MacExtra" selector="release">release	"Get rid of the DependencyTransformers."	envVarList selectionIndexHolder retractInterestsFor: self.	envVarValue retractInterestsFor: self.</body></methods><methods><class-id>OS.AppleEventDescriptor</class-id> <category>ae functions</category><body package="MacExtra" selector="addDesc:">addDesc: aDescriptor	^self addDesc: aDescriptor at: 0</body><body package="MacExtra" selector="addDesc:at:">addDesc: aDescriptor at: index 	| result |	result := self manager				AEPutDesc: desc				index: index				desc: aDescriptor desc.	result = 0 ifFalse: [self error: #AEPutDesc code: result]</body><body package="MacExtra" selector="asDescList">asDescList	| newList |	newList := self class new createList addDesc: self.	self release.	^newList</body><body package="MacExtra" selector="createAliasDescFor:">createAliasDescFor: aString	"self new createAliasDescFor: 'Festplatte:'"	| alias |	alias := MacAliasManager new aliasFromPath: aString.	self createDesc: 'alis' data: alias</body><body package="MacExtra" selector="createAppleEvent:id:target:returnID:transactionID:">createAppleEvent: class id: id target: target returnID: returnID transactionID: transactionID 	"| t ev |	t := self new createDesc: 'sign' data: 'MACS'.	ev := self new createAppleEvent: 'core' id: 'odoc' target: t returnID: nil transactionID: nil.	t release.	ev"	| m result |	m := self manager.	result := m				AECreateAppleEvent: (m OSTypeFrom: class)				id: (m OSTypeFrom: id)				target: target desc				returnID: (returnID == nil						ifTrue: [-1]						ifFalse: [returnID])				transactionID: (transactionID == nil						ifTrue: [0]						ifFalse: [transactionID])				event: desc.	result = 0 ifFalse: [self error: #AECreateAppleEvent code: result]</body><body package="MacExtra" selector="createDesc:data:">createDesc: type data: data 	"self new createDesc: 'TEXT' data: 'This is a simple string.'"	| m result d |	m := self manager.	d := data copyToHeap.	result := m				AECreateDesc: (m OSTypeFrom: type)				data: d				dataSize: data sizeInBytes				into: desc.	d free.	result = 0		ifFalse: 			[desc free.			desc := nil.			self error: #AECreateDesc code: result]</body><body package="MacExtra" selector="createList">createList	| result |	result := self manager				AECreateList: nil				size: 0				isRecord: 0				into: desc.	result = 0 ifFalse: [self error: #AECreateList code: result]</body><body package="MacExtra" selector="getParamDesc:type:">getParamDesc: keyword type: expectedType	| m result error |	m := self manager.	result := self class new.	result desc beGarbageCollectable.	error := m AEGetParamDesc: desc keyword: (m OSTypeFrom: keyword) type: (m OSTypeFrom: expectedType) desc: result desc.	error = 0 ifFalse: [self error: #AEGetParamDesc code: error].	^result</body><body package="MacExtra" selector="putParamDesc:keyword:">putParamDesc: aDescriptor keyword: keyword	| m result |	m := self manager.	result := m AEPutParamDesc: desc keyword: (m OSTypeFrom: keyword) desc: aDescriptor desc.	result = 0 ifFalse: [self error: #AEPutParamDesc code: result]</body><body package="MacExtra" selector="send">send	| reply result |	reply := AppleEventDescriptor new.	reply desc beGarbageCollectable.	result := self manager		AESend: desc		reply: reply desc		sendMode: 3 + 48 + 64		sendPriority: 0		timeOut: -1		idleProc: nil		filterProc: nil.	result = 0 ifFalse: [reply release. self error: #AESend code: result].	^reply</body><body package="MacExtra" selector="sendNoWait">sendNoWait	| reply result |	reply := AppleEventDescriptor new.	result := self manager		AESend: desc		reply: reply desc		sendMode: 1 + 48 + 64		sendPriority: 0		timeOut: -1		idleProc: nil		filterProc: nil.	reply release.	result = 0 ifFalse: [self error: #AESend code: result].	^nil</body></methods><methods><class-id>OS.AppleEventDescriptor</class-id> <category>accessing</category><body package="MacExtra" selector="data">data	| handle |	desc == nil ifTrue: [^nil].	handle := desc memberAt: #dataHandle.	^self manager getHandleData: handle</body><body package="MacExtra" selector="dataString">dataString	^self data changeClassToThatOf: (String defaultPlatformClass new)</body><body package="MacExtra" selector="desc">desc	^desc</body><body package="MacExtra" selector="descriptorType">descriptorType	| bytes |	bytes := UninterpretedBytes new: 4.	bytes unsignedLongAt: 1 put: (desc memberAt: #descriptorType).	^bytes stringAt: 1</body></methods><methods><class-id>OS.AppleEventDescriptor</class-id> <category>error handling</category><body package="MacExtra" selector="error:code:">error: aSymbol code: aNumber	self error: 'Error in ', aSymbol, ', code: ', aNumber printString</body></methods><methods><class-id>OS.AppleEventDescriptor</class-id> <category>initialize-release</category><body package="MacExtra" selector="initialize">initialize	desc := self manager AEDesc malloc</body><body package="MacExtra" selector="release">release	desc == nil		ifFalse: 			[self manager AEDisposeDesc: desc.			desc free.			desc := nil]</body></methods><methods><class-id>OS.AppleEventDescriptor</class-id> <category>private</category><body package="MacExtra" selector="manager">manager	^MacAEManager new</body></methods><methods><class-id>OS.AppleEventDescriptor</class-id> <category>printing</category><body package="MacExtra" selector="printOn:">printOn: aStream	| size d |	super printOn: aStream.	desc == nil ifTrue: [^aStream nextPutAll: ' (released)'].	d := self descriptorType.	d = '' ifTrue: [^aStream nextPutAll: ' (uninitialized)'].	size := self manager GetHandleSize: (desc memberAt: #dataHandle).	aStream space; print: d; space; print: size</body></methods><methods><class-id>OS.AppleEventDescriptor class</class-id> <category>instance creation</category><body package="MacExtra" selector="new">new	^super new initialize</body></methods><methods><class-id>OS.MacAppLaunchInterface</class-id> <category>structs</category><body package="MacExtra" selector="__AppParameters">__AppParameters	&lt;C: struct __AppParameters {			EventRecord theMsgEvent;			unsigned long eventRefCon, messageLength;		}&gt;</body><body package="MacExtra" selector="__EventRecord">__EventRecord	&lt;C: struct __EventRecord {			EventKind what;			UInt32 message, when;			Point where;			EventModifiers modifiers;		}&gt;</body><body package="MacExtra" selector="__FSSpec">__FSSpec	&lt;C: struct __FSSpec {			short vRefNum;			long parID;			Str63 name;		}&gt;</body><body package="MacExtra" selector="__LaunchParamBlockRec">__LaunchParamBlockRec	&lt;C: struct __LaunchParamBlockRec {			unsigned long reserved1;			unsigned short reserved2, launchBlockID;			unsigned long launchEPBLength;			unsigned short launchFileFlags;			LaunchFlags launchControlFlags;			FSSpecPtr launchAppSpec;			ProcessSerialNumber launchProcessSN;			unsigned long launchPreferredSize, launchMinimumSize, launchAvailableSize;			AppParametersPtr launchAppParameters;		}&gt;</body><body package="MacExtra" selector="__Point">__Point	&lt;C: struct __Point {			short v, h;		}&gt;</body><body package="MacExtra" selector="__ProcessSerialNumber">__ProcessSerialNumber	&lt;C: struct __ProcessSerialNumber {			unsigned long highLongOfPSN, lowLongOfPSN;		}&gt;</body></methods><methods><class-id>OS.MacAppLaunchInterface</class-id> <category>types</category><body package="MacExtra" selector="AppParametersPtr">AppParametersPtr	&lt;C: typedef struct __AppParameters * AppParametersPtr&gt;</body><body package="MacExtra" selector="ConstStr255Param">ConstStr255Param	&lt;C: typedef const unsigned char * ConstStr255Param&gt;</body><body package="MacExtra" selector="ConstStr63Param">ConstStr63Param	&lt;C: typedef ConstStr255Param ConstStr63Param&gt;</body><body package="MacExtra" selector="EventKind">EventKind	&lt;C: typedef UInt16 EventKind&gt;</body><body package="MacExtra" selector="EventModifiers">EventModifiers	&lt;C: typedef UInt16 EventModifiers&gt;</body><body package="MacExtra" selector="EventRecord">EventRecord	&lt;C: typedef struct __EventRecord EventRecord&gt;</body><body package="MacExtra" selector="FSSpec">FSSpec	&lt;C: typedef struct __FSSpec FSSpec&gt;</body><body package="MacExtra" selector="FSSpecPtr">FSSpecPtr	&lt;C: typedef FSSpec * FSSpecPtr&gt;</body><body package="MacExtra" selector="LaunchFlags">LaunchFlags	&lt;C: typedef unsigned short LaunchFlags&gt;</body><body package="MacExtra" selector="LaunchParamBlockRec">LaunchParamBlockRec	&lt;C: typedef struct __LaunchParamBlockRec LaunchParamBlockRec&gt;</body><body package="MacExtra" selector="LaunchPBPtr">LaunchPBPtr	&lt;C: typedef struct __LaunchParamBlockRec * LaunchPBPtr&gt;</body><body package="MacExtra" selector="OSErr">OSErr	&lt;C: typedef short OSErr&gt;</body><body package="MacExtra" selector="Point">Point	&lt;C: typedef struct __Point Point&gt;</body><body package="MacExtra" selector="ProcessSerialNumber">ProcessSerialNumber	&lt;C: typedef struct __ProcessSerialNumber ProcessSerialNumber&gt;</body><body package="MacExtra" selector="Str63">Str63	&lt;C: typedef unsigned char Str63[64]&gt;</body><body package="MacExtra" selector="UInt16">UInt16	&lt;C: typedef unsigned short UInt16&gt;</body><body package="MacExtra" selector="UInt32">UInt32	&lt;C: typedef unsigned long UInt32&gt;</body></methods><methods><class-id>OS.MacAppLaunchInterface</class-id> <category>utilities</category><body package="MacExtra" selector="launchApp:">launchApp: fullPathName	| fsp fn err fstr lbp  farr|	fsp := self FSSpec gcMalloc.	lbp := self LaunchParamBlockRec gcMalloc.	farr :=  (MacOSFilename named: fullPathName) primResolvePath.	fstr := (farr at: 1) asByteArray.	fn := self Str63 gcMalloc.	fn at: 0 put: fstr size.  "put the size in it"	1 to: fstr size do: [:i |  fn at: i put: (fstr at: i)].	err := self FSMakeFSSpec: (farr at: 2) with: (farr at: 3) with: fn with: fsp.	err ~~ 0 ifTrue:  [self error: 'FSMakeSpec returned ', err printString. ].	lbp memberAt: #reserved1 put: 0.	lbp memberAt: #reserved2 put: 0.	lbp memberAt: #launchBlockID put: 16r4C43.	"extendedBlock = ((unsigned)'LC')"	lbp memberAt: #launchEPBLength put: 32.		"extendedBlockLen	 = (sizeof(LaunchParamBlockRec) - 12)"	lbp memberAt: #launchFileFlags put: 0.	lbp memberAt: #launchControlFlags put: 16r4800.	"launchContinue + launchNoFileFlags"	lbp memberAt: #launchAppSpec put: fsp.	lbp memberAt: #launchAppParameters put: nil.	err := self LaunchApplication: lbp.	err ~~ 0 ifTrue: [self error: 'LaunchApplication returned ', err printString.].</body></methods><methods><class-id>OS.MacAppLaunchInterface class</class-id> <category>private</category><body package="MacExtra" selector="isPowerMac:">isPowerMac: platformArray"Returns #true if this platform is a PowerMac.  platformArray is in the form returned by (ExternalInterface class currentPlatform) "^ (platformArray at: 1) == #mac	and: [ | stream |				stream := (platformArray at: 2) readStream.				stream					skipThrough: Character space;					skipThrough: Character space;					skipThrough: Character space.				stream peek == $P].</body></methods><methods><class-id>OS.MacAppLaunchInterface class</class-id> <category>class initialization</category><body package="MacExtra" selector="installOn:">installOn: platformArray	super installOn: platformArray.	(self isPowerMac: platformArray)		ifTrue:			[| ifc macLayout |			ifc := self new.			"macLayout is appropriate for 68K processors and PowerMac struct typedefs that use			#pragma options align=mac68k"			macLayout := CStructureLayout macLayout.			ifc FSSpec typeDo: macLayout.			ifc LaunchParamBlockRec typeDo: macLayout.			"and maybe more???"		]</body></methods><methods><class-id>OS.MacAppLaunchInterface class</class-id> <category>utilities</category><body package="MacExtra" selector="launchApp:">launchApp: fullPathName^self new launchApp: fullPathName</body></methods><methods><class-id>OS.MacAEManager</class-id> <category>types</category><body package="MacExtra" selector="AEAddressDesc">AEAddressDesc	&lt;C: typedef AEDesc AEAddressDesc&gt;</body><body package="MacExtra" selector="AEDesc">AEDesc	&lt;C: typedef struct { 		OSType	descriptorType;		Handle	dataHandle;	} AEDesc&gt;</body><body package="MacExtra" selector="AEDescList">AEDescList	&lt;C: typedef AEDesc  AEDescList&gt;</body><body package="MacExtra" selector="AppleEvent">AppleEvent	&lt;C: typedef AEDesc AppleEvent&gt;</body></methods><methods><class-id>OS.MacAEManager class</class-id> <category>utilities</category><body package="MacExtra" selector="finderOpen:">finderOpen: aString 	"Send aString containing a full path to a document or application to the Finder, 	which tries to start the document with its creator application, or the application 	described by aString."	"MacAEManager finderOpen: 'Spare:Programme:SimpleText'"	"MacAEManager finderOpen: 'Festplatte:Programme:Microsoft Office 98:Microsoft Word'"	^self sendOpen: aString to: 'MACS'</body><body package="MacExtra" selector="finderPrint:">finderPrint: aString 	"Send aString to the Finder, which should try to print the document described 	by aString."	"MacAEManager finderPrint: 'Festplatte:Test'"	^self sendPrint: aString to: 'MACS'</body><body package="MacExtra" selector="sendOpen:to:">sendOpen: aString to: signature 	"Send aString containing a full path to a document to an application identified 	via signature. 	Please use this method only if you know some details about AppleEvents. The 	signature of an application SOMETIMES is the same four character code as  	the creator code for a file. For example, 		'MACS' is the signature of the Finder, 		'GKON' for the popular GraphicConverter,		'TVOD' for the MoviePlayer, or		'ttxt' for the SimpleText  text editor.	Use this method when you want to open a document with a specific application.	REMEMBER: This application has to be up and running!	If the application is not found, the Finder will report an error, which is invisible 	to the VisualWorks image!"	"MacAEManager sendOpen: 'rolishd:Programme:CDeveloper:VW30a:image:Test.txt' to: 'ttxt'"	^self		sendOpen: aString		to: signature		id: 'odoc'</body></methods><methods><class-id>OS.MacAEManager class</class-id> <category>private</category><body package="MacExtra" selector="sendOpen:to:id:">sendOpen: aString to: signature id: id 	"PRIVATE: Really send aString to an application identified via signature, and 	use the id for the AppleEvent. Please use this method only if you know some 	details about AppleEvents."	"MacAEManager sendOpen: 'Festplatte:Test' to: 'MACS' id: 'odoc'"	| target event alias |	event := AppleEventDescriptor new.	target := AppleEventDescriptor new.	alias := AppleEventDescriptor new.	^	[target createDesc: 'sign' data: signature.	alias createAliasDescFor: aString.	event		createAppleEvent: 'aevt'		id: id		target: target		returnID: nil		transactionID: nil.	event putParamDesc: alias keyword: '----'.	event sendNoWait]		ensure: 			[target release.			event release.			alias release]</body><body package="MacExtra" selector="sendPrint:to:">sendPrint: aString to: signature 	"PRIVATE: Really send aString describing a document to an application 	identified via signature. Please use this method only if you know some details 	about AppleEvents."	^self		sendOpen: aString		to: signature		id: 'pdoc'</body></methods><methods><class-id>OS.SoundManager class</class-id> <category>accessing</category><body package="MacExtra" selector="enumerateSoundsFrom:">enumerateSoundsFrom: aFileOrNil 	"The argument is a MacFilename or nil, with nil pointing 	to the MacOS system sounds. 	Returns an OrderedCollection of Strings of the names of sounds. 	Some sounds return empty names and are removed from this list."	"SoundManager enumerateSoundsFrom: nil"	| col |	col := OrderedCollection new.	(self primEnumerateSoundsFrom: aFileOrNil)		do: [:e | e isEmpty ifFalse: [col add: (MacString fromBytes: e) asByteString]].	^col</body><body package="MacExtra" selector="playLocalSoundWithID:">playLocalSoundWithID: aNumber	"The argument is the ID of a Sound Resource contained	in the VisualWorks ObjectEngine. Currently, only resource	number 9000 is available, but feel free to add your own ones	using ResEdit. Returns true or false.	RW Georg Heeg 1998"	"SoundManager playLocalSoundWithID: 9000 "	^self primPlayLocalSoundWithID: aNumber</body><body package="MacExtra" selector="playSoundFrom:sound:">playSoundFrom: aFileOrNil sound: aString	"The argument aFileOrNil is a MacFilename or nil, with nil 	pointing to the MacOS System sounds.	aString should be the identifier for a sound in aFileOrNil.	 Returns true or false."	"SoundManager  playSoundFrom: nil sound: 'Bing'"	"(SoundManager enumerateSoundsFrom: nil)  		do: [ :sndName| SoundManager  playSoundFrom: nil sound: sndName]"	^self primPlaySoundFrom: aFileOrNil sound: aString</body></methods><methods><class-id>OS.SoundManager class</class-id> <category>primitives</category><body package="MacExtra" selector="primEnumerateSoundsFrom:">primEnumerateSoundsFrom: aFileOrNil	" argument is a MacFilename or nil. Returns	an array of Strings of the names of sounds" 	"(SoundManager  primEnumerateSoundsFrom: nil) collect: [ :e | e asString] "	&lt;primitive: 772&gt;	^self primitiveFailed</body><body package="MacExtra" selector="primPlayLocalSoundWithID:">primPlayLocalSoundWithID: aNumber	"The argument is the ID of a Sound Resource contained	in the VisualWorks ObjectEngine. Currently, only resource	number 9000 is available, but feel free to add your own ones	using ResEdit. Returns true or false.	RW Georg Heeg 1998"	"SoundManager playLocalSoundWithID: 9000 "	&lt;primitive: 774 &gt;	^self primitiveFailed</body><body package="MacExtra" selector="primPlaySoundFrom:sound:">primPlaySoundFrom: aFileOrNil sound: aString	"The argument aFileOrNil is a MacFilename or nil, with nil 	pointing to the MacOS Sounds.	aString should be the identifier for a sound in aFileOrNil.	 Returns true or false."	"SoundManager  playSoundFrom: nil sound: 'Bing'"	"((SoundManager  enumerateSoundsFrom: nil) collect: [ :e | e asString])  	do: [ :sndName| sndName = '' 		ifFalse:[ SoundManager  playSoundFrom: nil sound: sndName]]"	&lt;primitive: 773 &gt;	^self primitiveFailed</body></methods><methods><class-id>OS.MacFilename</class-id> <category>utilities</category><body package="MacExtra" selector="setAsDefaultApp">setAsDefaultApp	"Set the receiver as the default application to handle files with the receiver's creator type.  Fail if the receiver does not represent an application."	&lt;primitive: 753 errorCode: error&gt;	error handleErrorFor: self</body></methods><methods><class-id>Tools.MacEnvironmentBrowser class</class-id> <category>interface specs</category><body package="MacExtra" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Mac Environment Browser' 			#bounds: #(#{Graphics.Rectangle} 264 213 649 522 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{UI.LayoutFrame} 7 0 24 0 30 0.5 30 0.5 ) 					#model: #envVarList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{UI.LayoutFrame} 5 0 60 0.5 -5 1 89 0.5 ) 					#name: #valueField 					#model: #envVarValue ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.LayoutFrame} -50 0.333333 0 0.851133 40 0.333333 61 0.75 ) 					#name: #changeButton 					#model: #changeSelection 					#label: 'Change' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.LayoutFrame} 50 0.5 -92 0.5 -20 1 -60 0.5 ) 					#name: #deleteButton 					#model: #deleteSelection 					#label: 'Delete' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.LayoutFrame} -40 0.666666 0 0.851133 50 0.666666 61 0.75 ) 					#name: #cancleButton 					#model: #cancel 					#label: 'Cancel' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 4 4 ) 					#label: 'Environment Variable Names:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.LayoutOrigin} 5 0 40 0.5 ) 					#label: 'Value of Selection:' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.LayoutFrame} 51 0.5 -54 0.5 -19 1 -22 0.5 ) 					#name: #newButton 					#model: #newVariable 					#label: 'New ...' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>OS.MacToolBox</class-id> <category>procedures</category><body package="MacExtra" selector="CurResFile">CurResFile	&lt;C: pascal short CurResFile(void)&gt;</body><body package="MacExtra" selector="DisposeHandle:">DisposeHandle: h	&lt;C: pascal void DisposeHandle(Handle h)&gt;</body><body package="MacExtra" selector="Gestalt:with:">Gestalt: arg1 with: arg2	&lt;C: pascal int Gestalt(int arg1, int * arg2)&gt;	^self externalAccessFailed</body><body package="MacExtra" selector="GetHandleSize:">GetHandleSize: h	&lt;C: pascal long GetHandleSize(Handle h)&gt;</body><body package="MacExtra" selector="HLock:">HLock: h	&lt;C: pascal OSErr HLock(Handle h)&gt;</body><body package="MacExtra" selector="HUnlock:">HUnlock: h	&lt;C: pascal OSErr HUnlock(Handle h)&gt;</body><body package="MacExtra" selector="NewHandle:">NewHandle: size	&lt;C: pascal Handle NewHandle(long size)&gt;</body><body package="MacExtra" selector="SetFractEnable:">SetFractEnable: arg	"MacToolBox new SetFractEnable: 1"	&lt;C: pascal void SetFractEnable(short arg)&gt;</body></methods><methods><class-id>OS.MacAliasManager</class-id> <category>procedures</category><body package="MacExtra" selector="NewAliasMinimalFromFullPath:string:zone:server:alias:">NewAliasMinimalFromFullPath: fullPathLength string: fullPath zone: zoneName server: serverName alias: alias	&lt;C: pascal OSErr NewAliasMinimalFromFullPath( 		short	fullPathLength,		char *	fullPath,		char *	zoneName,		char *	serverName,		AliasHandle *	alias)&gt;</body><body package="MacExtra" selector="ResolveAliasFrom:alias:target:wasChanged:">ResolveAliasFrom: fromFile alias: alias target: target wasChanged: wasChanged	&lt;C: pascal OSErr ResolveAlias( 		const FSSpec 	*fromFile,		AliasHandle		alias,		FSSpec			*target,		Boolean			*wasChanged)&gt;</body></methods><methods><class-id>OS.MacAppLaunchInterface</class-id> <category>procedures</category><body package="MacExtra" selector="FSMakeFSSpec:with:with:with:">FSMakeFSSpec: vRefNum with: dirID with: fileName with: spec	&lt;C: pascal OSErr FSMakeFSSpec(short vRefNum, long dirID, ConstStr255Param fileName, FSSpec * spec) &gt;"  = {0x70, 0x1, 0xAA, 0x52} "	^self externalAccessFailed</body><body package="MacExtra" selector="LaunchApplication:">LaunchApplication: LaunchParams	&lt;C: pascal OSErr LaunchApplication(LaunchPBPtr LaunchParams) &gt;"  = {0xA9, 0xF2} "	^self externalAccessFailed</body></methods><methods><class-id>OS.MacAEManager</class-id> <category>procedures</category><body package="MacExtra" selector="AECreateAppleEvent:id:target:returnID:transactionID:event:">AECreateAppleEvent: theAEEventClass id: theAEEventID target: target returnID: returnID transactionID: transactionID event: result	&lt;C:  pascal OSErr AECreateAppleEvent(		OSType theAEEventClass,		OSType theAEEventID,		const AEAddressDesc *target,		short returnID,		long transactionID,		AppleEvent *result)&gt;</body><body package="MacExtra" selector="AECreateDesc:data:dataSize:into:">AECreateDesc: typeCode data: dataPtr dataSize: dataSize into: result	&lt;C:  pascal OSErr AECreateDesc(		OSType typeCode,		const void *dataPtr,		long dataSize,		AEDesc *result)&gt;</body><body package="MacExtra" selector="AECreateList:size:isRecord:into:">AECreateList: factoringPtr size: factoredSize isRecord: isRecord into: resultList	&lt;C:  pascal OSErr AECreateList(		Ptr factoringPtr,		long factoredSize,		Boolean isRecord,		AEDescList *resultList)&gt;</body><body package="MacExtra" selector="AEDisposeDesc:">AEDisposeDesc: theAEDesc	&lt;C:  pascal OSErr AEDisposeDesc(AEDesc *theAEDesc)&gt;</body><body package="MacExtra" selector="AEGetParamDesc:keyword:type:desc:">AEGetParamDesc: theAppleEvent keyword: theAEKeyword type: desiredType desc: theAEDesc	&lt;C:  pascal OSErr AEGetParamDesc( 		const AppleEvent *theAppleEvent,		OSType theAEKeyword,		OSType desiredType,		AEDesc *theAEDesc)&gt;</body><body package="MacExtra" selector="AEPutDesc:index:desc:">AEPutDesc: theAEDescList index: index desc: theAEDesc	&lt;C: pascal OSErr AEPutDesc( 		const AEDescList *theAEDescList,		long index,		const AEDesc *theAEDesc)&gt;</body><body package="MacExtra" selector="AEPutParamDesc:keyword:desc:">AEPutParamDesc: theAppleEvent keyword: theAEKeyword desc: theAEDesc	&lt;C: pascal OSErr AEPutParamDesc( 		const AppleEvent *theAppleEvent,		OSType theAEKeyword,		const AEDesc *theAEDesc)&gt;</body><body package="MacExtra" selector="AEPutParamPtr:keyword:typeCode:data:size:">AEPutParamPtr: theAppleEvent keyword: theAEKeyword typeCode: typeCode data: dataPtr size: dataSize	&lt;C: pascal OSErr AEPutParamPtr( 		const AppleEvent *theAppleEvent,		OSType theAEKeyword,		OSType typeCode,		const void *dataPtr,		long dataSize)&gt;</body><body package="MacExtra" selector="AEPutPtr:index:typeCode:data:size:">AEPutPtr: theAEDescList index: index typeCode: typeCode data: dataPtr size: dataSize	&lt;C: pascal OSErr AEPutPtr( 		const AEDescList *theAEDescList,		long index,		OSType typeCode,		const void *dataPtr,		long dataSize)&gt;</body><body package="MacExtra" selector="AESend:reply:sendMode:sendPriority:timeOut:idleProc:filterProc:">AESend: theAppleEvent reply: reply sendMode: sendMode sendPriority: sendPriority timeOut: timeOutInTicks idleProc: idleProc filterProc: filterProc	&lt;C: pascal OSErr AESend( 		const AppleEvent *theAppleEvent,		AppleEvent *reply,		long sendMode,		long sendPriority,		long timeOutInTicks,		Ptr idleProc,		Ptr filterProc)&gt;</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ExternalInterface</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>MacFilename</name><environment>OS</environment><super>OS.Filename</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Mac</category><attributes><package>OS-Mac</package></attributes></class></st-source>