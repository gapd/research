<?xml version="1.0"?><st-source><time-stamp>From VisualWorksÂ® NonCommercial, 7.6 of March 3, 2008 on March 7, 2010 at 11:19:47 am</time-stamp><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><methods><class-id>Core.Object</class-id> <category>prolog</category><body package="Kernel-Objects" selector="car">car	self == nil ifTrue: [^nil].	self error: 'send message car to atom'</body><body package="Kernel-Objects" selector="cdr">cdr	self == nil ifTrue: [^nil].	self error: 'send message cdr to atom'</body><body package="Kernel-Objects" selector="cons:">cons: anObject 	^JunPrologList car: self cdr: anObject</body><body package="Kernel-Objects" selector="consp">consp	^false</body><body package="Kernel-Objects" selector="isJunPrologEntity">isJunPrologEntity	self == nil ifTrue: [^true].	(self isKindOf: Number)		ifTrue: [^true].	^false</body><body package="Kernel-Objects" selector="isJunPrologVariable">isJunPrologVariable	^false</body><body package="Kernel-Objects" selector="printJunPrologOn:">printJunPrologOn: aStream 	self == nil		ifTrue: 			[aStream nextPutAll: '[]'.			^self].	(self isKindOf: Number)		ifTrue: 			[self printOn: aStream.			^self].	aStream nextPut: ${.	self printOn: aStream.	aStream nextPut: $}</body><body package="Kernel-Objects" selector="printJunPrologOn:level:">printJunPrologOn: aStream level: anInteger 	self printJunPrologOn: aStream</body><body package="Kernel-Objects" selector="printJunPrologString">printJunPrologString	| aStream |	aStream := WriteStream on: (String new: 20).	self printJunPrologOn: aStream.	^aStream contents</body></methods><methods><class-id>Core.Point class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"Point fromUser."	| aPoint |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			aPoint := InputState default mousePoint.			[InputState default mouseButtons &gt; 0] whileTrue].	^aPoint</body></methods><methods><class-id>Graphics.Polyline class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"Polyline fromUser."	| oldPoint newPoint aStream |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			oldPoint := InputState default mousePoint.			newPoint := oldPoint.			aStream := WriteStream on: (Array new: 1024).			aStream nextPut: newPoint.			[InputState default mouseButtons &gt; 0]				whileTrue: 					[JunApplicationModel displayPendingInvalidation.					newPoint := InputState default mousePoint.					newPoint = oldPoint						ifTrue: [Time millisecondClockValue \\ 100 = 0 ifTrue: [Screen default									displayShape: aStream contents									at: Point zero									forMilliseconds: 20]]						ifFalse: 							[aStream nextPut: newPoint.							Screen default								displayShape: aStream contents								at: Point zero								forMilliseconds: 20.							oldPoint := newPoint]].			[InputState default mouseButtons &gt; 0] whileTrue].	^self vertices: aStream contents</body></methods><methods><class-id>Graphics.Circle class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"Circle fromUser."	| startPoint aCenter oldPoint endPoint aCircle |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			startPoint := InputState default mousePoint.			oldPoint := startPoint.			endPoint := oldPoint.			aCenter := self center: startPoint radius: 1.			aCircle := self center: startPoint radius: 0.			[InputState default mouseButtons &gt; 0]				whileTrue: 					[JunApplicationModel displayPendingInvalidation.					endPoint := InputState default mousePoint.					aCircle := self center: startPoint radius: (endPoint dist: startPoint) rounded.					endPoint = oldPoint						ifTrue: [Time millisecondClockValue \\ 100 = 0								ifTrue: 									[Screen default										displayShape: aCenter asPolyline vertices										at: Point zero										forMilliseconds: 20.									Screen default										displayShape: aCircle asPolyline vertices										at: Point zero										forMilliseconds: 20]]						ifFalse: 							[Screen default								displayShape: aCenter asPolyline vertices								at: Point zero								forMilliseconds: 20.							Screen default								displayShape: aCircle asPolyline vertices								at: Point zero								forMilliseconds: 20.							oldPoint := endPoint]].			[InputState default mouseButtons &gt; 0] whileTrue].	^aCircle</body></methods><methods><class-id>Graphics.LineSegment class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"LineSegment fromUser."	| startPoint oldPoint endPoint lineSegment |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			startPoint := InputState default mousePoint.			oldPoint := startPoint.			endPoint := oldPoint.			lineSegment := self from: startPoint to: endPoint.			JunApplicationModel displayPendingInvalidation.			[InputState default mouseButtons &gt; 0]				whileTrue: 					[JunApplicationModel displayPendingInvalidation.					endPoint := InputState default mousePoint.					lineSegment := self from: startPoint to: endPoint.					endPoint = oldPoint						ifTrue: [Time millisecondClockValue \\ 100 = 0 ifTrue: [Screen default									displayShape: lineSegment asPointArray									at: Point zero									forMilliseconds: 20]]						ifFalse: 							[Screen default								displayShape: lineSegment asPointArray								at: Point zero								forMilliseconds: 20.							oldPoint := endPoint]].			[InputState default mouseButtons &gt; 0] whileTrue].	^lineSegment</body></methods><methods><class-id>Graphics.EllipticalArc class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"EllipticalArc fromUser."	| startPoint aCenter oldPoint endPoint aRectangle ellipticalArc |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			startPoint := InputState default mousePoint.			oldPoint := startPoint.			endPoint := oldPoint.			aCenter := self center: startPoint radius: 1.			ellipticalArc := self boundingBox: (startPoint extent: 0 @ 0).			[InputState default mouseButtons &gt; 0]				whileTrue: 					[JunApplicationModel displayPendingInvalidation.					endPoint := InputState default mousePoint.					aRectangle := Rectangle vertex: startPoint - (endPoint - startPoint) vertex: startPoint + (endPoint - startPoint).					aRectangle := aRectangle align: aRectangle center with: startPoint.					(startPoint x &lt;= endPoint x and: [startPoint y &lt;= endPoint y])						ifTrue: [ellipticalArc := self										boundingBox: aRectangle										startAngle: 0										sweepAngle: 90].					(startPoint x &gt; endPoint x and: [startPoint y &lt;= endPoint y])						ifTrue: [ellipticalArc := self										boundingBox: aRectangle										startAngle: 90										sweepAngle: 90].					(startPoint x &gt; endPoint x and: [startPoint y &gt; endPoint y])						ifTrue: [ellipticalArc := self										boundingBox: aRectangle										startAngle: 180										sweepAngle: 90].					(startPoint x &lt;= endPoint x and: [startPoint y &gt; endPoint y])						ifTrue: [ellipticalArc := self										boundingBox: aRectangle										startAngle: 270										sweepAngle: 90].					endPoint = oldPoint						ifTrue: [Time millisecondClockValue \\ 100 = 0								ifTrue: 									[Screen default										displayShape: aCenter asPolyline vertices										at: Point zero										forMilliseconds: 20.									Screen default										displayShape: ellipticalArc asPolyline vertices										at: Point zero										forMilliseconds: 20]]						ifFalse: 							[Screen default								displayShape: aCenter asPolyline vertices								at: Point zero								forMilliseconds: 20.							Screen default								displayShape: ellipticalArc asPolyline vertices								at: Point zero								forMilliseconds: 20.							oldPoint := endPoint]].			[InputState default mouseButtons &gt; 0] whileTrue].	^ellipticalArc</body></methods><methods><class-id>Graphics.OpaqueImage class</class-id> <category>instance creation</category><body package="Graphics-Images" selector="fromUser">fromUser	"OpaqueImage fromUser."	"| opaqueImage aWindow | 	opaqueImage := OpaqueImage fromUser. 	aWindow := ScheduledWindow new. 	aWindow minimumSize: opaqueImage extent. 	aWindow component: opaqueImage. 	aWindow open 	"	| pointArray aFigure aShape minPoint maxPoint aRectangle aPixmap graphicsContext |	pointArray := Polyline fromUser vertices.	pointArray isEmpty		ifTrue: 			[aFigure := Image						extent: 0 @ 0						depth: Screen default colorDepth						palette: Screen default colorPalette.			aShape := aFigure copy.			aShape := aShape convertToPalette: MappedPalette whiteBlack.			aShape palette: CoveragePalette monoMaskPalette.			^OpaqueImage figure: aFigure shape: aShape].	JunApplicationModel displayPendingInvalidation.	pointArray first = pointArray last		ifFalse: 			[pointArray := pointArray copyWith: pointArray first.			Screen default				displayShape: pointArray				at: Point zero				forMilliseconds: 10].	minPoint := nil.	maxPoint := nil.	pointArray		do: 			[:aPoint | 			minPoint isNil				ifTrue: [minPoint := aPoint]				ifFalse: [minPoint := aPoint min: minPoint].			maxPoint isNil				ifTrue: [maxPoint := aPoint]				ifFalse: [maxPoint := aPoint max: maxPoint]].	aRectangle := minPoint corner: maxPoint.	aFigure := Screen default completeContentsOfArea: aRectangle.	aPixmap := Pixmap extent: aRectangle extent.	[Cursor execute		showWhile: 			[graphicsContext := aPixmap graphicsContext.			graphicsContext paint: ColorValue white.			graphicsContext displayRectangle: aPixmap bounds.			graphicsContext paint: ColorValue black.			graphicsContext displayPolygon: pointArray at: aRectangle origin negated.			aShape := aPixmap asImage]]		ensure: [aPixmap close].	aShape := aShape convertToPalette: MappedPalette whiteBlack.	aShape palette: CoveragePalette monoMaskPalette.	^OpaqueImage figure: aFigure shape: aShape</body></methods><methods><class-id>Kernel.SystemUtils class</class-id> <category>accessing</category><body package="System-Support" selector="getEnvironmentVariable:">getEnvironmentVariable: varName 	"Get an environment variable's value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^SetEnv readSetEnv at: varName ifAbsent: [	^OSSystemSupport concreteClass new getVariable: varName]</body><body package="System-Support" selector="getEnvironmentVariable:ifAbsent:">getEnvironmentVariable: varName ifAbsent: errorBlock	"Get an environment variable's value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^SetEnv readSetEnv at: varName ifAbsent: [	^OSSystemSupport concreteClass new		getVariable: varName		ifAbsent: errorBlock]</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>changing</category><body package="System-Support" selector="changed:">changed: aSymbol 	aSymbol = #returnFromSnapshot 		ifTrue: 			[(			[(SimpleHelp 				helpString: 'CINCOM SYSTEMS, INC.SOFTWARE LICENSE AGREEMENTFOR NON-COMMERCIAL USERSIMPORTANT NOTICE:  READ THE TERMS AND CONDITIONS OF THIS LICENSE AGREEMENT CAREFULLY BEFORE PROCEEDING TO USE THE ENCLOSED COMPUTER SOFTWARE AND THE RELATED USER DOCUMENTATION (THE "PRODUCT"). THE PRODUCT IS COPYRIGHTED AND ITS USE IS LICENSED (NOT SOLD).  BY USING THE PRODUCT, YOU ARE ACCEPTING AND AGREEING TO THE TERMS OF THIS LICENSE AGREEMENT.  IF YOU ARE NOT WILLING TO BE BOUND BY THE TERMS AND CONDITIONS OF THIS LICENSE AGREEMENT, YOU SHOULD NOT USE THE PRODUCT.  THIS LICENSE AGREEMENT REPRESENTS THE ENTIRE AGREEMENT CONCERNING THE PRODUCT BETWEEN YOU AND CINCOM SYSTEMS, INC. (REFERRED TO HEREIN AS "LICENSOR"), AND THIS AGREEMENT SUPERSEDES ANY PRIOR PROPOSALS, REPRESENTATIONS, OR UNDERSTANDING BETWEEN THE PARTIES.	1. License Grant.  Licensor hereby grants to you, and you do hereby accept, a nonexclusive license to use the Product only as is authorized in this License Agreement. You shall not reverse assemble or otherwise translate the Product.	U.S. Government Restricted Rights:  Licensor provides the Product with RESTRICTED RIGHTS.  Use, duplication, or disclosure by the U.S. Government or any agency or instrumentality thereof is subject to restrictions set forth in subparagraphs (c) (1) and (2) of the Commercial Computer Software - Restricted Rights clause at 48 C.F.R. 52.227-19, or any successor provision, as applicable. The Contractor/Manufacturer is Cincom Systems, Inc., 55 Merchant Street, Cincinnati, Ohio  45246.	2. Licensor''s Rights.  You acknowledge and agree that the Product is a proprietary product of Licensor protected under U.S. copyright law and international treaty provisions.  You further acknowledge and agree that all right, title, and interest in and to the Product, including associated intellectual property rights, are and shall remain with Licensor. This License Agreement does not convey to you an interest in or to the Product, but only a limited right of use revocable in accordance with the terms of this License Agreement.	3. Licensee''s Rights.		a. Licensee may distribute copies of the Software in unmodified form to persons who have agreed to the terms of this license agreement.		b. Licensee may distribute, without charge of any kind, applications developed using the Software to persons who have agreed to use such applications for non-commercial purposes, pursuant to a license agreement containing terms and provisions at least as restrictive and protective of Licensor''s rights and interests as this Agreement.	4. Rental Fees.  This license is granted to you on a non-commercial basis.  Therefore, no Rental Charges are involved, unless you breach the terms and conditions of Section 1 herein. Upon any such breach and the request of Licensor, you shall pay Licensor the applicable rental charges for the Product for your nonconforming use.	5. Term.  This License Agreement is effective upon delivery of the Product to you and will remain in effect until terminated.  You may terminate this License Agreement at any time by giving 30 days prior written notice to Licensor.  You shall not be entitled to a refund or credit for any amounts which may become due prior to the date of termination.  Licensor may terminate this License Agreement upon your breach of any term hereof.  Upon termination by Licensor, you agree to discontinue usage and return or destroy all copies and portions of the Product.	6. Limited Warranty. THE PRODUCT IS LICENSED "AS IS," AND LICENSOR DISCLAIMS ANY AND ALL OTHER WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.	7. Limitation of Liability.  Licensor''s cumulative liability to you or any other party for any loss or damages resulting from any claims, demands, or actions arising out of or relating to this Agreement will not exceed the total amount paid by you to Licensor in the twelve months immediately preceding such claim, in license charges for the use of any Product that causes damages.  In no event shall Licensor be liable for any indirect, incidental, consequential, special, or exemplary damages or lost profits, even if Licensor has been advised of the possibility of such damages.  THE ABOVE LIMITATION OR EXCLUSION MAY NOT BE ALLOWED BY ALL JURISDICTIONS.	8. Trademark.  The trademark listed on the Product is a trademark of Licensor.  No right, license, or interest to such trademark is granted hereunder, and you agree that no such right, license, or interest shall be asserted by you with respect to such trademark.	9. Governing Law.  This License Agreement shall be construed and governed in accordance with the laws of the State of Ohio.	10. Costs of Litigation.  If any action is brought by either party to this License Agreement against the other party regarding the subject matter hereof, the prevailing party shall be entitled to recover, in addition to any other relief granted, reasonable attorney fees and expenses of litigation.	11. Severability.  Should any term of this License Agreement be declared void or unenforceable by any court of competent jurisdiction, such declaration shall have no effect on the remaining terms hereof.	12. No Waiver.  The failure of either party to enforce any rights granted hereunder or to take action against the other party in the event of any breach hereunder shall not be deemed a waiver by that party as to subsequent enforcement of such or any other such rights or any subsequent actions in the event of future breaches.If you have any questions about this License Agreement, or if you have any questions or comments about the Product, please contact your local Cincom sales office.') 					openInterface: #licenseSpec] 					on: UserInterrupt					do: [:exception | exception resume]) ifFalse: [ObjectMemory quitPrimitive]].	super changed: aSymbol</body></methods><methods><class-id>SetEnv class</class-id> <category>class initialization</category><body package="(none)" selector="initialize">initialize	"SetEnv initialize."	self install</body><body package="(none)" selector="install">install	"SetEnv install."	SystemUtils class compile: 'getEnvironmentVariable: varName 	"Get an environment variable''s value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^SetEnv readSetEnv at: varName ifAbsent: [	^OSSystemSupport concreteClass new getVariable: varName]' classified: 'accessing'.	SystemUtils class compile: 'getEnvironmentVariable: varName ifAbsent: errorBlock	"Get an environment variable''s value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^SetEnv readSetEnv at: varName ifAbsent: [	^OSSystemSupport concreteClass new		getVariable: varName		ifAbsent: errorBlock]' classified: 'accessing'</body><body package="(none)" selector="obsolete">obsolete	self uninstall.	super obsolete</body><body package="(none)" selector="uninstall">uninstall	"SetEnv uninstall."	SystemUtils class compile: 'getEnvironmentVariable: varName 	"Get an environment variable''s value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^OSSystemSupport concreteClass new getVariable: varName' classified: 'accessing'.	SystemUtils class compile: 'getEnvironmentVariable: varName ifAbsent: errorBlock	"Get an environment variable''s value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^OSSystemSupport concreteClass new		getVariable: varName		ifAbsent: errorBlock' classified: 'accessing'</body></methods><methods><class-id>SetEnv class</class-id> <category>string and character</category><body package="(none)" selector="getChar:">getChar: aStream 	| char |	aStream atEnd		ifTrue: [char := nil]		ifFalse: 			[char := aStream next.			char = Character lf				ifTrue: [char := Character cr]				ifFalse: [char = Character cr ifTrue: [aStream peek = Character lf ifTrue: [aStream next]]]].	^char</body><body package="(none)" selector="getLine:">getLine: aStream 	| stream char |	stream := WriteStream on: (String new: 128).	char := self getChar: aStream.	[char notNil and: [char ~= Character cr]]		whileTrue: 			[stream nextPut: char.			char := self getChar: aStream].	(char notNil and: [char = Character cr])		ifTrue: [stream nextPut: char].	^stream contents</body><body package="(none)" selector="separate:dividers:">separate: separateCollection dividers: dividerCollection 	"SetEnv separate: #(a b c d e f g h) dividers: #(d f)."	| indexCollection index intervalCollection s e result |	indexCollection := OrderedCollection new.	indexCollection add: 0.	index := 1.	separateCollection		do: 			[:each | 			(dividerCollection includes: each)				ifTrue: [indexCollection add: index].			index := index + 1].	indexCollection add: separateCollection size + 1.	intervalCollection := OrderedCollection new.	1 to: indexCollection size - 1		do: 			[:i | 			s := indexCollection at: i.			e := indexCollection at: i + 1.			intervalCollection add: (s + 1 to: e - 1)].	result := OrderedCollection new.	intervalCollection do: [:interval | interval size &gt; 0 ifTrue: [result add: (separateCollection copyFrom: interval first to: interval last)]].	^result</body><body package="(none)" selector="separators">separators	"SetEnv separators."	| stream |	stream := WriteStream on: (String new: 4).	stream nextPut: Character space.	stream nextPut: Character tab.	stream nextPut: Character cr.	stream nextPut: Character lf.	^stream contents</body></methods><methods><class-id>SetEnv class</class-id> <category>private</category><body package="(none)" selector="readSetEnv">readSetEnv	"SetEnv readSetEnv."	| aDictionary aFilename aStream aString aCollection aKey aValue anIndex |	aDictionary := Dictionary new.	aFilename := 'SetEnv.txt' asFilename.	aFilename exists ifFalse: [^aDictionary].	aFilename isReadable ifFalse: [^aDictionary].	aStream := aFilename readStream.	[[aStream atEnd]		whileFalse: 			[aString := self getLine: aStream.			aCollection := self separate: aString dividers: self separators.			(aCollection size &gt;= 3 and: [aCollection first asLowercase = 'setenv'])				ifTrue: 					[aKey := aCollection at: 2.					aValue := aString copyFrom: (aString findString: (aCollection at: 3)									startingAt: 1)								to: aString size.					anIndex := aValue reverse findFirst: [:aCharacter | aCharacter isSeparator not].					anIndex &gt; 0 ifTrue: [aValue := aValue copyFrom: 1 to: aValue size - (anIndex - 1)].					aValue size &gt;= 2 ifTrue: [((aValue first = $' and: [aValue last = $'])							or: [aValue first = $" and: [aValue last = $"]])							ifTrue: [aValue := aValue copyFrom: 2 to: aValue size - 1]].					aDictionary at: aKey put: aValue]]]		ensure: [aStream close].	^aDictionary</body><body package="(none)" selector="setEnv">setEnv	"SetEnv setEnv."	self errorSignal handle: [:exception | exception return]		do: [self readSetEnv				keysAndValuesDo: 					[:key :value | 					SystemUtils setEnvironmentVariable: key value: value.					Transcript cr; show: 'setenv'; space; show: key asString; space.					(value asString detect: [:char | char isSeparator]						ifNone: [nil]) isNil						ifTrue: [Transcript show: value asString]						ifFalse: [Transcript show: value printString]]]</body></methods><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><methods><class-id>Core.Point</class-id> <category>converting</category><body package="Graphics-Geometry" selector=",">, aNumber 	^Jun3dPoint		x: self x		y: self y		z: aNumber</body></methods><methods><class-id>Core.Point</class-id> <category>printing</category><body package="Graphics-Geometry" selector="printOn:">printOn: aStream 	"Append to the argument aStream in terms of infix notation."	x printOn: aStream.	aStream nextPutAll: ' @ '.	y printOn: aStream</body></methods><class><name>Number</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><methods><class-id>Core.Number</class-id> <category>converting</category><body package="Magnitude-Numbers" selector=",">, aNumber 	^Jun2dPoint		x: self		y: aNumber</body><body package="Magnitude-Numbers" selector="asDegrees">asDegrees 	^JunAngle degrees: self</body><body package="Magnitude-Numbers" selector="asRadians">asRadians 	^JunAngle radians: self</body></methods><class><name>Pixmap</name><environment>Graphics</environment><super>Graphics.UnmappableSurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><methods><class-id>Graphics.Pixmap</class-id> <category>accessing</category><body package="OS-Window System" selector="renderingContext">renderingContext	^JunOpenGLRenderingContext on: self</body></methods><class><name>Window</name><environment>Graphics</environment><super>Graphics.DisplaySurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputOrigin creationOrigin sensor iconic windowType effectiveWindowType statusLineHeight allowsStatusLine mapped eventHandlers windowManager </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><methods><class-id>Graphics.Window</class-id> <category>accessing</category><body package="OS-Window System" selector="renderingContext">renderingContext	^JunOpenGLRenderingContext on: self</body></methods><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>systemAttributes systemWidgetAttributes useSystemFontOnWidgets systemMenuAttributes </class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><methods><class-id>UI.UILookPolicy</class-id> <category>building</category><body package="UIBuilder-Support" selector="columnedListView:into:">columnedListView: spec into: builder 	| lv model menu performer dropSourceCallbacks |	model := spec modelInBuilder: builder.	lv := (spec multipleSelections				ifTrue: [self columnedMultiSelectionListViewClass]				ifFalse: [self columnedListViewClass]) new.	lv model: model listHolder.	spec hasHorizontalScrollBar ifTrue: [lv measureWidth: true].	lv selectionChannel: model selectionIndexHolder.	spec selectionType == #checkMark ifTrue: [lv checkedSelection].	spec multipleSelections ifTrue: [spec useModifierKeys			ifTrue: [lv controller: self compliantColumnedMultiSelectControllerClass new]			ifFalse: [lv controller: self simpleColumnedMultiSelectControllerClass new]].	(menu := spec getMenuIn: builder) == nil ifFalse: [lv controller menuHolder: menu].	(performer := spec getPerformerIn: builder) == nil ifFalse: [lv controller performer: performer].	self setStyleOf: lv to: spec style.	self		setDispatcherOf: lv		fromSpec: spec		builder: builder.	spec tabable		ifTrue: 			[lv widgetState isTabStop: true.			builder sendKeyboardTo: lv]		ifFalse: 			[lv widgetState canTakeFocus: true.			lv controller keyboardProcessor: builder keyboardProcessor].	lv widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [lv widgetState isVisible: spec initiallyVisible].	dropSourceCallbacks := spec dropSourceCallbacksOrNilInBuilder: builder.	dropSourceCallbacks == nil		ifFalse: 			[lv controller dragDropCallbacks: dropSourceCallbacks.			lv controller selectOnDownWithDrag: spec selectOnDownIfDragEnabled].	builder component: lv.	self manufactureGeneralWrapperFor: spec into: builder.	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>implementation classes</category><body package="UIBuilder-Support" selector="columnedListViewClass">columnedListViewClass	^JunColumnedListView</body><body package="UIBuilder-Support" selector="columnedMultiSelectionListViewClass">columnedMultiSelectionListViewClass	^JunColumnedListMultiSelectionView</body><body package="UIBuilder-Support" selector="compliantColumnedMultiSelectControllerClass">compliantColumnedMultiSelectControllerClass	^JunColumnedListEmulatedController</body></methods><class><name>JunWglInterface</name><environment>Jun</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Jun.JunWglInterfaceDictionary.*			</imports><category>Jun-OpenGL-Support</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>opengl32.dll</item> <item>glu32.dll</item> <item>gdi32.dll</item> <item>user32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual type="eval">false</beVirtual><optimizationLevel type="sym">full</optimizationLevel><package>Jun-OpenGL-Support</package></attributes></class><methods><class-id>Jun.JunWglInterface</class-id> <category>procedures-wglext</category><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglChoosePixelFormatARB:">wglGetProcAddressOfWglChoosePixelFormatARB: arg	&lt;C: PFNWGLCHOOSEPIXELFORMATARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglCreatePbufferARB:">wglGetProcAddressOfWglCreatePbufferARB: arg	&lt;C: PFNWGLCREATEPBUFFERARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglDestroyPbufferARB:">wglGetProcAddressOfWglDestroyPbufferARB: arg	&lt;C: PFNWGLDESTROYPBUFFERARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglGetExtensionsStringARB:">wglGetProcAddressOfWglGetExtensionsStringARB: arg	&lt;C: PFNWGLGETEXTENSIONSSTRINGARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglGetPbufferDCARB:">wglGetProcAddressOfWglGetPbufferDCARB: arg	&lt;C: PFNWGLGETPBUFFERDCARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglGetPixelFormatAttribfvARB:">wglGetProcAddressOfWglGetPixelFormatAttribfvARB: arg	&lt;C: PFNWGLGETPIXELFORMATATTRIBFVARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglGetPixelFormatAttribivARB:">wglGetProcAddressOfWglGetPixelFormatAttribivARB: arg	&lt;C: PFNWGLGETPIXELFORMATATTRIBIVARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglQueryPbufferARB:">wglGetProcAddressOfWglQueryPbufferARB: arg	&lt;C: PFNWGLQUERYPBUFFERARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun-OpenGL-Support" selector="wglGetProcAddressOfWglReleasePbufferDCARB:">wglGetProcAddressOfWglReleasePbufferDCARB: arg	&lt;C: PFNWGLRELEASEPBUFFERDCARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/Users/aoki/Smalltalk/VisualWorksWithJun/76base/VisualWorksWithJun/visualnc.im' 'March 7, 2010' '11:19:48 am')""An image file /Users/aoki/Smalltalk/VisualWorksWithJun/76base/VisualWorksWithJun/visualnc.im was created at 11:19:48 am on March 7, 2010."</do-it><do-it>	| image gc histogram point | 	image := Jun3dImage exampleImage. 	gc := ScheduledControllers activeController view graphicsContext. 	histogram := Jun3dImageProcessor grayHistogram: image. 	gc clear. 	point := 0 @ 0. 	histogram do: [:assoc | 	| color value | 	color := assoc key. 	value := (assoc value * 10) rounded. 	gc paint: color. 	gc displayRectangle: (point extent: value @ 3). 	gc paint: ColorValue black. 	gc displayRectangularBorder: (point extent: value @ 3). 	point := point + (0 @ 5)]. 	gc medium sensor waitClickButton. 	gc medium display. 	</do-it><do-it>	| image gc histogram point | 	image := Jun3dImage exampleImage. 	gc := ScheduledControllers activeController view graphicsContext. 	histogram := Jun3dImageProcessor colorHistogram: image. 	gc clear. 	point := 0 @ 0. 	histogram do: [:assoc | 	| color value | 	color := assoc key blendOver: JunColorValue white. 	value := (assoc value * 10) rounded. 	gc paint: color. 	gc displayRectangle: (point extent: value @ 3). 	gc paint: ColorValue black. 	gc displayRectangularBorder: (point extent: value @ 3). 	point := point + (0 @ 5)]. 	gc medium sensor waitClickButton. 	gc medium display. 	</do-it><do-it>	| image gc histogram point | 	image := Jun3dImage exampleImage. 	gc := ScheduledControllers activeController view graphicsContext. 	histogram := Jun3dImageProcessor alphaHistogram: image. 	gc clear. 	point := 0 @ 0. 	histogram do: [:assoc | 	| color value | 	color := assoc key blendOver: JunColorValue white. 	value := (assoc value * 10) rounded. 	gc paint: color. 	gc displayRectangle: (point extent: value @ 3). 	gc paint: ColorValue black. 	gc displayRectangularBorder: (point extent: value @ 3). 	point := point + (0 @ 5)]. 	gc medium sensor waitClickButton. 	gc medium display. 	</do-it><do-it>JunModel example4.</do-it><component-created><name>Foo-Clock</name> <type>package</type></component-created><component-property><name>Foo-Clock</name> <type>package</type><property>comment</property> <value>'Programming Language (AOKI Atsushi)'</value></component-property><class><name>FooClockModel</name><environment>Smalltalk</environment><super>Jun.JunModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clockProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Foo-Clock</category><attributes><package>Foo-Clock</package></attributes></class><comment><class-id>FooClockModel</class-id><body>Programming Language (AOKI Atsushi)</body></comment><class><name>FooClockController</name><environment>Smalltalk</environment><super>Jun.JunController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Foo-Clock</category><attributes><package>Foo-Clock</package></attributes></class><comment><class-id>FooClockController</class-id><body>Programming Language (AOKI Atsushi)</body></comment><class><name>FooClockView</name><environment>Smalltalk</environment><super>Jun.JunView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Foo-Clock</category><attributes><package>Foo-Clock</package></attributes></class><comment><class-id>FooClockView</class-id><body>Programming Language (AOKI Atsushi)</body></comment><class><name>FooAnalogClockView</name><environment>Smalltalk</environment><super>FooClockView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cachedImage cachedTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Foo-Clock</category><attributes><package>Foo-Clock</package></attributes></class><comment><class-id>FooAnalogClockView</class-id><body>Programming Language (AOKI Atsushi)</body></comment><class><name>FooDigitalClockView</name><environment>Smalltalk</environment><super>FooClockView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cachedStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Foo-Clock</category><attributes><package>Foo-Clock</package></attributes></class><comment><class-id>FooDigitalClockView</class-id><body>Programming Language (AOKI Atsushi)</body></comment><methods><class-id>FooClockController</class-id> <category>control defaults</category><body package="Foo-Clock" selector="redButtonActivity">redButtonActivity	^self</body></methods><methods><class-id>FooClockController</class-id> <category>control defaults</category><body package="Foo-Clock" selector="yellowButtonActivity">yellowButtonActivity	self yellowButtonShiftActivity ifTrue: [^nil].	^(Menu labels: self model currentDateString) startUp</body></methods><methods><class-id>FooClockView</class-id> <category>display box accessing</category><body package="Foo-Clock" selector="bounds:">bounds: ignore	super bounds: ignore.	self flushCache</body></methods><methods><class-id>FooClockView</class-id> <category>private</category><body package="Foo-Clock" selector="flushCache">flushCache	^self</body></methods><methods><class-id>FooClockView</class-id> <category>displaying</category><body package="Foo-Clock" selector="displayTimeOn:">displayTimeOn: graphicsContext	| center radius time |	self clearInside.	center := self bounds center.	radius := self bounds extent // 2 - 20.	time := self model currentTime.	(Array		with: time hours * 5 + (time minutes / 12)		with: time minutes		with: time seconds) with: #(#(0.6 3) #(0.9 2) #(1.0 1))			do: 				[:value :array |				| x y p |				x := (value * 6 - 90) degreesToRadians cos.				y := (value * 6 - 90) degreesToRadians sin.				p := (x @ y * (radius * array first)) rounded.				graphicsContext					lineWidth: array last;					displayLineFrom: center to: center + p]</body></methods><methods><class-id>FooClockView</class-id> <category>displaying</category><body package="Foo-Clock" selector="displayOn:">displayOn: graphicsContext	self isOpen ifFalse: [^nil].	self displayTimeOn: graphicsContext</body></methods><methods><class-id>FooClockView</class-id> <category>initialize-release</category><body package="Foo-Clock" selector="initialize">initialize	super initialize.	self flushCache</body></methods><methods><class-id>FooClockView</class-id> <category>visual properties</category><body package="Foo-Clock" selector="selectionBackgroundColor">selectionBackgroundColor	^ColorValue white</body></methods><methods><class-id>FooClockView</class-id> <category>visual properties</category><body package="Foo-Clock" selector="selectionForegroundColor">selectionForegroundColor	^ColorValue black</body></methods><methods><class-id>FooClockView</class-id> <category>updating</category><body package="Foo-Clock" selector="update:">update: aspectSymbol	self errorSignal handle: [:exception | exception return] do: [self displayOn: self graphicsContext]</body></methods><methods><class-id>FooClockView</class-id> <category>controller accessing</category><body package="Foo-Clock" selector="defaultControllerClass">defaultControllerClass	^FooClockController</body></methods><methods><class-id>FooDigitalClockView</class-id> <category>private</category><body package="Foo-Clock" selector="flushCache">flushCache	cachedStyle := nil</body></methods><methods><class-id>FooDigitalClockView</class-id> <category>private</category><body package="Foo-Clock" selector="cachedStyle">cachedStyle	cachedStyle		ifNil: 			[| bold height text |			bold := self model currentTimeString asText allBold.			height := self bounds height - 10.						[cachedStyle := JunFontModel textStyleHeight: height.			text := ComposedText withText: bold style: cachedStyle.			height &gt; 14 and: [text bounds width &gt; (self bounds width - 10)]]					whileTrue: [height := height - 2]].	^cachedStyle</body></methods><methods><class-id>FooDigitalClockView</class-id> <category>displaying</category><body package="Foo-Clock" selector="displayTimeOn:">displayTimeOn: graphicsContext	| bold text |	self isOpen ifFalse: [^nil].	self clearInside.	bold := self model currentTimeString asText allBold.	text := ComposedText withText: bold style: self cachedStyle.	text displayOn: graphicsContext at: self bounds center - text bounds center</body></methods><methods><class-id>FooAnalogClockView</class-id> <category>private</category><body package="Foo-Clock" selector="rotateBlock">rotateBlock	| aBlock |	aBlock :=			[:point :degrees |			| radians sin cos x y |			radians := degrees negated degreesToRadians.			sin := radians sin.			cos := radians cos.			x := point x * cos + (point y * sin).			y := point x * sin negated + (point y * cos).			x @ y].	^aBlock</body></methods><methods><class-id>FooAnalogClockView</class-id> <category>private</category><body package="Foo-Clock" selector="flushCache">flushCache	cachedImage := nil.	cachedTime := nil</body></methods><methods><class-id>FooAnalogClockView</class-id> <category>displaying</category><body package="Foo-Clock" selector="displayShortHandOn:">displayShortHandOn: graphicsContext	| center radius minutes hours x y block points |	center := self bounds center.	radius := self bounds extent // 2 - 20.	minutes := cachedTime minutes.	hours := cachedTime hours * 5 + (minutes / 12).	x := (hours * 6 - 90) degreesToRadians cos.	y := (hours * 6 - 90) degreesToRadians sin.	block := self rotateBlock.	points := Array new: 5.	points at: 1 put: center + (block value: x @ y * 3 asPoint value: -180).	points at: 2 put: center + (block value: x @ y * 3 asPoint value: -90).	points at: 3 put: center + (x @ y * (radius * 7 // 10) asPoint).	points at: 4 put: center + (block value: x @ y * 3 asPoint value: 90).	points at: 5 put: points first copy.	points := points collect: [:p | p rounded].	graphicsContext		paint: self selectionForegroundColor;		lineWidth: 1;		displayPolygon: points;		paint: self selectionBackgroundColor;		displayPolyline: points</body></methods><methods><class-id>FooAnalogClockView</class-id> <category>displaying</category><body package="Foo-Clock" selector="displayBackgroundImageOn:">displayBackgroundImageOn: graphicsContext	| center radius box |	graphicsContext		paint: self backgroundColor;		displayRectangle: self bounds;		paint: self foregroundColor.	center := self bounds center.	radius := self bounds extent // 2 - 12.	box := 0 @ 0 extent: 2 @ 2.	1 to: 12		do: 			[:number |			| text degrees x y |			text := ComposedText withText: number printString asText.			degrees := (number - 3) * 30.			x := degrees degreesToRadians cos.			y := degrees degreesToRadians sin.			text displayOn: graphicsContext at: (center + 1 + (x @ y * radius) - (text extent // 2)) rounded.			graphicsContext displayRectangle: box at: (center + (x @ y * (radius - 10))) rounded]</body></methods><methods><class-id>FooAnalogClockView</class-id> <category>displaying</category><body package="Foo-Clock" selector="displayTickHandOn:">displayTickHandOn: graphicsContext	| center radius length seconds x y |	center := self bounds center.	radius := self bounds extent // 2 - 20.	length := radius * 10 // 10.	seconds := cachedTime seconds.	x := (seconds * 6 - 90) degreesToRadians cos.	y := (seconds * 6 - 90) degreesToRadians sin.	graphicsContext		paint: self selectionForegroundColor;		lineWidth: 1;		displayLineFrom: center to: (center + (x @ y * length)) rounded</body></methods><methods><class-id>FooAnalogClockView</class-id> <category>displaying</category><body package="Foo-Clock" selector="displayTimeOn:">displayTimeOn: graphicsContext	((cachedImage isNil or: [cachedTime isNil])		or: [self model currentTime minutes ~= cachedTime minutes])			ifTrue: 				[| aPixmap pixmapContext |				cachedTime := self model currentTime.				self					assert: [aPixmap := Pixmap extent: self bounds extent]					do: 						[Cursor execute showWhile: 								[pixmapContext := aPixmap graphicsContext.								self									displayBackgroundImageOn: pixmapContext;									displayShortHandOn: pixmapContext;									displayLongHandOn: pixmapContext.								cachedImage := aPixmap asImage]]					ensure: [aPixmap close]]			ifFalse: [cachedTime := self model currentTime].	cachedImage displayOn: graphicsContext.	self displayTickHandOn: graphicsContext</body></methods><methods><class-id>FooAnalogClockView</class-id> <category>displaying</category><body package="Foo-Clock" selector="displayLongHandOn:">displayLongHandOn: graphicsContext	| center radius minutes x y block points |	center := self bounds center.	radius := self bounds extent // 2 - 20.	minutes := cachedTime minutes.	x := (minutes * 6 - 90) degreesToRadians cos.	y := (minutes * 6 - 90) degreesToRadians sin.	block := self rotateBlock.	points := Array new: 5.	points at: 1 put: center + (block value: x @ y * 3 asPoint value: -180).	points at: 2 put: center + (block value: x @ y * 3 asPoint value: -90).	points at: 3 put: center + (x @ y * (radius * 9 // 10) asPoint).	points at: 4 put: center + (block value: x @ y * 3 asPoint value: 90).	points at: 5 put: points first copy.	points := points collect: [:p | p rounded].	graphicsContext		paint: self selectionForegroundColor;		lineWidth: 1;		displayPolygon: points;		paint: self selectionBackgroundColor;		displayPolyline: points</body></methods><methods><class-id>FooClockModel class</class-id> <category>tips</category><body package="Foo-Clock" selector="saveAsFooAndExercise">saveAsFooAndExercise	"FooClockModel saveAsFooAndExercise."	| fooString exerciseString aPackage aFilename aCollection |	fooString := 'Foo-Clock'.	exerciseString := 'Exercise-Clock'.	aCollection := (OrderedCollection new)				add: (Array							with: FooAnalogClockView yourself							with: #displayTickHandOn:							with: 'displaying'							with: #edit);				add: (Array							with: FooDigitalClockView yourself							with: #displayTimeOn:							with: 'displaying'							with: #edit);				add: (Array							with: FooClockModel class							with: #saveAsFooAndExercise							with: 'tips'							with: #delete);				yourself.	aPackage := Store.Registry packageNamed: fooString.	aPackage isNil ifTrue: [aPackage := Store.PackageModel named: fooString].	aFilename := Filename defaultDirectory construct: fooString , '.st'.	aPackage fileOutOnFileNamed: aFilename.	aCollection do: 			[:anArray |			| aClass aSelector aProtocol aSymbol aCode readStream writeStream aCharacter |			aClass := anArray at: 1.			aSelector := anArray at: 2.			aProtocol := anArray at: 3.			aSymbol := anArray at: 4.			anArray at: 4 put: (aCode := aClass sourceCodeAt: aSelector).			aSymbol = #edit				ifTrue: 					[readStream := ReadStream on: aCode.					writeStream := WriteStream on: String new.										[readStream atEnd not and: 							[aCharacter := readStream next.							(aCharacter = Character cr) not]]							whileTrue: [writeStream nextPut: aCharacter].					writeStream						cr;						tab;						nextPut: $";						cr.					[readStream atEnd not] whileTrue: 							[aCharacter := readStream next.							aCharacter isSeparator ifTrue: [writeStream nextPut: aCharacter] ifFalse: [writeStream nextPut: $?]].					writeStream						cr;						tab;						nextPut: $".					aCode := writeStream contents.					readStream close.					writeStream close.					aClass compile: aCode classified: aProtocol asSymbol].			aSymbol = #delete ifTrue: [aClass removeSelector: aSelector]].	aFilename := Filename defaultDirectory construct: exerciseString , '.st'.	aPackage fileOutOnFileNamed: aFilename.	aCollection do: 			[:anArray |			| aClass aProtocol aCode |			aClass := anArray at: 1.			aProtocol := anArray at: 3.			aCode := anArray at: 4.			aClass compile: aCode classified: aProtocol asSymbol].	^aPackage</body></methods><methods><class-id>FooClockModel class</class-id> <category>interface specs</category><body package="Foo-Clock" selector="windowSpecAnalog">windowSpecAnalog	"UIPainter new openOnClass: self andSelector: #windowSpecAnalog"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 			#(#UserMessage 				#key: #jun_Analog_Clock_MVC 				#defaultString: 'Analog Clock MVC' ) 			#min: #(#Point 120 120 ) 			#bounds: #(#Rectangle 100 100 220 220 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ArbitraryComponentSpec 					#layout: #(#LayoutFrame 1 0 1 0 -1 1 -1 1 ) 					#component: #createAnalogView ) ) ) )</body></methods><methods><class-id>FooClockModel class</class-id> <category>interface specs</category><body package="Foo-Clock" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 			#(#UserMessage 				#key: #jun_Clock 				#defaultString: 'Clock' ) 			#min: #(#Point 120 120 ) 			#bounds: #(#Rectangle 100 100 220 220 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ArbitraryComponentSpec 					#layout: #(#LayoutFrame 1 0 1 0 -1 1 -1 1 ) 					#component: #createView ) ) ) )</body></methods><methods><class-id>FooClockModel class</class-id> <category>interface specs</category><body package="Foo-Clock" selector="windowSpecDigital">windowSpecDigital	"UIPainter new openOnClass: self andSelector: #windowSpecDigital"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 			#(#UserMessage 				#key: #jun_Digital_Clock_MVC 				#defaultString: 'Digital ClockMVC' ) 			#min: #(#Point 120 60 ) 			#bounds: #(#Rectangle 100 100 220 160 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ArbitraryComponentSpec 					#layout: #(#LayoutFrame 1 0 1 0 -1 1 -1 1 ) 					#component: #createDigitalView ) ) ) )</body></methods><methods><class-id>FooClockModel class</class-id> <category>examples</category><body package="Foo-Clock" selector="example2">example2	"FooClockModel example2."	| aClock |	aClock := FooClockModel new.	aClock openInterface: #windowSpecDigital.	^aClock</body></methods><methods><class-id>FooClockModel class</class-id> <category>examples</category><body package="Foo-Clock" selector="example3">example3	"FooClockModel example3."	| aModel aPoint |	aModel := FooClockModel new.	aPoint := 50 @ 80.	aModel openAt: aPoint interface: #windowSpecAnalog.	aPoint := aModel getWindow displayBox bottomLeft + (0 @ 28).	aModel openAt: aPoint interface: #windowSpecDigital.	^aModel</body></methods><methods><class-id>FooClockModel class</class-id> <category>examples</category><body package="Foo-Clock" selector="example1">example1	"FooClockModel example1."	| aClock |	aClock := FooClockModel new.	aClock openInterface: #windowSpecAnalog.	^aClock</body></methods><methods><class-id>FooClockModel</class-id> <category>processing</category><body package="Foo-Clock" selector="terminateClockProcess">terminateClockProcess	clockProcess notNil ifTrue: [clockProcess terminate].	clockProcess := nil</body></methods><methods><class-id>FooClockModel</class-id> <category>processing</category><body package="Foo-Clock" selector="resumeClockProcess">resumeClockProcess	clockProcess notNil ifTrue: [self terminateClockProcess].	clockProcess := 			[self				assert: [self yourself]				do: 					[[true] whileTrue: 							[self changed.							(Delay untilMilliseconds: self nextMillisecondClockValue) wait]]				ensure: [self terminateClockProcess]]					newProcess.	clockProcess priority: Processor activeProcess priority + 1.	clockProcess resume</body></methods><methods><class-id>FooClockModel</class-id> <category>accessing</category><body package="Foo-Clock" selector="currentDate">currentDate	^Date today</body></methods><methods><class-id>FooClockModel</class-id> <category>accessing</category><body package="Foo-Clock" selector="currentDateString">currentDateString	^JunCalendarModel stringFromDate , ' ('		, (JunCalendarDateModel new weekdayNames at: self currentDate weekdayIndex) , ')'</body></methods><methods><class-id>FooClockModel</class-id> <category>accessing</category><body package="Foo-Clock" selector="currentTimeString">currentTimeString	^JunCalendarModel stringFromTime</body></methods><methods><class-id>FooClockModel</class-id> <category>accessing</category><body package="Foo-Clock" selector="currentTime">currentTime	^Time now</body></methods><methods><class-id>FooClockModel</class-id> <category>private</category><body package="Foo-Clock" selector="nextMillisecondClockValue">nextMillisecondClockValue	^Time millisecondClockValue + 1000 truncateTo: 1000</body></methods><methods><class-id>FooClockModel</class-id> <category>defaults</category><body package="Foo-Clock" selector="defaultViewClass">defaultViewClass	^FooClockView</body></methods><methods><class-id>FooClockModel</class-id> <category>defaults</category><body package="Foo-Clock" selector="defaultWindowLabel">defaultWindowLabel	^nil</body></methods><methods><class-id>FooClockModel</class-id> <category>interface closing</category><body package="Foo-Clock" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	self terminateClockProcess</body></methods><methods><class-id>FooClockModel</class-id> <category>interface opening</category><body package="Foo-Clock" selector="createAnalogView">createAnalogView	| aView |	aView := FooAnalogClockView new.	aView model: self.	^aView</body></methods><methods><class-id>FooClockModel</class-id> <category>interface opening</category><body package="Foo-Clock" selector="createDigitalView">createDigitalView	| aView |	aView := FooDigitalClockView new.	aView model: self.	^aView</body></methods><methods><class-id>FooClockModel</class-id> <category>initialize-release</category><body package="Foo-Clock" selector="release">release	super release.	self terminateClockProcess</body></methods><methods><class-id>FooClockModel</class-id> <category>initialize-release</category><body package="Foo-Clock" selector="initialize">initialize	super initialize.	self resumeClockProcess</body></methods><do-it>| aClass aSelector aString aNode aText |aClass := FooAnalogClockView.aSelector := #displayTickHandOn:.aString := (aClass sourceCodeAt: aSelector) asString.aNode := #{Refactory.Browser.RBParser} value parseMethod: aString.aText := aNode formattedCode asText makeSelectorBoldIn: aClass.^aText</do-it><do-it>| aClass aSelector aString aNode aText |aClass := FooAnalogClockView.aSelector := #displayTickHandOn:.aString := (aClass sourceCodeAt: aSelector) asString.aNode := #{Refactory.Browser.RBParser} value parseMethod: aString.aText := aNode formattedCode asText makeSelectorBoldIn: aClass.TextEditorView	edit: (ValueHolder with: aText)	label: 'Source Code'	icon: nil extent: 600 @ 400</do-it><do-it>| aClass aSelector aString aNode aText |aClass := FooAnalogClockView.aSelector := #displayTickHandOn:.aString := (aClass sourceCodeAt: aSelector) asString.aNode := #{Refactory.Browser.RBParser} value parseMethod: aString.aText := aNode formattedCode asText makeSelectorBoldIn: aClass.TextEditorView	edit: (ValueHolder with: aText)	label: 'Source Code'	icon: nil	extent: 600 @ 400</do-it><do-it>| aClass aSelector aString aNode aText |aClass := FooAnalogClockView.aSelector := #displayTickHandOn:.aString := (aClass sourceCodeAt: aSelector) asString.aNode := Refactory.Browser.RBParser parseMethod: aString.aText := aNode formattedCode asText makeSelectorBoldIn: aClass.TextEditorView	edit: (ValueHolder with: aText)	label: 'Source Code'	icon: nil	extent: 600 @ 400</do-it><do-it>| aClass aSelector aString aNode aText |aClass := FooAnalogClockView.aSelector := #displayTickHandOn:.aString := (aClass compiledMethodAt: aSelector) decompiledSource.aNode := Refactory.Browser.RBParser parseMethod: aString.aText := aNode formattedCode asText makeSelectorBoldIn: aClass.TextEditorView	edit: (ValueHolder with: aText)	label: 'Source Code'	icon: nil	extent: 600 @ 400</do-it><do-it>| aGraph aDictionary |aGraph := JunElementalGraph new.aDictionary := Dictionary new.(JunLispParser	parse: '(             (b . a)             (c . b)             (c . d)             (e . c)             (e . h)             (g . f)             (h . g)             (h . i)        )')    do:    	[:cell |     	[:key :value |    	| aBlock |    	aBlock := [:each | aDictionary at: each ifAbsentPut: [JunElementalNode label: each]].    	aGraph connect: (aBlock value: key) with: (aBlock value: value)]        	value: cell head asString        	value: cell tail asString].aGraph arrangeFormat: #tree.aGraph arrange.aGraph show</do-it><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci    "12 fibonacci."    "100 fibonacci."    | aValue aCode aString anIndex |    self negative ifTrue: [^nil].    self = 0 ifTrue: [^0].    self = 1 ifTrue: [^1].    aValue := (self - 1) fibonacci + (self - 2) fibonacci.    [aCode := Integer sourceCodeAt: #fibonacci.    aString := 'aValue :='.    (anIndex := aCode findString: aString startingAt: 1) &gt; 0        ifTrue:            [| aStream |            aStream := (String new: aCode size + 1024) writeStream.            [(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].            aStream                nextPutAll: 'self = ';                nextPutAll: self printString;                nextPutAll: ' ifTrue: [^';                nextPutAll: aValue printString;                nextPutAll: '].';                crtab.            (anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].            aCode := aStream contents] ensure: [aStream close].            Integer compile: aCode classified: #'mathematical functions']]        on: Object errorSignal        do: [:anException | anException return].    ^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size)				do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><do-it>12 fibonacci.</do-it><do-it>12 fibonacci.</do-it><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><do-it>40 fibonacci.</do-it><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	self = 93 ifTrue: [^12200160415121876738].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	self = 93 ifTrue: [^12200160415121876738].	self = 94 ifTrue: [^19740274219868223167].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	self = 93 ifTrue: [^12200160415121876738].	self = 94 ifTrue: [^19740274219868223167].	self = 95 ifTrue: [^31940434634990099905].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	self = 93 ifTrue: [^12200160415121876738].	self = 94 ifTrue: [^19740274219868223167].	self = 95 ifTrue: [^31940434634990099905].	self = 96 ifTrue: [^51680708854858323072].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	self = 93 ifTrue: [^12200160415121876738].	self = 94 ifTrue: [^19740274219868223167].	self = 95 ifTrue: [^31940434634990099905].	self = 96 ifTrue: [^51680708854858323072].	self = 97 ifTrue: [^83621143489848422977].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	self = 93 ifTrue: [^12200160415121876738].	self = 94 ifTrue: [^19740274219868223167].	self = 95 ifTrue: [^31940434634990099905].	self = 96 ifTrue: [^51680708854858323072].	self = 97 ifTrue: [^83621143489848422977].	self = 98 ifTrue: [^135301852344706746049].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	self = 93 ifTrue: [^12200160415121876738].	self = 94 ifTrue: [^19740274219868223167].	self = 95 ifTrue: [^31940434634990099905].	self = 96 ifTrue: [^51680708854858323072].	self = 97 ifTrue: [^83621143489848422977].	self = 98 ifTrue: [^135301852344706746049].	self = 99 ifTrue: [^218922995834555169026].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	self = 2 ifTrue: [^1].	self = 3 ifTrue: [^2].	self = 4 ifTrue: [^3].	self = 5 ifTrue: [^5].	self = 6 ifTrue: [^8].	self = 7 ifTrue: [^13].	self = 8 ifTrue: [^21].	self = 9 ifTrue: [^34].	self = 10 ifTrue: [^55].	self = 11 ifTrue: [^89].	self = 12 ifTrue: [^144].	self = 13 ifTrue: [^233].	self = 14 ifTrue: [^377].	self = 15 ifTrue: [^610].	self = 16 ifTrue: [^987].	self = 17 ifTrue: [^1597].	self = 18 ifTrue: [^2584].	self = 19 ifTrue: [^4181].	self = 20 ifTrue: [^6765].	self = 21 ifTrue: [^10946].	self = 22 ifTrue: [^17711].	self = 23 ifTrue: [^28657].	self = 24 ifTrue: [^46368].	self = 25 ifTrue: [^75025].	self = 26 ifTrue: [^121393].	self = 27 ifTrue: [^196418].	self = 28 ifTrue: [^317811].	self = 29 ifTrue: [^514229].	self = 30 ifTrue: [^832040].	self = 31 ifTrue: [^1346269].	self = 32 ifTrue: [^2178309].	self = 33 ifTrue: [^3524578].	self = 34 ifTrue: [^5702887].	self = 35 ifTrue: [^9227465].	self = 36 ifTrue: [^14930352].	self = 37 ifTrue: [^24157817].	self = 38 ifTrue: [^39088169].	self = 39 ifTrue: [^63245986].	self = 40 ifTrue: [^102334155].	self = 41 ifTrue: [^165580141].	self = 42 ifTrue: [^267914296].	self = 43 ifTrue: [^433494437].	self = 44 ifTrue: [^701408733].	self = 45 ifTrue: [^1134903170].	self = 46 ifTrue: [^1836311903].	self = 47 ifTrue: [^2971215073].	self = 48 ifTrue: [^4807526976].	self = 49 ifTrue: [^7778742049].	self = 50 ifTrue: [^12586269025].	self = 51 ifTrue: [^20365011074].	self = 52 ifTrue: [^32951280099].	self = 53 ifTrue: [^53316291173].	self = 54 ifTrue: [^86267571272].	self = 55 ifTrue: [^139583862445].	self = 56 ifTrue: [^225851433717].	self = 57 ifTrue: [^365435296162].	self = 58 ifTrue: [^591286729879].	self = 59 ifTrue: [^956722026041].	self = 60 ifTrue: [^1548008755920].	self = 61 ifTrue: [^2504730781961].	self = 62 ifTrue: [^4052739537881].	self = 63 ifTrue: [^6557470319842].	self = 64 ifTrue: [^10610209857723].	self = 65 ifTrue: [^17167680177565].	self = 66 ifTrue: [^27777890035288].	self = 67 ifTrue: [^44945570212853].	self = 68 ifTrue: [^72723460248141].	self = 69 ifTrue: [^117669030460994].	self = 70 ifTrue: [^190392490709135].	self = 71 ifTrue: [^308061521170129].	self = 72 ifTrue: [^498454011879264].	self = 73 ifTrue: [^806515533049393].	self = 74 ifTrue: [^1304969544928657].	self = 75 ifTrue: [^2111485077978050].	self = 76 ifTrue: [^3416454622906707].	self = 77 ifTrue: [^5527939700884757].	self = 78 ifTrue: [^8944394323791464].	self = 79 ifTrue: [^14472334024676221].	self = 80 ifTrue: [^23416728348467685].	self = 81 ifTrue: [^37889062373143906].	self = 82 ifTrue: [^61305790721611591].	self = 83 ifTrue: [^99194853094755497].	self = 84 ifTrue: [^160500643816367088].	self = 85 ifTrue: [^259695496911122585].	self = 86 ifTrue: [^420196140727489673].	self = 87 ifTrue: [^679891637638612258].	self = 88 ifTrue: [^1100087778366101931].	self = 89 ifTrue: [^1779979416004714189].	self = 90 ifTrue: [^2880067194370816120].	self = 91 ifTrue: [^4660046610375530309].	self = 92 ifTrue: [^7540113804746346429].	self = 93 ifTrue: [^12200160415121876738].	self = 94 ifTrue: [^19740274219868223167].	self = 95 ifTrue: [^31940434634990099905].	self = 96 ifTrue: [^51680708854858323072].	self = 97 ifTrue: [^83621143489848422977].	self = 98 ifTrue: [^135301852344706746049].	self = 99 ifTrue: [^218922995834555169026].	self = 100 ifTrue: [^354224848179261915075].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><do-it>100 fibonacci.</do-it><methods><class-id>Core.Integer</class-id> <category>mathematical functions</category><body package="Magnitude-Numbers" selector="fibonacci">fibonacci	"12 fibonacci."	"40 fibonacci."	"100 fibonacci."		| aValue |	self negative ifTrue: [^nil].	self = 0 ifTrue: [^0].	self = 1 ifTrue: [^1].	aValue := (self - 1) fibonacci + (self - 2) fibonacci.	[| aCode aString anIndex |	aCode := Integer sourceCodeAt: #fibonacci.	aString := 'aValue :='.	(anIndex := aCode findString: aString startingAt: 1) &gt; 0		ifTrue:			[| aStream |			aStream := (String new: aCode size + 1024) writeStream.			[(1 to: anIndex - 1) do: [:index | aStream nextPut: (aCode at: index)].			aStream				nextPutAll: 'self = ';				nextPutAll: self printString;				nextPutAll: ' ifTrue: [^';				nextPutAll: aValue printString;				nextPutAll: '].';				crtab.			(anIndex to: aCode size) do: [:index | aStream nextPut: (aCode at: index)].			aCode := aStream contents] ensure: [aStream close].			Integer compile: aCode classified: #'mathematical functions']]		on: Object errorSignal		do: [:anException | anException return].	^aValue</body></methods><component-created><name>Tiny</name> <type>package</type></component-created><component-property><name>Tiny</name> <type>package</type><property>comment</property> <value>'TinyLanguage'</value></component-property><class><name>Tiny</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>statements code </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tiny</package></attributes></class><comment><class-id>Tiny</class-id><body>TinyLanguage</body></comment><methods><class-id>Tiny class</class-id> <category>examples</category><body package="Tiny" selector="example2">example2	"Tiny example2."	| aFilename aTiny |	aFilename := Filename defaultDirectory construct: 'tmp.txt'.	aTiny := Tiny filename: aFilename.	aTiny run.	^aTiny</body></methods><methods><class-id>Tiny class</class-id> <category>examples</category><body package="Tiny" selector="example1">example1	"Tiny example1."		| aFilename aTiny |	aFilename := Filename defaultDirectory construct: 'tmp.txt'.	aTiny := Tiny filename: aFilename.	^aTiny</body></methods><methods><class-id>Tiny class</class-id> <category>instance creation</category><body package="Tiny" selector="filename:">filename: aFilename	^(self new)		filename: aFilename;		yourself</body></methods><methods><class-id>Tiny class</class-id> <category>installation</category><body package="Tiny" selector="install">install	"Tiny install."		ObjectMemory class compile:			'changed: aSymbol		aSymbol = #returnFromSnapshot ifTrue: [Tiny do].	super changed: aSymbol' classified: #changing.	JunSystem class compile:			'aboutForSeconds: seconds 	self yourself' classified: #about</body></methods><methods><class-id>Tiny class</class-id> <category>installation</category><body package="Tiny" selector="do">do	"Tiny do."		[| aFilename aTiny |	[aFilename := JunFileRequesterDialog requestFilename.	aFilename ifNil: [^nil]]		on: UserInterrupt		do: [:anException | anException proceed].	aTiny := Tiny filename: aFilename.	aTiny run closeBlock: [ObjectMemory quitPrimitive].	(Delay forSeconds: 10) wait.	^aTiny]		on: Error		do:			[:anException | 			[^JunDialog				warn:					'Too bad!' , (String with: Character cr) , anException messageText asString]				ensure: [ObjectMemory quitPrimitive]]</body></methods><methods><class-id>Tiny</class-id> <category>accessing</category><body package="Tiny" selector="run">run		code ifNil: [^nil].	^Compiler evaluate: code</body></methods><methods><class-id>Tiny</class-id> <category>accessing</category><body package="Tiny" selector="generate">generate		statements ifNil: [^nil].	code := nil.	statements		with: (1 to: statements size)		do:			[:each :index | 			| command kind arguments |			command := each at: 1.			kind := each at: 2.			arguments := each				copyFrom: 3				to: each size.			(command = #STROKE and: [kind = #RECTANGLE])				ifTrue:					[statements						at: index						put: (self strokeRectangle: arguments)].			(command = #FILL and: [kind = #RECTANGLE])				ifTrue:					[statements						at: index						put: (self fillRectangle: arguments)].			(command = #STROKE and: [kind = #LINE])				ifTrue:					[statements						at: index						put: (self strokeLine: arguments)].			(command = #FILL and: [kind = #LINE])				ifTrue:					[statements						at: index						put: (self fillLine: arguments)].			(command = #STROKE and: [kind = #ARC])				ifTrue:					[statements						at: index						put: (self strokeArc: arguments)].			(command = #FILL and: [kind = #ARC])				ifTrue:					[statements						at: index						put: (self fillArc: arguments)].			(command = #DISPLAY and: [kind = #STRING])				ifTrue:					[statements						at: index						put: (self displayString: arguments)].			(command = #DISPLAY and: [kind = #IMAGE])				ifTrue:					[statements						at: index						put: (self displayImage: arguments)].			self yourself].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			self headerOn: stream.			statements do: [:each | stream nextPutAll: each].			self footerOn: stream.			code := stream contents]		ensure: [:stream | stream close].	code := (Refactory.Browser.RBParser		parseExpression: code		onError:			[:errorString :errorPosistion | ^self error: 'fatal error: ' , code])		formattedCode.	^code</body></methods><methods><class-id>Tiny</class-id> <category>accessing</category><body package="Tiny" selector="filename:">filename: aFilename		statements := nil.	aFilename asFilename exists		ifFalse: [self error: 'not found: ' , aFilename asFilename asString].	JunControlUtility		assert:			[statements := OrderedCollection new.			aFilename asFilename readStream]		do:			[:aStream | 			[aStream atEnd not]				whileTrue:					[| aList |					aList := JunLispParser parse: aStream.					(aList isKindOf: JunLispNil)						ifFalse:							[aList := self flatten: aList.							statements add: aList asArray]]]		ensure: [:aStream | aStream close].	[self generate]		on: self class errorSignal		do:			[:exception | self error: 'unexpected error: ' , exception description].	^self</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="fillArc:">fillArc: arguments		| index x y start end box angle sweep collection color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	box := start corner: end.	index := arguments findFirst: [:each | each = #ANGLE].	angle := arguments at: index + 2.	index := arguments findFirst: [:each | each = #SWEEP].	sweep := arguments at: index + 2.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayWedgeBoundedBy: (';				nextPutAll: box printString;				nextPutAll: ')';				cr.			stream				tab: 4;				nextPutAll: 'startAngle: (';				nextPutAll: angle printString;				nextPutAll: ')';				cr.			stream				tab: 4;				nextPutAll: 'sweepAngle: (';				nextPutAll: sweep printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="strokeLine:">strokeLine: arguments		| index x y start end i collection points color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	(i := arguments findFirst: [:each | each = #PASS]) &gt; 0		ifTrue:			[collection := arguments				copyFrom: i				to: index - 1]		ifFalse: [collection := Array new].	points := OrderedCollection new.	points add: start.	[i := collection findFirst: [:each | each = #PASS].	i &gt; 0]		whileTrue:			[x := collection at: i + 3.			y := collection at: i + 5.			points add: x @ y.			collection := collection				copyFrom: i + 6				to: collection size].	points add: end.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayPolyline:';				cr.			stream				tab: 5;				nextPutAll: '((OrderedCollection new)';				cr.			points				do:					[:p | 					stream						tab: 6;						nextPutAll: 'add: (';						nextPutAll: p printString;						nextPutAll: ');';						cr].			stream				tab: 6;				nextPutAll: 'asArray).';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="strokeArc:">strokeArc: arguments		| index x y start end box angle sweep collection color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	box := start corner: end.	index := arguments findFirst: [:each | each = #ANGLE].	angle := arguments at: index + 2.	index := arguments findFirst: [:each | each = #SWEEP].	sweep := arguments at: index + 2.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayArcBoundedBy: (';				nextPutAll: box printString;				nextPutAll: ')';				cr.			stream				tab: 4;				nextPutAll: 'startAngle: (';				nextPutAll: angle printString;				nextPutAll: ')';				cr.			stream				tab: 4;				nextPutAll: 'sweepAngle: (';				nextPutAll: sweep printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="fillRectangle:">fillRectangle: arguments		| index x y start end box collection color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	box := start corner: end.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext displayRectangle: (';				nextPutAll: box printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="displayString:">displayString: arguments		| index x y point text string |	index := arguments findFirst: [:each | each = #AT].	x := arguments at: index + 3.	y := arguments at: index + 5.	point := x @ y.	index := arguments findFirst: [:each | each = #WQUOTED].	text := arguments at: index + 1.	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			stream				tab: 3;				nextPutAll: 'graphicsContext paint: ColorValue black.';				cr.			stream				tab: 3;				nextPutAll: text printString;				nextPutAll: ' asComposedText';				cr.			stream				tab: 4;				nextPutAll: 'displayOn: graphicsContext ';				cr.			stream				tab: 4;				nextPutAll: 'at: (';				nextPutAll: point printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="fillLine:">fillLine: arguments		| index x y start end i collection points color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	(i := arguments findFirst: [:each | each = #PASS]) &gt; 0		ifTrue:			[collection := arguments				copyFrom: i				to: index - 1]		ifFalse: [collection := Array new].	points := OrderedCollection new.	points add: start.	[i := collection findFirst: [:each | each = #PASS].	i &gt; 0]		whileTrue:			[x := collection at: i + 3.			y := collection at: i + 5.			points add: x @ y.			collection := collection				copyFrom: i + 6				to: collection size].	points add: end.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayPolygon:';				cr.			stream				tab: 5;				nextPutAll: '((OrderedCollection new)';				cr.			points				do:					[:p | 					stream						tab: 6;						nextPutAll: 'add: (';						nextPutAll: p printString;						nextPutAll: ');';						cr].			stream				tab: 6;				nextPutAll: 'asArray).';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="displayImage:">displayImage: arguments		| index x y point text string |	index := arguments findFirst: [:each | each = #AT].	x := arguments at: index + 3.	y := arguments at: index + 5.	point := x @ y.	index := arguments findFirst: [:each | each = #WQUOTED].	text := arguments at: index + 1.	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayImage:';				cr.			stream				tab: 5;				nextPutAll: '[| aURL aFilename anImage |';				cr.			stream				tab: 5;				nextPutAll: 'aURL := JunURL named: ';				nextPutAll: text printString;				nextPutAll: '.';				cr.			stream				tab: 5;				nextPutAll: 'aFilename := aURL asURI tail asFilename.';				cr.			stream				tab: 5;				nextPutAll: 'aURL downloadTo: aFilename.';				cr.			stream				tab: 5;				nextPutAll: 'anImage := JunImageUtility fromFile: aFilename.';				cr.			stream				tab: 5;				nextPutAll: 'anImage yourself] value';				cr.			stream				tab: 4;				nextPutAll: 'at: (';				nextPutAll: point printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="strokeRectangle:">strokeRectangle: arguments		| index x y start end box color collection width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	box := start corner: end.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext displayRectangularBorder: (';				nextPutAll: box printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>private</category><body package="Tiny" selector="flatten:">flatten: aList		(aList isKindOf: JunLispNil) ifTrue: [^JunLispList null].	(aList isKindOf: JunLispCons)		ifFalse:			[^JunLispList				head: aList				tail: JunLispList null].	^(self flatten: aList head) nconc: (self flatten: aList tail)</body></methods><methods><class-id>Tiny</class-id> <category>private</category><body package="Tiny" selector="footerOn:">footerOn: stream		stream nextPutAll:			'].	aModel		openIn: (JunApplicationModel alignedRectangleWithScreenCenter: 980 @ 570).	aModel getWindow label: ''Result''.	^aModel'</body></methods><methods><class-id>Tiny</class-id> <category>private</category><body package="Tiny" selector="headerOn:">headerOn: stream		stream nextPutAll:			'	| aModel |	aModel := JunAbstractModel new.	aModel		displayBlock:			[:graphicsContext | '</body></methods><do-it>RuntimeVersion</do-it><methods><class-id>Tiny class</class-id> <category>installation</category><body package="Tiny" selector="install">install	"Tiny install."		ObjectMemory class compile:			'changed: aSymbol		aSymbol = #returnFromSnapshot ifTrue: [Tiny do].	super changed: aSymbol' classified: #changing.	JunSystem class compile:			'aboutForSeconds: seconds 	self yourself' classified: #about.	[JunLauncher open] fork.	JunSystem makeRuntimeImage</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>changing</category><body package="System-Support" selector="changed:">changed: aSymbol		aSymbol = #returnFromSnapshot ifTrue: [Tiny do].	super changed: aSymbol</body></methods><methods><class-id>Jun.JunSystem class</class-id> <category>about</category><body package="Jun-System-Support" selector="aboutForSeconds:">aboutForSeconds: seconds 	self yourself</body></methods><component-created><name>RuntimePackager</name> <type>package</type></component-created><parcel-loaded><name>RuntimePackager</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'packaging' 'RuntimePackager.pcl'))</filename></parcel-loaded><do-it>Tiny install.</do-it><do-it>JunLauncher open</do-it><component-created><name>Tiny</name> <type>package</type></component-created><component-property><name>Tiny</name> <type>package</type><property>comment</property> <value>'TinyLanguage'</value></component-property><class><name>Tiny</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>statements code </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tiny</package></attributes></class><comment><class-id>Tiny</class-id><body>TinyLanguage</body></comment><methods><class-id>Tiny class</class-id> <category>examples</category><body package="Tiny" selector="example2">example2	"Tiny example2."	| aFilename aTiny |	aFilename := Filename defaultDirectory construct: 'tmp.txt'.	aTiny := Tiny filename: aFilename.	aTiny run.	^aTiny</body></methods><methods><class-id>Tiny class</class-id> <category>examples</category><body package="Tiny" selector="example1">example1	"Tiny example1."		| aFilename aTiny |	aFilename := Filename defaultDirectory construct: 'tmp.txt'.	aTiny := Tiny filename: aFilename.	^aTiny</body></methods><methods><class-id>Tiny class</class-id> <category>instance creation</category><body package="Tiny" selector="filename:">filename: aFilename	^(self new)		filename: aFilename;		yourself</body></methods><methods><class-id>Tiny class</class-id> <category>installation</category><body package="Tiny" selector="install">install	"Tiny install."		ObjectMemory class compile:			'changed: aSymbol		aSymbol = #returnFromSnapshot ifTrue: [Tiny do].	super changed: aSymbol' classified: #changing.	JunSystem class compile:			'aboutForSeconds: seconds 	self yourself' classified: #about.	[JunLauncher open] fork.	JunSystem makeRuntimeImage</body></methods><methods><class-id>Tiny class</class-id> <category>installation</category><body package="Tiny" selector="do">do	"Tiny do."		[| aFilename aTiny |	[aFilename := JunFileRequesterDialog requestFilename.	aFilename ifNil: [^nil]]		on: UserInterrupt		do: [:anException | anException proceed].	aTiny := Tiny filename: aFilename.	aTiny run closeBlock: [ObjectMemory quitPrimitive].	(Delay forSeconds: 10) wait.	^aTiny]		on: Error		do:			[:anException | 			[^JunDialog				warn:					'Too bad!' , (String with: Character cr) , anException messageText asString]				ensure: [ObjectMemory quitPrimitive]]</body></methods><methods><class-id>Tiny</class-id> <category>accessing</category><body package="Tiny" selector="run">run		code ifNil: [^nil].	^Compiler evaluate: code</body></methods><methods><class-id>Tiny</class-id> <category>accessing</category><body package="Tiny" selector="generate">generate		statements ifNil: [^nil].	code := nil.	statements		with: (1 to: statements size)		do:			[:each :index | 			| command kind arguments |			command := each at: 1.			kind := each at: 2.			arguments := each				copyFrom: 3				to: each size.			(command = #STROKE and: [kind = #RECTANGLE])				ifTrue:					[statements						at: index						put: (self strokeRectangle: arguments)].			(command = #FILL and: [kind = #RECTANGLE])				ifTrue:					[statements						at: index						put: (self fillRectangle: arguments)].			(command = #STROKE and: [kind = #LINE])				ifTrue:					[statements						at: index						put: (self strokeLine: arguments)].			(command = #FILL and: [kind = #LINE])				ifTrue:					[statements						at: index						put: (self fillLine: arguments)].			(command = #STROKE and: [kind = #ARC])				ifTrue:					[statements						at: index						put: (self strokeArc: arguments)].			(command = #FILL and: [kind = #ARC])				ifTrue:					[statements						at: index						put: (self fillArc: arguments)].			(command = #DISPLAY and: [kind = #STRING])				ifTrue:					[statements						at: index						put: (self displayString: arguments)].			(command = #DISPLAY and: [kind = #IMAGE])				ifTrue:					[statements						at: index						put: (self displayImage: arguments)].			self yourself].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			self headerOn: stream.			statements do: [:each | stream nextPutAll: each].			self footerOn: stream.			code := stream contents]		ensure: [:stream | stream close].	code := (Refactory.Browser.RBParser		parseExpression: code		onError:			[:errorString :errorPosistion | ^self error: 'fatal error: ' , code])		formattedCode.	^code</body></methods><methods><class-id>Tiny</class-id> <category>accessing</category><body package="Tiny" selector="filename:">filename: aFilename		statements := nil.	aFilename asFilename exists		ifFalse: [self error: 'not found: ' , aFilename asFilename asString].	JunControlUtility		assert:			[statements := OrderedCollection new.			aFilename asFilename readStream]		do:			[:aStream | 			[aStream atEnd not]				whileTrue:					[| aList |					aList := JunLispParser parse: aStream.					(aList isKindOf: JunLispNil)						ifFalse:							[aList := self flatten: aList.							statements add: aList asArray]]]		ensure: [:aStream | aStream close].	[self generate]		on: self class errorSignal		do:			[:exception | self error: 'unexpected error: ' , exception description].	^self</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="displayImage:">displayImage: arguments		| index x y point text string |	index := arguments findFirst: [:each | each = #AT].	x := arguments at: index + 3.	y := arguments at: index + 5.	point := x @ y.	index := arguments findFirst: [:each | each = #WQUOTED].	text := arguments at: index + 1.	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayImage:';				cr.			stream				tab: 5;				nextPutAll: '[| aURL aFilename anImage |';				cr.			stream				tab: 5;				nextPutAll: 'aURL := JunURL named: ';				nextPutAll: text printString;				nextPutAll: '.';				cr.			stream				tab: 5;				nextPutAll: 'aFilename := aURL asURI tail asFilename.';				cr.			stream				tab: 5;				nextPutAll: 'aURL downloadTo: aFilename.';				cr.			stream				tab: 5;				nextPutAll: 'anImage := JunImageUtility fromFile: aFilename.';				cr.			stream				tab: 5;				nextPutAll: 'anImage yourself] value';				cr.			stream				tab: 4;				nextPutAll: 'at: (';				nextPutAll: point printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="strokeRectangle:">strokeRectangle: arguments		| index x y start end box color collection width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	box := start corner: end.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext displayRectangularBorder: (';				nextPutAll: box printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="fillLine:">fillLine: arguments		| index x y start end i collection points color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	(i := arguments findFirst: [:each | each = #PASS]) &gt; 0		ifTrue:			[collection := arguments				copyFrom: i				to: index - 1]		ifFalse: [collection := Array new].	points := OrderedCollection new.	points add: start.	[i := collection findFirst: [:each | each = #PASS].	i &gt; 0]		whileTrue:			[x := collection at: i + 3.			y := collection at: i + 5.			points add: x @ y.			collection := collection				copyFrom: i + 6				to: collection size].	points add: end.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayPolygon:';				cr.			stream				tab: 5;				nextPutAll: '((OrderedCollection new)';				cr.			points				do:					[:p | 					stream						tab: 6;						nextPutAll: 'add: (';						nextPutAll: p printString;						nextPutAll: ');';						cr].			stream				tab: 6;				nextPutAll: 'asArray).';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="displayString:">displayString: arguments		| index x y point text string |	index := arguments findFirst: [:each | each = #AT].	x := arguments at: index + 3.	y := arguments at: index + 5.	point := x @ y.	index := arguments findFirst: [:each | each = #WQUOTED].	text := arguments at: index + 1.	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			stream				tab: 3;				nextPutAll: 'graphicsContext paint: ColorValue black.';				cr.			stream				tab: 3;				nextPutAll: text printString;				nextPutAll: ' asComposedText';				cr.			stream				tab: 4;				nextPutAll: 'displayOn: graphicsContext ';				cr.			stream				tab: 4;				nextPutAll: 'at: (';				nextPutAll: point printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="fillArc:">fillArc: arguments		| index x y start end box angle sweep collection color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	box := start corner: end.	index := arguments findFirst: [:each | each = #ANGLE].	angle := arguments at: index + 2.	index := arguments findFirst: [:each | each = #SWEEP].	sweep := arguments at: index + 2.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayWedgeBoundedBy: (';				nextPutAll: box printString;				nextPutAll: ')';				cr.			stream				tab: 4;				nextPutAll: 'startAngle: (';				nextPutAll: angle printString;				nextPutAll: ')';				cr.			stream				tab: 4;				nextPutAll: 'sweepAngle: (';				nextPutAll: sweep printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="strokeLine:">strokeLine: arguments		| index x y start end i collection points color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	(i := arguments findFirst: [:each | each = #PASS]) &gt; 0		ifTrue:			[collection := arguments				copyFrom: i				to: index - 1]		ifFalse: [collection := Array new].	points := OrderedCollection new.	points add: start.	[i := collection findFirst: [:each | each = #PASS].	i &gt; 0]		whileTrue:			[x := collection at: i + 3.			y := collection at: i + 5.			points add: x @ y.			collection := collection				copyFrom: i + 6				to: collection size].	points add: end.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayPolyline:';				cr.			stream				tab: 5;				nextPutAll: '((OrderedCollection new)';				cr.			points				do:					[:p | 					stream						tab: 6;						nextPutAll: 'add: (';						nextPutAll: p printString;						nextPutAll: ');';						cr].			stream				tab: 6;				nextPutAll: 'asArray).';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="fillRectangle:">fillRectangle: arguments		| index x y start end box collection color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	box := start corner: end.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext displayRectangle: (';				nextPutAll: box printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>processing</category><body package="Tiny" selector="strokeArc:">strokeArc: arguments		| index x y start end box angle sweep collection color width string |	index := arguments findFirst: [:each | each = #START].	x := arguments at: index + 3.	y := arguments at: index + 5.	start := x @ y.	index := arguments findFirst: [:each | each = #END].	x := arguments at: index + 3.	y := arguments at: index + 5.	end := x @ y.	box := start corner: end.	index := arguments findFirst: [:each | each = #ANGLE].	angle := arguments at: index + 2.	index := arguments findFirst: [:each | each = #SWEEP].	sweep := arguments at: index + 2.	index := arguments findFirst: [:each | each = #COW].	collection := arguments		copyFrom: index		to: arguments size.	index := collection findFirst: [:each | each = #COLOR].	index &gt; 0		ifTrue: [color := ColorValue perform: (collection at: index + 1)]		ifFalse: [color := nil].	index := collection findFirst: [:each | each = #INTEGER].	index &gt; 0		ifTrue: [width := collection at: index + 1]		ifFalse: [width := nil].	JunControlUtility		assert: [String new writeStream]		do:			[:stream | 			color				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext paint: (';						nextPutAll: color printString;						nextPutAll: ').';						cr].			width				ifNotNil:					[stream						tab: 3;						nextPutAll: 'graphicsContext lineWidth: (';						nextPutAll: width printString;						nextPutAll: ').';						cr].			stream				tab: 3;				nextPutAll: 'graphicsContext';				cr.			stream				tab: 4;				nextPutAll: 'displayArcBoundedBy: (';				nextPutAll: box printString;				nextPutAll: ')';				cr.			stream				tab: 4;				nextPutAll: 'startAngle: (';				nextPutAll: angle printString;				nextPutAll: ')';				cr.			stream				tab: 4;				nextPutAll: 'sweepAngle: (';				nextPutAll: sweep printString;				nextPutAll: ').';				cr.			string := stream contents]		ensure: [:stream | stream close].	^string</body></methods><methods><class-id>Tiny</class-id> <category>private</category><body package="Tiny" selector="headerOn:">headerOn: stream		stream nextPutAll:			'	| aModel |	aModel := JunAbstractModel new.	aModel		displayBlock:			[:graphicsContext | '</body></methods><methods><class-id>Tiny</class-id> <category>private</category><body package="Tiny" selector="flatten:">flatten: aList		(aList isKindOf: JunLispNil) ifTrue: [^JunLispList null].	(aList isKindOf: JunLispCons)		ifFalse:			[^JunLispList				head: aList				tail: JunLispList null].	^(self flatten: aList head) nconc: (self flatten: aList tail)</body></methods><methods><class-id>Tiny</class-id> <category>private</category><body package="Tiny" selector="footerOn:">footerOn: stream		stream nextPutAll:			'].	aModel		openIn: (JunApplicationModel alignedRectangleWithScreenCenter: 980 @ 570).	aModel getWindow label: ''Result''.	^aModel'</body></methods><methods><class-id>Tiny class</class-id> <category>installation</category><body package="Tiny" selector="do">do	"Tiny do."		[| aFilename aTiny |	[aFilename := JunFileRequesterDialog requestFilename.	aFilename ifNil: [^nil]]		on: UserInterrupt		do: [:anException | anException proceed].	aTiny := Tiny filename: aFilename.	aTiny run closeBlock: [ObjectMemory quitPrimitive].	^aTiny]		on: Error		do:			[:anException | 			[^JunDialog				warn:					'Too bad!' , (String with: Character cr) , anException messageText asString]				ensure: [ObjectMemory quitPrimitive]]</body></methods><methods><class-id>Tiny class</class-id> <category>installation</category><body package="Tiny" selector="install">install	"Tiny install."		ObjectMemory class compile:			'changed: aSymbol		aSymbol = #returnFromSnapshot ifTrue: [Tiny do].	super changed: aSymbol' classified: #changing.	JunSystem class compile:			'aboutForSeconds: seconds 	self yourself' classified: #about</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>changing</category><body package="System-Support" selector="changed:">changed: aSymbol		aSymbol = #returnFromSnapshot ifTrue: [Tiny do].	super changed: aSymbol</body></methods><methods><class-id>Jun.JunSystem class</class-id> <category>about</category><body package="Jun-System-Support" selector="aboutForSeconds:">aboutForSeconds: seconds 	self yourself</body></methods><do-it>Tiny install.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/Users/aoki/Desktop/TinyVM/VisualWorks76ncWithJun789ForMac/visualnc.im' 'December 19, 2010' '4:42:13 pm')""An image file /Users/aoki/Desktop/TinyVM/VisualWorks76ncWithJun789ForMac/visualnc.im was created at 4:42:13 pm on December 19, 2010."</do-it>