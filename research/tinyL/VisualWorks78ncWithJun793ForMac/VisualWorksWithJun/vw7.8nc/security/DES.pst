<?xml version="1.0"?><st-source><!-- Name: DESNotice: Copyright © 2008-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: This package contains implementation of the popular DES encryption algorithm. The algorithm is described in many places, the reference definition is FIPS#46 published by US NIST. The algorithm is considered insecure by now because of it's limited key size (56 bits), although it still needs to be supported because of its wide deployment. Presently it is usually used in a tripple encryption mode to increase the key size to 168 bits, an thus increase the security of the application.The algorithm is represented by the class DES. To apply the algorithm create an instance of DES with the #key: instance creation method. The argument is the secret key which is expected to be a ByteArray of size 8. A DES instance can be used to both encrypt and decrypt 8 byte blocks arbitrarily (see protocol 'services').DbIdentifier: bear73DbTrace: 280596DevelopmentPrerequisites: #(#(#package 'CiphersBase' ''))PackageName: DESParcel: #('DES')ParcelName: DESPrerequisiteParcels: #(#('CiphersBase' ''))PrintStringCache: (7.7.1 - 4,BaseSystem)Version: 7.7.1 - 4Date: 5:42:13 PM May 18, 2010 --><time-stamp>From VisualWorks®, Pre-Release 7.7.1 (may10.3) of May 18, 2010 on May 18, 2010 at 5:42:13 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>DES</name><environment>Security</environment><super>Security.BlockCipher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>keySchedule helper registerR registerU registerT registerL spRegister </inst-vars><class-inst-vars>spRegisterTransformation1 spRegisterTransformation2 spRegisterTransformation3 spRegisterTransformation4 spRegisterTransformation5 spRegisterTransformation6 spRegisterTransformation7 spRegisterTransformation8 </class-inst-vars><imports></imports><category>Security-Ciphers</category><attributes><package>DES</package></attributes></class><comment><class-id>Security.DES</class-id><body>This class implements the DES encryption algorithm. The algorithm is described in many places, the reference definition is FIPS#46 published by US NIST. This implemetation optimizes some of the aspects of the reference algorithm. The IP and FP tranfsormations can be performed with shifts, xors and ands in fewer steps. Also the S and P box permutations can be combined in a matrix (SPTranformation) and performed together.</body></comment><class><name>DESHelper</name><environment>Security</environment><super>Core.Object</super><private>true</private><indexed-type>none</indexed-type><inst-vars>rL rH uL uH </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Security-Ciphers</category><attributes><package>DES</package></attributes></class><shared-variable><name>SKBTransformation</name><environment>Security.DES</environment><private>false</private><constant>false</constant><category>constants</category><initializer>Array new: 5</initializer><attributes><package>DES</package></attributes></shared-variable><shared-variable><name>ShiftSequence</name><environment>Security.DES</environment><private>false</private><constant>false</constant><category>constants</category><initializer>Array new: 5</initializer><attributes><package>DES</package></attributes></shared-variable><shared-variable><name>OddParityCheck</name><environment>Security.DES</environment><private>false</private><constant>false</constant><category>constants</category><attributes><package>DES</package></attributes></shared-variable><shared-variable><name>SemiWeakKeys</name><environment>Security.DES</environment><private>false</private><constant>false</constant><category>constants</category><attributes><package>DES</package></attributes></shared-variable><shared-variable><name>WeakKeys</name><environment>Security.DES</environment><private>false</private><constant>false</constant><category>constants</category><attributes><package>DES</package></attributes></shared-variable><shared-variable><name>PossiblyWeakKeys</name><environment>Security.DES</environment><private>false</private><constant>false</constant><category>constants</category><attributes><package>DES</package></attributes></shared-variable><methods><class-id>Security.DES</class-id> <category>initialize</category><body package="DES" selector="initialize">initialize	super initialize.	helper := DESHelper new.	registerR := ThirtyTwoBitRegister basicNew.	registerU := ThirtyTwoBitRegister basicNew.	registerT := ThirtyTwoBitRegister basicNew.	registerL := ThirtyTwoBitRegister basicNew.	spRegister := ThirtyTwoBitRegister basicNew.	"keySchedule := Array new: 16.	1 to: 16 do: [:i | keySchedule at: i put: (Array new: 48)]."</body><body package="DES" selector="reset">reset	 keySchedule := nil.</body><body package="DES" selector="setKey:">setKey: an8ByteArray	"Initialize the cipher with the given key. The key has to be 8 byte size."	| c d t s kIndex |	kIndex := 1.	keySchedule := Array new: 32.	c := ThirtyTwoBitRegister basicNew loadTop32: an8ByteArray.	d := ThirtyTwoBitRegister basicNew loadBottom32: an8ByteArray.	t := (d shallowCopy rightShift4 bitXor: c) maskH: 16r0f0f maskL: 16r0f0f.	c bitXor: t.	d bitXor: t shallowCopy leftShift4.	t := (c shallowCopy leftShift18 bitXor: c) maskL16r0maskH: 16rcccc.	c bitXor: (t shallowCopy bitXor: t shallowCopy rightShift18).	t := (d shallowCopy leftShift18 bitXor: d) maskL16r0maskH: 16rcccc.	d bitXor: (t shallowCopy bitXor: t shallowCopy rightShift18).	t := (d shallowCopy rightShift1 bitXor: c) maskH: 16r5555 maskL: 16r5555.	c bitXor: t.	d bitXor: t shallowCopy leftShift1.	t := (c shallowCopy rightShift8 bitXor: d) maskH: 16r00ff maskL: 16r00ff.	d bitXor: t.	c bitXor: t shallowCopy leftShift8.	t := (d shallowCopy rightShift1 bitXor: c) maskH: 16r5555 maskL: 16r5555.	c bitXor: t.	d bitXor: t shallowCopy leftShift1.	d := (((d shallowCopy maskH16r0maskL: 16r000ff) leftShift16 bitOr: (d shallowCopy maskH16r0maskL: 16rff00))				bitOr: (d shallowCopy maskL16r0maskH: 16r00ff) rightShift16) bitOr: (c shallowCopy maskL16r0maskH: 16rf000) rightShift4.	c maskH: 16r0fff.	1 to: 16 do: [:index |		(ShiftSequence at: index)			ifTrue: 				[c := c shallowCopy rightShift2 bitOr: c leftShift26.				d := d shallowCopy rightShift2 bitOr: d leftShift26]			ifFalse: 				[c := c shallowCopy rightShift1 bitOr: c leftShift27.				d := d shallowCopy rightShift1 bitOr: d leftShift27].		c maskH: 16r0fff.		d maskH: 16r0fff.		s := ((((SKBTransformation at: 1) at: (c low bitAnd: 16r3f) + 1) shallowCopy					bitOr: ((SKBTransformation at: 2) at: (c rightShift6maskL16r03 bitOr: c rightShift7maskL16r3c) + 1))						bitOr: ((SKBTransformation at: 3) at: (c rightShift13maskL16r0f bitOr: c rightShift14maskL16r30) + 1))						bitOr: ((SKBTransformation at: 4) at: ((c rightShift20maskL16r01 bitOr: c rightShift21maskL16r06) bitOr: c rightShift22maskL16r38) + 1).		t := ((((SKBTransformation at: 5) at: (d low bitAnd: 16r3f) + 1) shallowCopy					bitOr: ((SKBTransformation at: 6) at: (d rightShift7maskL16r03 bitOr: d rightShift8maskL16r3c) + 1))						bitOr: ((SKBTransformation at: 7) at: d rightShift15maskL16r3f + 1))						bitOr: ((SKBTransformation at: 8) at: (d rightShift21maskL16r0f bitOr: d rightShift22maskL16r30) + 1).		keySchedule at: kIndex put: (t shallowCopy leftShift16 bitOr: (s shallowCopy maskH16r0maskL: 16rffff)).		kIndex := kIndex + 1.		s := s shallowCopy rightShift16 bitOr: (t maskL16r0maskH: 16rffff).		s := s shallowCopy leftShift4 bitOr: s rightShift28.		keySchedule at: kIndex put: s.		kIndex := kIndex + 1]</body></methods><methods><class-id>Security.DES</class-id> <category>private encryption</category><body package="DES" selector="doRound1Index1:index2:">doRound1Index1: index1 index2: index2	registerU hi: registerR hi low: registerR low.	registerT hi: registerR hi low: registerR low.	registerU bitXor: (keySchedule at: index1).	registerT bitXor: (keySchedule at: index2).	registerT functionLR.	registerL bitXor: (self class updateSPRegister: spRegister u: registerU t: registerT)</body><body package="DES" selector="doRound2Index1:index2:">doRound2Index1: index1 index2: index2	registerU hi: registerL hi low: registerL low.	registerT hi: registerL hi low: registerL low.	registerU bitXor: (keySchedule at: index1).	registerT bitXor: (keySchedule at: index2).	registerT functionLR.	registerR bitXor: (self class updateSPRegister: spRegister u: registerU t: registerT)</body><body package="DES" selector="processBlockEncrypt:">processBlockEncrypt: encrypt	"IP&amp;FP can be done be done in 15 xor, 10 shifts and 5 ands.	DESHelper does the moves in terms of small integers to avoid large Integer math."	helper cycleWithRShifted4maskH: 16r0f0f maskL: 16r0f0f.	helper cycleWithUShifted16maskH: 16r0000 maskL: 16rffff.	helper cycleWithRShifted2maskH: 16r3333 maskL: 16r3333.	helper cycleWithUShifted8maskH: 16r00ff maskL: 16r00ff.	helper cycleWithRShifted1maskH: 16r5555 maskL: 16r5555.	helper leftShiftUby1bitORedWithURightShifted31LoadRegister: registerR.	helper leftShiftRby1bitORedWithRRightShifted31LoadRegister: registerL.	"Perform the actual rounds. Decryption moves in the opposite direction from encryption.	The S and P box permutations are done with one array that represents the application of the two permutations combined."	encrypt		ifTrue: [ 1 to: 32 by: 8 do: [:step |				self doRound1Index1: step + 0 index2: step + 0 + 1.				self doRound2Index1: step + 2 index2: step + 2 + 1.				self doRound1Index1: step + 4 index2: step + 4 + 1.				self doRound2Index1: step + 6 index2: step + 6 + 1]]		ifFalse: [ 31 to: 0 by: -8 do: [:step |				self doRound1Index1: step - 0 index2: step - 0 + 1.				self doRound2Index1: step - 2 index2: step - 2 + 1.				self doRound1Index1: step - 4 index2: step - 4 + 1.				self doRound2Index1: step - 6 index2: step - 6 + 1]].	"Final permutation  "	registerL rightShiftby1bitORedWithLeftShifted31LoadHelperU: helper.	registerR rightShiftby1bitORedWithLeftShifted31LoadHelperR: helper.	helper cycleWithRShifted1maskH: 16r5555 maskL: 16r5555.	helper cycleWithUShifted8maskH: 16r00ff maskL: 16r00ff.	helper cycleWithRShifted2maskH: 16r3333 maskL: 16r3333.	helper cycleWithUShifted16maskH: 16r0000 maskL: 16rffff.	helper cycleWithRShifted4maskH: 16r0f0f maskL: 16r0f0f</body></methods><methods><class-id>Security.DES</class-id> <category>services</category><body package="DES" selector="decryptInPlace:at:">decryptInPlace: aByteArray at: start"Decrypt in place one block of &lt;aByteArray&gt; at postion &lt;start&gt;.Block size is defined by the encryption algorithm."		helper loadFrom: aByteArray at: start.	self processBlockEncrypt: false.	helper saveInto: aByteArray at: start.</body><body package="DES" selector="encryptInPlace:at:">encryptInPlace: aByteArray at: start"Encrypt in place one block of &lt;aByteArray&gt; at postion &lt;start&gt;.Block size is defined by the encryption algorithm."	helper loadFrom: aByteArray at: start.	self processBlockEncrypt: true.	helper saveInto: aByteArray at: start.</body></methods><methods><class-id>Security.DES class</class-id> <category>key testing</category><body package="DES" selector="checkKeyParity:">checkKeyParity: aKey	| keyArray |	keyArray := aKey asBigEndianByteArray reverse.	keyArray do:[:eachByte | (OddParityCheck at: (eachByte bitAnd: 16rff) + 1 ) ~= eachByte ifTrue:[^false]].	^true</body><body package="DES" selector="isDESKeyWeak:">isDESKeyWeak: aDESKey	^((WeakKeys contains: [:weakKey | weakKey = aDESKey]) or: [SemiWeakKeys contains: [:semiWeakKey | semiWeakKey = aDESKey]]) or:[PossiblyWeakKeys contains: [:possiblyWeakKey | possiblyWeakKey = aDESKey]]</body></methods><methods><class-id>Security.DES class</class-id> <category>intialize</category><body package="DES" selector="initialize">initialize	"self initialize"	self initializeShiftSequence.	self initializeWeakKeysArray.	self initializePossiblyWeakKeysArray.	self initializeSemiWeakKeysArray.	self initializeOddParityCheck.	self initializeSPRegisterTransformations.	self initializeSKBRegisterTransformation</body><body package="DES" selector="initializeOddParityCheck">initializeOddParityCheckOddParityCheck := #[  1   1   2   2   4   4   7   7   8   8  11  11  13  13  14  14  16  16  19  19  21  21  22  22  25  25  26  26  28  28  31  31  32  32  35  35  37  37  38  38  41  41  42  42  44  44  47  47  49  49  50  50  52  52  55  55  56  56  59  59  61  61  62  62  64  64  67  67  69  69  70  70  73  73  74  74  76  76  79  79  81  81  82  82  84  84  87  87  88  88  91  91  93  93  94  94  97  97  98  98 100 100 103 103 104 104 107 107 109 109 110 110 112 112 115 115 117 117 118 118 121 121 122 122 124 124 127 127 128 128 131 131 133 133 134 134 137 137 138 138 140 140 143 143 145 145 146 146 148 148 151 151 152 152 155 155 157 157 158 158 161 161 162 162 164 164 167 167 168 168 171 171 173 173 174 174 176 176 179 179 181 181 182 182 185 185 186 186 188 188 191 191 193 193 194 194 196 196 199 199 200 200 203 203 205 205 206 206 208 208 211 211 213 213 214 214 217 217 218 218 220 220 223 223 224 224 227 227 229 229 230 230 233 233 234 234 236 236 239 239 241 241 242 242 244 244 247 247 248 248 251 251 253 253 254 254]</body><body package="DES" selector="initializePossiblyWeakKeysArray">initializePossiblyWeakKeysArray"There are other keys that produce only four sub-keys. These keys are called possibly weak keys"PossiblyWeakKeys := #(16r1F1F0100E0E0101 16r011F1F01010E0E01 16r1F01011F0E01010E 16r01011F1F01010E0E 16rE0E00101F1F10101 16rFEFE0101FEFE0101 16rFEE01F01FEF10E01 16rE0FE1F01F1FE0E01 16rFEE0011FFEF1010E 16rE0FE011FF1FE010E 16rE0E01F1FF1F10E0E 16rFEFE1F1FFEFE0E0E 16r1F1F01010E0E0101 16r011F1F01010E0E01 16r1F01011F0E01010E 16r01011F1F01010E0E 16r01E0E00101F1F101 16r1FFEE0010EFEF001 16r1FE0FE010EF1FE01 16r01FEFE0101FEFE01 16r1FE0E01F0EF1F10E 16r01FEE01F01FEF10E 16r01E0FE1F01F1FE0E 16r1FFEFE1F0EFEFE0E 16rE00101E0F10101F1 16rFE1F01E0FE0E0EF1 16rFE011FE0FE010EF1 16rE01F1FE0F10E0EF1 16rFE0101FEFE0101FE 16rE01F01FEF10E01FE 16rE0011FFEF1010EFE 16rFE1F1FFEFE0E0EFE 16r1FFE01E00EFE01F1 16r01FE1FE001FE0EF1 16r1FE001FE0EF101FE 16r01E01FFE01F10EFE 16r0101E0E00101F1F1 16r1F1FE0E00E0EF1F1 16r1F01FEE00E01FEF1 16r011FFEE0010EFEF1 16r1F01E0FE0E01F1FE 16r011FE0FE010EF1FE 16r0101FEFE0001FEFE 16r1F1FFEFE0E0EFEFE 16rFEFEE0E0FEFEF1F1 16rE0FEFEE0F1FEFEF1 16rFEE0E0FEFEF1F1FE 16rE0E0FEFEF1F1FEFE ).</body><body package="DES" selector="initializeSKBRegisterTransformation">initializeSKBRegisterTransformation	SKBTransformation := Array new: 8.	self skbTransformationData doWithIndex: [ :each :index ||array|		array := Array new: 64.		each doWithIndex:[:eachValue :ind | array at: ind put: (ThirtyTwoBitRegister basicNew load: eachValue)].		SKBTransformation at: index put: array.].</body><body package="DES" selector="initializeSPRegisterTransformations">initializeSPRegisterTransformations	| spRegisterTransformation |	spRegisterTransformation := Array new: 8.	self spTransformationData doWithIndex: [ :each :index ||array|		array := Array new: 64.		each doWithIndex:[:eachValue :ind | array at: ind put: (ThirtyTwoBitRegister basicNew load: eachValue)].		spRegisterTransformation at: index put: array.].	spRegisterTransformation1 := spRegisterTransformation at:  1.	spRegisterTransformation2 := spRegisterTransformation at: 2.	spRegisterTransformation3 := spRegisterTransformation at: 3.	spRegisterTransformation4 := spRegisterTransformation at: 4.	spRegisterTransformation5 := spRegisterTransformation at: 5.	spRegisterTransformation6 := spRegisterTransformation at: 6.	spRegisterTransformation7 := spRegisterTransformation at: 7.	spRegisterTransformation8 := spRegisterTransformation at: 8.</body><body package="DES" selector="initializeSemiWeakKeysArray">initializeSemiWeakKeysArray"Some pairs of keys encrypt plaintext to identical ciphertext. These semi-weak keys are"	SemiWeakKeys := #(16r01FE01FE01FE01FE 16rFE01FE01FE01FE01 16r1FE01FE00EF10EF1 16rE01FE01FF10EF10E 16r01E001E001F101F1 16rE001E001F101F101 16r1FFE1FFE0EFE0EFE 16rFE1FFE1FFE0EFE0E 16r011F011F010E010E 16r1F011F010E010E01 16rE0FEE0FEF1FEF1FE 16rFEE0FEE0FEF1FEF1)</body><body package="DES" selector="initializeShiftSequence">initializeShiftSequence	ShiftSequence := #(false false true true true true true true false true true true true true true false)</body><body package="DES" selector="initializeWeakKeysArray">initializeWeakKeysArray"Some initial keys are weak keys. The initial key is modified to get a sub-key for each round of DES. This is done by splitting the initial value in half and independently shifting each half. If all the bits in each half are either 0 or 1, then the key used for any cycle of the algorithm is the same as all other cycles. The four weak keys in DES are shown below" 	WeakKeys := #(16r00000000000000 16r0000000FFFFFFF 16rFFFFFFF0000000 16rFFFFFFFFFFFFFF)</body></methods><methods><class-id>Security.DES class</class-id> <category>accessing</category><body package="DES" selector="blockSize">blockSize	^8</body></methods><methods><class-id>Security.DES class</class-id> <category>key generation</category><body package="DES" selector="getNewKey">getNewKey"generate a new randomly picked DES key and make sure that it isn't one of the know weak keys if it is try again till you get one."	"self getNewKey"| key |	[key := self setKeyParity:  (Integer randomBits: 64).	self isDESKeyWeak: key ] whileTrue:[Transcript show: '.' ].^key</body><body package="DES" selector="setKeyParity:">setKeyParity: aKey	"aKey is a LargePositiveInteger"	| keyArray |	keyArray := aKey asBigEndianByteArray.	keyArray doWithIndex: [:eachByte :index | 			keyArray				at: index				put: (OddParityCheck at: (eachByte bitAnd: 16rff) + 1)].	^keyArray asBigEndianInteger</body></methods><methods><class-id>Security.DES class</class-id> <category>private</category><body package="DES" selector="skbTransformationData">skbTransformationData	^#(		#(		16r00000000 16r00000010 16r20000000 16r20000010 		16r00010000 16r00010010 16r20010000 16r20010010 		16r00000800 16r00000810 16r20000800 16r20000810 		16r00010800 16r00010810 16r20010800 16r20010810 		16r00000020 16r00000030 16r20000020 16r20000030 		16r00010020 16r00010030 16r20010020 16r20010030 		16r00000820 16r00000830 16r20000820 16r20000830 		16r00010820 16r00010830 16r20010820 16r20010830 		16r00080000 16r00080010 16r20080000 16r20080010 		16r00090000 16r00090010 16r20090000 16r20090010 		16r00080800 16r00080810 16r20080800 16r20080810 		16r00090800 16r00090810 16r20090800 16r20090810 		16r00080020 16r00080030 16r20080020 16r20080030 		16r00090020 16r00090030 16r20090020 16r20090030 		16r00080820 16r00080830 16r20080820 16r20080830 		16r00090820 16r00090830 16r20090820 16r20090830 		) #(		16r00000000 16r02000000 16r00002000 16r02002000 		16r00200000 16r02200000 16r00202000 16r02202000 		16r00000004 16r02000004 16r00002004 16r02002004 		16r00200004 16r02200004 16r00202004 16r02202004 		16r00000400 16r02000400 16r00002400 16r02002400 		16r00200400 16r02200400 16r00202400 16r02202400 		16r00000404 16r02000404 16r00002404 16r02002404 		16r00200404 16r02200404 16r00202404 16r02202404 		16r10000000 16r12000000 16r10002000 16r12002000 		16r10200000 16r12200000 16r10202000 16r12202000 		16r10000004 16r12000004 16r10002004 16r12002004 		16r10200004 16r12200004 16r10202004 16r12202004 		16r10000400 16r12000400 16r10002400 16r12002400 		16r10200400 16r12200400 16r10202400 16r12202400 		16r10000404 16r12000404 16r10002404 16r12002404 		16r10200404 16r12200404 16r10202404 16r12202404 		) #(		16r00000000 16r00000001 16r00040000 16r00040001 		16r01000000 16r01000001 16r01040000 16r01040001 		16r00000002 16r00000003 16r00040002 16r00040003 		16r01000002 16r01000003 16r01040002 16r01040003 		16r00000200 16r00000201 16r00040200 16r00040201 		16r01000200 16r01000201 16r01040200 16r01040201 		16r00000202 16r00000203 16r00040202 16r00040203 		16r01000202 16r01000203 16r01040202 16r01040203 		16r08000000 16r08000001 16r08040000 16r08040001 		16r09000000 16r09000001 16r09040000 16r09040001 		16r08000002 16r08000003 16r08040002 16r08040003 		16r09000002 16r09000003 16r09040002 16r09040003 		16r08000200 16r08000201 16r08040200 16r08040201 		16r09000200 16r09000201 16r09040200 16r09040201 		16r08000202 16r08000203 16r08040202 16r08040203 		16r09000202 16r09000203 16r09040202 16r09040203 		) #(		16r00000000 16r00100000 16r00000100 16r00100100 		16r00000008 16r00100008 16r00000108 16r00100108 		16r00001000 16r00101000 16r00001100 16r00101100 		16r00001008 16r00101008 16r00001108 16r00101108 		16r04000000 16r04100000 16r04000100 16r04100100 		16r04000008 16r04100008 16r04000108 16r04100108 		16r04001000 16r04101000 16r04001100 16r04101100 		16r04001008 16r04101008 16r04001108 16r04101108 		16r00020000 16r00120000 16r00020100 16r00120100 		16r00020008 16r00120008 16r00020108 16r00120108 		16r00021000 16r00121000 16r00021100 16r00121100 		16r00021008 16r00121008 16r00021108 16r00121108 		16r04020000 16r04120000 16r04020100 16r04120100 		16r04020008 16r04120008 16r04020108 16r04120108 		16r04021000 16r04121000 16r04021100 16r04121100 		16r04021008 16r04121008 16r04021108 16r04121108 		) #(		16r00000000 16r10000000 16r00010000 16r10010000 		16r00000004 16r10000004 16r00010004 16r10010004 		16r20000000 16r30000000 16r20010000 16r30010000 		16r20000004 16r30000004 16r20010004 16r30010004 		16r00100000 16r10100000 16r00110000 16r10110000 		16r00100004 16r10100004 16r00110004 16r10110004 		16r20100000 16r30100000 16r20110000 16r30110000 		16r20100004 16r30100004 16r20110004 16r30110004 		16r00001000 16r10001000 16r00011000 16r10011000 		16r00001004 16r10001004 16r00011004 16r10011004 		16r20001000 16r30001000 16r20011000 16r30011000 		16r20001004 16r30001004 16r20011004 16r30011004 		16r00101000 16r10101000 16r00111000 16r10111000 		16r00101004 16r10101004 16r00111004 16r10111004 		16r20101000 16r30101000 16r20111000 16r30111000 		16r20101004 16r30101004 16r20111004 16r30111004 		) #(		16r00000000 16r08000000 16r00000008 16r08000008 		16r00000400 16r08000400 16r00000408 16r08000408 		16r00020000 16r08020000 16r00020008 16r08020008 		16r00020400 16r08020400 16r00020408 16r08020408 		16r00000001 16r08000001 16r00000009 16r08000009 		16r00000401 16r08000401 16r00000409 16r08000409 		16r00020001 16r08020001 16r00020009 16r08020009 		16r00020401 16r08020401 16r00020409 16r08020409 		16r02000000 16r0A000000 16r02000008 16r0A000008 		16r02000400 16r0A000400 16r02000408 16r0A000408 		16r02020000 16r0A020000 16r02020008 16r0A020008 		16r02020400 16r0A020400 16r02020408 16r0A020408 		16r02000001 16r0A000001 16r02000009 16r0A000009 		16r02000401 16r0A000401 16r02000409 16r0A000409 		16r02020001 16r0A020001 16r02020009 16r0A020009 		16r02020401 16r0A020401 16r02020409 16r0A020409 		) #(		16r00000000 16r00000100 16r00080000 16r00080100 		16r01000000 16r01000100 16r01080000 16r01080100 		16r00000010 16r00000110 16r00080010 16r00080110 		16r01000010 16r01000110 16r01080010 16r01080110 		16r00200000 16r00200100 16r00280000 16r00280100 		16r01200000 16r01200100 16r01280000 16r01280100 		16r00200010 16r00200110 16r00280010 16r00280110 		16r01200010 16r01200110 16r01280010 16r01280110 		16r00000200 16r00000300 16r00080200 16r00080300 		16r01000200 16r01000300 16r01080200 16r01080300 		16r00000210 16r00000310 16r00080210 16r00080310 		16r01000210 16r01000310 16r01080210 16r01080310 		16r00200200 16r00200300 16r00280200 16r00280300 		16r01200200 16r01200300 16r01280200 16r01280300 		16r00200210 16r00200310 16r00280210 16r00280310 		16r01200210 16r01200310 16r01280210 16r01280310 		) #(		16r00000000 16r04000000 16r00040000 16r04040000 		16r00000002 16r04000002 16r00040002 16r04040002 		16r00002000 16r04002000 16r00042000 16r04042000 		16r00002002 16r04002002 16r00042002 16r04042002 		16r00000020 16r04000020 16r00040020 16r04040020 		16r00000022 16r04000022 16r00040022 16r04040022 		16r00002020 16r04002020 16r00042020 16r04042020 		16r00002022 16r04002022 16r00042022 16r04042022 		16r00000800 16r04000800 16r00040800 16r04040800 		16r00000802 16r04000802 16r00040802 16r04040802 		16r00002800 16r04002800 16r00042800 16r04042800 		16r00002802 16r04002802 16r00042802 16r04042802 		16r00000820 16r04000820 16r00040820 16r04040820 		16r00000822 16r04000822 16r00040822 16r04040822 		16r00002820 16r04002820 16r00042820 16r04042820 		16r00002822 16r04002822 16r00042822 16r04042822 ))</body><body package="DES" selector="spTransformationData">spTransformationData	^ #(		#(			16r00820200  16r00020000  16r80800000  16r80820200 			16r00800000  16r80020200  16r80020000  16r80800000 			16r80020200  16r00820200  16r00820000  16r80000200 			16r80800200  16r00800000  16r00000000  16r80020000 			16r00020000  16r80000000  16r00800200  16r00020200 			16r80820200  16r00820000  16r80000200  16r00800200 			16r80000000  16r00000200  16r00020200  16r80820000 			16r00000200  16r80800200  16r80820000  16r00000000 			16r00000000  16r80820200  16r00800200  16r80020000 			16r00820200  16r00020000  16r80000200  16r00800200 			16r80820000  16r00000200  16r00020200  16r80800000 			16r80020200  16r80000000  16r80800000  16r00820000 			16r80820200  16r00020200  16r00820000  16r80800200 			16r00800000  16r80000200  16r80020000  16r00000000 			16r00020000  16r00800000  16r80800200  16r00820200 			16r80000000  16r80820000  16r00000200  16r80020200 			) #(				16r10042004  16r00000000  16r00042000  16r10040000 			16r10000004  16r00002004  16r10002000  16r00042000 			16r00002000  16r10040004  16r00000004  16r10002000 			16r00040004  16r10042000  16r10040000  16r00000004 			16r00040000  16r10002004  16r10040004  16r00002000 			16r00042004  16r10000000  16r00000000  16r00040004 			16r10002004  16r00042004  16r10042000  16r10000004 			16r10000000  16r00040000  16r00002004  16r10042004 			16r00040004  16r10042000  16r10002000  16r00042004 			16r10042004  16r00040004  16r10000004  16r00000000 			16r10000000  16r00002004  16r00040000  16r10040004 			16r00002000  16r10000000  16r00042004  16r10002004 			16r10042000  16r00002000  16r00000000  16r10000004 			16r00000004  16r10042004  16r00042000  16r10040000 			16r10040004  16r00040000  16r00002004  16r10002000 			16r10002004  16r00000004  16r10040000  16r00042000 			) #(				16r41000000  16r01010040  16r00000040  16r41000040 			16r40010000  16r01000000  16r41000040  16r00010040 			16r01000040  16r00010000  16r01010000  16r40000000 			16r41010040  16r40000040  16r40000000  16r41010000 			16r00000000  16r40010000  16r01010040  16r00000040 			16r40000040  16r41010040  16r00010000  16r41000000 			16r41010000  16r01000040  16r40010040  16r01010000 			16r00010040  16r00000000  16r01000000  16r40010040 			16r01010040  16r00000040  16r40000000  16r00010000 			16r40000040  16r40010000  16r01010000  16r41000040 			16r00000000  16r01010040  16r00010040  16r41010000 			16r40010000  16r01000000  16r41010040  16r40000000 			16r40010040  16r41000000  16r01000000  16r41010040 			16r00010000  16r01000040  16r41000040  16r00010040 			16r01000040  16r00000000  16r41010000  16r40000040 			16r41000000  16r40010040  16r00000040  16r01010000 			) #(				16r00100402  16r04000400  16r00000002  16r04100402 			16r00000000  16r04100000  16r04000402  16r00100002 			16r04100400  16r04000002  16r04000000  16r00000402 			16r04000002  16r00100402  16r00100000  16r04000000 			16r04100002  16r00100400  16r00000400  16r00000002 			16r00100400  16r04000402  16r04100000  16r00000400 			16r00000402  16r00000000  16r00100002  16r04100400 			16r04000400  16r04100002  16r04100402  16r00100000 			16r04100002  16r00000402  16r00100000  16r04000002 			16r00100400  16r04000400  16r00000002  16r04100000 			16r04000402  16r00000000  16r00000400  16r00100002 			16r00000000  16r04100002  16r04100400  16r00000400 			16r04000000  16r04100402  16r00100402  16r00100000 			16r04100402  16r00000002  16r04000400  16r00100402 			16r00100002  16r00100400  16r04100000  16r04000402 			16r00000402  16r04000000  16r04000002  16r04100400 			) #(				16r02000000  16r00004000  16r00000100  16r02004108 			16r02004008  16r02000100  16r00004108  16r02004000 			16r00004000  16r00000008  16r02000008  16r00004100 			16r02000108  16r02004008  16r02004100  16r00000000 			16r00004100  16r02000000  16r00004008  16r00000108 			16r02000100  16r00004108  16r00000000  16r02000008 			16r00000008  16r02000108  16r02004108  16r00004008 			16r02004000  16r00000100  16r00000108  16r02004100 			16r02004100  16r02000108  16r00004008  16r02004000 			16r00004000  16r00000008  16r02000008  16r02000100 			16r02000000  16r00004100  16r02004108  16r00000000 			16r00004108  16r02000000  16r00000100  16r00004008 			16r02000108  16r00000100  16r00000000  16r02004108 			16r02004008  16r02004100  16r00000108  16r00004000 			16r00004100  16r02004008  16r02000100  16r00000108 			16r00000008  16r00004108  16r02004000  16r02000008 			) #(				16r20000010  16r00080010  16r00000000  16r20080800 			16r00080010  16r00000800  16r20000810  16r00080000 			16r00000810  16r20080810  16r00080800  16r20000000 			16r20000800  16r20000010  16r20080000  16r00080810 			16r00080000  16r20000810  16r20080010  16r00000000 			16r00000800  16r00000010  16r20080800  16r20080010 			16r20080810  16r20080000  16r20000000  16r00000810 			16r00000010  16r00080800  16r00080810  16r20000800 			16r00000810  16r20000000  16r20000800  16r00080810 			16r20080800  16r00080010  16r00000000  16r20000800 			16r20000000  16r00000800  16r20080010  16r00080000 			16r00080010  16r20080810  16r00080800  16r00000010 			16r20080810  16r00080800  16r00080000  16r20000810 			16r20000010  16r20080000  16r00080810  16r00000000 			16r00000800  16r20000010  16r20000810  16r20080800 			16r20080000  16r00000810  16r00000010  16r20080010 			) #(				16r00001000  16r00000080  16r00400080  16r00400001 			16r00401081  16r00001001  16r00001080  16r00000000 			16r00400000  16r00400081  16r00000081  16r00401000 			16r00000001  16r00401080  16r00401000  16r00000081 			16r00400081  16r00001000  16r00001001  16r00401081 			16r00000000  16r00400080  16r00400001  16r00001080 			16r00401001  16r00001081  16r00401080  16r00000001 			16r00001081  16r00401001  16r00000080  16r00400000 			16r00001081  16r00401000  16r00401001  16r00000081 			16r00001000  16r00000080  16r00400000  16r00401001 			16r00400081  16r00001081  16r00001080  16r00000000 			16r00000080  16r00400001  16r00000001  16r00400080 			16r00000000  16r00400081  16r00400080  16r00001080 			16r00000081  16r00001000  16r00401081  16r00400000 			16r00401080  16r00000001  16r00001001  16r00401081 			16r00400001  16r00401080  16r00401000  16r00001001 			) #(				16r08200020  16r08208000  16r00008020  16r00000000 			16r08008000  16r00200020  16r08200000  16r08208020 			16r00000020  16r08000000  16r00208000  16r00008020 			16r00208020  16r08008020  16r08000020  16r08200000 			16r00008000  16r00208020  16r00200020  16r08008000 			16r08208020  16r08000020  16r00000000  16r00208000 			16r08000000  16r00200000  16r08008020  16r08200020 			16r00200000  16r00008000  16r08208000  16r00000020 			16r00200000  16r00008000  16r08000020  16r08208020 			16r00008020  16r08000000  16r00000000  16r00208000 			16r08200020  16r08008020  16r08008000  16r00200020 			16r08208000  16r00000020  16r00200020  16r08008000 			16r08208020  16r00200000  16r08200000  16r08000020 			16r00208000  16r00008020  16r08008020  16r08200000 			16r00000020  16r08208000  16r00208020  16r00000000 			16r08000000  16r08200020  16r00008000  16r00208020 		))</body><body package="DES" selector="updateSPRegister:u:t:">updateSPRegister: spRegister u: u t: t 	"u and t are instances of thirtyTwo bit register this returns a 32 bit register"	"the first register is a copy since the register on the left alters and holds the values"	| firstSpRegister |	firstSpRegister := spRegisterTransformation2 at: (t low bitAnd: 16r3f) + 1.	spRegister hi: firstSpRegister hi low: firstSpRegister low.	^((((((spRegister bitOr: (spRegisterTransformation4 at: t rightShift8maskL16r3f + 1))		bitOr: (spRegisterTransformation6 at: t rightShift16maskL16r3f + 1))		bitOr: (spRegisterTransformation8 at: t rightShift24maskL16r3f + 1))		bitOr: (spRegisterTransformation1 at: (u low bitAnd: 16r3f)+ 1))		bitOr: (spRegisterTransformation3 at: u rightShift8maskL16r3f + 1))		bitOr: (spRegisterTransformation5 at: u rightShift16maskL16r3f + 1))		bitOr: (spRegisterTransformation7 at: u rightShift24maskL16r3f + 1)</body></methods><methods><class-id>Security.DESHelper</class-id> <category>accesing</category><body package="DES" selector="loadFrom:at:">loadFrom: aByteArray at: start	       uL := ((aByteArray at: start + 1) bitShift: 8) + (aByteArray at: start).        uH := ((aByteArray at: start + 3) bitShift: 8) + (aByteArray at: start + 2).       rL := ((aByteArray at: start + 5) bitShift: 8) + (aByteArray at: start + 4).       rH := ((aByteArray at: start + 7) bitShift: 8) + (aByteArray at: start + 6).</body><body package="DES" selector="rH">rH	^rH</body><body package="DES" selector="rH:rL:">rH: high16 rL: low16	rH := high16.	rL := low16.</body><body package="DES" selector="rL">rL	^rL</body><body package="DES" selector="saveInto:at:">saveInto: aByteArray at: start	aByteArray		at: start put: (uL bitAnd: 16rff);		at: start + 1 put: ((uL bitShift: -8) bitAnd: 16rff);		at: start + 2 put: (uH bitAnd: 16rff);		at: start + 3 put: ((uH bitShift: -8) bitAnd: 16rff);		at: start + 4 put: (rL bitAnd: 16rff);		at: start + 5 put: ((rL bitShift: -8) bitAnd: 16rff);		at: start + 6 put: (rH bitAnd: 16rff);		at: start + 7 put: ((rH bitShift: -8) bitAnd: 16rff)</body><body package="DES" selector="u:r:">u: aLargeIntU r: aLargeIntR	       uH := ((aLargeIntU basicAt: 4) bitShift: 8) + (aLargeIntU basicAt: 3).       uL := ((aLargeIntU basicAt: 2) bitShift: 8) + (aLargeIntU basicAt: 1).        rH := ((aLargeIntR basicAt: 4) bitShift: 8) + (aLargeIntR basicAt: 3).       rL := ((aLargeIntR basicAt: 2) bitShift: 8) + (aLargeIntR basicAt: 1).</body><body package="DES" selector="uH">uH	^uH</body><body package="DES" selector="uH:uL:">uH: high16 uL: low16	uH := high16.	uL := low16.</body><body package="DES" selector="uL">uL	^uL</body></methods><methods><class-id>Security.DESHelper</class-id> <category>api IP and FP</category><body package="DES" selector="leftShiftRby1bitORedWithRRightShifted31LoadRegister:">leftShiftRby1bitORedWithRRightShifted31LoadRegister: aThirtyTwoBitRegister 	"do the operation and return a largeInt as a result	shift1 = 1 shift2=31"	| low1 high1 low2 high2 tl |	tl :=  ( rL bitShift: -15).	low1 := ( rL specialLeftShift1)  bitAnd: 16rffff.	high1 :=((rH specialLeftShift1  ) bitAnd: 16rffff) + ((tl) ).	low2 := ((rH bitShift: -15)				+ (rL bitShift: -31)) bitAnd: 16rffff.	high2 := rH bitShift: -31.	aThirtyTwoBitRegister hi: (high1 bitOr: high2) low: (low1 bitOr: low2).</body><body package="DES" selector="leftShiftUby1bitORedWithURightShifted31LoadRegister:">leftShiftUby1bitORedWithURightShifted31LoadRegister: aThirtyTwoBitRegister 	"do the operation and return a largeInt as a result"	| low1 high1 low2 high2  tl |	tl :=  ( uL bitShift: -15).	low1 := ( uL bitShift: 1)  bitAnd: 16rffff.	high1 :=((uH bitShift: 1  ) bitAnd: 16rffff) + ((tl) ).	low2 := ((uH bitShift: -15)				+ (uL bitShift: -31)) bitAnd: 16rffff.	high2 := uH bitShift: -31.	aThirtyTwoBitRegister hi: (high1 bitOr: high2) low: (low1 bitOr: low2).</body></methods><methods><class-id>Security.DESHelper</class-id> <category>api cycling</category><body package="DES" selector="cycleWithRShifted1maskH:maskL:">cycleWithRShifted1maskH: maskH maskL: maskL      | ttH ttL | 	ttH := (uH bitXor: (rH bitShift: -1)) bitAnd: maskH.       ttL := ((rH specialLeftShift15  ) + (rL bitShift: -1) bitXor: uL) bitAnd: maskL.       uH := uH bitXor: ttH.       uL := uL bitXor: ttL.       rH := rH bitXor: (ttH specialLeftShift1) + (ttL bitShift: (-15 )).       rL := rL bitXor: (ttL specialLeftShift1).</body><body package="DES" selector="cycleWithRShifted2maskH:maskL:">cycleWithRShifted2maskH: maskH maskL: maskL      | ttH ttL | 	ttH := (uH bitXor: (rH bitShift: -2)) bitAnd: maskH.       ttL := ((rH specialLeftShift14  ) + (rL bitShift: -2) bitXor: uL) bitAnd: maskL.       uH := uH bitXor: ttH.       uL := uL bitXor: ttL.       rH := rH bitXor: (ttH bitShift: 2) + (ttL bitShift: (-14 )).       rL := rL bitXor: (ttL bitShift: 2).</body><body package="DES" selector="cycleWithRShifted4maskH:maskL:">cycleWithRShifted4maskH: maskH maskL: maskL 	| ttH ttL |	ttH := (uH bitXor: (rH bitShift: -4))				bitAnd: maskH.	ttL := ((rH bitShift: 12)				+ (rL bitShift: -4) bitXor: uL)				bitAnd: maskL.	uH := uH bitXor: ttH.	uL := uL bitXor: ttL.	rH := rH bitXor: (ttH specialLeftShift4) + (ttL bitShift: -12).	rL := rL bitXor: (ttL specialLeftShift4)</body><body package="DES" selector="cycleWithUShifted16maskH:maskL:">cycleWithUShifted16maskH: maskH maskL: maskL      | ttH ttL |	ttH :=  rH  bitAnd: maskH.       ttL := (uH   bitXor: rL) bitAnd: maskL.       rH := rH bitXor: ttH.       rL := rL bitXor: ttL.       uH := uH bitXor: ttL .</body><body package="DES" selector="cycleWithUShifted8maskH:maskL:">cycleWithUShifted8maskH: maskH maskL: maskL      | ttH ttL |	uH := uH bitAnd: 16rffff.	uL := uL bitAnd: 16rffff.	ttH := (  rH bitXor: (uH bitShift: -8)) bitAnd: maskH.       ttL := ((uH bitShift: 8 ) + (uL bitShift: -8) bitXor: rL) bitAnd: maskL.       rH := rH bitXor: ttH.       rL := rL bitXor: ttL.       uH := uH bitXor: (ttH specialLeftShift8) + (ttL bitShift: (-8 )).       uL := uL bitXor: (ttL specialLeftShift8).</body></methods><methods><class-id>Security.ThirtyTwoBitRegister</class-id> <category>operations</category><body package="DES" selector="functionLR">functionLR	| high1 low1 |" don't do any of the special left shift 12s becuasre they can't result in a large int and so this is faster"	high1 := (low bitShift:12) bitAnd: 16rffff.	low1 := 0.	low := (hi bitShift:12) + (low bitShift: -4).	hi := hi bitShift: -4.	hi := hi bitOr: high1.	low := low bitOr: low1</body><body package="DES" selector="leftShift1">leftShift1	| tl |	tl := low bitShift: -15.	low := (low bitShift: 1)				bitAnd: 65535.	hi := ((hi bitShift: 1)				bitAnd: 65535)				+ tl</body><body package="DES" selector="leftShift16">leftShift16	hi := low.	low := 0</body><body package="DES" selector="leftShift18">leftShift18	hi := (low bitShift: 2)				bitAnd: 65535.	low := 0</body><body package="DES" selector="leftShift26">leftShift26	hi := (low bitShift: 10)				bitAnd: 65535.	low := 0</body><body package="DES" selector="leftShift27">leftShift27	hi := (low bitShift: 11)				bitAnd: 65535.	low := 0</body><body package="DES" selector="leftShift4">leftShift4	| tl |	tl := low bitShift: -12.	low := (low bitShift: 4)				bitAnd: 65535.	hi := ((hi bitShift: 4)				bitAnd: 65535)				+ tl</body><body package="DES" selector="leftShift8">leftShift8	| tl |	tl := low bitShift: -8.	low := (low bitShift: 8)				bitAnd: 65535.	hi := ((hi bitShift: 8)				bitAnd: 65535)				+ tl</body></methods><methods><class-id>Security.ThirtyTwoBitRegister</class-id> <category>accessing</category><body package="DES" selector="loadBottom32:">loadBottom32: anArray       hi := ((anArray at: 8) bitShift: 8) + (anArray at: 7).       low := ((anArray at: 6) bitShift: 8) + (anArray at: 5).</body><body package="DES" selector="loadTop32:">loadTop32: anArray       hi := ((anArray at: 4) bitShift: 8) + (anArray at: 3).       low := ((anArray at: 2) bitShift: 8) + (anArray at: 1).</body></methods><methods><class-id>Security.ThirtyTwoBitRegister</class-id> <category>operations</category><body package="DES" selector="maskH:">maskH: maskH	hi := hi bitAnd: maskH.</body><body package="DES" selector="maskH:maskL:">maskH: maskH maskL: maskL	hi := hi bitAnd: maskH.	low := low bitAnd: maskL.</body><body package="DES" selector="maskH16r0maskL:">maskH16r0maskL: maskL	hi := 0.	low := low bitAnd: maskL.</body><body package="DES" selector="maskL16r0maskH:">maskL16r0maskH: maskH 	hi := hi bitAnd: maskH.	low := 0.</body><body package="DES" selector="rightShift1">rightShift1low := (hi specialLeftShift15 ) + (low bitShift: -1).hi :=(hi bitShift: -1).</body><body package="DES" selector="rightShift13maskL16r0f">rightShift13maskL16r0f			^((hi bitShift: 3) + (low bitShift: -13)) bitAnd: 16r0f</body><body package="DES" selector="rightShift14maskL16r30">rightShift14maskL16r30 	^(hi bitShift: 2)+ (low bitShift: -14) bitAnd: 16r30</body><body package="DES" selector="rightShift15maskL16r3f">rightShift15maskL16r3f	^(hi bitShift: 1)		+ (low bitShift: -15) bitAnd: 16r3f</body><body package="DES" selector="rightShift16">rightShift16	low := hi.	hi := 0</body><body package="DES" selector="rightShift16maskL16r3f">rightShift16maskL16r3f^hi  bitAnd: 16r3f</body><body package="DES" selector="rightShift18">rightShift18low := (hi bitShift: -2 ).hi := 0.</body><body package="DES" selector="rightShift2">rightShift2low := ((hi bitShift: 14 ) bitAnd: 16rffff)+ (low bitShift: -2).hi :=(hi bitShift: -2).</body><body package="DES" selector="rightShift20maskL16r01">rightShift20maskL16r01	^(hi bitShift: -4) bitAnd: 16r01</body><body package="DES" selector="rightShift21maskL16r06">rightShift21maskL16r06 	^(hi bitShift: -5) bitAnd: 16r06</body><body package="DES" selector="rightShift21maskL16r0f">rightShift21maskL16r0f	^(hi bitShift: -5) bitAnd: 16r0f</body><body package="DES" selector="rightShift22maskL16r30">rightShift22maskL16r30	^(hi bitShift: -6) bitAnd: 16r30</body><body package="DES" selector="rightShift22maskL16r38">rightShift22maskL16r38	^(hi bitShift: -6) bitAnd: 16r38</body><body package="DES" selector="rightShift24maskL16r3f">rightShift24maskL16r3f	^(hi bitShift: -8)		bitAnd: 63</body><body package="DES" selector="rightShift28">rightShift28low := (hi bitShift: -12 ).hi :=0.</body><body package="DES" selector="rightShift4">rightShift4low :=((hi bitShift: 12) bitAnd: 16rffff) +  (low bitShift: -4) .hi :=(hi bitShift: -4).</body><body package="DES" selector="rightShift6maskL16r03">rightShift6maskL16r03 			^(low bitShift: -6) bitAnd: 16r03</body><body package="DES" selector="rightShift7maskL16r03">rightShift7maskL16r03	^(low bitShift: -7) bitAnd: 16r03</body><body package="DES" selector="rightShift7maskL16r3c">rightShift7maskL16r3c	^(low bitShift: -7) bitAnd: 16r3c</body><body package="DES" selector="rightShift8">rightShift8low := (hi bitShift: 8 ) + (low bitShift: -8).hi :=(hi bitShift: -8).</body><body package="DES" selector="rightShift8maskL16r3c">rightShift8maskL16r3c	^(low bitShift: -8) bitAnd: 16r3c</body><body package="DES" selector="rightShift8maskL16r3f">rightShift8maskL16r3f	^(low bitShift: -8) bitAnd: 16r3f</body><body package="DES" selector="rightShiftby1bitORedWithLeftShifted31LoadHelperR:">rightShiftby1bitORedWithLeftShifted31LoadHelperR: aHelper  	"do the operation and return a largeInt as a result "	| low1 high1 low2 high2     |		high1 :=  ( low specialLeftShift15) .	low1 := 0.	low2 := ((hi specialLeftShift15)				+ (low bitShift: -1)).	high2 := hi bitShift: -1.	aHelper rH: (high1 bitOr: high2) rL: (low1 bitOr: low2)</body><body package="DES" selector="rightShiftby1bitORedWithLeftShifted31LoadHelperU:">rightShiftby1bitORedWithLeftShifted31LoadHelperU: aHelper  	"do the operation and return a largeInt as a result "	| low1 high1 low2 high2     |		high1 :=  ( low specialLeftShift15) .	low1 := 0.	low2 := ((hi specialLeftShift15)				+ (low bitShift: -1)).	high2 := hi bitShift: -1.	aHelper uH: (high1 bitOr: high2) uL: (low1 bitOr: low2)</body></methods><methods><class-id>Core.SmallInteger</class-id> <category>security</category><body package="DES" selector="specialLeftShift1">specialLeftShift1	"Limit the results to the bottom 16 bits.  Ensure the bitShift: primitive succeeds in 32 bit images"	^(self bitAnd: 16r7FFF) bitShift: 1</body><body package="DES" selector="specialLeftShift14">specialLeftShift14	"Limit the results to the bottom 16 bits.  Ensure the bitShift: primitive succeeds in 32 bit images"	^(self bitAnd: 16r3) bitShift: 14</body><body package="DES" selector="specialLeftShift15">specialLeftShift15	"Limit the results to the bottom 16 bits.  Ensure the bitShift: primitive succeeds in 32 bit images"	^(self bitAnd: 16r1) bitShift: 15</body><body package="DES" selector="specialLeftShift4">specialLeftShift4	"Limit the results to the bottom 16 bits.  Ensure the bitShift: primitive succeeds in 32 bit images"	^(self bitAnd: 16rFFF) bitShift: 4</body><body package="DES" selector="specialLeftShift8">specialLeftShift8	"Limit the results to the bottom 16 bits.  Ensure the bitShift: primitive succeeds in 32 bit images"	^(self bitAnd: 16rFF) bitShift: 8</body></methods><initialize><class-id>Security.DES</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ThirtyTwoBitRegister</name><environment>Security</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hi low </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Security-Hashes</category><attributes><package>SecurityBase</package></attributes></class><class><name>SmallInteger</name><environment>Core</environment><super>Core.Integer</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars>minVal maxVal maxBits maxBytes </class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>BlockCipher</name><environment>Security</environment><super>Security.SymmetricCipher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>blockSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Security-Ciphers</category><attributes><package>CiphersBase</package></attributes></class></st-source>