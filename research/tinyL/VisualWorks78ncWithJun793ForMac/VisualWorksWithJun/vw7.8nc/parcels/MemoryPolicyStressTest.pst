<?xml version="1.0"?><st-source><!-- Name: MemoryPolicyStressTestDbIdentifier: bear73DbTrace: 315093DevelopmentPrerequisites: #(#(#any 'MemoryPolicyChecker' ''))PackageName: MemoryPolicyStressTestParcel: #('MemoryPolicyStressTest')PrerequisiteDescriptions: #(#(#name 'MemoryPolicyChecker' #componentType #package))PrerequisiteParcels: #(#('MemoryPolicyChecker' ''))PrintStringCache: (7.8 - 1003,avalloud)Version: 7.8 - 1003Date: 10:51:38 AM January 7, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.1) of January 7, 2011 on January 7, 2011 at 10:51:38 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AbstractMemoryPolicyStressTest</name><environment>Smalltalk</environment><super>MemoryPolicyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyScavengeStressTest</name><environment>Smalltalk</environment><super>AbstractMemoryPolicyStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyGCStressTest</name><environment>Smalltalk</environment><super>AbstractMemoryPolicyStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyGCDeepMarkStackStressTest</name><environment>Smalltalk</environment><super>MemoryPolicyGCStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyGCLessMemoryStressTest</name><environment>Smalltalk</environment><super>MemoryPolicyGCStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><methods><class-id>AbstractMemoryPolicyStressTest</class-id> <category>setup - sizes</category><body package="MemoryPolicyStressTest" selector="byteAllocationSizes">byteAllocationSizes	^(-1 to: 11) collect: [:each | 1 bitShift: each]</body><body package="MemoryPolicyStressTest" selector="garbagePercentages">garbagePercentages	^#(0 10 25 40 50 65 75 90)</body><body package="MemoryPolicyStressTest" selector="pointerAllocationSizes">pointerAllocationSizes	^(-1 to: 8) collect: [:each | 1 bitShift: each]</body></methods><methods><class-id>AbstractMemoryPolicyStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest" selector="globalGC">globalGC	self objectMemory globalGarbageCollect</body><body package="MemoryPolicyStressTest" selector="setUp">setUp	self globalGC</body><body package="MemoryPolicyStressTest" selector="tearDown">tearDown	self globalGC</body></methods><methods><class-id>MemoryPolicyScavengeStressTest</class-id> <category>testing - scavenge stress</category><body package="MemoryPolicyStressTest" selector="testCreateLotsOfByteGarbage">testCreateLotsOfByteGarbage	self byteAllocationSizes do:		[:eachSize |			| outerRepetitions |			outerRepetitions := 500 // (eachSize sqrtFloor sqrtFloor max: 1).			outerRepetitions timesRepeat: [1000000 timesRepeat: [ByteArray new: eachSize]]		]</body><body package="MemoryPolicyStressTest" selector="testCreateLotsOfPointerGarbage">testCreateLotsOfPointerGarbage	self pointerAllocationSizes do:		[:eachSize |			| outerRepetitions |			outerRepetitions := 500 // (eachSize sqrtFloor sqrtFloor max: 1).			outerRepetitions timesRepeat: [1000000 timesRepeat: [Array new: eachSize]]		]</body><body package="MemoryPolicyStressTest" selector="testPointCreation">testPointCreation	"This test may cause VM failure in different ways.	* The hardLowSpaceLimit is not large enough to accomodate a full scavenge,	leading to VM failure to scavenge because too much data is tenured.	* The contiguousSpaceSafetyMargin is not large enough to accomodate a full	scavenge, leading to VM failure to scavenge because of the points ordered	collection"	| points maxsize numObjects |	maxsize := self memoryUpperBound.	numObjects := maxsize // 100.	points := OrderedCollection new.	numObjects timesRepeat: [points add: 1 @ 2]</body></methods><methods><class-id>MemoryPolicyGCStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest" selector="availableMemory">availableMemory	| availableMemory |	availableMemory := self memoryUpperBound * 3 // 4		- self dynamicallyAllocatedFootprint		+ self availableFreeOldSpaceBytes		- (self preferredGrowthIncrement * 3).	self assert: availableMemory &gt; (128 bitShift: 20).	^availableMemory</body><body package="MemoryPolicyStressTest" selector="largeStorageArrayClass">largeStorageArrayClass	^LargeArray</body><body package="MemoryPolicyStressTest" selector="numberOfAllocationsOfType:withSize:">numberOfAllocationsOfType: aClasswithSize: anInteger	| fixedSlotBytes indexedSlotBytes bytesPerObject allocations roundedAllocations |	fixedSlotBytes := aClass instSize * self bytesPerOOP.	indexedSlotBytes := aClass isBits ifTrue: [anInteger] ifFalse: [anInteger * self bytesPerOOP].	bytesPerObject := self bytesPerOTE + fixedSlotBytes + indexedSlotBytes.	allocations := self availableMemory // (bytesPerObject + self bytesPerOOP).	roundedAllocations := allocations * 255 // 256.	^roundedAllocations</body></methods><methods><class-id>MemoryPolicyGCStressTest</class-id> <category>testing - GC stress</category><body package="MemoryPolicyStressTest" selector="stressGarbageAllocationOfType:withSize:andGarbagePercent:">stressGarbageAllocationOfType: garbageClasswithSize: anIntegerandGarbagePercent: aPercentage	"The variable emergencyStopVH is for debugging purposes.  It is meant to be	a value holder that changes value when the image encounters a memory	emergency, but before the process monitor comes up.  If, at that point, the	image does not change the value holder to true, then since this process will	not be stopped, the image will summarily crash"	| numberOfAllocations "emergencyStopVH" |	"emergencyStopVH := Smalltalk at: #emergencyStop."	numberOfAllocations := self numberOfAllocationsOfType: garbageClass withSize: anInteger.	3 timesRepeat:		[			| nonGarbage writeIndex |			nonGarbage := self largeStorageArrayClass new: numberOfAllocations.			writeIndex := 1.			numberOfAllocations // 100 timesRepeat:				[					100 - aPercentage timesRepeat:						[							nonGarbage at: writeIndex put: (garbageClass new: anInteger).							"[emergencyStopVH value] whileTrue: [(Delay forSeconds: 1) wait]."							writeIndex := writeIndex + 1						].					aPercentage timesRepeat:						[							garbageClass new: anInteger.							"[emergencyStopVH value] whileTrue: [(Delay forSeconds: 1) wait]"						]				]		]</body><body package="MemoryPolicyStressTest" selector="testByteAllocationStress">testByteAllocationStress	self garbagePercentages do:		[:eachPercentage |			self byteAllocationSizes do:				[:eachSize |					self						stressGarbageAllocationOfType: ByteArray						withSize: eachSize						andGarbagePercent: eachPercentage				]		]</body><body package="MemoryPolicyStressTest" selector="testPointerAllocationStress">testPointerAllocationStress	self garbagePercentages do:		[:eachPercentage |			self pointerAllocationSizes do:				[:eachSize |					self						stressGarbageAllocationOfType: Array						withSize: eachSize						andGarbagePercent: eachPercentage				]		]</body></methods><methods><class-id>MemoryPolicyGCDeepMarkStackStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest" selector="largeStorageArrayClass">largeStorageArrayClass	^Array</body></methods><methods><class-id>MemoryPolicyGCLessMemoryStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest" selector="availableMemory">availableMemory	^super availableMemory // 2</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>MemoryPolicyTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentObjectMemory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyChecker</package></attributes></class></st-source>