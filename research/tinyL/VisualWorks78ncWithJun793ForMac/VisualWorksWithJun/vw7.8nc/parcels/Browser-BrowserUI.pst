<?xml version="1.0"?><st-source><!-- Name: Browser-BrowserUINotice: Copyright © 2010-1999 Cincom Systems, Inc.  All Rights Reserved.Portions © 1998-2002 The Refactory, IncComment: This package contains classes for the refactoring browser's browser interface.DbIdentifier: bear73DbTrace: 323440DevelopmentPrerequisites: #(#(#any 'Browser-RefactoringUI' '') #(#any 'ExternalWebBrowser-Text' ''))PackageName: Browser-BrowserUIParcel: #('Browser-BrowserUI')ParcelName: Browser-BrowserUIPrerequisiteParcels: #(#('Browser-RefactoringUI' '') #('ExternalWebBrowser-Text' ''))PrintStringCache: (7.8 - 1028,smichael)Version: 7.8 - 1028Pre-Unload Block: 	[:package | Refactory.Browser.BrowserCodeTool preUnloadActionFor: package.]Date: 9:15:22 AM March 11, 2011 --><time-stamp>From VisualWorks®, 7.8 of March 4, 2011 on March 11, 2011 at 9:15:22 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BundleStructureView</name><environment>Refactory.Browser</environment><super>UI.Panel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bundleHolder rowToDrag scrollOffsetHolder targetPreceedingIndex state </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BundleStructureView</class-id><body>I am the top level tool for viewing and manipulating the subcomponents of a bundle.ImplementationI populate with a set of rows, constructed from Panels, with a row per subcomponent. I associate the actual subcomponents with those rows via a property on the row.I don't use a controller for interaction, I do it all myself. I use a simple state symbol to know that my current interaction state is one of #idle, #dragging, or #scrolling. The handleEvent: message builds the message for a given even by concatonating the state and event class name, and sending that if if exists. This allows the methods found in 'event states' to describe an interaction state machine.My subparts don't actively take mouse events, so they don't regularly become the currentMouseConsumer, which is currently used to drive the FrameExited/FrameEntered announcements which drive the tooltips. So we manage that in this view by noting where the mouse is, and driving the announcements as appropriate. See idleMouseMovedEvent:.Instance Variables	bundleHolder	&lt;ValueModel of: BundleModel&gt;	current bundle to work with	rowToDrag	&lt;Panel | nil&gt; nil when #idle, but otherwise the row we are attempting to reposition when drag/scrolling	scrollOffsetHolder	&lt;ScrollValueHolder&gt;	used to scroll, since we get created inside of a scroll wrapper	state	&lt;#idle | #dragging | #scrolling&gt;	the current interaction state	targetPreceedingIndex	&lt;Integer | nil&gt;	nil when #idle, but otherwise the index directly above where we want to place rowToDrag</body></comment><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeTool</class-id><body>I represent a tool that shows up in the bottom half of the code browser, where there is one tool per tab.OverviewFor each tab that appears in the lower half of the code browser, there is a concrete subclass of me. These subclasses hold the logic for each sort of code tool that can appear in the browser. The lower half of the browser is represented by the CodeModel object, which groups a set of tools together in what is logically called a 'toolset'. Different tools will have different usage models. Some are text tools (such as the tool used to view/edit this comment, or the method source editing tool), while others may be more structured (the CodeCritic tool). Each CodeTool collaborates with its CodeModel to determine for a given selection in the top half of the browser (called the navigator), whether a tool should be visible and what contents the tool should be showing.UsageTo make your own code tool, create a subclass of me (or of a suitable subclass of me, such as BrowserTextTool). Class CodeTool is an ApplicationModel, so all subclasses inherit its behavior. To define widgets in the CodeTool, use a windowSpec (in the class-side method category 'interface specs'), and then model the application logic of the tool in your subclass.When the browser enables your tool, it is given a reference to the codeModel object that it shares with the other tools. Any time that the selection(s) in the navigator (the upper half of the browser) change, your tool will be sent the message #updateContents. At that point, you can query the codeModel for the appropriate state, and display it in the code tool. In this fashion, changes in the browser navigator are reflected in the code tool tabs below.The browser knows to add your tool to the list of candidate tools, when you place an arbitrarily named method in the CodeModel class which includes the method tag &lt;tool&gt; or &lt;tool: nnn&gt; where nnn represents a floating point number used to collate the order of the tools. For example, to register your tool, if its class name was MyCodeTool, you would place a method like the following one in the class protocol of CodeModel:myToolClass	&lt;tool&gt;	^MyToolClassThere are a number of examples already in class CodeModel, located in the 'tool registration' class method category.You control when your tool is available (i.e. when there is a tab for it) and what the contents of the tab are, by adding your own implementations of methods found in the 'tab management' method category in your tool subclass. The most important one is the #isActive method. This method is queried by the CodeModel each time the state of the browser changes, to decide whether or not your tool should be shown.A tool subclass should answer a meaningful #tabName. And may choose to answer a #tabIcon. If you're not satisfied with the common icon+label graphic for your tab, you can override the #tabGraphic method to return any sort of VisualComponent (BrowserCommentTool provides such an example, as it has the ability to show icon+label+icon).When the browser changes state, and the CodeModel comes up with a new list of tool tabs to show, it determines what to select by first attempting to keep the same selection as before. If the active selected tab is still active, it will remain so. If not, it will take the first of the new list of tabs. There is one exception to this logic, viz. a tool can opt out of being considered for selection by returning false from the method #isDefaultSelectionCandidate.Instance Variables	codeModel		&lt;CodeModel&gt;		contains the CodeModel that the CodeTool is in	menu			&lt;Menu&gt;			our main menu</body></comment><class><name>BundleStructureTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bundleHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BundleStructureTool</class-id><body>A tool bridge to the BundleStructureView. I also manage a two buttons for adding more subcomponents and resetting them.Instance Variables	bundleHolder	&lt;ValueHolder with: BundleComponent | nil&gt;	currently looked at bundle (or nil if the current state doesn't have a bundle selected). shared by the main view</body></comment><class><name>BrowserIcons</name><environment>Refactory.Browser</environment><super>AlphaBlendedIcons</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserIcons</class-id><body></body></comment><class><name>CodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id><body>This class is obsolete. It is left here only for backwards compatibility subclassing reasons.Instance Variables	codeModel	&lt;CodeModel&gt;	the code model we are attached to</body></comment><class><name>CodeModelLockPolicy</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeModelLockPolicy</class-id><body>CodeModelLockPolicy is an abstract class. It defines the protocol that CodeModels use to check to see if it is locked. The implementation of this class is for a tool that is always unlocked.</body></comment><class><name>StateLockPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeModelLockPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>locked </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.StateLockPolicy</class-id><body>StateLockPolicy is a CodeModelLockPolicy that has an explicit locked/unlocked state. The (un)locked state can be set by using lock and unlock methods.Instance Variables:	locked	&lt;Boolean&gt;	contains true if the model is locked and shouldn't be updated</body></comment><class><name>CodeComponentPropertiesTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertiesList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id><body>I am a code tool that is used to edit the properties of packages and parcels.Different viewers are registered with me using the instance side &lt;properties: number&gt; method tab. See the method protocol 'registered properties' for examples.Instance Variables:	propertiesList	&lt;SelectionInList&gt;	the different property tools</body></comment><class><name>EnvironmentEditor</name><environment>Refactory.Browser</environment><super>Refactory.Browser.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedEnvironment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environment Editor</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.EnvironmentEditor</class-id><body>EnvironmentEditor is the browser for viewing an RBEnvironment.Instance Variables:	selectedEnvironment	&lt;BrowserEnvironment&gt;	The environment to be browsed.</body></comment><class><name>CompareCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text1 text2 definition1 definition2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBDiffs</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CompareCodeTool</class-id><body>CompareCodeTool is a code tool allowing to compare two or more selected methods.Instance Variables:	definition1	&lt;ValueHolder on: RBMethodDefinition&gt;	holds selection for the left combobox	definition2	&lt;ValueHolder on: RBMethodDefinition&gt;	holds selection for the right combobox	text1	&lt;ValueHolder on: Text&gt;	holds source code for the left code pane	text2	&lt;ValueHolder on: Text&gt;	holds source code for the right code pane</body></comment><class><name>CodeComponentInspectorField</name><environment>Refactory.Browser</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentInspectorField</class-id><body>I provide a facade to the property entries of a CodeComponent. My 'object' is meant to be a CodeComponent.Instance Variables:	key	&lt;Symbol&gt;	which property key I'm representing</body></comment><class><name>BrowserTextTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>savedText changed textHolder originalText menuBarMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserTextTool</class-id><body>BrowserTextTool is an abstract class for all of the CodeTools that have a textual display.Subclasses must implement the following messages:	accepting		accept:from:			defines the actions that is performed when you save the textInstance Variables:	changed		&lt;Boolean&gt;					has the text changed?	originalText	&lt;Text&gt;						the original text for the selection before anyone started to edit it	parsedSource	&lt;Text&gt;						the source of the method when we last parsed it	parseTree		&lt;RBProgramNode&gt;		the parse tree representing the parsedSource	savedText		&lt;Text&gt;						if the text has changed and we are switched out, then save the text here	textHolder		&lt;ValueHolder on: String&gt;	contains the original textShared Variables:	ParserTextLimit	&lt;Integer&gt;	the maximum size of text that should be parsed for menu options</body></comment><class><name>BrowserDefinitionTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserDefinitionTool</class-id><body>BrowserDefinitionTool is the CodeTool that edits class/namespace/shared variable definitions.</body></comment><class><name>SharedVariableCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDefinitionTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.SharedVariableCodeTool</class-id><body>SharedVariableCodeTool is a code tools for shared variables. It adds an inspector to the normal BrowserDefinitionTool.</body></comment><class><name>CodeComponentPropertiesInspector</name><environment>Refactory.Browser</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertyParts </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id><body></body></comment><class><name>AbstractRefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigator toolbarMenuHolder findHolder findList toolsetsList dispatcher </inst-vars><class-inst-vars>showToolbarHolder </class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id><body>I am the glue for the browser application. My main responsibility is maintaining the buffers for the different code tools.DO NOT EXTEND THIS CLASS UNLESS THE BEHAVIOR IS COMPATIBLE WITH ALL SUBCLASS IMPLEMENTATIONS.This abstract superclass is the common parent to the RB and Store browser sibling implementations.  This strategy helps insulate the Store browsers from what should be RB-only behavior.Instance Variables	dispatcher	&lt;RBActionDispatcher&gt;	the dispatcher for menu items	findHolder	&lt;ValueModel&gt;	the value holder for the find entry field	findList	&lt;ValueModel&gt;	the list of items in the find drop down list	navigator	&lt;BrowserNavigator&gt;	the navigator that displays the environment	toolSetsList	&lt;SelectionInList&gt;	holds the different toolsets (buffers, or CodeModels) and which one is currently selectedClass Instance Variables	showToolbarHolder	&lt;ValueHolder&gt;	Should the browsers show a toolbar at the top?Shared Variables	FindList	&lt;Collection&gt;	the list of items that have recently been entered into the Find list</body></comment><class><name>OverrideCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>overrideList currentPackageNameHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.OverrideCodeTool</class-id><body>Shows a side by side comparison of active override and inactive overriden variants. Supports removing either side, or combining them in the same package.Instance Variables	currentPackageNameHolder	&lt;ValueModel&gt;	holds the name of the package of the active override	overrideList	&lt;SelectionInList&gt;	holds a list of the OverridenXXXX objects and which one is selected</body></comment><class><name>VisualViewer</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.VisualViewer</class-id><body>VisualViewer is the abstract class for viewing visual components (e.g., menus, icons, etc.).Subclasses must implement the following messages:	private		editorClass			the editor for the visual component</body></comment><class><name>MenuViewer</name><environment>Refactory.Browser</environment><super>Refactory.Browser.VisualViewer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.MenuViewer</class-id><body>MenuViewer is a class to view menus graphically instead of textually. This is used when you are viewing a menu resource.Instance Variables:	selection	&lt;ValueHolder on: Symbol&gt;	contains the last selection from the menu</body></comment><class><name>AbstractBrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>windowLabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id><body>I am the navigator, the part of the browser that is displayed in the top section, responsible for selecting the classes and methods.DO NOT EXTEND THIS CLASS UNLESS THE BEHAVIOR IS COMPATIBLE WITH ALL SUBCLASS IMPLEMENTATIONS.This abstract superclass is the common parent to the RB and Store browser sibling implementations.  This strategy helps insulate the Store browsers from what should be RB-only behavior.Instance Variables	windowLabel &lt;String | nil&gt; last window label that we set, used to filter out redundant updates</body></comment><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserNavigator</class-id><body>I manage the classes and methods for the primary system browser.</body></comment><class><name>VariableNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>variableClassList instanceVariableList variableEnvironment instanceVariableMenuHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.VariableNavigator</class-id><body>VariableNavigator is a special navigator that allows you to browse instance variable references. It is mainly used for Smalllint.Instance Variables:	instanceVariableList	&lt;SelectionInList&gt;	the list of instance variables for the selected class	instanceVariableMenuHolder	&lt;Menu&gt;	the menu for the instance variable list	variableClassList	&lt;SelectionInList&gt;	the list of classes	variableEnvironment	&lt;VariableEnvironment&gt;	the variable environment that contains the items we are viewing</body></comment><class><name>BrowserStatusWidget</name><environment>Refactory.Browser</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserStatusWidget</class-id><body>I am an abstract interface for what a Status widget which shows up at the bottom of the browser must implement. In short, it's any sort of VisualPart, it must implement the codeModel: method to attach to the code model it's showing status for, and it must implement 'touch' which will be sent to it any time the browser state changes.Instance Variables:	codeModel	&lt;CodeModel&gt;	the code model I provide status for</body></comment><class><name>SimpleTextSelectionStatus</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserStatusWidget</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id><body>A simple status widget for displaying text. Each state change involves figuring out how tightly scoped the current state is, and displaying the text for that state. I use an embedded input field to do this so that it can still be selected and copied. Thus, I have a couple of APIs that are like "Wrapper"s.Subclasses must implement the following messages:	text generation		statusTextForClass:		statusTextForNameSpace:		statusTextForPundle:		statusTextForSelector:andClass:		statusTextForSharedVariable:in:Instance Variabless:	inputField	&lt;InputFieldView&gt;	the widget that displays the status text</body></comment><class><name>BrowserCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modified initialLookPrefs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserCodeTool</class-id><body>BrowserCodeTool is the CodeTool that modifies methods.Instance Variables:	initialLookPrefs	&lt;LookPreferences | nil&gt;	the look preferences of the text widget before we set the text to be red	modified	&lt;Boolean&gt;	has the been changed since we initially displayed it?</body></comment><class><name>CopyrightNoticeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CopyrightNoticeTool</class-id><body>CopyrightNoticeTool shows the #notice property of a code component.</body></comment><class><name>CodeComponentSummaryTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id><body>Display a summary/overview view of the selected code component.</body></comment><class><name>CodeComponentBlockTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>property argumentCount name helpTopic defaultSource </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentBlockTool</class-id><body>CodeComponentBlockTool is a code tool that edits the property blocks of packages and parcels.Instance Variables:	argumentCount		&lt;Integer&gt;	the number of arguments that the block should have	defaultSource	&lt;String&gt;	the source string to use if this property is not yet set	helpTopic	&lt;String&gt;	the help topic to use for the help: API	name	&lt;String | UserMessage&gt;	the name that tool shows up in the UI as	property &lt;Symbol&gt;	the property block that we are editing</body></comment><class><name>IconViewer</name><environment>Refactory.Browser</environment><super>Refactory.Browser.VisualViewer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.IconViewer</class-id><body>IconViewer is a simple CodeTool that displayes images/icons. When a method for an icon is selected, this will display the icon instead of the text for the icon.</body></comment><class><name>CanvasViewer</name><environment>Refactory.Browser</environment><super>Refactory.Browser.VisualViewer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CanvasViewer</class-id><body>CanvasViewer is a class to view canvases graphically instead of textually. This is used when you are viewing a canvas method.</body></comment><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractRefactoringBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.RefactoringBrowser</class-id><body>I am the primary system browser.Instance Variables	policyClass	&lt;CodeModelLockPolicy class&gt;	the class of the lock policy for this browser (state or window)</body></comment><class><name>SelectionPackageStatus</name><environment>Refactory.Browser</environment><super>Refactory.Browser.SimpleTextSelectionStatus</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.SelectionPackageStatus</class-id><body>I'm the standard "right side" status widget which shows the package of the current selection, or if it's a package selected, the current version.</body></comment><class><name>CodeComponentInspectPropertiesTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id><body>I bridge between the RB Code Tool API and the Trippy Inspector to show properties for a code compnent that are not dealt with specifically by a specific tool. I avoid properties that ought not be messed with.</body></comment><class><name>AbstractCodeModel</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigator lockPolicy state isZoomed tabList statusPanel tools </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.AbstractCodeModel</class-id><body>I manage the tabbed collection of CodeTools and the status bar, which make up the bottom half of the browser.DO NOT EXTEND THIS CLASS UNLESS THE BEHAVIOR IS COMPATIBLE WITH ALL SUBCLASS IMPLEMENTATIONS.This abstract superclass is the common parent to the RB and Store browser sibling implementations.  This strategy helps insulate the Store browsers from what should be RB-only behavior.OverviewVisually, the browser can be broken up into a top half and a bottom half. The top half, which contains lists for controlling the scope of what is selected, is referred to as the "navigator." I am the "bottom half" of the browser. I manage the tabs, the tools that show up for the tabs, and the status bar.UsageI use a pluggable framework to make the set of code tools extensible. And a separate, but similar, set of functionality to make the status widgets that show up in the status bar extensible. See the CodeTool class comment for information on how to create your own tool class. See BrowserStatusWidget's class comment for information on how to build your own status widget.Tagged methods for the code tools and status widgets must be implemented in the specific subclass that desires to use them.Instance Variables	navigator			&lt;BrowserNavigator&gt;	contains the navigator connected to the code tool	state				&lt;NavigatorState&gt;		the state returned by navigator that is used to update the navigator when this tool is unlocked 	tabList				&lt;SelectionInList&gt;		the tab list model that contains tools that currently respond true to #isActive.	tools 				&lt;List of: CodeTool&gt;	All of the code tools that the code model could be displaying	statusPanel 			&lt;StatusPanel&gt; 		the panel used to hold all of the status widgets	isZoomed 			&lt;Boolean&gt; 			are we currently zoomed (i.e. is the navigator hidden)ImplementationI have two primary roles: 1) manage the tools 2) manage the status widgets.To accomplish the tool management task, I hold a list of all code tools that I could display. A separate list model, a SelectionInList, is used to model the subset of tools for which tabs are currently shown, as well as the currently-selected tab. Each time the navigator's state changes, I recompute which tools are to be shown by sending #isActive to each, and update the tabList accordingly. Care is taken to preserve the selection if possible. If the previous selection is no longer active, then the first tool in the new list which responds true to #isDefaultSelectionCandidate is selected. Population of the original tools list, is done by gathering all the class methods tagged with either &lt;tool&gt; or &lt;tool: aSortOrder&gt;. They are sorted with the non-ordered ones at a default sort value of 0; each method is to return a CodeTool subclass, which is instantiated and connected back to me.The Status bar widgets are pluggable as well. A StatusWidget is nominally a subclass of BrowserStatusWidget, though it may be any sort of VisualPart which implements the messages #codeModel: and #touch. Status widgets are registered by adding an arbitrary class side method here which returns the class of the status widget and is tagged with either &lt;status&gt; or &lt;status: aSortOrder&gt;.</body></comment><class><name>SelectionInfoStatus</name><environment>Refactory.Browser</environment><super>Refactory.Browser.SimpleTextSelectionStatus</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.SelectionInfoStatus</class-id><body>I'm the standard "left side" status widget that shows up in the browser. For the most part, I just print the current selection.</body></comment><class><name>CodeModel</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractCodeModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeModel</class-id><body>I manage the tabbed collection of CodeTools and the status bar for the primary system browser.Instance Variables	lockPolicy			&lt;CodeModelLockPolicy&gt;	the locking policy for updating the tool; future work may remove this variable</body></comment><class><name>BrowserOverviewTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserOverviewTool</class-id><body>I show a terse "Overview of the Browser" style message when nothing is selected in the browser. It is a hope that this makes the "nothing selected" state a little less arbitrary, and provides a hook to ease a first time user into the browser.</body></comment><class><name>BrowserCommentTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserCommentTool</class-id><body>BrowserCommentTool is the CodeTool that edits class/package/parcel comments.ImplementationMostly, I'm just a text editor that fetches the comment property from the navigator's current object, and allows one to edit it. And puts it back when done.The "special" part is that it does some limited formatting for presentation purposes. It adds http: detected links as hyperlinks. And it notes cases where it looks like one of the standard section headings is being used, and makes them bold/large to set them apart. This service is actually implemented on the class side (#formattedComment:) so that others can take advantage of it if they please.Class Method Tags	&lt;commentSectionHeadings&gt; When determining if a string starting a line is a section header for emphasis purposes, we compute the "knownSectionHeadings". Any method tagged with this tag can contribute to that set of section headings. Said methods return a collection of strings to match for. The : character does not need to be included, the engine strips those off.</body></comment><class><name>StatusPanel</name><environment>UI</environment><super>UI.Panel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sumRowHeight isEnabled </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>UI.StatusPanel</class-id><body>I'm mostly a panel. But I have some behavior for setting my #desiredHeight property based on whether status bars are turned on, and the desired layouts of my subParts.Instance Variables:	isEnabled	&lt;Boolean&gt;	should I show up or not? initialized to the value of LastEnablement	sumRowHeight	&lt;Integer&gt;	the total height I want</body></comment><class><name>BundleLoadOrderWarningStrip</name><environment>Refactory.Browser</environment><super>UI.Panel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bundleHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BundleLoadOrderWarningStrip</class-id><body>Strip across the bottom of the BundleStructureTool that shows feedback about out of order load dependencies.Instance Variables	bundleHolder	&lt;ValueHolder with: (BundleModel | nil)&gt;	shared with the tool</body></comment><shared-variable><name>NavigatorType</name><environment>Refactory.Browser.BrowserNavigator</environment><private>false</private><constant>false</constant><category>variables</category><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>LastMoveMethodProtocol</name><environment>Refactory.Browser.BrowserNavigator</environment><private>false</private><constant>false</constant><category>variables</category><initializer>''</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>LastEnablement</name><environment>UI.StatusPanel</environment><private>false</private><constant>false</constant><category>Enablement</category><initializer>true</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>FindList</name><environment>Refactory.Browser.AbstractRefactoringBrowser</environment><private>false</private><constant>false</constant><category>variables</category><initializer>List new</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>ParserTextLimit</name><environment>Refactory.Browser.BrowserTextTool</environment><private>false</private><constant>false</constant><category>variables</category><initializer>50000</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>BrowseAutoFormat</name><environment>Refactory.Browser.BrowserCodeTool</environment><private>false</private><constant>false</constant><category>auto format</category><initializer>false</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>SaveAutoFormat</name><environment>Refactory.Browser.BrowserCodeTool</environment><private>false</private><constant>false</constant><category>auto format</category><initializer>false</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>event states</category><body package="Browser-BrowserUI" selector="returnToIdle">returnToIdle	state := #idle.	rowToDrag := targetPreceedingIndex := nil</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>event driven</category><body package="Browser-BrowserUI" selector="getEventHandler">getEventHandler		^self</body><body package="Browser-BrowserUI" selector="handleEvent:">handleEvent: anEvent	self eventReactions reactTo: anEvent</body><body package="Browser-BrowserUI" selector="handlerForMouseEvent:">handlerForMouseEvent: anEvent	"Give subparts a chance first, and then if I contain it, I'll take them."		^(super handlerForMouseEvent: anEvent)		ifNil:			[(self containsMouseEvent: anEvent)				ifTrue: [self]				ifFalse: [nil]]</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>scrolling</category><body package="Browser-BrowserUI" selector="dingForAnotherScrollAgain">dingForAnotherScrollAgain	"Fork a one shot process that will return in 100 milliseconds, and if we're still in #scrolling state, scroll to the curent mouse position. The scrollForm: will launch a successive invocation of me if appropriate."		[100 milliseconds wait.	state = #scrolling		ifTrue:			[self topComponent				ifNotNil:					[:window | 					window isOpen						ifTrue:							[self scrollFrom: (self globalPointToLocal: window sensor mousePoint) y]]]]		forkAt: Processor userInterruptPriority</body><body package="Browser-BrowserUI" selector="scrollBy:">scrollBy: aYDelta		self scrollWrapper ifNotNil: [:wrapper | wrapper scrollBy: aYDelta]</body><body package="Browser-BrowserUI" selector="scrollFrom:">scrollFrom: aNumber	"Scroll me and then drive another update in a bit."		aNumber &lt; self bounds top		ifTrue: [self scrollBy: aNumber - self bounds top]		ifFalse:			[aNumber &gt; self bounds bottom				ifTrue: [self scrollBy: aNumber - self bounds bottom]].	self dingForAnotherScrollAgain</body><body package="Browser-BrowserUI" selector="scrollOffsetHolder:">scrollOffsetHolder: aScrollOffsetHolder		scrollOffsetHolder := aScrollOffsetHolder.	scrollOffsetHolder extraSpace: [Point zero corner: 0 @ 30]</body><body package="Browser-BrowserUI" selector="scrollWrapper">scrollWrapper	^self		findParent: [:each | (each isKindOf: ScrollWrapper) and: [each component == self]]</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="bundle">bundle		^bundleHolder value</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="bundleHolder:">bundleHolder: aValueHolder		bundleHolder := aValueHolder.	bundleHolder onChangeSend: #bundleChanged to: self.	self bundleChanged</body><body package="Browser-BrowserUI" selector="initialize">initialize		super initialize.	state := #idle</body><body package="Browser-BrowserUI" selector="initializeLayoutAlgorithm">initializeLayoutAlgorithm	self beColumn: 0</body><body package="Browser-BrowserUI" selector="release">release	bundleHolder retractAllInterestsFor: self.	^super release</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>private</category><body package="Browser-BrowserUI" selector="bundleChanged">bundleChanged	self populate</body><body package="Browser-BrowserUI" selector="bundleItems">bundleItems	| a b |	a := self bundle ifNotNil: #containedItems ifNil: [Array new].	b := self bundle ifNotNil: #containedItems ifNil: [Array new].	a = b ifFalse: [self halt].	^a</body><body package="Browser-BrowserUI" selector="noTooltips">noTooltips	"The subparts don't have enough interaction to note the mouse has entered/exited them, so we do that for everyone here."		self childrenDo: [:each | each children first announceFrameExited]</body><body package="Browser-BrowserUI" selector="removeSubcomponent:">removeSubcomponent: eachSubcomponent	self bundle		containedItems: (self bundleItems copyWithout: eachSubcomponent).	self populate</body><body package="Browser-BrowserUI" selector="tooltipTextFor:">tooltipTextFor: aSubcomponent	| output |	output := TextStream on: String new.	aSubcomponent isPackage		ifTrue: 			[output				nextPutAll: (#VersionC &gt;&gt; 'Version:' &lt;&lt; #IDE) asString;				space;				emphasis: #bold;				nextPutAll: aSubcomponent versionString]		ifFalse: 			[output				nextPutAll: (#VersionC &gt;&gt; 'Version:' &lt;&lt; #IDE) asString;				cr;				tab;				emphasis: #bold;				nextPutAll: aSubcomponent versionString;				emphasis: nil;				cr;				nextPutAll: (#ContentsC &gt;&gt; 'Contents:' &lt;&lt; #IDE) asString;				emphasis: #bold.			aSubcomponent containedItems keysAndValuesDo: 					[:index :eachSubSubcomopnent |					output						cr;						tab;						print: index;						space.					output nextPutAll: eachSubSubcomopnent name]].	^output contents</body><body package="Browser-BrowserUI" selector="updateBundleOrder">updateBundleOrder	self bundle containedItems: (self children				collect: [:each | each propertyAt: #subcomponent]).	bundleHolder value: self bundle</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>view construction</category><body package="Browser-BrowserUI" selector="addSubcomponentRows">addSubcomponentRows	| clicker indexLabels maxWidth alignedLabels |	self bundleItems isEmpty ifTrue: [^self].	indexLabels := self bundleItems keys				collect: [:n | Label with: n printString].	maxWidth := (indexLabels collect: #width) fold: [:a :b | a max: b].	alignedLabels := indexLabels collect: 					[:each |					VisualBlock						block: [:gc :box | each displayOn: gc at: (box width - each width) @ 0]						extent: maxWidth @ each height].	alignedLabels with: self bundleItems		do: 			[:eachLabel :eachSubcomponent |			| row |			row := Panel new beRow: 0.5 gap: 5.			row propertyAt: #subcomponent put: eachSubcomponent.			row add: (PixelSpace width: 3).			row add: eachLabel.			row add: eachSubcomponent toolListIcon.			row add: (Label with: eachSubcomponent name).			clicker := self clickerToRemove: eachSubcomponent.			row add: clicker.			row add: (PixelSpace width: 3).			row tooltip: [self tooltipTextFor: eachSubcomponent].			self add: row]</body><body package="Browser-BrowserUI" selector="clickerToRemove:">clickerToRemove: eachSubcomponent	| clicker |	clicker := ClickableGraphic new.	clicker idleGraphic: PrerequisiteIcons fadedRemove.	clicker mouseOverGraphic: PrerequisiteIcons activeRemove.	clicker when: Clicked do: [self removeSubcomponent: eachSubcomponent].	clicker tooltip: #Remove &gt;&gt; 'Remove' &lt;&lt; #IDE.	^clicker</body><body package="Browser-BrowserUI" selector="populate">populate	self updateFramesAfter: 			[self releaseAllComponents.			self bundle ifNotNil: [self addSubcomponentRows]]</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>displaying</category><body package="Browser-BrowserUI" selector="displayDragOn:">displayDragOn: aGC	"Draw the frame of rowToDrag as a rectangle with rounded corners."	| oldPaint |	oldPaint := aGC paint.	aGC paint: SymbolicPaint listDataSelectionBackground.	#(0 1 2 3 5) with: #(5 3 2 1 0)		do: [:x :y | aGC displayRectangle: (rowToDrag frame insetBy: x @ y)].	aGC paint: oldPaint</body><body package="Browser-BrowserUI" selector="displayOn:">displayOn: aGC	"In addition to drawing the subparts, we show which is being drug, and in the event we're scanning, we actually forgo drawing the subparts, drawing a progress label instead."	state = #idle ifFalse: [self displayDragOn: aGC copy].	super displayOn: aGC</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isDragging">isDragging	^state == #dragging</body><body package="Browser-BrowserUI" selector="isIdle">isIdle	^state == #idle</body><body package="Browser-BrowserUI" selector="isScrolling">isScrolling	^state == #scrolling</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="activeTool">activeTool	"Return the current tool (a subclass of BrowserApplicationModel). In most cases, this is the	tool itself (hence we return self by default), however, it is possible to wrap an arbitrary	ApplicationModel (in a subcanvas, for example) and activeTool must return that wrapped	model."	^self</body><body package="Browser-BrowserUI" selector="classOrNameSpace">classOrNameSpace	^codeModel classOrNameSpace</body><body package="Browser-BrowserUI" selector="codeComponent">codeComponent		^self pundle</body><body package="Browser-BrowserUI" selector="definition">definition	^codeModel definition</body><body package="Browser-BrowserUI" selector="definitions">definitions	^codeModel definitions</body><body package="Browser-BrowserUI" selector="dispatcher">dispatcher	^self navigator dispatcher</body><body package="Browser-BrowserUI" selector="environment">environment	^self navigator environment</body><body package="Browser-BrowserUI" selector="isData">isData	^codeModel isData</body><body package="Browser-BrowserUI" selector="isMeta">isMeta	^codeModel isMeta</body><body package="Browser-BrowserUI" selector="methodClass">methodClass		^codeModel ifNotNil: [:model | model methodClass]</body><body package="Browser-BrowserUI" selector="mostSpecificSelection">mostSpecificSelection	"Return the object (e.g. Package, Class, Protocol, Method, etc) that represents the most refined scope selection the navigator (upper half of the browser) is in right now."	self deprecated: #(#version '7.8' #use #narrowestSelectionType).	^codeModel state mostSpecificObject</body><body package="Browser-BrowserUI" selector="nameSpace">nameSpace	^codeModel nameSpace</body><body package="Browser-BrowserUI" selector="narrowestSelectionType">narrowestSelectionType	^codeModel state narrowestSelectionType</body><body package="Browser-BrowserUI" selector="navigator">navigator	^codeModel navigator</body><body package="Browser-BrowserUI" selector="nonMetaClass">nonMetaClass	^codeModel nonMetaClass</body><body package="Browser-BrowserUI" selector="nonMetaClasses">nonMetaClasses	^codeModel nonMetaClasses</body><body package="Browser-BrowserUI" selector="objectName">objectName	^codeModel objectName</body><body package="Browser-BrowserUI" selector="objectNames">objectNames	^codeModel objectNames</body><body package="Browser-BrowserUI" selector="package">package	^codeModel package</body><body package="Browser-BrowserUI" selector="packages">packages	^codeModel packages</body><body package="Browser-BrowserUI" selector="protocol">protocol	^codeModel protocol</body><body package="Browser-BrowserUI" selector="protocols">protocols	^codeModel protocols</body><body package="Browser-BrowserUI" selector="pundle">pundle	^codeModel pundle</body><body package="Browser-BrowserUI" selector="pundles">pundles	^codeModel pundles</body><body package="Browser-BrowserUI" selector="selectedBinding">selectedBinding	^codeModel selectedBinding</body><body package="Browser-BrowserUI" selector="selectedBindings">selectedBindings	^codeModel selectedBindings</body><body package="Browser-BrowserUI" selector="selectedClass">selectedClass	^codeModel selectedClass</body><body package="Browser-BrowserUI" selector="selectedClasses">selectedClasses	^codeModel selectedClasses</body><body package="Browser-BrowserUI" selector="selector">selector	^codeModel selector</body><body package="Browser-BrowserUI" selector="selectors">selectors	^codeModel selectors</body><body package="Browser-BrowserUI" selector="sharedVariableName">sharedVariableName	^codeModel sharedVariableName</body><body package="Browser-BrowserUI" selector="sharedVariableNames">sharedVariableNames	^codeModel sharedVariableNames</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEditing">isEditing	"Return true if your contents have changed and haven't been accepted."	^self subcanvases anySatisfy: [:each | each isEditing]</body><body package="Browser-BrowserUI" selector="isTextSelected">isTextSelected	"Return true if there is some text selected. Subclasses only need to override this if the tool has code in it."	^false</body><body package="Browser-BrowserUI" selector="isTextTool">isTextTool	"Return true if the tool is of the edit-&gt;accept text variety."	^false</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	"The contents of the CodeTool have possibly changed (e.g. the navigator has changed state)."</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>private-environments</category><body package="Browser-BrowserUI" selector="classEnvironment">classEnvironment	| classes |	classes := self nonMetaClasses.	classes := classes , (classes collect: [:each | each class]).	^ClassEnvironment onEnvironment: self wrappedEnvironment classes: classes</body><body package="Browser-BrowserUI" selector="protocolEnvironment">protocolEnvironment	^ProtocolEnvironment 		onEnvironment: self wrappedEnvironment		class: self selectedClass		protocols: self protocols</body><body package="Browser-BrowserUI" selector="pundleEnvironment">pundleEnvironment	^PundleEnvironment onEnvironment: self environment codeComponents: self pundles</body><body package="Browser-BrowserUI" selector="selectedEnvironment">selectedEnvironment	self definition notNil ifTrue: [^self selectorEnvironment].	self protocol notNil ifTrue: [^self protocolEnvironment].	self selectedClass notNil ifTrue: [^self classEnvironment].	self pundle notNil ifTrue: [^self pundleEnvironment].	^SelectorEnvironment new</body><body package="Browser-BrowserUI" selector="selectorEnvironment">selectorEnvironment	^SelectorEnvironment onMethods: self definitions</body><body package="Browser-BrowserUI" selector="wrappedEnvironment">wrappedEnvironment	self pundle notNil ifTrue: [^self pundleEnvironment].	^self environment</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="menu">menu	^menu</body><body package="Browser-BrowserUI" selector="rebuildMenus">rebuildMenus	menu := self buildTopLevelMenuFrom: #mainMenu.	super rebuildMenus</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: aCodeModel 	codeModel := aCodeModel.	menu := self buildTopLevelMenuFrom: #mainMenu</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="displayString">displayString	^self tabName asString</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>tab management</category><body package="Browser-BrowserUI" selector="isActive">isActive	"Subclasses implement behavior here which is used by the browser to determine if the receiver should currently be listed in the active tabs of the code model."	^false</body><body package="Browser-BrowserUI" selector="isDefaultSelectionCandidate">isDefaultSelectionCandidate	"Subclasses may use this as an API to have give an indication that they are a preferred type when the CodeModel tabList is updated."	^true</body><body package="Browser-BrowserUI" selector="tabGraphic">tabGraphic	"Return the VisualComponent that is to be shown on the tab associated with me. The default implementation here is to place an icon (if #tabIcon returns a non nil object) to the left of the text/string retuned by by tabName."		| row text |	row := VisualRow new.	self tabIcon ifNotNil: [:icon | row add: icon].	text := Label		with: self tabName		attributes: self tabStyle.	text		offset:			(row components isEmpty				ifTrue: [4]				ifFalse: [2]) @ 0.	row add: text.	^row</body><body package="Browser-BrowserUI" selector="tabIcon">tabIcon	"Subclasses can provide an icon if they want. An Icon can be an VisualComponent subclass."	^nil</body><body package="Browser-BrowserUI" selector="tabName">tabName	"By default, return the class name, subclasses will usually return a UserMessage with a human readable name."		^self class name</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="tabStyle">tabStyle	"This is an undesirable hack. It is used to return the text style that we should use for the text of the tab. We'd like to not set any style at all on these, and be able to have them 'inherit' the style of the tab control as it walks down the display tree, but we're not there yet, so we do this 'ugly reach out and infer it' thing."	^Screen default defaultWidgetPolicy lookPolicyClass systemWidgetTextStyle</body></methods><methods><class-id>Refactory.Browser.CodeTool class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: aCodeModel 	^(self new)		codeModel: aCodeModel;		yourself</body></methods><methods><class-id>Refactory.Browser.BundleStructureTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="bundle">bundle	"We don't use the bundleHolder's value on purpose here. For me, the bundle is computed as below. The bundleHolder object is just a way of sharing this value with the current tool."	^self codeComponent		ifNotNil: [:component | component isBundle ifTrue: [component] ifFalse: [nil]]</body></methods><methods><class-id>Refactory.Browser.BundleStructureTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="bundle:">bundle: aCodeComponent	bundleHolder value: aCodeComponent</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	self bundle: self bundle</body></methods><methods><class-id>Refactory.Browser.BundleStructureTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="addToSubcomponents">addToSubcomponents	| currentItems |	currentItems := self bundle containedItems.	(self promptForAddWithout: (currentItems copyWith: self bundle))		ifNotNil: 			[:toAdd |			toAdd isEmpty				ifFalse: 					[self bundle containedItems: ((currentItems copy)								addAll: toAdd;								yourself).					self bundle: self bundle]]</body><body package="Browser-BrowserUI" selector="promptForAddWithout:">promptForAddWithout: aCollection	| sorted toAdd |	sorted := (Store.Registry allPundles				reject: [:each | aCollection includes: each])					sorted: [:a :b | a name &lt; b name].	toAdd := (IncrementalSearchDialog forSelectionFrom: sorted				filterBlock: [:entry :module | '*' , entry , '*' match: module name])				windowLabel: #ChoosePackage &lt;&lt; #browser &gt;&gt; 'Choose Package';				firstLabel: #FilterC &lt;&lt; #browser &gt;&gt; 'Filter:';				objectToStringBlock: [:module | module name];				displayStringBlock: [:module | module name];				iconBlock: #toolListIcon;				selectMultiple.	^toAdd</body><body package="Browser-BrowserUI" selector="resetSubcomponents">resetSubcomponents	#{Store.DbRegistry} ifDefinedDo: 			[:dbRegistry |			dbRegistry doIfOnlineImage: 					[self bundle asStorePundle						ifNotNil: 							[:dbBundle |							| descriptions components |							descriptions := dbBundle containedItems collect: #asComponentDescription.							components := descriptions collect: #component.							self bundle containedItems: components.							self bundle: self bundle]]]</body></methods><methods><class-id>Refactory.Browser.BundleStructureTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^self narrowestSelectionType == #codeComponent		and: [self codeComponent isBundle]</body></methods><methods><class-id>Refactory.Browser.BundleStructureTool</class-id> <category>views</category><body package="Browser-BrowserUI" selector="addButton">addButton	| button |	button := ClickableGraphic new.	button		idleGraphic: PrerequisiteIcons fadedBigAdd;		mouseOverGraphic: PrerequisiteIcons activeBigAdd.	button tooltip: #AddBundleSubcomponent &lt;&lt; #IDE &gt;&gt; 'Add a bundle component'.	button when: Clicked send: #addToSubcomponents to: self.	^button</body><body package="Browser-BrowserUI" selector="bundleStructureView">bundleStructureView	^BundleStructureView new bundleHolder: bundleHolder</body><body package="Browser-BrowserUI" selector="explanationText">explanationText	^Label		with: ((#BundleStructureExplanation &lt;&lt; #IDE				&gt;&gt; 'Bundle Components (by load order) - Drag to Change Sequence') asText				emphasizeAllWith: (Array with: #large with: #italic))</body><body package="Browser-BrowserUI" selector="loadOrderWarningStrip">loadOrderWarningStrip	| strip |	strip := BundleLoadOrderWarningStrip new.	strip bundleHolder: bundleHolder.	^strip</body><body package="Browser-BrowserUI" selector="resetButton">resetButton	| button |	button := ClickableGraphic new.	button		idleGraphic: PrerequisiteIcons fadedBigReset;		mouseOverGraphic: PrerequisiteIcons activeBigReset.	button tooltip: #ResetBundleStructureButtonHelp &lt;&lt; #IDE				&gt;&gt; 'Reset components to last published state'.	button when: Clicked send: #resetSubcomponents to: self.	^button</body></methods><methods><class-id>Refactory.Browser.BundleStructureTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	bundleHolder := nil asValue</body></methods><methods><class-id>Refactory.Browser.BundleStructureTool</class-id> <category>tab management</category><body package="Browser-BrowserUI" selector="needsLoadOrderWarning">needsLoadOrderWarning	^self bundle notNil and: [self bundle needsLoadOrderWarning]</body><body package="Browser-BrowserUI" selector="tabIcon">tabIcon	^self needsLoadOrderWarning ifTrue: [GeneralIcons warning] ifFalse: [nil]</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#BundleStructure &lt;&lt; #IDE &gt;&gt; 'Bundle Structure'</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: aCodeModel 	codeModel := aCodeModel</body><body package="Browser-BrowserUI" selector="for:">for: aCodeModel 	codeModel := aCodeModel</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>comparing</category><body package="Browser-BrowserUI" selector="=">= aCodeToolSelectionPolicy 	^self class = aCodeToolSelectionPolicy class 		and: [self name = aCodeToolSelectionPolicy name]</body><body package="Browser-BrowserUI" selector="hash">hash	^self name hash</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="displayString">displayString	^self name</body><body package="Browser-BrowserUI" selector="displayTextOrImageAndText">displayTextOrImageAndText	"The answer will be used as a tab label in the browser.	The answer can be a Text or an (OpaqueImage -&gt; Text) association,	to include an icon in the tab."	^self name asText</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForBundle:">codeToolClassForBundle: aBundleModel 	| package |	package := codeModel package.	^package isNil 		ifTrue: [nil]		ifFalse: [self codeToolClassForPackage: package]</body><body package="Browser-BrowserUI" selector="codeToolClassForClass:">codeToolClassForClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForNameSpace:">codeToolClassForNameSpace: aNameSpace	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForPackage:">codeToolClassForPackage: aPackageModel 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForParcel:">codeToolClassForParcel: aParcel 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForProtocol:andClass:">codeToolClassForProtocol: aSymbol andClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForSelector:andClass:">codeToolClassForSelector: aSymbol andClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForSharedVariable:andClass:">codeToolClassForSharedVariable: aSymbol andClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForSharedVariableProtocol:andClass:">codeToolClassForSharedVariableProtocol: aSymbol andClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="nothingSelectedCodeToolClass">nothingSelectedCodeToolClass	^nil</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEnabled">isEnabled	^self toolClass notNil</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="toolClass">toolClass		| object |	(object := codeModel selector) notNil		ifTrue:			[^self				codeToolClassForSelector: object				andClass: codeModel methodClass].	(object := codeModel sharedVariableName) notNil		ifTrue:			[^self				codeToolClassForSharedVariable: object				andClass: codeModel classOrNameSpace].	(object := codeModel protocol) notNil		ifTrue:			[^codeModel isData				ifTrue:					[self						codeToolClassForSharedVariableProtocol: object						andClass: codeModel classOrNameSpace]				ifFalse:					[self						codeToolClassForProtocol: object						andClass: codeModel selectedClass]].	(object := codeModel classOrNameSpace) notNil		ifTrue:			[^object isBehavior				ifTrue: [self codeToolClassForClass: codeModel selectedClass]				ifFalse: [self codeToolClassForNameSpace: object]].	(object := codeModel pundle) notNil		ifTrue:			[^object isBundle				ifTrue: [self codeToolClassForBundle: object]				ifFalse: [self codeToolClassForPackage: object]].	^self nothingSelectedCodeToolClass</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="addSelectionPolicy">addSelectionPolicy	| change |	self guessCodeTool		ifNotNil: [:tool | (tool includesSelector: #isActive) ifTrue: [^self]].	self promptShouldRewriteAddSelectionPolicy ifFalse: [^self].	self guessCodeTool ifNil: [^self promptUnableToLocateCodeTool].	change := self buildConversionChange.	RefactoryChangeManager instance performChange: change.	(MethodDefinitionEnvironment new)		addClass: self guessCodeTool			selector: #isActive;		openEditor</body><body package="Browser-BrowserUI" selector="buildConversionChange">buildConversionChange	| changeSet |	changeSet := CompositeRefactoryChange named:			'Convert SelectionPolicy subclass'.	changeSet		addChange:			(AddMethodChange				compile: self generateToolTaggedMethodSource				in: CodeModel class				classified: 'tool registration').	changeSet		addChange:			(AddMethodChange				compile: self generateHelpfulActiveMethodSource				in: self guessCodeTool				classified: 'tab APIs').	(self includesSelector: #name)		ifTrue:			[changeSet				addChange:					(AddMethodChange						compile: self generateTabNameMethodSource						in: self guessCodeTool						classified: 'tab APIs')].	changeSet changes do: [:each | self annotateChange: each].	^changeSet</body><body package="Browser-BrowserUI" selector="removeSelectionPolicy">removeSelectionPolicy	Transcript		show: '#removeSelectionPolicy deprecated: See CodeModel/CodeToolSelectionPolicy comments';		cr</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy class</class-id> <category>conversion support</category><body package="Browser-BrowserUI" selector="annotateChange:">annotateChange: aChange	#{Store.Registry}		ifDefinedDo:			[:registry | 			(registry containingPackageForClass: self)				ifNotNil: [:package | ^aChange package: package]]</body><body package="Browser-BrowserUI" selector="generateHelpfulActiveMethodSource">generateHelpfulActiveMethodSource	^'isActive	"The purpose of isActive is to determine if the receiver should currently be shown in the code model''s list of tools displayed in the tabs.	Look at the logic found in the obsolete SelectionPolicy''s codeToolClassFor* methods and implement a similiar algorithm here, returning	 true/false where it would have returned a class/nil."	^false'</body><body package="Browser-BrowserUI" selector="generateTabNameMethodSource">generateTabNameMethodSource	^(RBParser parseMethod: (self compiledMethodAt: #name) getSource)		selector: #tabName;		printString</body><body package="Browser-BrowserUI" selector="generateToolTaggedMethodSource">generateToolTaggedMethodSource	| source methodName |	methodName := self guessCodeTool name asString , 'Class'.	methodName		at: 1		put: methodName first asLowercase.	source := String new writeStream.	source		nextPutAll: methodName;		cr;		tab;		nextPutAll: '&lt;tool&gt;';		cr;		tab;		nextPutAll: '^';		nextPutAll: self guessCodeTool name.	^source contents</body><body package="Browser-BrowserUI" selector="guessCodeTool">guessCodeTool	"Check with the packages first, then parcel."	| tools |	#{Store.Registry}		ifDefinedDo:			[:registry | 			(registry containingPackageForClass: self)				ifNotNil:					[:package | 					tools := package definedClasses						select: [:each | each inheritsFrom: CodeTool].					tools size = 1 ifTrue: [^tools any]]].	self searchStackForParcel		ifNotNil:			[:parcel | 			tools := parcel definedClasses				select: [:each | each inheritsFrom: CodeTool].			tools size = 1 ifTrue: [^tools any]].	^nil</body><body package="Browser-BrowserUI" selector="promptShouldRewriteAddSelectionPolicy">promptShouldRewriteAddSelectionPolicy	^Dialog		confirm:			#addSelectionPolicyRewritePrompt &gt;&gt;'#addSelectionPolicy was deprecated as an API for registering new tab part tools in the CodeModel.In fact the CodeToolSelectionPolicy class is no longer used and remains here simply to prompt this message.See CodeToolSelectionPolicy comments.I can try to rewrite portions of the API change. You must convert the isActive method manually.Shall I try the rest?' &lt;&lt;					#browser		initialAnswer: true</body><body package="Browser-BrowserUI" selector="promptUnableToLocateCodeTool">promptUnableToLocateCodeTool	^Dialog		warn:			#unabelToGuessCodeToolPrompt &gt;&gt;					'Unable to guess the CodeTool to adopt the receiver''s behaviorSee CodeToolSelectionPolicy comments.' &lt;&lt; #browser</body><body package="Browser-BrowserUI" selector="searchStackForParcel">searchStackForParcel	"This is used by the automatic addSelectionPolicy conversion code. We need a mechanism of looking up which parcel (if any) code is loading from. We resort to stack walking because the Parcel while created, isn't registered yet."	| context |	context := thisContext sender.	30		timesRepeat:			[context isNil ifTrue: [^nil].			(context receiver isKindOf: Parcel) ifTrue: [^context receiver].			context := context sender].	^nil</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: aCodeModel	^self new codeModel: aCodeModel</body></methods><methods><class-id>Refactory.Browser.CodeModelLockPolicy</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize</body><body package="Browser-BrowserUI" selector="on:">on: aCodeTool</body></methods><methods><class-id>Refactory.Browser.CodeModelLockPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="isLocked">isLocked	^false</body><body package="Browser-BrowserUI" selector="lock">lock</body><body package="Browser-BrowserUI" selector="unlock">unlock</body></methods><methods><class-id>Refactory.Browser.CodeModelLockPolicy class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="on:">on: aCodeTool 	^(self new)		initialize;		on: aCodeTool;		yourself</body></methods><methods><class-id>Refactory.Browser.StateLockPolicy</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	locked := false</body></methods><methods><class-id>Refactory.Browser.StateLockPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="isLocked">isLocked	^locked</body><body package="Browser-BrowserUI" selector="lock">lock	locked := true</body><body package="Browser-BrowserUI" selector="unlock">unlock	locked := false</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="newPropertyView:">newPropertyView: propertyTool	| view |	view := CompositePart new.	view		client: propertyTool		spec: propertyTool class windowSpec decodeAsLiteralArray		builder: builder newSubBuilder.	^view</body><body package="Browser-BrowserUI" selector="propertiesList">propertiesList	^propertiesList</body><body package="Browser-BrowserUI" selector="propertyPort">propertyPort	| port |	port := PartPort new.	port		partCreationBlock: [:propertyTool | self newPropertyView: propertyTool].	port selectionSlot: propertiesList selectionHolder.	^port</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>subcanvases</category><body package="Browser-BrowserUI" selector="subcanvases">subcanvases		^super subcanvases		, (propertiesList list select: [:each | each builder notNil])</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	self selectedProperty ifNotNil: [:prop | prop updateDisplay]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: aCodeModel	super codeModel: aCodeModel.	self initProperitesList</body><body package="Browser-BrowserUI" selector="createProperties">createProperties	"Don't call this before codeModel is set, as many of the property setting selectors need to grab my codeModel."	| selectors |	selectors := Pragma		allNamed: #property:		in: self class		sortedByArgument: 1.	^List withAll: (selectors collect: [:each | self perform: each selector])</body><body package="Browser-BrowserUI" selector="initProperitesList">initProperitesList	"Don't call this before codeModel is set, as many of the property setting selectors need to grab my codeModel."	propertiesList := SelectionInList with: self createProperties.	propertiesList selectionIndex: 1</body><body package="Browser-BrowserUI" selector="release">release	propertiesList list do: [:each | each release].	super release</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changedSelection">changedSelection	self updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	self selectedProperty ifNotNil: [:prop | prop updateContents]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="menu">menu	^[self selectedProperty		ifNil: [super menu]		ifNotNil: [:prop | prop menu]]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="activeTool">activeTool	^self selectedProperty</body><body package="Browser-BrowserUI" selector="selectedProperty">selectedProperty	^propertiesList selection</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>help</category><body package="Browser-BrowserUI" selector="helpTopic">helpTopic	^self selectedProperty		ifNotNil: [:property | property helpTopic]		ifNil: [super helpTopic]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^self narrowestSelectionType == #codeComponent</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#Properties &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="validatePropertySelectionChange:">validatePropertySelectionChange: aSequenceController	"First part denies selecting nothing."		aSequenceController view selectionIndex		~= aSequenceController view targetIndex ifFalse: [^false].	^self updateRequest</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="checkAllProtocols">checkAllProtocols	| protocolMatch |	protocolMatch := self request: (#SelectProtocolsMatching &lt;&lt; #browser &gt;&gt; 'Select protocols matching:').	protocolMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self protocolsForClass 						do: [:each | (protocolMatch match: each) ifTrue: [self checkProtocol: each]]]]</body><body package="Browser-BrowserUI" selector="checkAllSelectors">checkAllSelectors	| selectorMatch |	selectorMatch := self request: (#SelectSelectorsMatching &lt;&lt; #browser &gt;&gt; 'Select selectors matching:').	selectorMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self selectorsForProtocols do: 							[:each | 							(selectorMatch match: each selector) 								ifTrue: 									[selectedEnvironment addClass: self selectedClass selector: each selector]]]]</body><body package="Browser-BrowserUI" selector="checkChangeSet">checkChangeSet	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[ChangeSet current changedClasses do: 							[:each | 							each isMeta 								ifTrue: [selectedEnvironment addClass: each]								ifFalse: 									[selectedEnvironment										addClass: each;										addClass: each class]]]]</body><body package="Browser-BrowserUI" selector="checkClass">checkClass	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:each | 					selectedEnvironment						addClass: each;						addClass: each class]]</body><body package="Browser-BrowserUI" selector="checkImplementors">checkImplementors	self updateDisplayAfter: 			[environment classesDo: 					[:class | 					self selectors do: 							[:selector | 							(environment includesSelector: selector in: class)								ifTrue: [selectedEnvironment addClass: class selector: selector]]]]</body><body package="Browser-BrowserUI" selector="checkProtocol">checkProtocol	self updateDisplayAfter: 			[| class |			class := self selectedClass.			self protocols do: 					[:each | 					(environment selectorsFor: each in: class)						do: [:sel | selectedEnvironment addClass: class selector: sel]]]</body><body package="Browser-BrowserUI" selector="checkSelector">checkSelector	self updateDisplayAfter: 			[| class |			class := self selectedClass.			self selectors				do: [:each | selectedEnvironment addClass: class selector: each]]</body><body package="Browser-BrowserUI" selector="checkSenders">checkSenders	self updateDisplayAfter: 			[environment classesDo: 					[:class | 					self selectors do: 							[:selector | 							(environment selectorsForClass: class) do: 									[:each | 									((class compiledMethodAt: each) refersToLiteral: selector)										ifTrue: [selectedEnvironment addClass: class selector: each]]]]]</body><body package="Browser-BrowserUI" selector="checkSubclasses">checkSubclasses	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:each | 					each allSubclasses do: 							[:sub | 							selectedEnvironment								addClass: sub;								addClass: sub class]]]</body><body package="Browser-BrowserUI" selector="checkSuperclasses">checkSuperclasses	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:class | 					class allSuperclasses , class class allSuperclasses 						do: [:each | selectedEnvironment addClass: each]]]</body><body package="Browser-BrowserUI" selector="uncheckAllProtocols">uncheckAllProtocols	| protocolMatch |	protocolMatch := self request: (#DeselectProtocolsMatching &lt;&lt; #browser &gt;&gt; 'Deselect protocols matching:').	protocolMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self protocolsForClass 						do: [:each | (protocolMatch match: each) ifTrue: [self uncheckProtocol: each]]]]</body><body package="Browser-BrowserUI" selector="uncheckAllSelectors">uncheckAllSelectors	| selectorMatch |	selectorMatch := self request: (#DeselectSelectorsMatching &lt;&lt; #browser &gt;&gt; 'Deselect selectors matching:').	selectorMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self selectorsForProtocols do: 							[:each | 							(selectorMatch match: each selector) 								ifTrue: 									[selectedEnvironment removeClass: self selectedClass selector: each selector]]]]</body><body package="Browser-BrowserUI" selector="uncheckClass">uncheckClass	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:each | 					selectedEnvironment						removeClass: each;						removeClass: each class]]</body><body package="Browser-BrowserUI" selector="uncheckImplementors">uncheckImplementors	self updateDisplayAfter: 			[environment classesDo: 					[:class | 					self selectors do: 							[:selector | 							(environment includesSelector: selector in: class)								ifTrue: [selectedEnvironment removeClass: class selector: selector]]]]</body><body package="Browser-BrowserUI" selector="uncheckProtocol">uncheckProtocol	self updateDisplayAfter: 			[| class |			class := self selectedClass.			self protocols do: 					[:each | 					(environment selectorsFor: each in: class)						do: [:sel | selectedEnvironment removeClass: class selector: sel]]]</body><body package="Browser-BrowserUI" selector="uncheckSelector">uncheckSelector	self updateDisplayAfter: 			[| class |			class := self selectedClass.			self selectors				do: [:each | selectedEnvironment removeClass: class selector: each]]</body><body package="Browser-BrowserUI" selector="uncheckSenders">uncheckSenders	self updateDisplayAfter: 			[environment classesDo: 					[:class | 					self selectors do: 							[:selector | 							(environment selectorsForClass: class) do: 									[:each | 									((class compiledMethodAt: each) refersToLiteral: selector)										ifTrue: [selectedEnvironment removeClass: class selector: each]]]]]</body><body package="Browser-BrowserUI" selector="uncheckSubclasses">uncheckSubclasses	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:class | 					class allSubclasses do: 							[:each | 							selectedEnvironment								removeClass: each;								removeClass: each class]]]</body><body package="Browser-BrowserUI" selector="uncheckSuperclasses">uncheckSuperclasses	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:class | 					class allSuperclasses , class class allSuperclasses 						do: [:each | selectedEnvironment removeClass: each]]]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>private-labels</category><body package="Browser-BrowserUI" selector="categoryLabelForView:andIndex:">categoryLabelForView: aView andIndex: anIndex	^Label		with: (aView displayStringAt: anIndex)		attributes: aView textStyle		offset: 16 @ 0</body><body package="Browser-BrowserUI" selector="classLabelForView:andIndex:">classLabelForView: aView andIndex: anIndex 	| binding included name |	binding := (aView sequence at: anIndex) fullName asQualifiedReference 				bindingOrNil.	name := binding notNil 				ifTrue: [binding key]				ifFalse: [(aView sequence at: anIndex) simpleName].	included := false.	(binding notNil and: [binding isForClass]) 		ifTrue: 			[included := self selectedEnvironment includesClass: (self isMeta 								ifTrue: [binding value class]								ifFalse: [binding value])].	^included 		ifTrue: [(LabelAndIcon with: name attributes: aView textStyle) beCheckMark]		ifFalse: 			[Label 				with: name				attributes: aView textStyle				offset: 16 @ 0]</body><body package="Browser-BrowserUI" selector="protocolLabelForView:andIndex:">protocolLabelForView: view andIndex: index 	^(self selectedEnvironment includesProtocol: (view sequence at: index)		in: self selectedClass) 			ifTrue: 				[(LabelAndIcon with: (view displayStringAt: index) attributes: view textStyle) 					beCheckMark]			ifFalse: 				[Label 					with: (view displayStringAt: index)					attributes: view textStyle					offset: 16 @ 0]</body><body package="Browser-BrowserUI" selector="selectorLabelForView:andIndex:">selectorLabelForView: view andIndex: index 	| methodDefinition |	methodDefinition := view sequence at: index.	^(self selectedEnvironment includesSelector: methodDefinition selector		in: methodDefinition implementingClass) 			ifTrue: 				[(LabelAndIcon with: (view displayStringAt: index)					attributes: view textStyle) beCheckMark]			ifFalse: 				[Label 					with: (view displayStringAt: index)					attributes: view textStyle					offset: 16 @ 0]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>private</category><body package="Browser-BrowserUI" selector="allCategories">allCategories	^self CategoryNavigatorPart list</body><body package="Browser-BrowserUI" selector="checkClass:">checkClass: aName 	| class |	class := self classForName: aName.	class isNil ifTrue: [^self].	selectedEnvironment		addClass: class;		addClass: class class</body><body package="Browser-BrowserUI" selector="checkProtocol:">checkProtocol: aProtocol 	| class |	class := self selectedClass.	(environment selectorsFor: aProtocol in: class)		do: [:each | selectedEnvironment addClass: class selector: each]</body><body package="Browser-BrowserUI" selector="classesForCategories">classesForCategories	^self ClassNavigatorPart list</body><body package="Browser-BrowserUI" selector="protocolsForClass">protocolsForClass	^self SelectorProtocolNavigatorPart list</body><body package="Browser-BrowserUI" selector="selectorsForProtocols">selectorsForProtocols	^self SelectorNavigatorPart list</body><body package="Browser-BrowserUI" selector="uncheckClass:">uncheckClass: aName 	| class |	class := self classForName: aName.	class isNil ifTrue: [^self].	selectedEnvironment		removeClass: class;		removeClass: class class</body><body package="Browser-BrowserUI" selector="uncheckProtocol:">uncheckProtocol: aProtocol 	| class |	class := self selectedClass.	(environment selectorsFor: aProtocol in: class)		do: [:each | selectedEnvironment removeClass: class selector: each]</body><body package="Browser-BrowserUI" selector="updateDisplayAfter:">updateDisplayAfter: aBlock 	aBlock value.	builder isNil ifTrue: [^self].	#(#categoryList #classList #protocolList #selectorList)		do: [:each | self invalidateComponent: each]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="ClassNavigatorPart">ClassNavigatorPart	^partsDictionary at: #ClassNavigatorPart		ifAbsentPut: 			[parts add: ((ClassNavigatorPart onNavigator: self)						visualBlock: [:np :view :index | self classLabelForView: view andIndex: index];						yourself)]</body><body package="Browser-BrowserUI" selector="MetaNavigatorPart">MetaNavigatorPart	^partsDictionary at: #MetaNavigatorPart		ifAbsentPut: [parts add: (MetaNavigatorPart onNavigator: self)]</body><body package="Browser-BrowserUI" selector="SelectorNavigatorPart">SelectorNavigatorPart	^partsDictionary at: #SelectorNavigatorPart		ifAbsentPut: 			[parts add: ((SelectorNavigatorPart onNavigator: self)						visualBlock: [:np :view :index | self selectorLabelForView: view andIndex: index];						yourself)]</body><body package="Browser-BrowserUI" selector="SelectorProtocolNavigatorPart">SelectorProtocolNavigatorPart	^partsDictionary at: #SelectorProtocolNavigatorPart		ifAbsentPut: 			[parts add: ((SelectorProtocolNavigatorPart onNavigator: self)						visualBlock: [:np :view :index | self protocolLabelForView: view andIndex: index];						yourself)]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	environment := BrowserEnvironment new.	selectedEnvironment := SelectorEnvironment new</body><body package="Browser-BrowserUI" selector="selectedEnvironment:">selectedEnvironment: anEnvironment 	self updateDisplayAfter: [selectedEnvironment := anEnvironment]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>interface closing</category><body package="Browser-BrowserUI" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	self release.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="menu">menu	| menu |	menu := Menu new.	self windowMenuItems 		do: [:each | menu addItem: ((MenuItem labeled: each key) submenu: each value)].	^menu</body><body package="Browser-BrowserUI" selector="windowMenuItems">windowMenuItems	| items |	items := OrderedCollection new.	items		add: (#_Class &lt;&lt; #browser &gt;&gt; '&amp;Class') -&gt; (self menuNamed: #classMenu).	(partsDictionary includesKey: #SelectorProtocolNavigatorPart) 		ifTrue: 			[items				add: (#_Protocol &lt;&lt; #browser &gt;&gt; '&amp;Protocol') -&gt; (self menuNamed: #protocolMenu);				add: (#_Selector &lt;&lt; #browser &gt;&gt; '&amp;Selector') -&gt; (self menuNamed: #selectorMenu)].	^items</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="selectedEnvironment">selectedEnvironment	^selectedEnvironment</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>accessing-class</category><body package="Browser-BrowserUI" selector="classForName:">classForName: className 	| class |	className isNil ifTrue: [^nil].	class := (className includes: $.) 				ifTrue: [className asQualifiedReference valueOrDo: [nil]]				ifFalse: [self nameSpace at: className ifAbsent: [nil]].	class isBehavior ifFalse: [^nil].	^class</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="comboBox1">comboBox1	^(self widgetAt: #ComboBox1) menuButton</body><body package="Browser-BrowserUI" selector="comboBox2">comboBox2	^(self widgetAt: #ComboBox2) menuButton</body><body package="Browser-BrowserUI" selector="definitionFromString:">definitionFromString: aString	^self definitions detect: [:x | x printString = aString ] ifNone: [nil]</body><body package="Browser-BrowserUI" selector="definitionToString:">definitionToString: aDefinition	^aDefinition printString</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="definition1">definition1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^definition1 isNil		ifTrue:			[definition1 := nil asValue]		ifFalse:			[definition1]</body><body package="Browser-BrowserUI" selector="definition2">definition2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^definition2 isNil		ifTrue:			[definition2 := nil asValue]		ifFalse:			[definition2]</body><body package="Browser-BrowserUI" selector="text1">text1	^text1</body><body package="Browser-BrowserUI" selector="text2">text2	^text2</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="doDiff">doDiff	| leftMethodText rightMethodText leftFragments rightFragments |	leftMethodText := self text1 value asText.	rightMethodText := self text2 value asText.	leftFragments := leftMethodText smalltalkOrWordAndWhitespaceFragments.	rightFragments := rightMethodText smalltalkOrWordAndWhitespaceFragments.	(leftFragments differences: rightFragments)		do: #applyAnyDifferenceTextEmphases.	self text1 value: ''.	self text2 value: ''.	self text1 value: leftMethodText.	self text2 value: rightMethodText</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	"Besides the 'plain' browser, we can be installed inside an SUnitCodeTool.	For some reason SUnitCodeTool sends #updateContents to its inner tool too early,	before the UI of either tools is built. Our update needs the UI to be arond,	so we have to be careful."	self builder notNil ifTrue:		[self setComboBoxes.		self compareSelectedItems]</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay		super updateDisplay.	self setComboBoxes.</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="definition1Changed">definition1Changed	self text1 value: self methodSourceCode1.	self doDiff</body><body package="Browser-BrowserUI" selector="definition2Changed">definition2Changed	self text2 value: self methodSourceCode2.	self doDiff</body><body package="Browser-BrowserUI" selector="makeDefinitionsList">makeDefinitionsList	^self definitions 		asSortedCollection: [:a :b | a printString &lt;= b printString]</body><body package="Browser-BrowserUI" selector="setComboBoxes">setComboBoxes	| myMenu |	myMenu := self makeDefinitionsList.	self comboBox1 setList: myMenu asValue.	self comboBox2 setList: myMenu asValue.	self definition1 suspendInterestsFor: self while:		[self definition2 suspendInterestsFor: self while:			[self definition1 value: (myMenu at: 1).			self definition2 value: (myMenu at: 2)]]</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="methodSourceCode1">methodSourceCode1	^self definition1 value sourceCode</body><body package="Browser-BrowserUI" selector="methodSourceCode2">methodSourceCode2	^self definition2 value sourceCode</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	text1 := '' asText asValue.	text2 := '' asText asValue.	self definition1 onChangeSend: #definition1Changed to: self.	self definition2 onChangeSend: #definition2Changed to: self.</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="compareSelectedItems">compareSelectedItems	self text1 value: self methodSourceCode1.	self text2 value: self methodSourceCode2.	self doDiff</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="preBuildWith:">preBuildWith: aBuilder 	super preBuildWith: aBuilder.	self builder aspectAt: #list1 put: OrderedCollection new asValue.	self builder aspectAt: #list2 put: OrderedCollection new  asValue</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^codeModel definitions size &gt; 1</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#Compare &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="codeComponent">codeComponent	^object</body><body package="Browser-BrowserUI" selector="displayIcon">displayIcon	self isProtected ifFalse: [^super displayIcon].	^VisualStack with: super displayIcon with: GeneralIcons protectedSubscript</body><body package="Browser-BrowserUI" selector="key">key	^key</body><body package="Browser-BrowserUI" selector="partName">partName	^key printString</body><body package="Browser-BrowserUI" selector="value">value	^self codeComponent propertyAt: key</body><body package="Browser-BrowserUI" selector="value:">value: anObject		RefactoryChangeManager instance		performChange:			((CodeComponentPropertyChange component: self codeComponent) propertyAt:					key put: anObject)</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>comparing</category><body package="Browser-BrowserUI" selector="&lt;=">&lt;= aPropertyPart	^self isProtected ~= aPropertyPart isProtected		ifTrue: [aPropertyPart isProtected]		ifFalse: [key &lt;= aPropertyPart key]</body><body package="Browser-BrowserUI" selector="sameTypeEquals:">sameTypeEquals: aPart	^key = aPart key and: [self codeComponent = aPart codeComponent]</body><body package="Browser-BrowserUI" selector="specificHash">specificHash	^self codeComponent hash bitXor: key hash</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="displayString">displayString	^key asString</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isProtected">isProtected	^self class protectedKeys includes: key</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="key:">key: aSymbol 	key := aSymbol</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="named:in:">named: aPropertyKey in: aCodeComponent	^(self new)		key: aPropertyKey;		object: aCodeComponent;		yourself</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField class</class-id> <category>utility</category><body package="Browser-BrowserUI" selector="protectedKeys">protectedKeys	^CodeComponent binaryActions , CodeComponent volatilePropertyKeys		, CodeComponent uneditablePropertyKeys</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="acceptText">acceptText	^self textAccepted: self textController</body><body package="Browser-BrowserUI" selector="cancelText">cancelText	self text: originalText</body><body package="Browser-BrowserUI" selector="compileIntoClass">compileIntoClass	| class |	class := self selectedClass.	class = self methodClass 		ifFalse: 			[class := Dialog 						choose: (#CompileIntoClass &lt;&lt; #browser &gt;&gt; 'Compile into class?')						labels: (Array 								with: class name asString								with: self methodClass name asString								with: (#Cancel &lt;&lt; #IDE &gt;&gt; 'Cancel'))						values: (Array 								with: class								with: self methodClass								with: nil)						default: class].	^class</body><body package="Browser-BrowserUI" selector="compileObjectDefinitionText:from:">compileObjectDefinitionText: aText from: aController 	| object |	object := self define: aText from: aController.	object isNil ifTrue: [^self].	object isBehavior ifTrue: [^codeModel setClass: object].	object isNameSpace ifTrue: [^codeModel setNameSpace: object].	(object isBindingReference and: [object isDefined]) 		ifTrue: [codeModel setBinding: object binding]</body><body package="Browser-BrowserUI" selector="define:from:">define: aText from: aController 	^self showWaitCursorWhile: 			[			[| change |			change := ExecuteCodeChange definition: aText string for: aController.			change package: self objectPackage.			self performChange: change.			change definedObject] 					on: Error					do: 						[:ex | 						ex isResumable 							ifTrue: 								[(self confirm: ((#x1snDoYouWantToContinue &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;&lt;n&gt;Do you want to continue?')			expandMacrosWith: ex errorString)) 									ifTrue: [ex proceed]]							ifFalse: [self warn: ex errorString].						ex return: nil]]</body><body package="Browser-BrowserUI" selector="explain">explain	| controller |	controller := self textController.	controller maybeSelectCurrentWord.	self explain: controller text from: controller</body><body package="Browser-BrowserUI" selector="explain:from:">explain: fullText from: aController 	Explainer 		explain: aController selection string		class: self methodClass		selector: self selector		methodText: self textController text		for: self</body><body package="Browser-BrowserUI" selector="explainSpecial:for:">explainSpecial: string for: anExplainer 	^nil</body><body package="Browser-BrowserUI" selector="textAccepted:">textAccepted: aController	(self isReadOnly not and: [self isEnabled])		ifTrue: [self accept: aController text from: aController]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>messages</category><body package="Browser-BrowserUI" selector="browseImplementors">browseImplementors	| node results |	node := self findNode.	(node isNil or: [node isMessage not]) ifTrue: [^self].	results := BrowserEnvironment new implementorsOf: node selector.	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoImplementorsOf1pFound &lt;&lt; #browser &gt;&gt; 'No implementors of &lt;1p&gt; found'				expandMacrosWith: node selector)]</body><body package="Browser-BrowserUI" selector="browseSenders">browseSenders	| node results |	node := self findNode.	(node isNil or: [node isMessage not]) ifTrue: [^self].	results := BrowserEnvironment new referencesTo: node selector.	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoSendersOf1pFound &lt;&lt; #browser &gt;&gt; 'No senders of &lt;1p&gt; found'				expandMacrosWith: node selector)]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>controller accessing</category><body package="Browser-BrowserUI" selector="copySelection">copySelection	^self textController copySelection</body><body package="Browser-BrowserUI" selector="cut">cut	^self textController cut</body><body package="Browser-BrowserUI" selector="debugIt">debugIt	^self textController debugIt</body><body package="Browser-BrowserUI" selector="doIt">doIt	^self textController doIt</body><body package="Browser-BrowserUI" selector="find">find	^self textController find</body><body package="Browser-BrowserUI" selector="hardcopy">hardcopy	^self textController hardcopy</body><body package="Browser-BrowserUI" selector="inspectIt">inspectIt	^self textController inspectIt</body><body package="Browser-BrowserUI" selector="paste">paste	^self textController paste</body><body package="Browser-BrowserUI" selector="printIt">printIt	^self textController printIt</body><body package="Browser-BrowserUI" selector="replace">replace	^self textController replace</body><body package="Browser-BrowserUI" selector="selectFrom:to:">selectFrom: start to: stop	| controller view |	controller := self textController.	controller isNil ifTrue: [^self].	view := controller view.	([view topComponent isMapped] on: Error do: [:ex | ex return: false]) 		ifFalse: [^self].	"If the controller isn't being displayed, then we get a DNU error."	controller selectFrom: start to: stop.	view displaySelection: true.	view selectAndScroll.</body><body package="Browser-BrowserUI" selector="undo">undo	^self textController undo</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>refactoring</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable:">abstractInstanceVariable: aString 	self 		performRefactoring: (AbstractInstanceVariableRefactoring variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-BrowserUI" selector="addInstanceVariable">addInstanceVariable	self navigator addInstanceVariableIn: self selectedClass.	self updateContents</body><body package="Browser-BrowserUI" selector="createAccessorsForInstVar:">createAccessorsForInstVar: aString 	self performRefactoring: (CreateAccessorsForVariableRefactoring 				variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-BrowserUI" selector="performRefactoring:">performRefactoring: aRefactoring 	aRefactoring isNil ifTrue: [^self].	self handleError: 			[super performRefactoring: aRefactoring.			codeModel navigate.			self updateContents]</body><body package="Browser-BrowserUI" selector="protectInstVar:">protectInstVar: aString 	self 		performRefactoring: (ProtectInstanceVariableRefactoring variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-BrowserUI" selector="pushUpInstVar:">pushUpInstVar: aString 	self 		performRefactoring: (PullUpInstanceVariableRefactoring variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString) superclass)</body><body package="Browser-BrowserUI" selector="renameInstVar:">renameInstVar: aString 	self navigator renameInstanceVariable: aString		in: (self selectedClass whichClassDefinesInstVar: aString).	self updateContents</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="doItEnvironment">doItEnvironment	| classOrNameSpace |	self isMethod		ifTrue:			[(self methodClass				compiledMethodAt: self selector				ifAbsent: [nil]) ifNotNil: [:method | ^method environment]].	classOrNameSpace := self classOrNameSpace.	^classOrNameSpace isNameSpace		ifTrue: [classOrNameSpace]		ifFalse: [self doItReceiver ifNil: [Smalltalk] ifNotNil: [:receiver | receiver environment]]</body><body package="Browser-BrowserUI" selector="doItReceiver">doItReceiver	| classOrNameSpace |	classOrNameSpace := self classOrNameSpace.	^classOrNameSpace isNameSpace ifTrue: [nil] ifFalse: [classOrNameSpace]</body><body package="Browser-BrowserUI" selector="insertError:at:">insertError: aString at: position 	self textController insertAndSelect: ((#x1s &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; -%&gt;')			expandMacrosWith: aString) at: position</body><body package="Browser-BrowserUI" selector="saveState">saveState	| controller |	controller := self textController.	controller isNil ifTrue: [^self].	(changed := controller textHasChanged) 		ifTrue: [savedText := controller text]</body><body package="Browser-BrowserUI" selector="text">text	| controller |	controller := self textController.	^controller notNil ifTrue: [controller text] ifFalse: ['']</body><body package="Browser-BrowserUI" selector="text:">text: aString 	self textHolder value: aString.	originalText := aString.	changed := false</body><body package="Browser-BrowserUI" selector="textNoChange:">textNoChange: aString 	| textController |	textController := self textController.	textController		selectFrom: 1 to: self textController text size;		deselect;		replaceSelectionWith: aString asText;		selectAt: 1.	textController view		selectionStopIndex: textController text size + 1;		invalidate</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="hasAssignmentSelected">hasAssignmentSelected	| node |	node := self findNode.	^node notNil and: [node isAssignment]</body><body package="Browser-BrowserUI" selector="hasClassSelected">hasClassSelected	| node |	node := self findNode.	(node isNil or: [node isVariable not]) ifTrue: [^false].	^(node name asQualifiedReference home: self navigator nameSpace) binding 		isForClass</body><body package="Browser-BrowserUI" selector="hasClassSelectedAndIncludesClass">hasClassSelectedAndIncludesClass	^self hasClassSelected and: 			[| node |			node := self findNode.			self environment 				includesClass: (node name asQualifiedReference 						home: self navigator nameSpace) value]</body><body package="Browser-BrowserUI" selector="hasInstanceVariableSelected">hasInstanceVariableSelected	| name class |	class := self selectedClass.	name := self selectedVariableName.	^name notNil 		and: [class notNil and: [(class allInstVarNames indexOf: name) &gt; 0]]</body><body package="Browser-BrowserUI" selector="hasMessageNodeSelected">hasMessageNodeSelected	| node |	node := self findNode.	^node notNil and: [node isMessage]</body><body package="Browser-BrowserUI" selector="hasMessageNodeSelectedForRefactoring">hasMessageNodeSelectedForRefactoring	^self isEditing not and: [self hasMessageNodeSelected]</body><body package="Browser-BrowserUI" selector="hasParameterSelected">hasParameterSelected	| node |	node := self findNode.	node isNil ifTrue: [^false].	^(node whoDefines: node name) notNil and: [node parent isMethod]</body><body package="Browser-BrowserUI" selector="hasTemporaryVariableSelected">hasTemporaryVariableSelected	| node |	node := self findNode.	^node notNil 		and: [node isVariable and: [(node whoDefines: node name) notNil]]</body><body package="Browser-BrowserUI" selector="hasValueNodeSelected">hasValueNodeSelected	^(self hasAssignmentSelected or: 			[self hasClassSelected or: 					[self hasInstanceVariableSelected 						or: [self hasMessageNodeSelected or: [self hasTemporaryVariableSelected]]]]) 		not and: 				[| node |				node := self findNode.				node notNil and: [node isValue]]</body><body package="Browser-BrowserUI" selector="isEditing">isEditing	"The '== true' below is for people filing in the source with open browsers"	| controller |	(super isEditing or: [changed == true]) ifTrue: [^true].	controller := self textController.	^controller notNil and: [controller textHasChanged]</body><body package="Browser-BrowserUI" selector="isEnabled">isEnabled	^true</body><body package="Browser-BrowserUI" selector="isMethodText:">isMethodText: aText 	RBParser parseMethod: aText onError: [:s :p | ^false].	^true</body><body package="Browser-BrowserUI" selector="isReadOnly">isReadOnly	^codeModel isReadOnly</body><body package="Browser-BrowserUI" selector="isTextSelected">isTextSelected	^self selectedInterval notEmpty</body><body package="Browser-BrowserUI" selector="isTextTool">isTextTool	^true</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	self text: ''</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="findNode">findNode	| tree node interval text |	interval := self selectedInterval.	interval isEmpty 		ifTrue: 			[| cursorPosition |			cursorPosition := self selectionIndex.			cursorPosition = 1 ifTrue: [^nil].			interval := cursorPosition to: cursorPosition].	text := self text asString.	text size &gt; ParserTextLimit ifTrue: [^nil].	tree := self parseSource: text.	tree isNil ifTrue: [^self parseSelection].	node := tree whichNodeIsContainedBy: interval.	node isNil ifTrue: [node := tree bestNodeFor: interval].	^node</body><body package="Browser-BrowserUI" selector="isMethod">isMethod	^false</body><body package="Browser-BrowserUI" selector="objectPackage">objectPackage	| classOrNameSpace registry |	registry := self storeRegistry.	registry isNil ifTrue: [^nil].	classOrNameSpace := self classOrNameSpace.	classOrNameSpace isNil ifTrue: [^self package].	^classOrNameSpace isBehavior 		ifTrue: [registry containingPackageForClass: classOrNameSpace]		ifFalse: 			[registry 				containingPackageForNameSpaceSymbol: classOrNameSpace absoluteSymbol]</body><body package="Browser-BrowserUI" selector="parseSelection">parseSelection	^RBParser parseExpression: self selectedText onError: [:str :pos | ^nil]</body><body package="Browser-BrowserUI" selector="parseSource:">parseSource: aString	^self isMethod		ifTrue:			[RBParser				parseMethod: aString				onError: [:str :err | ^nil]]		ifFalse:			[RBParser				parseExpression: aString				onError: [:str :err | ^nil]]</body><body package="Browser-BrowserUI" selector="selectedInterval">selectedInterval	| controller |	controller := self textController.	controller isNil ifTrue: [^1 to: 0].	^controller selectionStartIndex to: controller selectionStopIndex - 1</body><body package="Browser-BrowserUI" selector="selectedText">selectedText	| interval |	interval := self selectedInterval.	interval isEmpty ifTrue: [^''].	^self textController text asString copyFrom: interval first		to: interval last</body><body package="Browser-BrowserUI" selector="selectionIndex">selectionIndex	| controller |	controller := self textController.	controller isNil ifTrue: [^1].	^controller selectionStartIndex</body><body package="Browser-BrowserUI" selector="textController">textController	^self controllerFor: #textEditor</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="buildMenuBarMenu">buildMenuBarMenu		menuBarMenu := self buildTopLevelMenuFrom: #menuPrefixForMenuBar.	menuBarMenu addPart: self textMenu.	#(#'Do It' #'Print It' #'Inspect It' #'Debug It' #'Cut Selection' #'Copy Selection' #'Paste Selection' #'Find Text' #'Replace Text')		do:			[:each | 			(menuBarMenu atNameKey: each)				ifNotNil: [:item | item makeShortcutDisplayOnly]]</body><body package="Browser-BrowserUI" selector="menu">menu	^menuBarMenu ifNil: [self rebuildMenus. menuBarMenu]</body><body package="Browser-BrowserUI" selector="rebuildMenus">rebuildMenus	super rebuildMenus.	self buildMenuBarMenu.	self setMenu: self textMenu for: #textEditor</body><body package="Browser-BrowserUI" selector="textMenu">textMenu	^menu</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>instance variables</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable">abstractInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self abstractInstanceVariable: name</body><body package="Browser-BrowserUI" selector="browseInstVarReaders">browseInstVarReaders	| name |	name := self selectedVariableName.	name notNil 		ifTrue: 			[self navigator browseGlobalInstVarReadersTo: name in: self selectedClass]</body><body package="Browser-BrowserUI" selector="browseInstVarRefs">browseInstVarRefs	| name |	name := self selectedVariableName.	name notNil 		ifTrue: 			[self navigator browseGlobalInstVarRefsTo: name in: self selectedClass]</body><body package="Browser-BrowserUI" selector="browseInstVarWriters">browseInstVarWriters	| name |	name := self selectedVariableName.	name notNil 		ifTrue: 			[self navigator browseGlobalInstVarWritersTo: name in: self selectedClass]</body><body package="Browser-BrowserUI" selector="createInstanceVariableAccessors">createInstanceVariableAccessors	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self createAccessorsForInstVar: name</body><body package="Browser-BrowserUI" selector="protectInstanceVariable">protectInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self protectInstVar: name</body><body package="Browser-BrowserUI" selector="pushDownInstanceVariable">pushDownInstanceVariable	| string |	string := self selectedText.	self 		performRefactoring: (PushDownInstanceVariableRefactoring variable: string				class: self selectedClass)</body><body package="Browser-BrowserUI" selector="pushUpInstanceVariable">pushUpInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self pushUpInstVar: name</body><body package="Browser-BrowserUI" selector="removeInstanceVariable">removeInstanceVariable	| string |	self changeRequest ifFalse: [^self].	string := self selectedText.	self navigator removeInstanceVariable: string fromClass: self selectedClass</body><body package="Browser-BrowserUI" selector="renameInstanceVariable">renameInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self renameInstVar: name</body><body package="Browser-BrowserUI" selector="selectedVariableName">selectedVariableName	"Guess the variable name from the selection. Search outwards from the selection (just anchor, partial, or whole) to get the whole alphaNumeric text."	| range string start stop validVariableCharacter name |	validVariableCharacter := [:char | char isAlphaNumeric or: [char = $_]].	range := self selectedInterval.	string := self textController text asString.	start := range first.	[start &gt; 1 and: [validVariableCharacter value: (string at: start - 1)]]		whileTrue: [start := start - 1].	stop := range last.		[stop &lt; string size		and: [validVariableCharacter value: (string at: stop + 1)]]			whileTrue: [stop := stop + 1].	name := string copyFrom: start to: stop.	"This last test, is to make sure we didn't end up bridging two tokens with separators in between"	^(name allSatisfy: validVariableCharacter)		ifTrue: [name]		ifFalse: [String new]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="textHolder">textHolder	^textHolder isNil ifTrue: [textHolder := '' asValue] ifFalse: [textHolder]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="okToChangeToolFocus">okToChangeToolFocus	| choice |	choice := Dialog 				choose: (#AcceptUnsavedTextChanges &lt;&lt; #browser &gt;&gt; 'Accept unsaved text changes?')				labels: (Array with: (#Yes &lt;&lt; #browser &gt;&gt; 'Yes') with: (#No &lt;&lt; #browser &gt;&gt; 'No') with: (#Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'))				values: #(#yes #no #cancel)				default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [self acceptText].	^true</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	| controller |	super updateDisplay.	savedText notNil 		ifTrue: 			[controller := self textController.			controller view editText: savedText.			controller textHasChanged: true.			savedText := nil].	changed := false</body><body package="Browser-BrowserUI" selector="updateRequest">updateRequest	^super updateRequest 		and: [self isEditing not or: [self okToChangeToolFocus]]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(self textController)		autoAccept: false;		continuousAccept: false;		readOnly: self isReadOnly;		selectable: true</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>window properties</category><body package="Browser-BrowserUI" selector="takeFocus">takeFocus	(self wrapperAt: #textEditor) ifNotNil: [:each | each takeKeyboardFocus]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>compiling methods</category><body package="Browser-BrowserUI" selector="changeWithPackageAndParcelInformation:">changeWithPackageAndParcelInformation: anAddMethodChange		| package newSelector packages |	package := self methodPackage.	anAddMethodChange package: package.	newSelector := anAddMethodChange selector.	newSelector ~= self selector		ifTrue:			[(anAddMethodChange changeObject includesSelector: newSelector)				ifTrue:					[(self						confirm:							(#x1sIsAlreadyDefinedIn2pReplaceQ &lt;&lt; #browser &gt;&gt;									'&lt;1s&gt; is already defined in &lt;2p&gt;.&lt;n&gt;Replace definition?'								expandMacrosWith: newSelector								with: anAddMethodChange changeObject)) ifFalse: [^nil].					packages := self storeRegistry						ifNil: [#()]						ifNotNil:							[:registry | 							registry								allContainingPackagesForSelector: newSelector								class: anAddMethodChange changeObject].					packages notEmpty						ifTrue:							[package := packages asArray first.							anAddMethodChange package: package]]				ifFalse: [^anAddMethodChange]].	(self shouldOverrideInPackage: package)		ifTrue: [^self overrideInPackageChange: anAddMethodChange].	^anAddMethodChange</body><body package="Browser-BrowserUI" selector="compileMethodText:from:">compileMethodText: aText from: aController	| basicChange targetClass adjustedChange textToCompile |	(targetClass := self compileIntoClass) ifNil: [^self].	textToCompile := aText.	basicChange := AddMethodChange				compile: textToCompile				in: targetClass				classified: self protocol				for: aController.	basicChange inheritProtocol.	adjustedChange := self changeWithPackageAndParcelInformation: basicChange.	adjustedChange isNil ifTrue: [^self].	_.BrowserCodeTool.SaveAutoFormat == true		ifTrue: ["If we go down this path, we have to compile it up front to give the interactive handler a chance to change the text in the controller, and then use the editor's latest text"			targetClass compilerClass new				compile: textToCompile				in: nil				allowReceiver: true				class: targetClass				environment: basicChange environment				noPattern: false				notifying: aController				ifFail: [^self].			[basicChange				source: (RBParser parseMethod: aController text) printString]				on: Error				do: [:ex | ]].	self performChange: adjustedChange.	basicChange definedSelector		ifNotNil: [:selector | codeModel setSelector: selector]</body><body package="Browser-BrowserUI" selector="methodPackage">methodPackage	| class selector items registry packages containerPackages |	registry := self storeRegistry.	registry isNil ifTrue: [^nil].	class := self methodClass.	class isNil ifTrue: [^self package].	selector := self selector.	(selector notNil and: 			[(items := registry allContainingPackagesForSelector: selector class: class) 				notEmpty]) 		ifTrue: [^items asArray first].	packages := self packages.	packages isEmpty ifTrue: [^nil].	containerPackages := packages 				select: [:each | (each definesClass: class) or: [each extendsClass: class]].	containerPackages isEmpty ifTrue: [containerPackages := packages].	containerPackages := containerPackages 				asSortedCollection: [:a :b | a name &lt; b name].	^containerPackages size = 1 		ifTrue: [containerPackages first]		ifFalse: 			[self 				choose: (#WhichPackage &lt;&lt; #browser &gt;&gt; 'Which package ')				fromList: (containerPackages collect: [:each | each displayString])				values: containerPackages				lines: 5				cancel: [nil]]</body><body package="Browser-BrowserUI" selector="overrideInPackageChange:">overrideInPackageChange: anAddMethodChange 	anAddMethodChange package: self package.	^(CompositeRefactoryChange named: anAddMethodChange name)		addChange: (MoveMethodToPackageChange 					class: self selectedClass					selector: anAddMethodChange selector					package: self package);		addChange: (AddOverrideChange 					for: (Override forSelector: anAddMethodChange selector							class: anAddMethodChange changeObject));		addChange: anAddMethodChange;		yourself</body><body package="Browser-BrowserUI" selector="shouldOverrideInPackage:">shouldOverrideInPackage: package 	^self packages notEmpty and: 			[(self packages includes: package) not 				and: [self confirm: (#CreateOverrideForMethod &lt;&lt; #browser &gt;&gt; 'Create override for method?')]]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="parserTextLimit">parserTextLimit	^ParserTextLimit</body><body package="Browser-BrowserUI" selector="parserTextLimit:">parserTextLimit: anInteger 	ParserTextLimit := anInteger</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="binding">binding	^self selectedBinding</body><body package="Browser-BrowserUI" selector="bytesClassTemplate">bytesClassTemplate	^self classTemplateFor: #bytes</body><body package="Browser-BrowserUI" selector="categoryForNewObject">categoryForNewObject	^#'Some Category'</body><body package="Browser-BrowserUI" selector="classTemplate">classTemplate	^self classTemplateFor: #none</body><body package="Browser-BrowserUI" selector="classTemplateFor:">classTemplateFor: aSymbol 	^'&lt;1s&gt; defineClass: #&lt;2s&gt;	superclass: #{&lt;3s&gt;}	indexedType: #&lt;4s&gt;	private: false	instanceVariableNames: ''&lt;5s&gt;''	classInstanceVariableNames: ''''	imports: ''''	category: &lt;6p&gt;' 		expandMacrosWithArguments: (OrderedCollection new			add: self nameSpace unambiguousName;			add: #NameOfClass &lt;&lt; #browser &gt;&gt; 'NameOfClass';			add: #NameOfSuperclass &lt;&lt; #browser &gt;&gt; 'NameOfSuperclass';			add: aSymbol;			add: (aSymbol == #bytes				ifTrue: ['']				ifFalse: [(#instVarName1InstVarName2 &lt;&lt; #browser &gt;&gt; 'instVarName1 instVarName2')]);			add: '';			yourself)</body><body package="Browser-BrowserUI" selector="defaultTemplate">defaultTemplate		^self pundle isNil		ifTrue: [self nameSpace definition asText]		ifFalse: [self template]</body><body package="Browser-BrowserUI" selector="definitionOfBinding:">definitionOfBinding: binding 	| ns |	binding isForGeneral ifFalse: [^binding value definition asText].	ns := Root whoDefinesBinding: binding.	ns isNil ifTrue: [^''].	^ns definitionOfStatic: binding</body><body package="Browser-BrowserUI" selector="indexedClassTemplate">indexedClassTemplate	^self classTemplateFor: #objects</body><body package="Browser-BrowserUI" selector="nameSpaceTemplate">nameSpaceTemplate	^'&lt;1s&gt; defineNameSpace: #&lt;2s&gt;	private: false	imports: ''			private Smalltalk.*			''	category: &lt;3p&gt;' 		expandMacrosWith: self nameSpace unambiguousName		with: #NameSpace &lt;&lt; #browser &gt;&gt; 'NameSpace'		with: self categoryForNewObject asString</body><body package="Browser-BrowserUI" selector="sharedVariableTemplateFor:">sharedVariableTemplateFor: aNameSpace 	^'&lt;1s&gt; defineSharedVariable: #&lt;2s&gt;	private: false	constant: false	category: &lt;3p&gt;	initializer: ''Array new: 5'''		expandMacrosWith: aNameSpace unambiguousName		with: #NameOfBinding &lt;&lt; #browser &gt;&gt; 'NameOfBinding'		with: (self protocol isNil 				ifTrue: [self categoryForNewObject]				ifFalse: [self protocol]) asString</body><body package="Browser-BrowserUI" selector="template">template	^self classTemplate</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	| binding |	binding := self binding.	self text: (binding isNil 				ifTrue: [self defaultTemplate]				ifFalse: [self definitionOfBinding: binding])</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="canDefineClassesAndNameSpaces">canDefineClassesAndNameSpaces	^true</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController 	(self selectedClass notNil and: [self isMethodText: aText]) 		ifTrue: [self compileMethodText: aText from: aController]		ifFalse: [self compileObjectDefinitionText: aText from: aController]</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="showBytesClassTemplate">showBytesClassTemplate	self text: self bytesClassTemplate</body><body package="Browser-BrowserUI" selector="showClassTemplate">showClassTemplate	self text: self classTemplate</body><body package="Browser-BrowserUI" selector="showIndexedClassTemplate">showIndexedClassTemplate	self text: self indexedClassTemplate</body><body package="Browser-BrowserUI" selector="showNameSpaceTemplate">showNameSpaceTemplate	self text: self nameSpaceTemplate</body><body package="Browser-BrowserUI" selector="showSharedVariableTemplate">showSharedVariableTemplate	self text: (self sharedVariableTemplateFor: self nameSpace)</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^self selectedBinding notNil</body><body package="Browser-BrowserUI" selector="tabIcon">tabIcon	^self binding value ifNotNil: [:object | object safeToolListIcon]</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#Definition &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self textController doNotHandleLocally: #explain</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="binding">binding	| binding name |	binding := self selectedBinding.	"(binding notNil and: [binding isForGeneral]) ifTrue: [^binding]."	binding isNil ifTrue: [^nil].	name := self sharedVariableName.	^name notNil ifTrue: [binding value bindingFor: name] ifFalse: [nil]</body><body package="Browser-BrowserUI" selector="defaultTemplate">defaultTemplate	^self template</body><body package="Browser-BrowserUI" selector="nameSpace">nameSpace	| binding |	binding := self selectedBinding.	binding isNil ifTrue: [^Smalltalk].	^binding isForGeneral 		ifTrue: [self objectName asQualifiedReference environment]		ifFalse: [binding value]</body><body package="Browser-BrowserUI" selector="template">template	^self sharedVariableTemplateFor: self nameSpace</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	super updateContents.	self installInspector</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	super updateDisplay.	self installInspector</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="canDefineClassesAndNameSpaces">canDefineClassesAndNameSpaces	^false</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="installInspector">installInspector	self installInspectorOn: self binding value</body><body package="Browser-BrowserUI" selector="installInspectorOn:">installInspectorOn: anObject 	self resetWindowLabelAround: 			[| inspectorClass |			inspectorClass := anObject inspectorClass.			self 				installSubcanvasIn: #inspector				using: (inspectorClass inspect: anObject)				spec: #windowSpec]</body><body package="Browser-BrowserUI" selector="resetWindowLabelAround:">resetWindowLabelAround: aBlock 	| window label |	self builder isNil ifTrue: [^self].	window := self builder window.	window notNil ifTrue: [label := window label].	aBlock ensure: [window notNil ifTrue: [window label: label]]</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="objectPackage">objectPackage	^self package</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^codeModel sharedVariableName notNil		or: [codeModel isData and: [codeModel protocol notNil]]</body><body package="Browser-BrowserUI" selector="tabIcon">tabIcon	^self binding value ifNotNil: [:object | object class safeToolListIcon]</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#Share  &gt;&gt; 'Share' &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="add">add	| newKey |	newKey := self requestNewPropertyKey ifNil: [^self].	(object properties includesKey: newKey)		ifFalse: [object propertyAt: newKey put: ''].	self refresh.	self select: (propertyParts detect: [:each | each key == newKey])</body><body package="Browser-BrowserUI" selector="removeSelected">removeSelected	self selections		do:			[:each | 			each isProtected				ifFalse:					[object						propertyAt: each key						put: nil]].	self refresh</body><body package="Browser-BrowserUI" selector="requestNewPropertyKey">requestNewPropertyKey	| string key |	string := (Dialog		request: #AddNewKeyC &lt;&lt; #dialogs &gt;&gt; 'Add new key:'		initialAnswer: ''		onCancel: [^nil]) trimBlanks.	string size = 0 ifTrue: [^nil].	key := string asSymbol.	(CodeComponentInspectorField protectedKeys includes: key)		ifTrue:			[^Dialog				warn:					(#ProtectedKey &gt;&gt; 'Protected Key: &lt;1s&gt;' &lt;&lt; #browser expandMacrosWith: key)].	^key</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>decomposing</category><body package="Browser-BrowserUI" selector="partAt:">partAt: anIndex	^propertyParts at: anIndex</body><body package="Browser-BrowserUI" selector="partCount">partCount	^object		ifNil: [0]		ifNotNil: [propertyParts size]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>properties</category><body package="Browser-BrowserUI" selector="dragControllerClass">dragControllerClass	^Tools.Trippy.ReplaceOnlyDragController</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>private</category><body package="Browser-BrowserUI" selector="refresh">refresh		propertyParts := object		ifNil: [List new]		ifNotNil:			[(object properties keys asList				collect: [:each | CodeComponentInspectorField named: each in: object]) sorted].	super refresh</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>menu management</category><body package="Browser-BrowserUI" selector="buildFieldListMenu">buildFieldListMenu	| menu |	menu := super buildFieldListMenu.	menu addLine.	self addAddAndRemoveItemsTo: menu.	^menu</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="codeModel">codeModel	^self currentToolset</body><body package="Browser-BrowserUI" selector="codeTool">codeTool	^self currentToolset</body><body package="Browser-BrowserUI" selector="currentToolset">currentToolset	^toolsetsList selection</body><body package="Browser-BrowserUI" selector="currentToolset:">currentToolset: anObject	toolsetsList selection: anObject</body><body package="Browser-BrowserUI" selector="dispatcher">dispatcher	^dispatcher</body><body package="Browser-BrowserUI" selector="environment">environment	^navigator environment</body><body package="Browser-BrowserUI" selector="environment:">environment: anEnvironment 	| navigatorClass |	navigatorClass := anEnvironment navigatorClass.	navigatorClass == navigator class 		ifTrue: [navigator environment: anEnvironment]		ifFalse: 			[navigator release.			navigator := navigatorClass forEnvironment: anEnvironment						dispatcher: dispatcher.			self toolsets do: [:each | each navigator: navigator]]</body><body package="Browser-BrowserUI" selector="navigator">navigator	^navigator</body><body package="Browser-BrowserUI" selector="toolsets">toolsets	^toolsetsList ifNotNil: #list</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="newBuffer">newBuffer	| newToolset |	newToolset := self codeModelClass navigator: navigator.	self toolsets add: newToolset.	self bufferChangeRequest.	self currentToolset: newToolset.	self currentToolset tool updateContents.	self enable: #removeBuffer.	self updateCodeToolZoomed</body><body package="Browser-BrowserUI" selector="removeBuffer">removeBuffer	self currentToolset updateRequest ifFalse: [^self].	self currentToolset release.	self toolsets remove: self currentToolset.	self switchToBuffer: 1.	self toolsets size == 1 ifTrue: [self disable: #removeBuffer]</body><body package="Browser-BrowserUI" selector="selectBuffer">selectBuffer	| buffer |	buffer := Dialog 				choose: (#SelectBuffer1 &lt;&lt; #browser &gt;&gt; 'Select buffer')				fromList: self toolsets				values: (1 to: (self toolsets) size)				lines: 20				cancel: [nil].	buffer isNil ifTrue: [^self].	self switchToBuffer: buffer</body><body package="Browser-BrowserUI" selector="toggleToolbar">toggleToolbar	self class showToolbar: self class showToolbar not.	self updateToolbar</body><body package="Browser-BrowserUI" selector="toggleZoom">toggleZoom	| widget splitterWidget |	widget := self builder componentAt: #codeTool.	self isZoomed 		ifTrue: 			[splitterWidget := self builder componentAt: #splitter.			(widget component layout)				topOffset: splitterWidget component layout bottomOffset;				topFraction: splitterWidget component layout bottomFraction.			self showAll: #(#navigator #splitter)]		ifFalse: 			[self hideAll: #(#navigator #splitter).			(widget component layout)				topOffset: 0;				topFraction: 0].	self updateCodeToolZoomed.	builder window refresh</body><body package="Browser-BrowserUI" selector="updateCodeToolZoomed">updateCodeToolZoomed	self codeTool isZoomed: self isZoomed</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="has10orMoreCodeTools">has10orMoreCodeTools	^(self toolsets) size &gt; 9</body><body package="Browser-BrowserUI" selector="hasMultipleCodeTools">hasMultipleCodeTools	^(self toolsets) size &gt; 1</body><body package="Browser-BrowserUI" selector="isGlobalSelected">isGlobalSelected	^navigator isGlobalSelected</body><body package="Browser-BrowserUI" selector="isZoomed">isZoomed	^(self builder componentAt: #navigator) isVisible not</body><body package="Browser-BrowserUI" selector="showToolbar">showToolbar	^self class showToolbar</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="bufferMenuSpecifications">bufferMenuSpecifications	^(1 to: (self toolsets size min: 9))		collect:			[:i | 			(self currentToolset == (self toolsets at: i)				ifTrue: [RBCheckedCommand]				ifFalse: [RBCommand])				named:					(self						menuNameFor:							('&amp;&lt;1s&gt; &lt;2s&gt;'								expandMacrosWith: i printString								with: (self toolsets at: i) printString))				description: #SelectBuffer &lt;&lt; #browser &gt;&gt; 'Select Buffer'				action: [self switchToBuffer: i]				receiver: #yourself]</body><body package="Browser-BrowserUI" selector="menu">menu	^[self menuBar]</body><body package="Browser-BrowserUI" selector="menuBar">menuBar	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="rebuildMenus">rebuildMenus	navigator rebuildMenus.	self toolsets do: [:each | each rebuildMenus].	self buildNewMenu.	self toolbarMenuHolder value: self toolbarMenu</body><body package="Browser-BrowserUI" selector="switchToBuffer:">switchToBuffer: anInteger	self currentToolset: (self toolsets at: anInteger)</body><body package="Browser-BrowserUI" selector="toolbarMenu">toolbarMenu	| menu |	menu := (self buildTopLevelMenuFrom: #toolbarMenu) value.	menu menuItems do: 			[:each | 			| block |			block := each value.			each value: ((PluggableAdaptor on: ValueHolder new) 						getBlock: [:m | false]						putBlock: [:m :v | (self isMenuItemEnabled: each) ifTrue: [block value]]						updateBlock: [:m :a :p | false])].	^menu</body><body package="Browser-BrowserUI" selector="toolbarMenuHolder">toolbarMenuHolder	toolbarMenuHolder isNil 		ifTrue: [toolbarMenuHolder := self toolbarMenu asValue].	^toolbarMenuHolder</body><body package="Browser-BrowserUI" selector="zoomMenuSpecifications">zoomMenuSpecifications	^Array 		with: ((self isZoomed ifTrue: [RBCheckedCommand] ifFalse: [RBCommand]) 				named: (#Zoom &lt;&lt; #browser &gt;&gt; 'Zoom')				description: (#Zoom &lt;&lt; #browser &gt;&gt; 'Zoom')				action: [self toggleZoom]				receiver: #yourself)</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>events</category><body package="Browser-BrowserUI" selector="areAllBuffersClean">areAllBuffersClean	^self toolsets allSatisfy: [:each | each isDirty not]</body><body package="Browser-BrowserUI" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	self release.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	self class showToolbarHolder onChangeSend: #updateToolbar to: self.	self findHolder onChangeSend: #changedFindString to: self.	findList := FindList asValue.	toolsetsList := SelectionInList new</body><body package="Browser-BrowserUI" selector="initializeDispatcher">initializeDispatcher	dispatcher := RBActionDispatcher new.	dispatcher browser: self</body><body package="Browser-BrowserUI" selector="initializeOnEnvironment:">initializeOnEnvironment: anEnvironment		| newToolset |	self initializeDispatcher.	self environment: anEnvironment.	navigator dispatcher: dispatcher.	newToolset := self codeModelClass navigator: navigator.	self toolsets add: newToolset.	self currentToolset: newToolset</body><body package="Browser-BrowserUI" selector="release">release	navigator release.	self toolsets ifNotNil: [:ts | ts do: [:each | each release]].	self class showToolbarHolder retractInterestsFor: self.	self findHolder retractInterestsFor: self.	super release</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="addFind">addFind	"This isn't a pretty method, but I want an input field in the toolbar."	| findComposite resizingFindComposite |		[| components toolbar oldComposite |	components := self builder window component components.	components size = 3 ifFalse: [^self].	((toolbar := (components at: 2) component) isKindOf: ToolBar) ifFalse: [^self].	oldComposite := builder composite.	builder composite: (findComposite := CompositePart new).	self class findWindowSpec decodeAsLiteralArray component collection do: [:each | self builder add: each].	resizingFindComposite := WidgetWrapper on: (BoundedWrapper on: findComposite						in: ((LayoutFrame new)								leftOffset: [toolbar components last bounds right + 10];								leftFraction: 0;								rightOffset: -3;								rightFraction: 1;								topOffset: [(components at: 2) bounds center y - 13];								topFraction: 0;								bottomOffset: [(components at: 2) bounds center y + 13];								bottomFraction: 0)).	self builder window component addWrapper: resizingFindComposite.	(self builder componentAt: #find) widget controller keyboardHook: 			[:event :controller |			event keyValue == Character cr				ifTrue: 					[controller accept.					nil]				ifFalse: [event]].	resizingFindComposite invalidate.	builder composite: oldComposite]			on: Error			do: [:ex | ex return]</body><body package="Browser-BrowserUI" selector="lastSavedPosition:for:">lastSavedPosition: aWindowSpec for: aSymbol	"We use a custom algorithm for browser placement."		^self		bestGuessBrowserPosition:			((self class lastSavedSizeFor: aSymbol) ifNil: [aWindowSpec bounds extent])</body><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	toolsetsList selectionIndexHolder onChangeSend: #currentToolsetChanged to: self.	(builder window)		application: self;		sendWindowEvents: #(#newGraphicsDevice #reopen).	navigator updateNavigator</body><body package="Browser-BrowserUI" selector="postOpenWith:">postOpenWith: aBuilder		super postOpenWith: aBuilder.	self addFind.	self updateToolbar.	self currentToolset updateDisplay</body><body package="Browser-BrowserUI" selector="preBuildWith:">preBuildWith: aBuilder	aBuilder		subCanvasAt: #NavigatorTool		at: #windowSpec		put: navigator spec.	aBuilder		subCanvasAt: #CodeModelSubcanvas		at: #windowSpec		put: (self currentToolset class perform: self currentToolset windowSpecMethod).	^super preBuildWith: aBuilder</body><body package="Browser-BrowserUI" selector="showFind:">showFind: aBoolean	| widgets |	widgets := #(#findLabel #find).	aBoolean ifTrue: [self showAll: widgets] ifFalse: [self hideAll: widgets]</body><body package="Browser-BrowserUI" selector="subcanvases">subcanvases	^super subcanvases , self toolsets copyWith: navigator</body><body package="Browser-BrowserUI" selector="updateToolbar">updateToolbar	self showFind: self class showToolbar.	self builder ifNotNil: [:bd | bd window toolbarVisible: self class showToolbar].	(self widgetAt: #toolbarMenuHolder)		ifNotNil: [:toolbar | toolbar enableAllButtons]</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>private</category><body package="Browser-BrowserUI" selector="bufferChangeRequest">bufferChangeRequest	self currentToolset state: navigator getState.	^true</body><body package="Browser-BrowserUI" selector="buildNewMenu">buildNewMenu	self builder window menuBar menuChannel: self menuBar</body><body package="Browser-BrowserUI" selector="codeModelClass">codeModelClass	^CodeModel</body><body package="Browser-BrowserUI" selector="currentToolsetChanged">currentToolsetChanged	| buffer |	buffer := self currentToolset.	buffer isNil ifTrue: [^self].	self toolsets do: [:each | each lock].	buffer unlock.	navigator updateWindowLabel.	self installSubcanvasIn: #codeTool using: buffer.	self isZoomed = self codeTool isZoomed ifFalse: [self toggleZoom].	buffer takeFocus.	self buildNewMenu</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="findHolder">findHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^findHolder isNil		ifTrue:			[findHolder := String new asValue]		ifFalse:			[findHolder]</body><body package="Browser-BrowserUI" selector="findList">findList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^findList isNil		ifTrue:			[findList := List new asValue]		ifFalse:			[findList]</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>interface closing</category><body package="Browser-BrowserUI" selector="requestForWindowClose">requestForWindowClose	self suspendFindWidgetWhile: [super requestForWindowClose ifFalse: [^false]].	(builder isNil or: [builder window isOpen not]) ifTrue: [^true].	self toolsets size &gt; 1 ifTrue:		[(self confirm: (#MultipleViewsExistExitAnyway &lt;&lt; #browser						&gt;&gt; 'Multiple views exist.&lt;n&gt;Exit anyway?') expandMacros)			ifFalse: [^false]].	self areAllBuffersClean ifTrue: [^true].	^self confirm: (#ModifiedViewsExistsExitAnyway &lt;&lt; #browser				&gt;&gt; 'Modified views exists.&lt;n&gt;Exit anyway?') expandMacros</body><body package="Browser-BrowserUI" selector="suspendFindWidgetWhile:">suspendFindWidgetWhile: aBlock	| findCombo |	findCombo := (self widgetAt: #find) ifNil: [^aBlock value].	findCombo controller autoAccept: false.	^aBlock ensure: [findCombo controller autoAccept: true]</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>opening placement algorithm</category><body package="Browser-BrowserUI" selector="bestGuessBrowserPosition:">bestGuessBrowserPosition: anExtent	"The algorithm for determining where to place a new window of size anExtent is a tiered approach embodied in a number of different sub algorithms. We attempt to infer different scenarios and go down those paths. The first thing we do is determine which browsers are open and in what current order."		| browserWindows lastBox |	browserWindows := self class stackedBrowserWindows.	"There are no browsers open, use an algorithm appropriate for that situation."	browserWindows isEmpty		ifTrue: [^self firstBrowserOpeningPosition: anExtent].	"If at least one is open, we can look to see if we can place a browser along side another browser when there are no overlaps. This is most likely to be possible when running with ginormous monitors and/or smaller browser windows."	(self lookForHoleOfSize: anExtent toOpenBrowserAmongst: browserWindows)		ifNotNil: [:point | ^point].	lastBox := browserWindows removeLast displayBox.	"If only one other is open, our placement opportunities are pretty limited."	browserWindows isEmpty		ifTrue: [^self secondBrowserOpeningPositionFrom: lastBox].	"At this point, we've got multiple windows open, and no clean holes to put the new one in, invoke an algorithm that uses the centerpoints of the last two used browsers."	^(self		browserOpeningCenterBetween: lastBox center		and: browserWindows last displayBox center) - anExtent half</body><body package="Browser-BrowserUI" selector="browserOpeningCenterBetween:and:">browserOpeningCenterBetween: firstCenter and: secondCenter	"Given the two most recent browser placements, place the 3rd so that it represents an (almost) equilateral triangle with the first two, this makes a nice pleasing pattern. Choose the solution that tends to the center. The reason we go to an _almost_ equilateral triangle, is that once the triangle of centerpoints contains the screen center, continued opens will occupy the same 3 positions. So we skew angle slightly to avoid this (thus the 20 degree bias between the two solutions."		| delta midpoint b a r screenBox |	screenBox := Screen default bounds.	midpoint := (firstCenter constrainedBy: screenBox)		midpoint: (secondCenter constrainedBy: screenBox).	delta := midpoint - firstCenter.	r := delta r * 3.0 sqrt max: 35 "maintain a minimum displacement of 35".	a := midpoint		+			(Point				r: r				theta: delta theta - 100.0 degreesToRadians) rounded.	b := midpoint		+			(Point				r: delta r * 3.0 sqrt				theta: delta theta + 80.0 degreesToRadians) rounded.	^(a dist: screenBox center) &lt; (b dist: screenBox center)		ifTrue: [a]		ifFalse: [b]</body><body package="Browser-BrowserUI" selector="firstBrowserOpeningPosition:">firstBrowserOpeningPosition: anExtent	"If there is a launcher place the window close to the browse buttons. This represents the case where the launcher and no other browser is open. If there is none, just open the window centered."		Screen default		allScheduledWindowsDo:			[:each | 			(each isOpen and: [each application isKindOf: VisualLauncher])				ifTrue: [^each displayBox origin + (100 @ 80)]].	^Screen default bounds center - anExtent half</body><body package="Browser-BrowserUI" selector="lookForHoleOfSize:toOpenBrowserAmongst:">lookForHoleOfSize: anExtent toOpenBrowserAmongst: aCollectionOfWindows	"Look to see if we can edge align a rectangle of size anExtent without overlapping any other browser windows. Provide some padding (the 5 and 20 constants) to make room for at least some window decoration."		| occupiedRectangles testBlock |	(anExtent x &lt; Screen default bounds width half		or: [anExtent y &lt; Screen default bounds height half]) ifFalse: [^nil].	occupiedRectangles := aCollectionOfWindows		collect: [:each | each displayBox].	occupiedRectangles		do:			[:each | 			testBlock := [:x | 			(occupiedRectangles				anySatisfy: [:rect | rect intersects: (x @ each top extent: anExtent)])				ifFalse: [^x @ each top]].			(each left - anExtent x - 5 to: 5 by: -1) do: testBlock.			(each right + 5 to: Screen default bounds right - anExtent x - 5) do:					testBlock.			testBlock := [:y | 			(occupiedRectangles				anySatisfy: [:rect | rect intersects: (each left @ y extent: anExtent)])				ifFalse: [^each left @ y]].			(each top - anExtent y - 5 to: 20 by: -1) do: testBlock.			(each bottom + 20 to: Screen default bounds bottom - anExtent y - 5) do:					testBlock].	^nil</body><body package="Browser-BrowserUI" selector="secondBrowserOpeningPositionFrom:">secondBrowserOpeningPositionFrom: aFirstRectangle	"Simply transpose across the center of the screen, maintain a minimal displacement."		| displacement |	displacement := Screen default bounds center - aFirstRectangle center.	^aFirstRectangle origin		+			(Point				r: (displacement r max: 35)				theta: displacement theta) rounded</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changeRequest">changeRequest	"The receiver wants to change; check with all dependents that it is OK."	^super changeRequest and: [navigator changeRequest]</body><body package="Browser-BrowserUI" selector="changedFindString">changedFindString	| findString list |	self changeRequest ifFalse: [^self].	findString := self findHolder value.	findString isEmpty ifTrue: [^self].	list := self findList value.	list remove: findString ifAbsent: [].	list addFirst: findString.	list size &gt; 20 ifTrue: [list removeLast].	self showWaitCursorWhile: [navigator find: findString]</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="dynamicMenuItemsFrom:">dynamicMenuItemsFrom: aMenuItem	"Hack the dynamic menus to have shortcuts. Not pretty, but works."	| items |	items := super dynamicMenuItemsFrom: aMenuItem.	aMenuItem nameKey = #'Zoom Specifications'		ifTrue: 			[items isEmpty				ifFalse: 					[(items first)						shortcutModifiers: InputState altMask;						shortcutKeyCharacter: $z].			^items].	aMenuItem nameKey = #Buffers		ifTrue: 			[1 to: (items size min: 9)				do: 					[:i |					(items at: i)						shortcutModifiers: InputState altMask;						shortcutKeyCharacter: (Character value: $0 asInteger + i)].			^items].	^items</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>obsolete</category><body package="Browser-BrowserUI" selector="changedBuffer">changedBuffer	^self currentToolsetChanged</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>browsing</category><body package="Browser-BrowserUI" selector="browseImplementors">browseImplementors		| searchString |	searchString := IncrementalSearchDialog		requestMethodSelector:			#EnterAMethodNameC &lt;&lt; #browser &gt;&gt; 'Enter a method name:'.	(searchString isNil or: [searchString isEmpty]) ifTrue: [^self].	self		showWaitCursorWhile:			[self class				openOnEnvironment:					(self environment implementorsMatching: searchString)]</body><body package="Browser-BrowserUI" selector="browseStringMatches">browseStringMatches	| searchString |	searchString := self request: (#EnterAStringToSearchForEGBrowser &lt;&lt; #browser &gt;&gt; 'Enter a string search for ("*browser*"):').	(searchString isNil or: [searchString isEmpty]) ifTrue: [^self].	self showWaitCursorWhile: 			[self class openOnEnvironment: (self environment matches: searchString)]</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="showToolbar">showToolbar	^self showToolbarHolder value</body><body package="Browser-BrowserUI" selector="showToolbar:">showToolbar: aBoolean 	"self showToolbar: false"	"self showToolbar: true"	self showToolbarHolder value: aBoolean</body><body package="Browser-BrowserUI" selector="showToolbarHolder">showToolbarHolder	^showToolbarHolder isNil		ifTrue: [showToolbarHolder := true asValue]		ifFalse: [showToolbarHolder]</body><body package="Browser-BrowserUI" selector="stackedBrowserWindows">stackedBrowserWindows		| browserWindows stackedWindows |	stackedWindows := (Screen default queryStackingOrder		collect: [:each | Window registry at: each]) reject: [:each | each isNil].	browserWindows := (stackedWindows		select: [:each | each application isKindOf: self class])		asOrderedCollection.	^browserWindows</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser class</class-id> <category>private</category><body package="Browser-BrowserUI" selector="browserEnvironmentClass">browserEnvironmentClass	^BrowserEnvironment</body><body package="Browser-BrowserUI" selector="navigatorStateClass">navigatorStateClass	^NavigatorState</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser class</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="open">open	^self openOnEnvironment: self browserEnvironmentClass new</body><body package="Browser-BrowserUI" selector="openOnEnvironment:">openOnEnvironment: anEnvironment		^self		openOnEnvironment: anEnvironment		state: self navigatorStateClass new		hierarchy: false</body><body package="Browser-BrowserUI" selector="openOnEnvironment:state:hierarchy:">openOnEnvironment: anEnvironment state: aNavigatorState hierarchy: aBoolean	| browser |	browser := self onEnvironment: anEnvironment.	browser open.	aNavigatorState hasSelection		ifTrue: [browser navigator setState: aNavigatorState].	browser navigator changed.	aBoolean ifTrue: [browser navigator beHierarchy].	^browser</body><body package="Browser-BrowserUI" selector="openOnEnvironment:withSelection:">openOnEnvironment: aBrowserEnvironment withSelection: aNavigatorState		^self openOnEnvironment: aBrowserEnvironment state: aNavigatorState		hierarchy: false</body><body package="Browser-BrowserUI" selector="openWithSelection:">openWithSelection: aNavigatorState	^self openOnEnvironment: self browserEnvironmentClass new		withSelection: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="onEnvironment:">onEnvironment: anEnvironment		| browser |	browser := self new.	browser initializeOnEnvironment: anEnvironment.	^browser</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="currentPackage:">currentPackage: aPackage	currentPackageNameHolder value: (aPackage				ifNil: ['']				ifNotNil: [aPackage name asText allBold , ' (current)'])</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	(self widgetAt: #viewPort) ifNotNil: [:widget | widget flushParts].	self selector notNil		ifTrue: [self updateOverridesForMethod]		ifFalse: 			[self sharedVariableName notNil				ifTrue: [self updateOverridesForSharedVariable]				ifFalse: [self updateOverridesForClassOrNameSpace]].	overrideList list notEmpty		ifTrue: 			[overrideList selection: overrideList list first.			self updateOverrideLabel]</body><body package="Browser-BrowserUI" selector="updateOverrideLabel">updateOverrideLabel	overrideList list size = 1		ifTrue: 			[self				hide: #multipleOverrideNameCombo;				show: #singleOverrideNameField]		ifFalse: 			[self				hide: #singleOverrideNameField;				show: #multipleOverrideNameCombo]</body><body package="Browser-BrowserUI" selector="updateOverridesForClassOrNameSpace">updateOverridesForClassOrNameSpace	| object overrides |	object := self classOrNameSpace.	overrides := object				ifNotNil: [Override overridesForClassOrNameSpace: object].	overrideList list: (overrides ifNil: [#()]) asList.	self		currentPackage: (object ifNotNil: [object fullyQualifiedReference package])</body><body package="Browser-BrowserUI" selector="updateOverridesForMethod">updateOverridesForMethod	| selector class overrides |	class := self selectedClass.	selector := self selector.	overrides := Override overridesForSelector: selector class: class.	overrideList list: (overrides ifNil: [#()]) asList.	self currentPackage: self definition package</body><body package="Browser-BrowserUI" selector="updateOverridesForSharedVariable">updateOverridesForSharedVariable	| shareName scope overrides |	scope := self classOrNameSpace.	shareName := self sharedVariableName.	overrides := Override overridesForDataKey: shareName in: scope.	overrideList list: (overrides ifNil: [#()]) asList.	self currentPackage: (Store.Registry containingPackageForDataKey: shareName				symbol: scope absoluteSymbol)</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="adoptOverrideButton">adoptOverrideButton	| button |	button := ClickableGraphic new.	button idleGraphic: BrowserIcons adoptOverrideIdle.	button when: Clicked send: #adoptOverride to: self.	button tooltip: [self adoptOverrideTooltipText].	^button</body><body package="Browser-BrowserUI" selector="adoptOverrideTooltipText">adoptOverrideTooltipText	^#AdoptOverrideTooltipText &lt;&lt; #IDE		&gt;&gt; 'Replace inactive variant (left side) with the active override (right side), moving the active variant to the original package.'</body><body package="Browser-BrowserUI" selector="comparisonViewFor:">comparisonViewFor: anOverride	| view decorator |	view := SideBySideTextComparisonView new leftText: anOverride text				rightText: anOverride systemText.	decorator := BorderDecorator on: view.	decorator noHorizontalScrollBar.	^decorator</body><body package="Browser-BrowserUI" selector="currentPackageNameHolder">currentPackageNameHolder	^currentPackageNameHolder</body><body package="Browser-BrowserUI" selector="overrideList">overrideList	^overrideList</body><body package="Browser-BrowserUI" selector="overrideListNames">overrideListNames	^[overrideList list collect: [:each | self inactivePackageText: each]]</body><body package="Browser-BrowserUI" selector="removeOriginalButton">removeOriginalButton	| button |	button := ClickableGraphic new.	button idleGraphic: BrowserIcons removeOverrideIdle.	button when: Clicked send: #removeOriginal to: self.	button tooltip: [self removeOriginalTooltipText].	^button</body><body package="Browser-BrowserUI" selector="removeOriginalTooltipText">removeOriginalTooltipText	^#RemoveOriginalTooltipText &lt;&lt; #IDE		&gt;&gt; 'Remove the overridden method (shown on left).'</body><body package="Browser-BrowserUI" selector="removeOverrideButton">removeOverrideButton	| button |	button := ClickableGraphic new.	button idleGraphic: BrowserIcons removeOverrideIdle.	button when: Clicked send: #removeOverride to: self.	button tooltip: [self removeOverrideTooltipText].	^button</body><body package="Browser-BrowserUI" selector="removeOverrideTooltipText">removeOverrideTooltipText	^#RemoveOverrideTooltipText &lt;&lt; #IDE		&gt;&gt; 'Remove the overriding method (shown on right). This will essentially restore the original method.'</body><body package="Browser-BrowserUI" selector="selectOverrideNamed:">selectOverrideNamed: aText	self selectedOverrideHolder value: (overrideList list				detect: [:each | (self inactivePackageText: each) = aText])</body><body package="Browser-BrowserUI" selector="selectedOverrideHolder">selectedOverrideHolder	^overrideList selectionHolder</body><body package="Browser-BrowserUI" selector="selectedOverrideNamePlug">selectedOverrideNamePlug	^(PluggableAdaptor on: self selectedOverrideHolder)		getBlock: [:m | m value ifNil: [''] ifNotNil: [self inactivePackageText: m value]]		putBlock: [:m :v | self selectOverrideNamed: v]		updateBlock: [:m :a :p | true]</body><body package="Browser-BrowserUI" selector="viewPort">viewPort	| port |	port := PartPort new.	port selectionValueModel: self selectedOverrideHolder.	port partCreationBlock: [:override | self comparisonViewFor: override].	^port</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="adoptOverride">adoptOverride	self navigator performChangeWithUpdate: self override adoptChangeObject</body><body package="Browser-BrowserUI" selector="removeOriginal">removeOriginal	self navigator		performChangeWithUpdate: (RemoveOverrideChange for: self override)</body><body package="Browser-BrowserUI" selector="removeOverride">removeOverride	self navigator		performChangeWithUpdate: (RestoreOverrideChange for: self override)</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="inactivePackageText:">inactivePackageText: anOverride	^(anOverride componentName , ' (inactive)') asText		emphasizeAllWith: (Array with: #bold with: #color -&gt; ColorValue red)</body><body package="Browser-BrowserUI" selector="override">override	^overrideList selection</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	self updateContents.	^overrideList list isEmpty not</body><body package="Browser-BrowserUI" selector="tabName">tabName	^(#Overridden &lt;&lt; #IDE) asText emphasizeAllWith: #color -&gt; ColorValue red</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	overrideList := SelectionInList new.	currentPackageNameHolder := Text new asValue</body></methods><methods><class-id>Refactory.Browser.VisualViewer</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="menu">menu	"Return a menu that can be placed into a window. Menus that use symbol must be converted to use	blocks since they will have a different model when they are placed into a window."	^(Menu new)		addItemLabel: (#_EditResourceDots &lt;&lt; #browser &gt;&gt; '&amp;Edit Resource...') value: [self editSpec];		addLine;		addItemLabel: (#Re_fresh &lt;&lt; #browser &gt;&gt; 'Re&amp;fresh') value: [self updateDisplay];		yourself</body></methods><methods><class-id>Refactory.Browser.VisualViewer</class-id> <category>private</category><body package="Browser-BrowserUI" selector="editorClass">editorClass	self subclassResponsibility</body><body package="Browser-BrowserUI" selector="method">method	| class selector |	class := self selectedClass.	selector := self selector.	class isNil | selector isNil ifTrue: [^nil].	class := class whichClassIncludesSelector: selector.	class isNil ifTrue: [^nil].	^class compiledMethodAt: selector</body><body package="Browser-BrowserUI" selector="promptToLoadUIPainter">promptToLoadUIPainter	(Dialog		choose: #LoadUIPainterToolsQ &lt;&lt; #IDE &gt;&gt; 'Load UIPainter Tools?'		labels: (Array with: #Load &gt;&gt; 'Load' &lt;&lt; #IDE				with: #Cancel &gt;&gt; 'Cancel' &lt;&lt; #IDE)		values: #(true false)		default: true) ifTrue: [Parcel loadParcelByName: 'UIPainter']</body><body package="Browser-BrowserUI" selector="resourceType">resourceType	^self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.VisualViewer</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="editSpec">editSpec	| editorClass method |	method := self method.	method isNil ifTrue: [^self].	(editorClass := self editorClass) ifNil: [self promptToLoadUIPainter].	(editorClass := self editorClass) ifNil: [^self].	editorClass new openOnClass: self nonMetaClass andSelector: self selector</body></methods><methods><class-id>Refactory.Browser.VisualViewer</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	| method |	codeModel selector ifNil: [^false].	method := codeModel methodClass		compiledMethodAt: codeModel selector		ifAbsent: [^false].	^method resourceType = self resourceType</body><body package="Browser-BrowserUI" selector="name">name	^#Visual &lt;&lt; #browser</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#Visual &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.MenuViewer</class-id> <category>private</category><body package="Browser-BrowserUI" selector="editorClass">editorClass	^#{MenuEditor} valueOrDo: [nil]</body><body package="Browser-BrowserUI" selector="initializeMenu:">initializeMenu: aMenu 	aMenu 		values: (aMenu values collect: [:each | [self selection value: each]]).	aMenu menuItems do: 			[:each | 			each submenu notNil 				ifTrue: [each submenu: (self initializeMenu: each submenu)]].	^aMenu</body><body package="Browser-BrowserUI" selector="resourceType">resourceType	^#menu</body></methods><methods><class-id>Refactory.Browser.MenuViewer</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="selection">selection	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selection isNil		ifTrue:			[selection := nil asValue]		ifFalse:			[selection]</body></methods><methods><class-id>Refactory.Browser.MenuViewer</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="menuResource">menuResource	^	[| class selector method |	class := self selectedClass.	selector := self selector.	selector notNil 		ifTrue: 			[method := class compiledMethodAt: selector ifAbsent: [nil].			(method notNil and: [method resourceType == #menu]) 				ifTrue: 					[[self initializeMenu: (self nonMetaClass perform: selector)] on: Error						do: [:ex | ex return: Menu new]]				ifFalse: [Menu new]]		ifFalse: [Menu new]]</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize		windowLabel := ''.	super initialize</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>private</category><body package="Browser-BrowserUI" selector="browseEnvironment:">browseEnvironment: aBrowserEnvironment	self		browseEnvironment: aBrowserEnvironment		ifEmptyDisplay: #NoResultsToBrowse &lt;&lt; #browser &gt;&gt; 'No results to browse'</body><body package="Browser-BrowserUI" selector="browseEnvironment:ifEmptyDisplay:">browseEnvironment: aBrowserEnvironment ifEmptyDisplay: aMessage	aBrowserEnvironment isEmpty		ifTrue: [Dialog warn: aMessage]		ifFalse: [aBrowserEnvironment openEditor]</body><body package="Browser-BrowserUI" selector="browserClass">browserClass 	^RefactoringBrowser</body><body package="Browser-BrowserUI" selector="filterFilename:">filterFilename: fName	^Filename defaultClass suggest: (Filename defaultClass filterSeps: fName)</body><body package="Browser-BrowserUI" selector="hardcopyStream:">hardcopyStream: aStream 	self showWaitCursorWhile: [aStream contents asText asParagraph hardcopy]</body><body package="Browser-BrowserUI" selector="openBrowserOnEnvironment:">openBrowserOnEnvironment: env	^self browserClass openOnEnvironment: env withSelection: self getState</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>accessing-browser</category><body package="Browser-BrowserUI" selector="beHierarchy">beHierarchy	"Override in subclass to implement a hierarchy view."</body><body package="Browser-BrowserUI" selector="spec">spec	^self class perform: self windowSpecSymbol</body><body package="Browser-BrowserUI" selector="windowSpecSymbol">windowSpecSymbol	self class navigatorSpecBlocks do: 			[:each | 			| spec |			spec := each value: self.			spec notNil ifTrue: [^spec]].	^#systemWindowSpec</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changed">changed	self updateWindowLabel.	^super changed</body><body package="Browser-BrowserUI" selector="defaultWindowLabel">defaultWindowLabel		| label |	label := self environment label.	label asString isEmpty		ifTrue: [label := #Packages &lt;&lt; #browser &gt;&gt; 'Packages'].	^label asString</body><body package="Browser-BrowserUI" selector="updateWindowLabel">updateWindowLabel	| window |	self builder isNil ifTrue: [^self].	window := self builder window.	window isNil ifTrue: [^self].	(windowLabel = window label or: [window label asString isEmpty]) 		ifFalse: [self environment label: window label].	windowLabel := self state hasSelection 				ifTrue: 					[windowLabel := self environment label.					windowLabel asString notEmpty ifTrue: [windowLabel := windowLabel asString , ' - '].					windowLabel asString , self state printString]				ifFalse: [self defaultWindowLabel].	window label: windowLabel</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>browsing</category><body package="Browser-BrowserUI" selector="browseGlobalImplementors">browseGlobalImplementors	self browseGlobalImplementorsOf: self selector</body><body package="Browser-BrowserUI" selector="browseGlobalImplementorsOf:">browseGlobalImplementorsOf: aSelector 	self showWaitCursorWhile: 		[self 			browseEnvironment:				(BrowserEnvironment new implementorsOf: aSelector)]</body><body package="Browser-BrowserUI" selector="browseLocalImplementors">browseLocalImplementors	self browseLocalImplementorsOf: self selector</body><body package="Browser-BrowserUI" selector="browseLocalImplementorsOf:">browseLocalImplementorsOf: aSelector 	self showWaitCursorWhile: 		[self browseEnvironment:			(self environment implementorsOf: aSelector)]</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>private-class</category><body package="Browser-BrowserUI" selector="fileOutGlobal">fileOutGlobal	| theGlobals fileName fileManager |	theGlobals := self selectedGlobals.	fileName := Dialog requestNewFileName: (#FileOutOn &lt;&lt; #browser &gt;&gt; 'File out on')				default: (self filterFilename: ((#x1sst &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;.st')			expandMacrosWith: theGlobals first name)).	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	theGlobals do: [:each | each fileOutSourceOn: fileManager]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="printOutClass">printOutClass	"Print the class."	| stream |	stream := TextStream on: (String new: 1000).	self nonMetaClasses do: [:each | each printOutOn: stream].	self hardcopyStream: stream</body><body package="Browser-BrowserUI" selector="spawnClass">spawnClass	self showWaitCursorWhile: 			[| allClasses |			allClasses := OrderedCollection withAll: self nonMetaClasses.			allClasses addAll: (self nonMetaClasses collect: [:each | each class]).			self 				openBrowserOnEnvironment: (BrowserEnvironment new forClasses: allClasses)]</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>private-selector</category><body package="Browser-BrowserUI" selector="fileNameForSelectors">fileNameForSelectors	| sel |	sel := self definition isForSharedVariable 				ifTrue: 					[self definition classOrNameSpace name , '-' , self definition variableName]				ifFalse: 					[self selectedClass name , '-' , (self selector isKeyword 								ifTrue: 									[(self selector keywords inject: (WriteStream on: (String new: 20))										into: 											[:sum :each | 											sum												nextPutAll: (each copyFrom: 1 to: each size - 1);												yourself]) 											contents]								ifFalse: [self selector])].	^Dialog requestNewFileName: (#FileOutAs &lt;&lt; #browser &gt;&gt; 'File out as')		default: (self filterFilename: sel , '.st')</body><body package="Browser-BrowserUI" selector="fileOutMessage">fileOutMessage	| fileName fileManager |	fileName := self fileNameForSelectors.	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	self definitions do: 			[:each | 			each isForSharedVariable 				ifTrue: 					[fileManager fileOutSharedVariables: (Array with: each variableName)						for: each classOrNameSpace]				ifFalse: 					[fileManager fileOutMessages: (Array with: each selector)						for: each implementingClass]]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="printOutMessage">printOutMessage	| stream |	stream := TextStream on: (String new: 1000).	self definitions 		do: [:each | each implementingClass printMethod: each selector on: stream].	self hardcopyStream: stream</body><body package="Browser-BrowserUI" selector="spawnMethod">spawnMethod	self showWaitCursorWhile: 			[self 				openBrowserOnEnvironment: (SelectorEnvironment onMethods: self definitions)]</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>store-packages</category><body package="Browser-BrowserUI" selector="loadPundle:">loadPundle: pundle	| imagePundle existingImagePundle needsReconcile |	existingImagePundle := pundle getImagePundle.	needsReconcile := existingImagePundle notNil				and: [(existingImagePundle allDatabases includes: pundle dbIdentifier) not].		[needsReconcile ifTrue: [existingImagePundle reconcileWithDb: pundle].	imagePundle := pundle loadSrc]			withStoreFeedbackOn: self mainWindow.	^imagePundle</body><body package="Browser-BrowserUI" selector="storeComparePundleVersion">storeComparePundleVersion	| pairs storeVersion originalTimestamp |	self dbRegistry doIfOnlineImage: 			[| selectedPundles |			selectedPundles := self pundles.			pairs := selectedPundles collect: 							[:each |							storeVersion := each selectStoreVersion ifNil: [^self].							originalTimestamp := each storeTracePackage ifNotNil: #timestamp.							(originalTimestamp notNil								and: [originalTimestamp &lt; storeVersion timestamp])									ifTrue: [Array with: each with: storeVersion]									ifFalse: [Array with: storeVersion with: each]].			self comparisonBrowserClass compareFromAll: (pairs collect: #first)				toAll: (pairs collect: #last)]</body><body package="Browser-BrowserUI" selector="storeFileoutPundle">storeFileoutPundle	self pundles do: [:each | each fileOut]</body><body package="Browser-BrowserUI" selector="storeLoadPundle">storeLoadPundle	| session |	self changeRequest ifFalse: [^self].	self dbRegistry doIfOnlineImage:		[session := Store.Glorp.StoreLoginFactory currentStoreSession.		(self pundles asSortedCollection: [:a :b | a name &lt;= b name]) do:			[:each | | version |			version := each selectStoreVersionIn: session.			version isNil ifTrue: [^self].			version canLoadNewOrReplaceExistingVersion ifTrue:				[(self loadPundle: version) notNil ifTrue: [self refreshLists]]]]</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>private-protocol</category><body package="Browser-BrowserUI" selector="fileOutMethodProtocol">fileOutMethodProtocol	| fileManager fileName |	fileName := Dialog requestNewFileName: (#FileOutAs &lt;&lt; #browser &gt;&gt; 'File out as')				default: (self 						filterFilename: self objectName , '-' , self protocol , '.st').	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	self protocols do: 			[:each | 			fileManager 				fileOutMessages: (self environment selectorsFor: each in: self selectedClass)				for: self selectedClass]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="fileOutProtocol">fileOutProtocol	self isData 		ifTrue: [self fileOutVariableProtocol]		ifFalse: [self fileOutMethodProtocol]</body><body package="Browser-BrowserUI" selector="fileOutVariableProtocol">fileOutVariableProtocol	| fileManager fileName |	fileName := Dialog requestNewFileName: #FileOutAs &lt;&lt; #browser &gt;&gt; 'File out as'				default: (self 						filterFilename: self objectName , '-' , self protocol , '.st').	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	self protocols do: 			[:each | 			fileManager fileOutSharedVariables: (self environment sharedVariablesFor: each						in: self classOrNameSpace)				for: self classOrNameSpace]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="spawnProtocol">spawnProtocol	self showWaitCursorWhile: 			[| class |			class := self selectedClass.			self openBrowserOnEnvironment: (self environment 						forClass: (class ifNil: [self classOrNameSpace])						protocols: self protocols)]</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>store-shared variables</category><body package="Browser-BrowserUI" selector="sharedVariableBinding">sharedVariableBinding	^self classOrNameSpace bindingFor: self sharedVariableName</body><body package="Browser-BrowserUI" selector="storeCompareSharedVariableWithVersion">storeCompareSharedVariableWithVersion	self storeCompareBindingWithVersion: self sharedVariableBinding</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>store-methods</category><body package="Browser-BrowserUI" selector="storeCompareMethodWithVersion">storeCompareMethodWithVersion	self dbRegistry doIfOnlineImage: 			[| trace |			trace := self storeMethodClass 						selectVersionNamed: self selector						in: self methodClass instanceBehavior absoluteName						meta: self methodClass isMeta.			trace isNil ifTrue: [^self].			self comparisonBrowserClass compareMethod: self storeMethod toMethod: trace]</body><body package="Browser-BrowserUI" selector="storeMethod">storeMethod	^self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator</class-id> <category>store-classes</category><body package="Browser-BrowserUI" selector="storeClass">storeClass	^self storeRegistry defClassModelForClassSymbol: state objectName asSymbol</body><body package="Browser-BrowserUI" selector="storeCompareBindingWithVersion:">storeCompareBindingWithVersion: binding 	self dbRegistry doIfOnlineImage: 			[| trace imageObject |			binding isForGeneral 				ifTrue: 					[trace := self storeSharedVariableClass selectVersionNamed: binding key								inOwner: (Root whoDefinesBinding: binding) absoluteName.					imageObject := self sharedVariableDescriptorClass fromDataKey: binding key								owner: (Root whoDefinesBinding: binding)]				ifFalse: 					[binding isForClass 						ifTrue: 							[trace := self storeClassClass 										selectVersionNamed: binding value name.							imageObject := self classDescriptorClass fromModel: binding value]						ifFalse: 							[trace := self storeNameSpaceClass 										selectVersionNamed: binding value name.							imageObject := self nameSpaceDescriptorClass fromModel: binding value]].			trace isNil ifTrue: [^self].			self comparisonBrowserClass compareClass: imageObject toClass: trace]</body><body package="Browser-BrowserUI" selector="storeCompareWithVersion">storeCompareWithVersion	self storeCompareBindingWithVersion: self selectedBinding</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="classSpecQuery">classSpecQuery	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="defaultSpecQuery">defaultSpecQuery	^[:navigator |	navigator environment useSystemNavigator		ifTrue: [#systemWindowSpec]		ifFalse: [#methodWindowSpec]]</body><body package="Browser-BrowserUI" selector="navigatorSpecBlocks">navigatorSpecBlocks	^Array		with: self classSpecQuery		with: self protocolSpecQuery		with: self defaultSpecQuery</body><body package="Browser-BrowserUI" selector="protocolSpecQuery">protocolSpecQuery		^[:navigator | 	navigator environment useProtocolNavigator		ifTrue: [#protocolWindowSpec]		ifFalse: [nil]]</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="forEnvironment:dispatcher:">forEnvironment: aBrowserEnvironment dispatcher: aRBActionDispatcher 	^(self basicNew)		dispatcher: aRBActionDispatcher;		environment: aBrowserEnvironment;		initialize;		yourself</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-parcels</category><body package="Browser-BrowserUI" selector="parcelLoadParcel">parcelLoadParcel	self changeRequest ifFalse: [^self].	Parcel loadParcelFor: nil.	self refreshLists</body><body package="Browser-BrowserUI" selector="postUnloadParcel">postUnloadParcel	(self confirm: (#RemoveEmptyCategoriesAndPurgeQ &lt;&lt; #browser &gt;&gt; 'Remove empty categories and purge Undeclared?')) 		ifTrue: 			[Cursor execute showWhile: 					[Root allNameSpaces do: [:ns | ns organization removeEmptyCategories].					ClassOrganizer allInstancesDo: [:clo | clo removeEmptyCategories].					Undeclared purgeUnusedBindings]]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>browsing</category><body package="Browser-BrowserUI" selector="browseGlobalInstVarReadersTo:in:">browseGlobalInstVarReadersTo: instVar in: aClass 	self showWaitCursorWhile: 		[self browseEnvironment:			(BrowserEnvironment new instVarReadersTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseGlobalInstVarRefsTo:in:">browseGlobalInstVarRefsTo: instVar in: aClass 	self showWaitCursorWhile: 		[self			browseEnvironment:				(BrowserEnvironment new instVarRefsTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseGlobalInstVarWritersTo:in:">browseGlobalInstVarWritersTo: instVar in: aClass 	self showWaitCursorWhile: 		[self browseEnvironment:			(BrowserEnvironment new instVarWritersTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseGlobalReferencesTo:">browseGlobalReferencesTo: aLiteral 	self showWaitCursorWhile: 		[self browseEnvironment: (BrowserEnvironment new referencesTo: aLiteral)]</body><body package="Browser-BrowserUI" selector="browseGlobalSenders">browseGlobalSenders	self browseGlobalReferencesTo: self selector</body><body package="Browser-BrowserUI" selector="browseHierarchyImplementors">browseHierarchyImplementors	self browseHierarchyImplementorsOf: self selector</body><body package="Browser-BrowserUI" selector="browseHierarchyImplementorsOf:">browseHierarchyImplementorsOf: aSelector 	self showWaitCursorWhile: 		[self browseEnvironment:			((BrowserEnvironment new forClassHierarchy: self nonMetaClass) 				implementorsOf: aSelector)]</body><body package="Browser-BrowserUI" selector="browseHierarchyReferencesTo:">browseHierarchyReferencesTo: aLiteral 	self showWaitCursorWhile: 		[self browseEnvironment:			((BrowserEnvironment new forClassHierarchy: self nonMetaClass) 				referencesTo: aLiteral)]</body><body package="Browser-BrowserUI" selector="browseHierarchySenders">browseHierarchySenders	self browseHierarchyReferencesTo: self selector</body><body package="Browser-BrowserUI" selector="browseInstVarReadersTo:in:">browseInstVarReadersTo: instVar in: aClass 	self showWaitCursorWhile: 		[self browseEnvironment:			(self environment instVarReadersTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseInstVarRefsTo:in:">browseInstVarRefsTo: instVar in: aClass 	self showWaitCursorWhile: 		[self			browseEnvironment: 				(self environment instVarRefsTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseInstVarWritersTo:in:">browseInstVarWritersTo: instVar in: aClass 	self showWaitCursorWhile: 		[self browseEnvironment:			(self environment instVarWritersTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseLocalReferencesTo:">browseLocalReferencesTo: aLiteral 	self showWaitCursorWhile:		[self browseEnvironment:			(self environment referencesTo: aLiteral)]</body><body package="Browser-BrowserUI" selector="browseLocalSenders">browseLocalSenders	self browseLocalReferencesTo: self selector</body><body package="Browser-BrowserUI" selector="browseReferencesTo:">browseReferencesTo: aLiteral 	self showWaitCursorWhile:		[self browseEnvironment:			(self environment referencesTo: aLiteral)]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private</category><body package="Browser-BrowserUI" selector="areAllSelectorsVisibleIn:">areAllSelectorsVisibleIn: protocolSymbol		| selectors pundles |	self showOnlyFiltered ifFalse: [^true].	selectors := BrowserEnvironment new		selectorsFor: protocolSymbol		in: self selectedClass.	(pundles := self pundles) isEmpty ifTrue: [^true].	^selectors		allSatisfy:			[:each | 			pundles				anySatisfy:					[:pundle | 					pundle						includesSelector: each						className: self selectedClass instanceBehavior absoluteName						meta: self selectedClass isMeta]]</body><body package="Browser-BrowserUI" selector="compiledMethod">compiledMethod	"Return the real compiled method associated with the current selection, if there is one."	self methodClass ifNil: [^nil].	self selector ifNil: [^nil].	^self methodClass		compiledMethodAt: self selector		ifAbsent: [nil]</body><body package="Browser-BrowserUI" selector="performChangeWithUpdate:">performChangeWithUpdate: aRefactoryChange 	self performChange: aRefactoryChange.	self refreshLists</body><body package="Browser-BrowserUI" selector="sentSelectors">sentSelectors	| method symbols |	self selector ifNil: [^Array new].	method := self methodClass compiledMethodAt: self selector ifAbsent: [nil].	method ifNil: [^Array new].	symbols := method allSymbolLiterals asSet.	symbols remove: self selector ifAbsent: [].	^symbols asOrderedCollection sorted</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-class</category><body package="Browser-BrowserUI" selector="addClassChangeFromDialog:">addClassChangeFromDialog: aCreateClassDialog		| arguments definition change |	arguments := OrderedCollection new.	arguments		add: (aCreateClassDialog nameSpaceOrDo: [^nil]) unambiguousName;		add: (aCreateClassDialog nameOrDo: [^nil]).	aCreateClassDialog specifiesNilSuperclass		ifTrue: [arguments add: nil]		ifFalse:			[arguments				add:					(aCreateClassDialog superclassOrDo: [^nil]) fullyQualifiedReference						makeUnambiguous].	arguments		add: aCreateClassDialog indexedType;		add: aCreateClassDialog private;		add: aCreateClassDialog instanceVariables;		add: aCreateClassDialog classInstanceVariables;		add: aCreateClassDialog imports.	definition := '&lt;1s&gt; defineClass: #&lt;2s&gt; superclass: &lt;3p&gt; indexedType: #&lt;4s&gt; private: &lt;5p&gt;  instanceVariableNames: ''&lt;6s&gt;'' classInstanceVariableNames: ''&lt;7s&gt;'' imports: ''&lt;8s&gt;'' category: '''''		expandMacrosWithArguments: arguments.	change := AddClassChange definition: definition.	change package: (aCreateClassDialog packageOrDo: [^nil]).	^change</body><body package="Browser-BrowserUI" selector="browseMethodsWithSourceMatching">browseMethodsWithSourceMatching	| env class string |	string := self request: (#EnterStringToSearchFor &lt;&lt; #browser &gt;&gt; 'Enter string to search for').	string isEmpty ifTrue: [^self].	string := '*' , string , '*'.	class := self nonMetaClass.	env := self environment forClasses: (Array with: class with: class class).	self browseEnvironment: (env sourceCodeMatching: string)</body><body package="Browser-BrowserUI" selector="classRefs">classRefs	self browseReferencesTo: self selectedBinding</body><body package="Browser-BrowserUI" selector="classSideNewMethodSource">classSideNewMethodSource	| comment |	comment := #ClassSideNewMethodCommentText &lt;&lt; #browser &gt;&gt; 'Answer a newly created and initialized instance.'.	^'new&lt;n&gt;&lt;t&gt;"&lt;1s&gt;"&lt;n&gt;&lt;n&gt;&lt;t&gt;^super new initialize'		expandMacrosWith: comment expandMacros</body><body package="Browser-BrowserUI" selector="convertToSibling">convertToSibling	| name subclasses newState |	self changeRequest ifFalse: [^self].	name := self request: #EnterNameForNewParentClass &lt;&lt; #browser 						&gt;&gt; 'Enter name for new parent class'.	name isEmpty ifTrue: [^self].	subclasses := self selectSubclassesOf: self nonMetaClass.	subclasses isNil ifTrue: [^self].	self handleError: 			[self performRefactoring: (ChildrenToSiblingsRefactoring 						name: self nonMetaClass environment unambiguousName , '.' , name						class: self nonMetaClass						subclasses: subclasses).			newState := self getState.			newState objectName: name asSymbol.			self updateWithState: newState]</body><body package="Browser-BrowserUI" selector="createAccessorsInNewClass:">createAccessorsInNewClass: aClass	| names |	names := aClass instVarNames.	names isEmpty ifTrue: [^self].	names do:		[:each |		self handleError:			[self performRefactoring: 				(CreateAccessorsForVariableRefactoring					variable: each					class: aClass)]]</body><body package="Browser-BrowserUI" selector="createClassFromDialog:">createClassFromDialog: aCreateClassDialog	| addClassChange class |	addClassChange := self addClassChangeFromDialog: aCreateClassDialog.	addClassChange isNil ifTrue: [^nil].	self performChange: addClassChange.	class := addClassChange definedObject.	aCreateClassDialog shouldCreateAccessors ifTrue:		[self createAccessorsInNewClass: class].	aCreateClassDialog shouldCreateInitializer ifTrue:		[self createInitializerInNewClass: class].	aCreateClassDialog shouldDefineSubclassResponsibilities ifTrue:		[self createSubclassResponsibilityStubsInNewClass: class.		self createSubclassResponsibilityStubsInNewClass: class class].	^class</body><body package="Browser-BrowserUI" selector="createInitializerInNewClass:">createInitializerInNewClass: aClass	| superclassHasInitialize |	superclassHasInitialize := aClass canUnderstand: #initialize.	self performChange: (AddMethodChange				compile: (self initializerMethodSourceFor: aClass						withSuperSend: superclassHasInitialize)				in: aClass				classified: #'initialize-release').	(aClass class whichClassIncludesSelector: #new) == Behavior		ifTrue: 			[self performChange: (AddMethodChange						compile: self classSideNewMethodSource						in: aClass class						classified: #'instance creation')]</body><body package="Browser-BrowserUI" selector="createSubclass">createSubclass	| class |	self changeRequest ifFalse: [^self].	class := self createSubclassOf: self nonMetaClass.	class isNil ifTrue: [^self].	self selectClass: class.	self refreshLists</body><body package="Browser-BrowserUI" selector="createSubclassOf:">createSubclassOf: aClass	| name subclasses category |	name := self requestClassName.	name isNil ifTrue: [^nil].	subclasses := self selectSubclassesOf: aClass.	subclasses isNil ifTrue: [^nil].	category := self nameSpace organization categoryOfElement: aClass name.	^self		handleError:			[self				performRefactoring:					(AddClassRefactoring						addClass: ((self nameSpace) unambiguousName , '.') , name						superclass: aClass						subclasses: subclasses).			self nameSpace				at: name asSymbol				ifAbsent: [nil]]</body><body package="Browser-BrowserUI" selector="createSubclassResponsibilityStubsInNewClass:">createSubclassResponsibilityStubsInNewClass: aClass	| methods |	methods := self subclassResponsibilityMethodsIn: aClass.	methods isEmpty ifTrue: [^self].	methods do:		[:each |		self performChange: 			(AddMethodChange				compile: (self subclassResponsibilityImplementationStubFor: each in: aClass)				in: aClass				classified: each protocol)]</body><body package="Browser-BrowserUI" selector="fileOutClass">fileOutClass	| fileName fileManager |	fileName := Dialog requestNewFileName: (#FileOutOn &lt;&lt; #browser &gt;&gt; 'File out on')				default: (self filterFilename: ((#x1sst &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;.st')			expandMacrosWith: self nonMetaClass name)).	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	self nonMetaClasses do: [:each | each fileOutSourceOn: fileManager]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="globalClassRefs">globalClassRefs	self browseGlobalReferencesTo: self selectedBinding</body><body package="Browser-BrowserUI" selector="initializeBindings">initializeBindings	self initializeVariables: (self nonMetaClasses 				collect: [:each | each fullyQualifiedReference])</body><body package="Browser-BrowserUI" selector="initializerMethodSourceFor:withSuperSend:">initializerMethodSourceFor: aClass withSuperSend: aBoolean	| comment bodyStream |	comment := #InitializerMethodCommentText &lt;&lt; #browser &gt;&gt; 'Initialize a newly created instance. This method must answer the receiver.'.	bodyStream := (String new: 100) writeStream.	aClass instVarNames isEmpty		ifTrue:			[bodyStream nextPutAll:				('"&lt;1s&gt;"&lt;n&gt;&lt;t&gt;' expandMacrosWith:					#ReplaceInitializersCommentText &lt;&lt; #browser &gt;&gt; 				' *** Replace this comment with the appropriate initialization code *** ')]		ifFalse:			[bodyStream nextPut: $"; nextPutAll: 				(#UseInitializersBelowCommentText &lt;&lt; #browser &gt;&gt;				' *** Edit the following to properly initialize instance variables ***') 					asString.			bodyStream nextPut: $"; crtab.			aClass instVarNames				do: [:each | 	bodyStream nextPutAll: each; nextPutAll: ' := nil.'; crtab].			bodyStream nextPut: $"; nextPutAll:				(#EndOfInitializationCommentText &lt;&lt; #browser &gt;&gt; 				' *** And replace this comment with additional initialization code *** ')					asString.			bodyStream nextPut: $"; crtab].	^'initialize&lt;n&gt;&lt;t&gt;"&lt;1s&gt;"&lt;n&gt;&lt;n&gt;&lt;t&gt;&lt;2s&gt;&lt;3s&gt;^self'		expandMacrosWith: comment expandMacros		with: (aBoolean ifTrue: ['super initialize.&lt;n&gt;&lt;t&gt;'] ifFalse: ['']) expandMacros		with: bodyStream contents</body><body package="Browser-BrowserUI" selector="inspectAllInstances">inspectAllInstances	(self nonMetaClass allInstancesWeakly: true) inspect</body><body package="Browser-BrowserUI" selector="mostPopularNameSpaceIn:">mostPopularNameSpaceIn: aPackage	| classesByNameSpace |	aPackage ifNil: [^nil].	aPackage environment ifNotNil: [:packageScope | ^packageScope].	classesByNameSpace := aPackage allDefinedClasses		groupedBy: [:each | each environment].	classesByNameSpace isEmpty		ifTrue:			[^aPackage definedNameSpaces size = 1				ifTrue: [aPackage definedNameSpaces first]				ifFalse: [nil]].	^(classesByNameSpace associations		fold:			[:a :b | 			a value size &gt;= b value size				ifTrue: [a]				ifFalse: [b]]) key</body><body package="Browser-BrowserUI" selector="moveObjectsToNameSpace">moveObjectsToNameSpace		| targetScope omitNameSpaces refactoring currentSelections |	omitNameSpaces := Set new.	self classesAndNameSpaces		do:			[:each | each isNameSpace ifTrue: [omitNameSpaces addAll: each withAllNameSpaces]].	targetScope := IncrementalSearchDialog		selectNamespace: #MoveToNamespace &lt;&lt; #browser &gt;&gt; 'Move to Namespace'		omit: omitNameSpaces.	targetScope isNil ifTrue: [^self].	currentSelections := state classesAndNameSpaces.	refactoring := CompositeRefactoring new.	refactoring		refactorings:			(self objectNames				collect:					[:eachName | 					MoveObjectRefactoring						model: refactoring model						moveObjectNamed: eachName						to: targetScope absoluteName]).	self showWaitCursorWhile: [self performRefactoring: refactoring].	state classesAndNameSpaces: currentSelections.	self setState: state.	self refreshLists</body><body package="Browser-BrowserUI" selector="renameObject">renameObject	self renameObjectNamed: self objectName</body><body package="Browser-BrowserUI" selector="renameObjectNamed:">renameObjectNamed: aString 	| newName binding |	self changeRequest ifFalse: [^self].	binding := aString asQualifiedReference bindingOrNil.	binding isNil ifTrue: [^self].	newName := self request: (#EnterNewName &lt;&lt; #browser &gt;&gt; 'Enter new name') initialAnswer: binding key.	newName isEmpty ifTrue: [^self].	self handleError: 			[self 				performRefactoring: (RenameObjectRefactoring renameObjectNamed: aString						to: newName asSymbol).			self setBinding: binding.			self refreshLists]</body><body package="Browser-BrowserUI" selector="requestClassName">requestClassName	| name |	name := self request: (#EnterAClassNameC &lt;&lt; #browser &gt;&gt; 'Enter a class name:').	^name isEmpty ifTrue: [nil] ifFalse: [name]</body><body package="Browser-BrowserUI" selector="restoreObjectOverride">restoreObjectOverride	| over overs |	overs := Override overridesForClassOrNameSpace: self classOrNameSpace.	over := self 				choose: (#ChooseOverrideToRestore &lt;&lt; #browser &gt;&gt; 'Choose override to restore')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RestoreOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="selectSubclassesOf:">selectSubclassesOf: aClass 	| subclasses |	subclasses := aClass subclasses 				asSortedCollection: [:a :b | a name &lt; b name].	subclasses isEmpty ifTrue: [^#()].	^Dialog dialogSupplier 		chooseMultiple: (#ChooseSubclassesC &lt;&lt; #browser &gt;&gt; 'Choose subclasses:')		fromList: (subclasses collect: [:each | each name])		values: subclasses		buttons: #()		values: #()		lines: 8		cancel: [nil]		for: nil</body><body package="Browser-BrowserUI" selector="spawnHierarchy">spawnHierarchy	| hierarchyState |	hierarchyState := self getState.	RefactoringBrowser openHierarchyWithSelection: hierarchyState</body><body package="Browser-BrowserUI" selector="subclassResponsibilityImplementationStubFor:in:">subclassResponsibilityImplementationStubFor: aMethodDefinition in: aClass	| source parser pattern comment errorText |	source := aMethodDefinition sourceCode.	(parser := aClass parserClass new) parseSelector: source.	pattern := source copyFrom: 1 to: (parser endOfLastToken min: source size).	comment := #SubclassResponsibilityStubComment &lt;&lt; #browser &gt;&gt; ' *** This method was defined by &lt;1p&gt; as a subclass responsibility.&lt;n&gt;&lt;t&gt;Replace its body with a proper implementation. *** ' 		expandMacrosWith: aMethodDefinition implementingClass.	errorText := #SubclassResponsibilityStubNotReimplemented &lt;&lt; #browser &gt;&gt; 'Subclass responsibility stub not reimplemented'.	^'&lt;1s&gt;&lt;n&gt;&lt;t&gt;"&lt;2s&gt;"&lt;n&gt;&lt;n&gt;&lt;t&gt;self error: ''&lt;3s&gt;'''		expandMacrosWith: pattern		with: comment		with: errorText</body><body package="Browser-BrowserUI" selector="subclassResponsibilityMethodsIn:">subclassResponsibilityMethodsIn: aClass	| results |	results := OrderedCollection new.	aClass withAllSuperclasses reverseDo:		[:class |		class selectors do: 			[:each | results := results reject: [:some | some selector = each]].		(class whichSelectorsReferTo: #subclassResponsibility) do:			[:each |			results add: (MethodDefinition class: class selector: each)]].	^results</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-protocol</category><body package="Browser-BrowserUI" selector="addProtocol">addProtocol		| newProtocol newState |	self changeRequest ifFalse: [^self].	newProtocol := self		requestMethodProtocolName: #NewProtocol &lt;&lt; #browser &gt;&gt; 'New Protocol'.	(newProtocol isNil or: [newProtocol isEmpty]) ifTrue: [^self].	newProtocol := newProtocol asSymbol.	self		performChange:			(self isData				ifTrue:					[AddProtocolChange						nameSpace: self classOrNameSpace						protocol: newProtocol]				ifFalse:					[AddProtocolChange						class: self selectedClass						protocol: newProtocol]).	newState := self getState.	newState		protocol: newProtocol;		selectors: #().	self		updatePartsWith: newState;		changed</body><body package="Browser-BrowserUI" selector="printOutProtocol">printOutProtocol	| stream |	stream := TextStream on: (String new: 1000).	self protocols do: 			[:each | 			(self isData 				ifTrue: [self classOrNameSpace asNameSpace]				ifFalse: [self selectedClass]) printOutCategory: each on: stream].	self hardcopyStream: stream</body><body package="Browser-BrowserUI" selector="removeCategories">removeCategories	self changeRequest ifFalse: [^self].	self isData 		ifTrue: [self removeSharedVariableCategories]		ifFalse: [self removeMethodCategories]</body><body package="Browser-BrowserUI" selector="removeMethodCategories">removeMethodCategories	| changes methodDefinitions |	self changeRequest ifFalse: [^self].	(self protocols allSatisfy: [:each | self areAllSelectorsVisibleIn: each])		ifFalse: 			[(Dialog confirm: #ProtocolsContainInvisibleMethodsContinueQ &lt;&lt; #browser						&gt;&gt; 'These protocols contain methods that are not currently visible.Removing the protocols will remove those methods. Continue?'				initialAnswer: false) ifFalse: [^self]].	methodDefinitions := Set new.	self protocols do: 			[:eachProtocol |			methodDefinitions				addAll: ((self selectedClass organization listAtCategoryNamed: eachProtocol)						collect: [:eachSelector | MethodDefinition class: self selectedClass selector: eachSelector])].	changes := (self createMethodRemovalChange: methodDefinitions)				ifNil: [^self].	(self protocols select: 			[:eachCategory |			(self selectedClass organization listAtCategoryNamed: eachCategory)				isEmpty])		do: [:eachCategory | changes removeMethodCategory: eachCategory from: self selectedClass].	(self validateMethodRemovalChange: changes) ifFalse: [^self].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="removeSharedVariableCategories">removeSharedVariableCategories	| changes sharedVariableReferences |	self changeRequest ifFalse: [^self].	sharedVariableReferences := Set new.	self protocols collect: 			[:eachCategory |			(self classOrNameSpace asNameSpace organization				listAtCategoryNamed: eachCategory) do: 						[:eachName |						sharedVariableReferences							add: (self classOrNameSpace unambiguousName , '.' , eachName)									asQualifiedReference]].	changes := (self				createSharedVariableRemovalChange: sharedVariableReferences) ifNil: [^self].	(self protocols select: 			[:eachCategory |			(self classOrNameSpace asNameSpace organization				listAtCategoryNamed: eachCategory) isEmpty])		do: 			[:eachCategory |			changes removeSharedVariableCategory: eachCategory				from: self classOrNameSpace].	(self validateSharedVariableRemovalChange: changes) ifFalse: [^self].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="renameMethodProtocolTo:">renameMethodProtocolTo: newProtocol 	| change |	self protocol = newProtocol ifTrue: [^self].	change := RenameProtocolChange 				class: self selectedClass				oldProtocol: self protocol				newProtocol: newProtocol.	self performChange: change</body><body package="Browser-BrowserUI" selector="renameProtocol">renameProtocol	| newProtocol newState |	self changeRequest ifFalse: [^self].	newProtocol := self requestMethodProtocolName:		#RenameProtocol &lt;&lt; #browser &gt;&gt; 'Rename Protocol'.	newProtocol isNil ifTrue: [^self].	newProtocol := newProtocol asSymbol.	self isData 		ifTrue: [self renameSharedVariableProtocolTo: newProtocol]		ifFalse: [self renameMethodProtocolTo: newProtocol].	newState := self getState.	newState protocol: newProtocol.	self		updatePartsWith: newState;		changed</body><body package="Browser-BrowserUI" selector="renameSharedVariableProtocolTo:">renameSharedVariableProtocolTo: newProtocol	self protocol = newProtocol ifTrue: [^self].	self		rename: self protocol		to: newProtocol		inNameSpaces: (Array with: self classOrNameSpace)</body><body package="Browser-BrowserUI" selector="requestMethodProtocolName:">requestMethodProtocolName: prompt	| suggestions |	suggestions := self suggestedProtocols.	^(IncrementalSearchDialog			forRequestWithSuggestions: suggestions			filterBlock: [:input :protocol | input , '*' match: protocol])		windowLabel: prompt;		firstLabel: #NameC &lt;&lt; #browser &gt;&gt; 'Name:';		secondLabel: #SuggestionsC &lt;&lt; #browser &gt;&gt; 'Suggestions:';		entry: (LastProtocol ifNil: [String new]);		request</body><body package="Browser-BrowserUI" selector="suggestedProtocols">suggestedProtocols	^self isData		ifTrue: [Array new]		ifFalse: [self suggestedProtocolsForClass: self selectedClass]</body><body package="Browser-BrowserUI" selector="suggestedProtocolsForClass:">suggestedProtocolsForClass: aClass	| protocols |	protocols := Set new.	aClass allSuperclasses do:		[:class | protocols addAll: class organization categories].	aClass organization categories do:		[:each | protocols remove: each ifAbsent: []].	^protocols asSortedCollection</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="choosePackageScope">choosePackageScope		^(IncrementalSearchDialog		selectNamespace: #DefaultNamespace &gt;&gt; 'Default Namespace' &lt;&lt; #browser)		ifNotNil:			[:choice | 			self package				propertyAt: #namespace				put: choice unambiguousName]</body><body package="Browser-BrowserUI" selector="globalImplementorsActions">globalImplementorsActions	^self sendersImplementorsActionsFor: #browseGlobalImplementorsOf:</body><body package="Browser-BrowserUI" selector="globalSendersActions">globalSendersActions	^self sendersImplementorsActionsFor: #browseGlobalReferencesTo:</body><body package="Browser-BrowserUI" selector="hierarchyImplementorsActions">hierarchyImplementorsActions	^self sendersImplementorsActionsFor: #browseHierarchyImplementorsOf:</body><body package="Browser-BrowserUI" selector="hierarchySendersActions">hierarchySendersActions	^self sendersImplementorsActionsFor: #browseHierarchyReferencesTo:</body><body package="Browser-BrowserUI" selector="localImplementorsActions">localImplementorsActions	^self sendersImplementorsActionsFor: #browseLocalImplementorsOf:</body><body package="Browser-BrowserUI" selector="localSendersActions">localSendersActions	^self sendersImplementorsActionsFor: #browseLocalReferencesTo:</body><body package="Browser-BrowserUI" selector="maxSentSelectors">maxSentSelectors	^30</body><body package="Browser-BrowserUI" selector="menuNameFor:">menuNameFor: aSelector 	aSelector isEmpty ifTrue: [^(#emptySymbol &lt;&lt; #browser &gt;&gt; '-empty symbol-')].	aSelector isInfix ifFalse: [^super menuNameFor: aSelector].	^aSelector asString copyReplaceAll: '&amp;' with: '&amp;&amp;'</body><body package="Browser-BrowserUI" selector="packageListSpawnSubmenu">packageListSpawnSubmenu	| activeConnectionKeys menu withNames |	activeConnectionKeys := Set new.	self environment bundlesAndPackagesDo: 			[:each |			activeConnectionKeys addAll: each databaseInformations keys].	activeConnectionKeys remove: #'' ifAbsent: [].	withNames := activeConnectionKeys				collect: [:each | each -&gt; each asText	"Look up profile name when we can."].	menu := Menu new.	(withNames sorted: [:a :b | a value &lt; b value]) do: 			[:eachAssociation |			| databaseIdentifier name item label |			databaseIdentifier := eachAssociation key.			name := eachAssociation value.			label := (#CodeComponentsConnectedToC &gt;&gt; 'Code components connected to: '						&lt;&lt; #IDE) asText						, name.			item := MenuItem labeled: label.			item value: 					[| connected |					connected := Set new.					self environment bundlesAndPackagesDo: 							[:each |							(each databaseInformations includesKey: databaseIdentifier)								ifTrue: [connected add: each]].					(self environment forCodeComponents: connected)						label: label;						openEditor].			menu addItem: item].	^menu</body><body package="Browser-BrowserUI" selector="sendersImplementorsActionsFor:">sendersImplementorsActionsFor: aSymbol 	| messages firstSelectors actions |	messages := self sentSelectors.	firstSelectors := messages copyFrom: 1				to: (messages size min: self maxSentSelectors).	actions := firstSelectors collect: 					[:each | 					RBCommand 						named: (self menuNameFor: each)						description: (#SendersImplementors &lt;&lt; #browser &gt;&gt; 'Senders/Implementors')						action: [self perform: aSymbol with: each]						receiver: #yourself].	firstSelectors size = messages size 		ifFalse: 			[actions				add: nil;				add: (RBCommand 							named: (#_MoreSelectorsDots &lt;&lt; #browser &gt;&gt; '&amp;More selectors...')							description: ''							action: 								[| selector |								selector := self choose: (#SelectAMessageC &lt;&lt; #browser &gt;&gt; 'Select a message:') from: messages.								selector notNil 									ifTrue: [self perform: aSymbol with: selector]									ifFalse: [nil]]							receiver: #yourself)].	^actions</body><body package="Browser-BrowserUI" selector="showOnlyFilteredSpecifications">showOnlyFilteredSpecifications	^Array		with:			((self showOnlyFiltered				ifTrue: [RBCheckedCommand]				ifFalse: [RBCommand])				named:					(#ShowOnlyInSelectedPackage &lt;&lt; #browser &gt;&gt; 'Show Only In Selected Package')				description:					#ShowOnlyItemsInSelectedComponents &lt;&lt; #browser						&gt;&gt; 'Show only items in the selected code components'				action:					[self changeRequest						ifTrue:							[showOnlyFiltered := showOnlyFiltered not.							self refreshLists]]				receiver: #yourself)</body><body package="Browser-BrowserUI" selector="windowMenuItems">windowMenuItems		| items |	items := OrderedCollection new.	environment isSystem		ifTrue:			[items				add:					(#Pac_kage &lt;&lt; #browser &gt;&gt; 'Pac&amp;kage') asString						-&gt; (self menuNamed: #pundleMenu)].	items		add:			(#_Class &lt;&lt; #browser &gt;&gt; '&amp;Class') asString -&gt; (self menuNamed: #classMenu).	environment isSystem		ifTrue:			[items				add:					(#_Protocol &lt;&lt; #browser &gt;&gt; '&amp;Protocol') asString						-&gt; (self menuNamed: #protocolMenu)].	items		add:			(#_Method &lt;&lt; #browser &gt;&gt; '&amp;Method') asString				-&gt; (self menuNamed: #selectorMenu).	^items</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-store</category><body package="Browser-BrowserUI" selector="chooseMoveToPackage">chooseMoveToPackage	^self choosePackage: (#SelectPackageToMoveToC &lt;&lt; #browser &gt;&gt; 'Select package to move to:')</body><body package="Browser-BrowserUI" selector="choosePackage:">choosePackage: aString 	^self choosePackage: aString without: #()</body><body package="Browser-BrowserUI" selector="choosePackage:without:">choosePackage: aString without: withoutPackages		| nullPackage packages |	self changeRequest ifFalse: [^nil].	nullPackage := self storeRegistry nullPackage.	packages := OrderedCollection with: nullPackage.	packages addAll: self storeRegistry allPackages.	withoutPackages		do:			[:each | 			packages				remove: each				ifAbsent: []].	packages := packages asSortedCollection: [:a :b | a name &lt; b name].	^(IncrementalSearchDialog		forSelectionFrom: packages		filterBlock: [:entry :package | entry , '*' match: package name])		windowLabel: #ChoosePackage &lt;&lt; #browser &gt;&gt; 'Choose Package';		firstLabel: #FilterC &lt;&lt; #browser &gt;&gt; 'Filter:';		secondLabel: aString;		objectToStringBlock: [:package | package name asString];		displayStringSelector: #toolListText;		iconBlock:				[:package | 					package == nullPackage						ifTrue: [nil]						ifFalse: [package toolListIcon]];		select</body><body package="Browser-BrowserUI" selector="moveCategories:toPackage:">moveCategories: aSymbolCollection toPackage: aPackage 	| allNames |	allNames := Set new.	aSymbolCollection do: 			[:each | 			allNames 				addAll: ((self allReferencesInNameSpaces: Root withAllNameSpaces						andCategory: each) collect: [:ref | ref fullName])].	self moveObjectsNamed: allNames toPackage: aPackage</body><body package="Browser-BrowserUI" selector="moveCompleteObjectToPackage">moveCompleteObjectToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	^self moveObjectsNamed: self objectNames toPackage: package</body><body package="Browser-BrowserUI" selector="moveDefinitions:toPackage:">moveDefinitions: definitionCollection toPackage: aPackage 	| changes |	changes := CompositeRefactoryChange named: (#MoveMethodsOrSharedsToPackage &lt;&lt; #browser &gt;&gt; 'Move methods/shared variables to package').	definitionCollection do: 			[:each | 			changes addChange: (each isForSharedVariable 						ifTrue: 							[MoveSharedVariableToPackageChange sharedVariableNamed: each fullName								package: aPackage]						ifFalse: 							[MoveMethodToPackageChange 								class: each implementingClass								selector: each selector								package: aPackage])].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveMethodToPackage">moveMethodToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	self moveDefinitions: self definitions toPackage: package</body><body package="Browser-BrowserUI" selector="moveObjectDefinitionToPackage">moveObjectDefinitionToPackage	| package changes |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	changes := CompositeRefactoryChange named: (#MoveDefinitionsToPackage &lt;&lt; #browser &gt;&gt; 'Move definitions to package').	self classesAndNameSpaces do: 			[:each | 			each isBehavior 				ifTrue: 					[changes 						addChange: (MoveClassDefinitionToPackageChange class: each package: package)]				ifFalse: 					[changes 						addChange: (MoveNameSpaceToPackageChange nameSpace: each package: package)]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveObjectToPackage">moveObjectToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	self moveObjectsIn: state toPackage: package</body><body package="Browser-BrowserUI" selector="moveObjects:in:toPackage:">moveObjects: aNavigatorState in: codeComponents toPackage: aPackage 	| changes |	changes := CompositeRefactoryChange named: (#MoveObjectsToPackage &lt;&lt; #browser &gt;&gt; 'Move objects to package').	self 		codeIn: aNavigatorState objectNames		codeComponents: codeComponents		sharedVariablesDo: 			[:sv | 			changes addChange: (MoveSharedVariableToPackageChange 						sharedVariableNamed: sv fullName						package: aPackage)]		nameSpacesDo: 			[:ns | 			changes 				addChange: (MoveNameSpaceToPackageChange nameSpace: ns package: aPackage)]		definedClassesDo: 			[:cls | 			changes 				addChange: (MoveClassDefinitionToPackageChange class: cls package: aPackage)]		methodsDo: 			[:cls :sel | 			changes addChange: (MoveMethodToPackageChange 						class: cls						selector: sel						package: aPackage)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveObjectsIn:toPackage:">moveObjectsIn: aNavigatorState toPackage: aPackage		| codeComponents |	codeComponents := aNavigatorState packages.	codeComponents notEmpty		ifTrue:			[^self moveObjects: aNavigatorState in: codeComponents toPackage: aPackage].	^self		moveObjectsNamed: aNavigatorState objectNames		toPackage: aPackage</body><body package="Browser-BrowserUI" selector="moveObjectsNamed:toPackage:">moveObjectsNamed: nameCollection toPackage: aPackage 	| changes |	changes := CompositeRefactoryChange named: (#MoveObjectsToPackage &lt;&lt; #browser &gt;&gt; 'Move objects to package').	nameCollection do: 			[:each | 			| binding ref |			ref := each asQualifiedReference.			binding := ref bindingOrNil.			binding notNil 				ifTrue: 					[binding isForGeneral 						ifTrue: 							[changes 								addChange: (MoveSharedVariableToPackageChange sharedVariableNamed: each										package: aPackage)]						ifFalse: 							[binding isForClass 								ifTrue: 									[changes 										addChange: (MoveClassDefinitionToPackageChange class: binding value												package: aPackage).									binding value selectors do: 											[:sel | 											changes addChange: (MoveMethodToPackageChange 														class: binding value														selector: sel														package: aPackage)].									binding value class selectors do: 											[:sel | 											changes addChange: (MoveMethodToPackageChange 														class: binding value class														selector: sel														package: aPackage)].									binding value dataKeys do: 											[:var | 											changes addChange: (MoveSharedVariableToPackageChange 														sharedVariableNamed: binding value fullName , '.' , var														package: aPackage)]]								ifFalse: 									[changes addChange: (MoveNameSpaceToPackageChange nameSpace: binding value												package: aPackage)]]]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveProtocolToPackage">moveProtocolToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	self moveDefinitions: state allDefinitions toPackage: package</body><body package="Browser-BrowserUI" selector="overrideDefinitionsInPackage">overrideDefinitionsInPackage	| package changes |	self changeRequest ifFalse: [^self].	package := self 		choosePackage: #SelectPackageToOverrideInToC &lt;&lt; #browser &gt;&gt; 'Select package to create override in:' 		without: self pundlesWithoutCurrentMethodOverrides.	package isNil ifTrue: [^self].	changes := CompositeRefactoryChange 				named: (#OverrideMethodsOrSharedsInPackage &lt;&lt; #browser &gt;&gt; 'Override methods/shared variables in package').	self definitions do: 			[:each | 			changes addChange: (each isForSharedVariable 						ifTrue: 							[MoveSharedVariableToPackageChange sharedVariableNamed: each fullName								package: package]						ifFalse: 							[MoveMethodToPackageChange 								class: each implementingClass								selector: each selector								package: package]).			changes addChange: (AddOverrideChange for: each asOverride)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="overrideObjectInPackage">overrideObjectInPackage	| package changes |	self changeRequest ifFalse: [^self].	package := self 		choosePackage: (#SelectPackageToOverrideInToC &lt;&lt; #browser &gt;&gt; 'Select package to create override in:') 		without: self pundlesWithoutCurrentObjectOverrides.	package isNil ifTrue: [^self].	changes := CompositeRefactoryChange named: (#OverrideObjectsInPackage &lt;&lt; #browser &gt;&gt; 'Override objects in package').	self classesAndNameSpaces do: 			[:each | 			| override |			override := Override forClassOrNameSpace: each.			changes addChange: (each isBehavior 						ifTrue: [MoveClassDefinitionToPackageChange class: each package: package]						ifFalse: [MoveNameSpaceToPackageChange nameSpace: each package: package]).			changes addChange: (AddOverrideChange for: override)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="pundlesWithoutCurrentMethodOverrides">pundlesWithoutCurrentMethodOverrides		| withoutPundles notNilBlock |	withoutPundles := self pundles copy asSet.	notNilBlock := 		[:overridesForDefinition | 		overridesForDefinition do: 			[:eachOverride | 			withoutPundles addAll: (eachOverride sources select: [:eachSource | eachSource isPackage])]].	self definitions do:		[:each | 		each isForSharedVariable			ifTrue: [(Override overridesForDataKey: each variableName in: each classOrNameSpace) ifNotNil: notNilBlock]			ifFalse: [(Override overrideCollectionForSelector: each selector class: each implementingClass) ifNotNil: notNilBlock]].	^withoutPundles</body><body package="Browser-BrowserUI" selector="pundlesWithoutCurrentObjectOverrides">pundlesWithoutCurrentObjectOverrides		| withoutPundles |	withoutPundles := self pundles copy asSet.	self classesAndNameSpaces do:		[:each | 		(Override overridesForClassOrNameSpace: each) ifNotNil: 			[:overridesForMethod | 			overridesForMethod do: 				[:eachOverride | 				withoutPundles addAll: (eachOverride sources select: [:eachSource | eachSource isPackage])]]].	^withoutPundles</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-selector</category><body package="Browser-BrowserUI" selector="addParameter">addParameter		| newSelector newState |	self changeRequest ifFalse: [^self].	newState := self getState.	newSelector := self		addParameterTo: self selector		in: self methodClass.	newSelector ifNil: [^self].	newState selector: newSelector.	self		updatePartsWith: newState;		changed</body><body package="Browser-BrowserUI" selector="addParameterTo:in:">addParameterTo: aSelector in: aClass		| initializer newSelector newArgument tree args dialog newArgs map argRoot argSuffix candidateSelector |	tree := aClass parseTreeFor: aSelector.	tree		ifNil:			[^self				warn: #CouldNotParseTheMethod &lt;&lt; #IDE &gt;&gt; 'Could not parse the method'].	argRoot := 'anObject'.	argSuffix := 0.	[newArgument := argRoot		,			(argSuffix isZero				ifTrue: ['']				ifFalse: [argSuffix printString]).	tree allDefinedVariables includes: newArgument]		whileTrue: [argSuffix := argSuffix + 1].	args := tree argumentNames copyWith: newArgument.	candidateSelector := (aSelector numArgs == 0		ifTrue: [aSelector , ':']		ifFalse: [aSelector]) asSymbol.	dialog := (MethodNameAndInitialValueDialog new)		arguments: args;		selector: candidateSelector;		initialValue: 'nil'.	dialog open ifFalse: [^nil].	initializer := dialog initialValue.	newSelector := dialog selector.	newArgs := dialog arguments asOrderedCollection.	map := (1 to: args size) collect: [:i | args indexOf: (newArgs at: i)].	^self		handleError:			[self				performRefactoring:					(AddParameterRefactoring addParameterToMethod: aSelector in: aClass						newSelector: newSelector initializer: initializer newArgName:							newArgument permutation: map).			newSelector]</body><body package="Browser-BrowserUI" selector="browseMethodChanges">browseMethodChanges	ChangeList new openOn: (ChangeScanner scanForSelector: self selector				class: self selectedClass)</body><body package="Browser-BrowserUI" selector="canRemoveParameter">canRemoveParameter	| selector |	selector := self selector.	selector isNil ifTrue: [^false].	^selector isKeyword</body><body package="Browser-BrowserUI" selector="copyMethods:from:toProtocol:">copyMethods: selectorCollection from: aClass toProtocol: aProtocol 	| protStart newProtocol destClassName destClass classPart changes |	newProtocol := aProtocol.	classPart := newProtocol copyUpTo: $&gt;.	destClassName := classPart copyUpTo: Character space.	destClass := destClassName asQualifiedReference valueOrDo: [nil].	destClass isBehavior ifFalse: [^self].	classPart size = destClassName size 		ifFalse: 			[(classPart size - destClassName size = 6 				and: [(classPart copyFrom: classPart size - 5 to: classPart size) = ' class']) 					ifTrue: [destClass := destClass class]					ifFalse: [^self]].	protStart := classPart size + 2.	[(newProtocol at: protStart) = $ ] whileTrue: [protStart := protStart + 1].	newProtocol := (newProtocol copyFrom: protStart to: newProtocol size) 				asSymbol.	changes := CompositeRefactoryChange named: (#CopyMethods &lt;&lt; #browser &gt;&gt; 'Copy methods').	destClass == aClass 		ifFalse: 			[selectorCollection do: 					[:each | 					changes 						compile: (aClass sourceCodeAt: each)						in: destClass						classified: newProtocol]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="inlineSelfSends">inlineSelfSends	self changeRequest ifFalse: [^self].	self handleError: 			[| refactoring |			refactoring := InlineAllSelfSendersRefactoring sendersOf: self selector						in: self methodClass.			self performRefactoring: refactoring.			refactoring messagesNotReplaced &gt; 0 				ifTrue: 					[self warn: ((#x1pMessageSendsWereNotReplaced &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; message sends were not replaced') 								expandMacrosWith: refactoring messagesNotReplaced)].			self refreshLists]</body><body package="Browser-BrowserUI" selector="inspectMethod">inspectMethod	| def |	def := self definition.	def isNil ifTrue: [^self].	def isForSharedVariable 		ifTrue: [def binding inspect]		ifFalse: [def method inspect]</body><body package="Browser-BrowserUI" selector="moveMethod">moveMethod		| newProtocol newClass |	self changeRequest ifFalse: [^self].	newProtocol := IncrementalSearchDialog		requestProtocol:			#EnterNewProtocolOrClassProtoToCopyC &lt;&lt; #browser &gt;&gt;					'Enter new protocol or class&gt;protocol to copy:'		initialAnswer: LastMoveMethodProtocol		inClass: self selectedClass		ifClassNameProvided: [:name | newClass := name].	(newProtocol isNil or: [newProtocol isEmpty]) ifTrue: [^self].	newClass notNil ifTrue: [newProtocol := newClass , '&gt;' , newProtocol].	LastMoveMethodProtocol := newProtocol.	self		moveMethods: self selectors		to: newProtocol		in: self selectedClass</body><body package="Browser-BrowserUI" selector="moveMethodToOtherObject">moveMethodToOtherObject	| variable |	self changeRequest ifFalse: [^self].	variable := self selectVariableForMoveMethod.	variable notNil 		ifTrue: 			[self handleError: 					[self performRefactoring: (MoveMethodRefactoring 								selector: self selector								class: self methodClass								variable: variable).					self refreshLists]]</body><body package="Browser-BrowserUI" selector="moveMethods:to:in:">moveMethods: selectorCollection to: aProtocol in: aClass 	(aProtocol includes: $&gt;) 		ifTrue: 			[self 				copyMethods: selectorCollection				from: aClass				toProtocol: aProtocol]		ifFalse: 			[self 				recategorizeMethods: selectorCollection				in: aClass				to: aProtocol]</body><body package="Browser-BrowserUI" selector="pushDownSelector">pushDownSelector	| refactoring |	self changeRequest ifFalse: [^self].	refactoring := CompositeRefactoring new.	refactoring 		refactorings: (self definitions collect: 					[:each | 					PushDownMethodRefactoring 						model: refactoring model						pushDown: (Array with: each selector)						from: each implementingClass]).	self handleError: 			[self performRefactoring: refactoring.			self refreshLists]</body><body package="Browser-BrowserUI" selector="pushUpSelector">pushUpSelector	| refactoring |	self changeRequest ifFalse: [^self].	refactoring := CompositeRefactoring new.	refactoring 		refactorings: (self definitions collect: 					[:each | 					PushUpMethodRefactoring 						model: refactoring model						pushUp: (Array with: each selector)						from: each implementingClass]).	self handleError: 			[self performRefactoring: refactoring.			self refreshLists]</body><body package="Browser-BrowserUI" selector="recategorizeMethods:in:to:">recategorizeMethods: selectorCollection in: aClass to: aProtocol 	| newProtocol changes |	newProtocol := aProtocol asSymbol.	changes := CompositeRefactoryChange named: (#RecategorizeMethods &lt;&lt; #browser &gt;&gt; 'Recategorize methods').	selectorCollection do: 			[:each | 			| destClass |			destClass := aClass whichClassIncludesSelector: each.			changes addChange: (MoveToProtocolChange 						class: destClass						protocol: newProtocol						symbol: each)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="removeParameter">removeParameter	| parseTree argument |	parseTree := self methodClass parseTreeFor: self selector.	parseTree isNil ifTrue: [^self warn: (#CouldNotParseMethodSource &lt;&lt; #browser &gt;&gt; 'Could not parse method source')].	argument := self choose: (#ChooseAnArgumentToRemoveC &lt;&lt; #browser &gt;&gt; 'Choose an argument to remove:')				from: (parseTree arguments collect: [:each | each name]).	argument isNil ifTrue: [^self].	self handleError: 			[| ref |			ref := RemoveParameterRefactoring 						removeParameter: argument						in: self methodClass						selector: self selector.			self performRefactoring: ref.			self setSelector: ref newSelector]</body><body package="Browser-BrowserUI" selector="renameMethod">renameMethod	| newSelector |	self changeRequest ifFalse: [^self].	newSelector := self renameMethod: self selector in: self methodClass.	newSelector isNil ifTrue: [^self].	self setSelector: newSelector</body><body package="Browser-BrowserUI" selector="renameMethod:in:">renameMethod: aSelector in: aClass		| selector tree dialog args newArgs map |	tree := aClass parseTreeFor: aSelector.	tree isNil		ifTrue:			[self				warn:					#CouldNotParseTheMethod &lt;&lt; #browser &gt;&gt; 'Could not parse the method'.			^nil].	args := tree argumentNames.	dialog := (MethodNameDialog new)		arguments: args;		selector: aSelector.	dialog open ifFalse: [^nil].	selector := dialog selector.	newArgs := dialog arguments asOrderedCollection.	map := (1 to: args size) collect: [:i | args indexOf: (newArgs at: i)].	^self		handleError:			[self				performRefactoring:					(RenameMethodRefactoring renameMethod: aSelector in: aClass to: selector						permutation: map).			selector asSymbol]</body><body package="Browser-BrowserUI" selector="restoreMethodOrStaticOverride">restoreMethodOrStaticOverride	self isSharedVariableSelected 		ifTrue: [self restoreSharedVariableOverride]		ifFalse: [self restoreMethodOverride]</body><body package="Browser-BrowserUI" selector="restoreMethodOverride">restoreMethodOverride	| overs over |	overs := Override overridesForSelector: self selector				class: self selectedClass.	over := self 				choose: (#ChooseOverrideToRestore &lt;&lt; #browser &gt;&gt; 'Choose override to restore')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RestoreOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="selectVariableForMoveMethod">selectVariableForMoveMethod	| parseTree nameList ignoreList |	parseTree := self methodClass parseTreeFor: self selector.	parseTree isNil ifTrue: [^self warn: (#CouldNotParseSources &lt;&lt; #browser &gt;&gt; 'Could not parse sources')].	nameList := OrderedCollection new.	nameList		add: (#DashesArgumentsDashes &lt;&lt; #browser &gt;&gt; '---- Arguments ----');		addAll: parseTree argumentNames asSortedCollection;		add: (#DashesInstanceVariablesDashes &lt;&lt; #browser &gt;&gt; '---- Instance Variables ----').	ignoreList := OrderedCollection with: 1 with: nameList size.	nameList addAll: self methodClass allInstVarNames asSortedCollection.	^self 		choose: (#SelectVariableToMoveMethod &lt;&lt; #browser &gt;&gt; 'Select variable to move method into:')		fromList: nameList		values: nameList		ignore: ignoreList		initialSelection: nil		lines: 8		cancel: [nil]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>accessing-browser</category><body package="Browser-BrowserUI" selector="beHierarchy">beHierarchy	parts 		do: [:each | (each respondsTo: #beHierarchy) ifTrue: [each beHierarchy]]</body><body package="Browser-BrowserUI" selector="replace:with:in:">replace: oldObject with: newObject in: specArray 	^specArray collect: 			[:each | 			oldObject = each 				ifTrue: [newObject]				ifFalse: 					[each class = Array 						ifTrue: 							[self 								replace: oldObject								with: newObject								in: each]						ifFalse: [each]]]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-category</category><body package="Browser-BrowserUI" selector="allReferencesInNameSpaces:andCategory:">allReferencesInNameSpaces: nameSpaceCollection andCategory: aCategory 	| refs |	refs := OrderedCollection new.	nameSpaceCollection do: 			[:each | 			(each asNameSpace organization listAtCategoryNamed: aCategory) 				do: [:name | refs add: (each fullName asQualifiedReference append: name)]].	^refs</body><body package="Browser-BrowserUI" selector="changesForMoveNames:to:">changesForMoveNames: nameCollection to: aCategory 	| changes |	changes := CompositeRefactoryChange named: (#MoveObjectsToCategory &lt;&lt; #browser &gt;&gt; 'Move objects to category').	nameCollection do: 			[:each | 			| ref |			ref := each asQualifiedReference.			ref bindingOrNil notNil 				ifTrue: 					[changes addChange: (MoveToProtocolChange 								nameSpace: ref environment								protocol: aCategory								symbol: ref simpleName)]].	^changes</body><body package="Browser-BrowserUI" selector="changesForRemoveCategories:fromNameSpaces:">changesForRemoveCategories: categoryCollection fromNameSpaces: nameSpaceCollection 	| nameSpaces changes classes variables |	classes := Set new.	variables := Set new.	nameSpaces := Set new.	categoryCollection do: 			[:each | 			(self allReferencesInNameSpaces: nameSpaceCollection				andCategory: each asSymbol) do: 						[:ref | 						| title |						title := ref value.						title isBehavior 							ifTrue: [classes add: title]							ifFalse: 								[title isNameSpace 									ifTrue: [nameSpaces add: title fullName]									ifFalse: [variables add: ref fullName]]]].	classes := SystemUtils sortForLoading: classes.	changes := CompositeRefactoryChange named: (#RemoveCategory1 &lt;&lt; #browser &gt;&gt; 'Remove category').	variables do: [:each | changes removeSharedVariableNamed: each].	classes reverseDo: [:cls | changes removeClass: cls].	nameSpaces do: [:each | changes removeNameSpaceNamed: each].	categoryCollection do: 			[:each | 			nameSpaceCollection 				do: [:nameSpace | changes removeSharedVariableCategory: each from: nameSpace]].	^changes</body><body package="Browser-BrowserUI" selector="moveNames:to:">moveNames: nameCollection to: aCategory 	| changes |	changes := self changesForMoveNames: nameCollection to: aCategory.	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="rename:to:inNameSpaces:">rename: category to: newCategory inNameSpaces: nameSpaces 	| changes refs |	changes := CompositeRefactoryChange named: (#RenameProtocol1 &lt;&lt; #browser &gt;&gt; 'Rename protocol').	refs := self allReferencesInNameSpaces: nameSpaces andCategory: category.	changes addChange: (self 				changesForMoveNames: (refs collect: [:each | each fullName])				to: newCategory).	nameSpaces do: 			[:each | 			(each asNameSpace organization categories includes: category) 				ifTrue: 					[(each asNameSpace organization listAtCategoriesNamed: category) isEmpty 						ifTrue: 							[changes addChange: (RenameProtocolChange 										nameSpace: each										oldProtocol: category										newProtocol: newCategory)]						ifFalse: 							[changes 								addChange: (RemoveProtocolChange nameSpace: each protocol: category)]]].	self performChange: changes</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-packages</category><body package="Browser-BrowserUI" selector="defaultDbId">defaultDbId	self isStoreLoaded ifFalse: [^#''].	^self dbRegistry dbIdentifier ifNil: [#'']</body><body package="Browser-BrowserUI" selector="messageForUnlinkedPundles:">messageForUnlinkedPundles: aCollectionOfPundlePairs		| stream |	stream := WriteStream on: String new.	aCollectionOfPundlePairs do:		[:eachPair |		| pundle |		pundle := eachPair last.		stream nextPutAll: (#x1s2snIsNotLinkedToTheDatabase &lt;&lt; #store &gt;&gt; '&lt;1s&gt; "&lt;2s&gt;" is not linked to the database.&lt;n&gt;' 				expandMacrosWith: pundle classDescription 				with: pundle name)].	stream nextPutAll: (#nDoYouWantToReconcileContinue &lt;&lt; #store &gt;&gt; '&lt;n&gt;Do you want reconcile these and continue?') expandMacros.	^stream contents</body><body package="Browser-BrowserUI" selector="storeAllDbsBrowseChanges">storeAllDbsBrowseChanges	^self storeDbsPerforming: #storeBrowseChanges:</body><body package="Browser-BrowserUI" selector="storeAllDbsChangeListOnChanges">storeAllDbsChangeListOnChanges	^self storeDbsPerforming: #storeChangeListOnChanges:</body><body package="Browser-BrowserUI" selector="storeAllDbsFileoutChanges">storeAllDbsFileoutChanges	^self storeDbsPerforming: #storeFileoutPundleChanges:</body><body package="Browser-BrowserUI" selector="storeAllDbsInspectChangeSet">storeAllDbsInspectChangeSet	^self storeDbsPerforming: #storeInspectChangeSet:</body><body package="Browser-BrowserUI" selector="storeBrowseChanges">storeBrowseChanges	self storeBrowseChanges: self pundle anyDatabaseId</body><body package="Browser-BrowserUI" selector="storeBrowseChanges:">storeBrowseChanges: dbIdentifier 	| env |	env := SelectorEnvironment new.	env label: (#ChangedMethods1 &lt;&lt; #browser &gt;&gt; 'Changed methods').	self packages do: 			[:each | 			(each changedMessageListFor: dbIdentifier) 				do: [:meth | env addClass: meth implementingClass selector: meth selector]].	self browseEnvironment: env</body><body package="Browser-BrowserUI" selector="storeChangeListOnChanges">storeChangeListOnChanges	self storeChangeListOnChanges: self pundle anyDatabaseId</body><body package="Browser-BrowserUI" selector="storeChangeListOnChanges:">storeChangeListOnChanges: dbid 	self pundleChangeListClass openOn: self pundle for: dbid</body><body package="Browser-BrowserUI" selector="storeCompareWithParent">storeCompareWithParent		| rightSide bothSides unlinked unlinkedSize dialogMessage |	(rightSide := self pundles asArray) isEmpty ifTrue: [^self].	self dbRegistry		doIfOnlineImage:			[bothSides := rightSide collect: [:each | Array with: (each parentRecord ifNotNil: #asStorePundle) with: each].			unlinked := bothSides select: [:each | each first isNil].			(unlinkedSize := unlinked size) &gt; 0 ifTrue:				[dialogMessage := self messageForUnlinkedPundles: unlinked.				(Dialog confirm: dialogMessage) ifFalse: [^self].				bothSides do: [:each | each first isNil ifTrue: [each last reconcileWithDb]].				bothSides := rightSide collect: [:each | Array with: (each parentRecord ifNotNil: #asStorePundle) with: each]].			bothSides := bothSides reject: [:each | each first isNil].			bothSides isEmpty ifTrue: [^self].			self comparisonBrowserClass compareFromAll: (bothSides collect: #first) toAll: (bothSides collect: #last)]</body><body package="Browser-BrowserUI" selector="storeCreateBundle">storeCreateBundle	"If the code component is a bundle, offer it as the parent.  If it is a package in a bundle, offer its enclosing bundle.  If it is a top-level package, or more than one item is selected, do not offer a parent bundle."	| someCodeComponentOrNil selectionInList |	someCodeComponentOrNil := self pundle.	selectionInList := self CodeComponentTabNavigatorPart packages objectList.	(selectionInList selectionIndexes size = 1 and: [someCodeComponentOrNil notNil])		ifTrue: 			[someCodeComponentOrNil isPackage				ifTrue: 					[(selectionInList list parentForInList: selectionInList selection)						ifNil: [someCodeComponentOrNil := nil]						ifNotNil: [:listItem | someCodeComponentOrNil := listItem codeComponent]]]		ifFalse: 			["Create without enclosing bundle because there are either multiple selections, or no selection."			someCodeComponentOrNil := nil].	self bundleSpecEditorClass createNewIn: someCodeComponentOrNil</body><body package="Browser-BrowserUI" selector="storeCreatePackage">storeCreatePackage	| newName pkg newState |	newName := SmalltalkWorkbench requestNewPackageName.	newName isNil ifTrue: [^self].	pkg := Store.PackageModel named: newName.	self isBundleSelected ifTrue: [self pundle addItem: pkg].	newState := self getState.	newState pundle: pkg.	self updateWithState: newState</body><body package="Browser-BrowserUI" selector="storeDbsPerforming:">storeDbsPerforming: aSymbol 	| pundle |	pundle := self pundle.	pundle isNil ifTrue: [^#()].	^pundle databaseList asSortedCollection collect: 			[:each | 			RBCommand 				named: each				description: (#StoreAction &lt;&lt; #browser &gt;&gt; 'Store action')				action: [self perform: aSymbol with: each]				receiver: #yourself]</body><body package="Browser-BrowserUI" selector="storeFileinPackage">storeFileinPackage	| fileName |	self changeRequest ifFalse: [^self].	fileName := Dialog 				requestFileName: (#FileInFromFileNamed &lt;&lt; #browser &gt;&gt; 'File in from file named')				default: '*.st'				version: #mustBeOld				ifFail: [''].	fileName isEmpty ifTrue: [^self].	[ self setPackage: self package		while: 			[Notice 				show: ((#LoadingFilen1s &lt;&lt; #browser &gt;&gt; 'Loading file&lt;n&gt;&lt;1s&gt;')			expandMacrosWith: fileName asString)				while: [(fileName asFilename withEncoding: #Source) fileIn]]	] on: RedefinitionNotification do:		[ :note | 		note currentPackage = self package			ifFalse: [ note override install ].		note resume.		].	self refreshLists</body><body package="Browser-BrowserUI" selector="storeFileoutPundleChanges">storeFileoutPundleChanges	^self storeFileoutPundleChanges: self defaultDbId</body><body package="Browser-BrowserUI" selector="storeFileoutPundleChanges:">storeFileoutPundleChanges: dbid 	| pundles filename stream |	pundles := self pundles.	filename := pundles size = 1 		ifTrue: [self pundle name asString]		ifFalse: [(#changes &lt;&lt; #browser &gt;&gt; 'changes') asString].	filename := Dialog 		requestNewFileName: (#FileOutChangesOn &lt;&lt; #browser &gt;&gt; 'File out changes on')		default: (Filename filterFilename: filename , '.st').	filename isEmpty ifTrue: [^self].	Cursor write showWhile: 		[stream := SourceCodeStream write: filename.		[stream timeStamp.		pundles do: 			[:each | 			self isStoreLoaded				ifTrue: [[each fileOutChangesForDb: dbid on: stream] withStoreFeedbackOn: self mainWindow]				ifFalse: 					[each withAllContainedItems do: 						[:eachItem | 						eachItem changeSet isEmpty ifFalse: 							[eachItem changeSet fileOutOn: stream for: eachItem within: (each isBundle ifTrue: [each])]]]]] 			ensure: [stream close]]</body><body package="Browser-BrowserUI" selector="storeFileoutPundleDifferences">storeFileoutPundleDifferences	"File out code that would convert otherPundle into the loaded, selected pundle if it were filed into an image with otherPundle loaded."	| pundle otherVersion |	pundle := self pundle.	Store.DbRegistry doIfOnlineImage:		[(otherVersion := pundle selectStoreVersion) isNil ifTrue: [^self].		self fileOutDifferencesBetween: otherVersion and: pundle].</body><body package="Browser-BrowserUI" selector="storeInspectChangeSet">storeInspectChangeSet	self storeInspectChangeSet: self pundle anyDatabaseId</body><body package="Browser-BrowserUI" selector="storeInspectChangeSet:">storeInspectChangeSet: dbid 	| hasChanges |	hasChanges := false.	self packages do: 			[:each | 			| changeSet |			changeSet := each changeSetFor: dbid.			(changeSet notNil and: [changeSet notEmpty]) 				ifTrue: 					[hasChanges := true.					changeSet copy inspect]].	hasChanges ifFalse: [self warn: (#NoChanges &lt;&lt; #browser &gt;&gt; 'No changes')]</body><body package="Browser-BrowserUI" selector="storeMakeCurrent">storeMakeCurrent	self performChange: (CurrentPackageChange package: self package)</body><body package="Browser-BrowserUI" selector="storeNewClassExtension">storeNewClassExtension	| class |	self changeRequest ifFalse: [^self].	class := IncrementalSearchDialog selectClass: (#SelectClassToExtend &lt;&lt; #browser &gt;&gt; 'Select Class to Extend').	class isNil ifTrue: [^self].	self extend: class inPackage: self package</body><body package="Browser-BrowserUI" selector="storePublishAsParcel">storePublishAsParcel	self publishAsParcelDialogClass publishAsParcel: self pundle</body><body package="Browser-BrowserUI" selector="storePublishPundle">storePublishPundle	self dbRegistry doIfOnlineImage: 			[self showWaitCursorWhile: [self pundles do: [:each | each storeInDB]]]</body><body package="Browser-BrowserUI" selector="storePundleProperties">storePundleProperties	"This method use to read:		PackagePropertiesDialog on: self pundle	But, we do nothing because the PackagePropertiesDialog is no longer part of our system"</body><body package="Browser-BrowserUI" selector="storeReconcilePundle">storeReconcilePundle	| selectedCodeComponent |	selectedCodeComponent := self pundle.	self dbRegistry doIfOnlineImage: 			[[selectedCodeComponent reconcileWithDb]				withStoreFeedbackOn: self mainWindow]</body><body package="Browser-BrowserUI" selector="storeRenamePundle">storeRenamePundle	| pundle string |	self changeRequest ifFalse: [^self].	pundle := self pundle.	string := self request: (#EnterNewName &lt;&lt; #browser &gt;&gt; 'Enter new name') initialAnswer: pundle name.	string isEmpty ifTrue: [^self].	(pundle isPackage 		ifTrue: [self storeRegistry packageNamed: string]		ifFalse: [self storeRegistry bundleNamed: string]) isNil 		ifFalse: [^self warn: ((#x1sAlreadyExists &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; already exists')			expandMacrosWith: string)].	pundle renameTo: string.	self refreshLists</body><body package="Browser-BrowserUI" selector="storeUnloadPundle">storeUnloadPundle	| pundles |	self changeRequest ifFalse: [^self].	pundles := self pundles.	(self 		confirm: ((#Unload1s &lt;&lt; #browser &gt;&gt; 'Unload&lt;1s&gt;?')			expandMacrosWith: (pundles inject: '' into: [:sum :each | ('&lt;1s&gt; &lt;2s&gt;'					expandMacrosWith: sum					with: each name)]))) 		ifFalse: [^self].	Notice 		show: (#UnloadingDots &lt;&lt; #browser &gt;&gt; 'Unloading...') 		while: [pundles do: [:each | each unloadFromImage]].	self refreshLists</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-classes</category><body package="Browser-BrowserUI" selector="extend:inPackage:">extend: class inPackage: package 	package modelAtFullSymbol: class absoluteSymbol hasDefinition: false.	self updateWithState: ((self navigatorStateClass new)				pundle: package;				classOrNameSpace: class;				yourself)</body><body package="Browser-BrowserUI" selector="extendClassInPackage">extendClassInPackage	| package class |	package := self choosePackage: (#ExtendInPackageC &lt;&lt; #browser &gt;&gt; 'Extend in package:')				without: (self storeRegistry packagesContaining: self classOrNameSpace).	package isNil ifTrue: [^self].	class := self classOrNameSpace.	self extend: class inPackage: package</body><body package="Browser-BrowserUI" selector="storeBrowseRemovedMethods">storeBrowseRemovedMethods		self dbRegistry doIfOnlineImage: 		[[#{Store.Glorp.DefinitionForListTool} value browseRemovedMethodsIn: self selectedClass] withStoreFeedbackOn: self mainWindow]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-shared variables</category><body package="Browser-BrowserUI" selector="storeRevertSharedVariable">storeRevertSharedVariable	self changeRequest ifFalse: [^self].	self dbRegistry doIfOnlineImage: 			[(self confirm: (#ReplaceThisWithStoredVersionQ &lt;&lt; #browser &gt;&gt; 'Do you want to replace this with the stored version?')) 				ifFalse: [^self].			self storeChangeSet revertData: self sharedVariableName				owner: self classOrNameSpace.			self refreshLists]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-methods</category><body package="Browser-BrowserUI" selector="storeMethod">storeMethod	| package selector class |	class := self methodClass.	selector := self selector.	package := self storeRegistry containingPackageForSelector: selector				class: class.	^package 		method: selector		forClassNamed: class instanceBehavior absoluteName		meta: class isMeta</body><body package="Browser-BrowserUI" selector="storeRevertMethod">storeRevertMethod	self changeRequest ifFalse: [^self].	self dbRegistry doIfOnlineImage: 			[(self confirm: (#RevertToLastPublishedVersionQ &lt;&lt; #browser &gt;&gt; 'Revert this method to the last published version?')) 				ifFalse: [^self].			self storeChangeSet revertSelector: self selector class: self methodClass.			self refreshLists]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-code components</category><body package="Browser-BrowserUI" selector="browseOverridden">browseOverridden	| overrides |	overrides := OrderedCollection new.	self packages do: [:each | overrides addAll: each overrides].	overrides isEmpty ifTrue: [^self warn: (#NoOverriddenCode &lt;&lt; #browser &gt;&gt; 'No overridden code')].	OverrideList new openOn: overrides</body><body package="Browser-BrowserUI" selector="browseOverrides">browseOverrides		| overrides |	overrides := OrderedCollection new.	self packages		do: [:each | overrides addAll: (Override overriddenByComponent: each)].	overrides isEmpty		ifTrue: [^Dialog warn: #NoOverrides &lt;&lt; #browser &gt;&gt; 'No overrides'].	OverrideList new openOn: overrides</body><body package="Browser-BrowserUI" selector="codeIn:codeComponents:sharedVariablesDo:nameSpacesDo:definedClassesDo:methodsDo:">codeIn: aNameCollection codeComponents: parcelPackageCollection sharedVariablesDo: svBlock nameSpacesDo: nsBlock definedClassesDo: cBlock methodsDo: mBlock 	aNameCollection do: 			[:each | 			| binding ref |			ref := each asQualifiedReference.			binding := ref bindingOrNil.			parcelPackageCollection do: 					[:codeComponent | 					binding isForNameSpace 						ifTrue: 							[(codeComponent definesObject: binding value) 								ifTrue: [nsBlock value: binding value]]						ifFalse: 							[(codeComponent definesClass: binding value) 								ifTrue: [cBlock value: binding value].							(codeComponent definedSelectorsFor: binding value) copy 								do: [:sel | mBlock value: binding value value: sel].							(codeComponent definedSelectorsFor: binding value class) copy 								do: [:sel | mBlock value: binding value class value: sel]].					(codeComponent definedBindingsFor: binding value) copy do: 							[:sv | 							sv isForGeneral 								ifTrue: 									[svBlock 										value: (binding value fullName , '.' , sv key) asQualifiedReference]]]]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="copyProtocols:from:to:">copyProtocols: protocols from: fromClass to: class 	| changes |	changes := CompositeRefactoryChange named: (#DropProtocols &lt;&lt; #browser &gt;&gt; 'Drop protocols').	protocols do: 			[:each | 			(fromClass organization listAtCategoryNamed: each) do: 					[:sel | 					self 						copySelector: sel						from: fromClass						to: class						classified: each						using: changes]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="copySelector:from:to:classified:using:">copySelector: each from: fromClass to: class classified: protocol using: aCompositeRefactoryChange 	((class includesSelector: each) and: 			[(self 				confirm: ((#DoYouWantToReplace1sIn2p &lt;&lt; #browser &gt;&gt; 'Do you want to replace &lt;1s&gt; in &lt;2p&gt;') expandMacrosWith: each						with: class)) 					not]) 		ifFalse: 			[aCompositeRefactoryChange 				compile: (fromClass sourceCodeAt: each)				in: class				classified: protocol]</body><body package="Browser-BrowserUI" selector="copySelectors:from:to:">copySelectors: fromClass from: selectors to: class 	| changes |	changes := CompositeRefactoryChange named: (#CopyMethods &lt;&lt; #browser &gt;&gt; 'Copy methods').	selectors do: 			[:each | 			| definingClass |			definingClass := fromClass whichClassIncludesSelector: each.			self 				copySelector: each				from: definingClass				to: class				classified: (definingClass whichCategoryIncludesSelector: each)				using: changes].	self performChangeWithUpdate: changes</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-testing</category><body package="Browser-BrowserUI" selector="hasMultipleDatabases">hasMultipleDatabases	| pundle |	pundle := self pundle.	^pundle notNil and: [(pundle databaseList reject: [:each | each = #'']) size &gt; 1]</body><body package="Browser-BrowserUI" selector="hasSingleDatabase">hasSingleDatabase	| pundle |	pundle := self pundle.	^pundle isNil or: [(pundle databaseList reject: [:each | each = #''])  size &lt; 2]</body><body package="Browser-BrowserUI" selector="hasSingleDatabaseAndStoreIsLoaded">hasSingleDatabaseAndStoreIsLoaded	^self isStoreLoaded and: [self hasSingleDatabase]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-shared variables</category><body package="Browser-BrowserUI" selector="addSharedVariableChangeFromDialog:">addSharedVariableChangeFromDialog: aCreationDialog	| arguments definition change |	arguments := OrderedCollection new.	arguments		add: (aCreationDialog nameSpaceOrDo: [^nil]) unambiguousName;		add: (aCreationDialog nameOrDo: [^nil]);		add: aCreationDialog private;		add: aCreationDialog constant;		add: 'New Share';		add: aCreationDialog initializer.	definition := '&lt;1s&gt; defineSharedVariable: #&lt;2s&gt; private: &lt;3p&gt;  constant: &lt;4p&gt; category: &lt;5p&gt; initializer: &lt;6p&gt;'		expandMacrosWithArguments: arguments.	change := AddSharedVariableChange definition: definition.	change package: (aCreationDialog packageOrDo: [^nil]).	^change</body><body package="Browser-BrowserUI" selector="createSharedVariableFromDialog:">createSharedVariableFromDialog: aCreationDialog	| addSharedVariableChange |	addSharedVariableChange := self addSharedVariableChangeFromDialog: aCreationDialog.	addSharedVariableChange isNil ifTrue: [^nil].	self performChange: addSharedVariableChange.	^addSharedVariableChange definedObject</body><body package="Browser-BrowserUI" selector="globalSharedVariableReferences">globalSharedVariableReferences	| binding |	binding := self sharedVariableBinding.	binding isNil ifTrue: [^self].	self browseGlobalReferencesTo: binding</body><body package="Browser-BrowserUI" selector="initializeSharedVariable">initializeSharedVariable	| variableRefs |	variableRefs := self sharedVariableDefinitions 				collect: [:each | each objectName asQualifiedReference].	self initializeVariables: variableRefs</body><body package="Browser-BrowserUI" selector="initializeVariables:">initializeVariables: bindingReferences 	self changeRequest ifFalse: [^self].	bindingReferences do: 			[:each | 			each initialize.			SourceFileManager default initializeThisObject: each].	self refreshLists</body><body package="Browser-BrowserUI" selector="localSharedVariableReferences">localSharedVariableReferences	| binding |	binding := self sharedVariableBinding.	binding isNil ifTrue: [^self].	self browseLocalReferencesTo: binding</body><body package="Browser-BrowserUI" selector="moveSharedVariableNames:to:in:">moveSharedVariableNames: aCollection to: aProtocol in: aClassOrNameSpace 	| newProtocol changes |	newProtocol := aProtocol asSymbol.	changes := CompositeRefactoryChange named: (#RecategorizeVariables &lt;&lt; #browser &gt;&gt; 'Recategorize variables').	aCollection do: 			[:each | 			changes addChange: (MoveToProtocolChange 						nameSpace: aClassOrNameSpace						protocol: newProtocol						symbol: each)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveSharedVariableToPackage">moveSharedVariableToPackage	self moveMethodToPackage</body><body package="Browser-BrowserUI" selector="moveSharedVariableToProtocol">moveSharedVariableToProtocol	| newProtocol |	self changeRequest ifFalse: [^self].	newProtocol := self request: (#EnterNewProtocol &lt;&lt; #browser &gt;&gt; 'Enter new protocol')				initialAnswer: LastMoveMethodProtocol.	newProtocol isEmpty ifTrue: [^self].	LastMoveMethodProtocol := newProtocol.	self 		moveSharedVariableNames: self sharedVariableNames		to: newProtocol		in: self classOrNameSpace</body><body package="Browser-BrowserUI" selector="renameSharedVariable">renameSharedVariable	self renameObjectNamed: self classOrNameSpace unambiguousName , '.' 				, self sharedVariableName</body><body package="Browser-BrowserUI" selector="restoreSharedVariableOverride">restoreSharedVariableOverride	| overs over |	overs := Override overridesForStatic: (self classOrNameSpace 						bindingFor: self sharedVariableName)				in: self classOrNameSpace.	over := self 				choose: (#ChooseOverrideToRestore &lt;&lt; #browser &gt;&gt; 'Choose override to restore')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RestoreOverrideChange for: over)</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-instance variables support</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable:in:">abstractInstanceVariable: aString in: aClass 	self handleError: 			[self 				performRefactoring: (AbstractInstanceVariableRefactoring variable: aString						class: aClass)]</body><body package="Browser-BrowserUI" selector="abstractInstanceVariableType:">abstractInstanceVariableType: aSymbol 	| instVars |	self changeRequest ifFalse: [^self].	instVars := self selectInstanceVariables: aSymbol.	instVars isEmpty ifTrue: [^self].	instVars do: 			[:each | 			self abstractInstanceVariable: each				in: (self nonMetaClass perform: aSymbol)].	self refreshLists</body><body package="Browser-BrowserUI" selector="addInstanceVariableIn:">addInstanceVariableIn: aClass 	| newName |	newName := self requestInstanceVariableName: ''.	newName isNil ifTrue: [^self].	self handleError: 			[self performRefactoring: (AddInstanceVariableRefactoring variable: newName						class: aClass)]</body><body package="Browser-BrowserUI" selector="addInstanceVariableType:">addInstanceVariableType: aSymbol 	self changeRequest ifFalse: [^self].	self addInstanceVariableIn: (self nonMetaClass perform: aSymbol).	self refreshLists</body><body package="Browser-BrowserUI" selector="createInstanceVariableAccessorsType:">createInstanceVariableAccessorsType: aSymbol 	| instVars |	self changeRequest ifFalse: [^self].	instVars := self selectInstanceVariables: aSymbol.	instVars isEmpty ifTrue: [^self].	instVars do: 			[:each | 			self handleError: 					[self 						performRefactoring: (CreateAccessorsForVariableRefactoring variable: each								class: (self nonMetaClass perform: aSymbol))]].	self refreshLists</body><body package="Browser-BrowserUI" selector="forClasses:showVariableMenu:collect:">forClasses: aCollection showVariableMenu: generatorBlock collect: valueBlock 	| variables labels tab listW sd spec buttons |	variables := OrderedCollection new.	labels := SelectionInList new.	tab := String with: Character tab.	aCollection do: 			[:eachClass | 			| varList |			varList := generatorBlock value: eachClass.			varList notEmpty 				ifTrue: 					[labels list add: (Text string: eachClass name emphasis: #italic).					labels selectionIndex: labels list size + 1.					variables add: nil.					(generatorBlock value: eachClass) do: 							[:var | 							labels list add: tab , (valueBlock value: var).							variables addLast: var]]].	variables isEmpty ifTrue: [^nil].	sd := SimpleDialog new.	spec := sd class interfaceSpecFor: #emptySpec.	sd builder add: spec window.	sd builder add: spec component.	sd setInitialGap.	sd addMessage: (#SelectVariableC &lt;&lt; #browser &gt;&gt; 'Select variable:') centered: true.	sd addGap: 8.	listW := sd 				addList: labels				lines: (20 min: variables size + 2)				validation: [labels selectionIndex &gt; 0].	listW widget setValidTargetIndex: labels selectionIndex.	sd addGap: 4.	buttons := sd addOK: [labels selectionIndex ~= 0].	sd addGap: 6.	sd bottomAlignLowerEdge: listW.	sd bottomAlign: (Array with: buttons).	sd preOpen.	sd builder openDialogWithExtent: sd builder window displayBox extent.	^sd accept value 		ifTrue: [variables at: labels selectionIndex]		ifFalse: [nil]</body><body package="Browser-BrowserUI" selector="globalInstanceVariableReadersType:">globalInstanceVariableReadersType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseGlobalInstVarReadersTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="globalInstanceVariableReferencesType:">globalInstanceVariableReferencesType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseGlobalInstVarRefsTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="globalInstanceVariableWritersType:">globalInstanceVariableWritersType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseGlobalInstVarWritersTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="instanceVariableReadersType:">instanceVariableReadersType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseInstVarReadersTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="instanceVariableReferencesType:">instanceVariableReferencesType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseInstVarRefsTo: instVar in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="instanceVariableWritersType:">instanceVariableWritersType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseInstVarWritersTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="protectInstanceVariable:in:">protectInstanceVariable: aString in: aClass 	self handleError: 			[self 				performRefactoring: (ProtectInstanceVariableRefactoring variable: aString						class: aClass)]</body><body package="Browser-BrowserUI" selector="protectInstanceVariableType:">protectInstanceVariableType: aSymbol 	| instVars |	self changeRequest ifFalse: [^self].	instVars := self selectInstanceVariables: aSymbol.	instVars isEmpty ifTrue: [^self].	instVars do: 			[:each | 			self protectInstanceVariable: each in: (self nonMetaClass perform: aSymbol)].	self refreshLists</body><body package="Browser-BrowserUI" selector="pullUpInstanceVariableType:">pullUpInstanceVariableType: aSymbol 	| instVar |	self changeRequest ifFalse: [^self].	instVar := self selectSubclassInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	self handleError: 			[self 				performRefactoring: (PullUpInstanceVariableRefactoring variable: instVar						class: (self nonMetaClass perform: aSymbol)).			self refreshLists]</body><body package="Browser-BrowserUI" selector="pushDownInstanceVariableType:">pushDownInstanceVariableType: aSymbol 	| instVar class |	self changeRequest ifFalse: [^self].	instVar := self selectInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	class := (self nonMetaClass perform: aSymbol) 				whichClassDefinesInstVar: instVar.	self handleError: 			[self 				performRefactoring: (PushDownInstanceVariableRefactoring variable: instVar						class: class).			self refreshLists]</body><body package="Browser-BrowserUI" selector="pushUpInstanceVariableType:">pushUpInstanceVariableType: aSymbol 	| superclass instVar class |	self changeRequest ifFalse: [^self].	instVar := self selectInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	class := (self nonMetaClass perform: aSymbol) 				whichClassDefinesInstVar: instVar.	superclass := class superclass.	superclass isNil ifTrue: [^self warn: (#ThisClassHasNoSuperclass &lt;&lt; #browser &gt;&gt; 'This class has no superclass')].	self handleError: 			[self 				performRefactoring: (PullUpInstanceVariableRefactoring variable: instVar						class: superclass).			self refreshLists]</body><body package="Browser-BrowserUI" selector="removeInstanceVariable:fromClass:">removeInstanceVariable: aString fromClass: aClass 	self handleError: 			[self 				performRefactoring: (RemoveInstanceVariableRefactoring variable: aString						class: aClass).			self refreshLists]</body><body package="Browser-BrowserUI" selector="removeInstanceVariableType:">removeInstanceVariableType: aSymbol 	| instVar class |	self changeRequest ifFalse: [^self].	instVar := self selectInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	class := (self nonMetaClass perform: aSymbol) 				whichClassDefinesInstVar: instVar.	self removeInstanceVariable: instVar fromClass: class</body><body package="Browser-BrowserUI" selector="renameInstanceVariable:in:">renameInstanceVariable: oldName in: aClass 	| newName |	newName := self requestInstanceVariableName: oldName.	newName isNil ifTrue: [^self].	self handleError: 			[self performRefactoring: (RenameInstanceVariableRefactoring 						rename: oldName						to: newName						in: aClass)]</body><body package="Browser-BrowserUI" selector="renameInstanceVariableType:">renameInstanceVariableType: aSymbol 	| instVar class |	self changeRequest ifFalse: [^self].	instVar := self selectInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	class := (self nonMetaClass perform: aSymbol) 				whichClassDefinesInstVar: instVar.	self renameInstanceVariable: instVar in: class.	self refreshLists</body><body package="Browser-BrowserUI" selector="requestInstanceVariableName:">requestInstanceVariableName: oldName 	| name |	name := self request: (#EnterAnInstanceVariableNameC &lt;&lt; #browser &gt;&gt; 'Enter an instance variable name:')				initialAnswer: oldName.	(name isEmpty or: [oldName = name]) ifTrue: [^nil].	^name</body><body package="Browser-BrowserUI" selector="selectInstanceVariable:">selectInstanceVariable: aSymbol 	| instVar classes class |	class := self nonMetaClass perform: aSymbol.	instVar := class isMeta 				ifTrue: [self classInstanceVariable]				ifFalse: [self instanceVariable].	instVar isNil ifFalse: [^instVar].	classes := OrderedCollection with: class.	classes addAllFirst: class allSuperclasses reverse.	^self 		forClasses: classes		showVariableMenu: [:each | each instVarNames]		collect: [:each | each]</body><body package="Browser-BrowserUI" selector="selectInstanceVariableSupers:subs:">selectInstanceVariableSupers: superBoolean subs: subBoolean 	| classes |	classes := OrderedCollection with: self selectedClass.	superBoolean 		ifTrue: [classes addAllFirst: self selectedClass allSuperclasses reverse].	subBoolean ifTrue: [classes addAllLast: self selectedClass allSubclasses].	^self 		forClasses: classes		showVariableMenu: [:class | class instVarNames]		collect: [:cname | cname]</body><body package="Browser-BrowserUI" selector="selectInstanceVariables:">selectInstanceVariables: aSymbol 	| variables class |	class := self nonMetaClass perform: aSymbol.	variables := class isMeta 				ifTrue: [self classInstanceVariables]				ifFalse: [self instanceVariables].	variables notEmpty ifTrue: [^variables].	variables := class instVarNames asSortedCollection.	variables isEmpty ifTrue: [^#()].	^SimpleDialog new 		chooseMultiple: (#ChooseVariablesC &lt;&lt; #browser &gt;&gt; 'Choose variables:')		fromList: variables		values: variables		buttons: #()		values: #()		lines: 8		cancel: [#()]		for: nil</body><body package="Browser-BrowserUI" selector="selectSubclassInstanceVariable:">selectSubclassInstanceVariable: aSymbol 	| varNames |	varNames := ((self nonMetaClass perform: aSymbol) allSubclasses 				inject: Set new				into: 					[:set :each | 					set						addAll: each instVarNames;						yourself]) 					asSortedCollection.	varNames isEmpty ifTrue: [^nil].	^self choose: (#SelectInstanceVariableC &lt;&lt; #browser &gt;&gt; 'Select instance variable:') from: varNames</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-class instance variables</category><body package="Browser-BrowserUI" selector="abstractClassInstanceVariable">abstractClassInstanceVariable	self abstractInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="addClassInstanceVariable">addClassInstanceVariable	self addInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="classInstanceVariableReaders">classInstanceVariableReaders	self instanceVariableReadersType: #class</body><body package="Browser-BrowserUI" selector="classInstanceVariableReferences">classInstanceVariableReferences	self instanceVariableReferencesType: #class</body><body package="Browser-BrowserUI" selector="classInstanceVariableWriters">classInstanceVariableWriters	self instanceVariableWritersType: #class</body><body package="Browser-BrowserUI" selector="createClassInstanceVariableAccessors">createClassInstanceVariableAccessors	self createInstanceVariableAccessorsType: #class</body><body package="Browser-BrowserUI" selector="globalClassInstanceVariableReaders">globalClassInstanceVariableReaders	self globalInstanceVariableReadersType: #class</body><body package="Browser-BrowserUI" selector="globalClassInstanceVariableReferences">globalClassInstanceVariableReferences	self globalInstanceVariableReferencesType: #class</body><body package="Browser-BrowserUI" selector="globalClassInstanceVariableWriters">globalClassInstanceVariableWriters	self globalInstanceVariableWritersType: #class</body><body package="Browser-BrowserUI" selector="protectClassInstanceVariable">protectClassInstanceVariable	self protectInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="pullUpClassInstanceVariable">pullUpClassInstanceVariable	self pullUpInstanceVariableType: #classBehavior</body><body package="Browser-BrowserUI" selector="pushDownClassInstanceVariable">pushDownClassInstanceVariable	self pushDownInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="pushUpClassInstanceVariable">pushUpClassInstanceVariable	^self pushUpInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="removeClassInstanceVariable">removeClassInstanceVariable	self removeInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="renameClassInstanceVariable">renameClassInstanceVariable	self renameInstanceVariableType: #class</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-instance variables</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable">abstractInstanceVariable	self abstractInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="addInstanceVariable">addInstanceVariable	self addInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="createInstanceVariableAccessors">createInstanceVariableAccessors	self createInstanceVariableAccessorsType: #yourself</body><body package="Browser-BrowserUI" selector="globalInstanceVariableReaders">globalInstanceVariableReaders	self globalInstanceVariableReadersType: #yourself</body><body package="Browser-BrowserUI" selector="globalInstanceVariableReferences">globalInstanceVariableReferences	self globalInstanceVariableReferencesType: #yourself</body><body package="Browser-BrowserUI" selector="globalInstanceVariableWriters">globalInstanceVariableWriters	self globalInstanceVariableWritersType: #yourself</body><body package="Browser-BrowserUI" selector="instanceVariableReaders">instanceVariableReaders	self instanceVariableReadersType: #yourself</body><body package="Browser-BrowserUI" selector="instanceVariableReferences">instanceVariableReferences	self instanceVariableReferencesType: #yourself</body><body package="Browser-BrowserUI" selector="instanceVariableWriters">instanceVariableWriters	self instanceVariableWritersType: #yourself</body><body package="Browser-BrowserUI" selector="protectInstanceVariable">protectInstanceVariable	self protectInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="pullUpInstanceVariable">pullUpInstanceVariable	self pullUpInstanceVariableType: #instanceBehavior</body><body package="Browser-BrowserUI" selector="pushDownInstanceVariable">pushDownInstanceVariable	self pushDownInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="pushUpInstanceVariable">pushUpInstanceVariable	^self pushUpInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="removeInstanceVariable">removeInstanceVariable	self removeInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="renameInstanceVariable">renameInstanceVariable	self renameInstanceVariableType: #yourself</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-namespaces</category><body package="Browser-BrowserUI" selector="addNameSpaceChangeFromDialog:">addNameSpaceChangeFromDialog: aCreationDialog	| arguments definition change |	arguments := OrderedCollection new.	arguments		add: (aCreationDialog nameSpaceOrDo: [^nil]) unambiguousName;		add: (aCreationDialog nameOrDo: [^nil]);		add: aCreationDialog private;		add: aCreationDialog imports.	definition := '&lt;1s&gt; defineNameSpace: #&lt;2s&gt; private: &lt;3p&gt;  imports: &lt;4p&gt; category: '''''		expandMacrosWithArguments: arguments.	change := AddNameSpaceChange definition: definition.	change package: (aCreationDialog packageOrDo: [^nil]).	^change</body><body package="Browser-BrowserUI" selector="createNameSpaceFromDialog:">createNameSpaceFromDialog: aCreationDialog	| addNameSpaceChange |	addNameSpaceChange := self addNameSpaceChangeFromDialog: aCreationDialog.	addNameSpaceChange isNil ifTrue: [^nil].	self performChange: addNameSpaceChange.	^addNameSpaceChange definedObject</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="createNewClass">createNewClass	| selectedClass dialog newClass |	selectedClass := self nonMetaClass.	dialog := ClassCreationDialog new.	dialog		superclass: selectedClass;		indexedType: (selectedClass ifNotNil: [:c | c behaviorType]);		package: self package.	(self mostPopularNameSpaceIn: self package)		ifNotNil: [:nameSpace | dialog nameSpace: nameSpace].	selectedClass ifNotNil: [dialog nameSpace: selectedClass environment].	self selectedNameSpace		ifNotNil: [:namespace | dialog nameSpace: namespace].	dialog open		ifTrue:			[newClass := self createClassFromDialog: dialog.			newClass notNil				ifTrue:					[self						selectClass: newClass;						refreshLists]]</body><body package="Browser-BrowserUI" selector="createNewNameSpace">createNewNameSpace		| dialog newNameSpace |	dialog := NameSpaceCreationDialog new.	dialog package: self package.	(self mostPopularNameSpaceIn: self package)		ifNotNil: [:nameSpace | dialog nameSpace: nameSpace].	"If we have single namespace selected, use that preferentially."	self selectedBindings size = 1		ifTrue:			[self selectedBinding value isNameSpace				ifTrue: [dialog nameSpace: self selectedBinding value]].	dialog open		ifTrue:			[newNameSpace := self createNameSpaceFromDialog: dialog.			newNameSpace notNil				ifTrue:					[state						clearClassDependentFields;						selectedNameSpace: newNameSpace.					self						updatePartsWith: state;						refreshLists]]</body><body package="Browser-BrowserUI" selector="createNewSharedVariable">createNewSharedVariable		| dialog newVariable definition |	dialog := SharedVariableCreationDialog new.	dialog package: self package.	(self mostPopularNameSpaceIn: self package)		ifNotNil: [:nameSpace | dialog nameSpace: nameSpace].	self selectedBindings size = 1		ifTrue: [dialog nameSpace: self selectedBinding value].	dialog open		ifTrue:			[newVariable := self createSharedVariableFromDialog: dialog.			newVariable notNil				ifTrue:					[definition := RBInitializerDefinition						nameSpace: newVariable environment						key: newVariable name.					state						clearClassDependentFields;						selectedNameSpace: newVariable environment;						definitions: (Array with: definition).					self						updatePartsWith: state;						refreshLists]]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>removal-methods</category><body package="Browser-BrowserUI" selector="confirmRemoval:references:">confirmRemoval: aWarningString references: aCollectionOfSelectorEnvironments		| selectedAction labels actions |	labels := List		with: #RemoveAnyway &lt;&lt; #browser &gt;&gt; 'Remove Anyway'		with: #BrowseReferences &lt;&lt; #browser &gt;&gt; 'Browse References'		with: #Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'.	actions := List with: #removeAnyway with: #browse with: #cancel.	aCollectionOfSelectorEnvironments isEmpty		ifTrue:			[labels removeAtIndex: 2.			actions removeAtIndex: 2].	selectedAction := Dialog		choose: aWarningString		labels: labels		values: actions		default: (actions at: 2).	selectedAction = #removeAnyway ifTrue: [^true].	selectedAction = #browse		ifTrue:			[self				showWaitCursorWhile:					[(aCollectionOfSelectorEnvironments fold: [:a :b | a fold: b]) openEditor]].	^false</body><body package="Browser-BrowserUI" selector="createMethodRemovalChange:">createMethodRemovalChange: aCollectionOfMethodDefinitions	"Create the change object used to remove the current methods. If they are overriden, find out how they want to deal with those. If they cancel, return nil."	| changes |	changes := CompositeRefactoryChange				named: #RemoveMethods &lt;&lt; #IDE &gt;&gt; 'Remove Methods'.	aCollectionOfMethodDefinitions do: 			[:each |			(each isPatched and: 					[(Dialog						choose: (#x1pIsOverridden &lt;&lt; #IDE &gt;&gt; '&lt;1p&gt; is overridden'								expandMacrosWith: each)						fromVerticallyAlignedButtonsWithLabels: (Array								with: #RestoreOverridden &lt;&lt; #IDE &gt;&gt; 'Restore Overridden'								with: #RemoveFromSystem &lt;&lt; #IDE &gt;&gt; 'Remove from System'								with: #Cancel &lt;&lt; #IDE &gt;&gt; 'Cancel')						values: (Array								with: [true]								with: [false]								with: [^nil])						default: [false]) value])				ifTrue: 					[changes restoreOverriddenMethod: each selector for: each implementingClass]				ifFalse: [changes removeMethod: each selector from: each implementingClass]].	changes pruneEmptiedMethodCategories.	^changes</body><body package="Browser-BrowserUI" selector="removeFromList">removeFromList	self changeRequest ifFalse: [^self].	self definitions do: 			[:each | 			each isForSharedVariable 				ifTrue: 					[self environment 						removeInitializer: (each classOrNameSpace fullyQualifiedReference 								append: each variableName)]				ifFalse: 					[self environment removeClass: each implementingClass						selector: each selector]].	self refreshLists</body><body package="Browser-BrowserUI" selector="removeMethodOrStaticOverride">removeMethodOrStaticOverride	self isSharedVariableSelected 		ifTrue: [self removeSharedVariableOverride]		ifFalse: [self removeMethodOverride]</body><body package="Browser-BrowserUI" selector="removeMethodOverride">removeMethodOverride	| overs over |	overs := Override overridesForSelector: self selector				class: self selectedClass.	over := self 				choose: (#ChooseOverrideToRemove &lt;&lt; #browser &gt;&gt; 'Choose override to remove')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RemoveOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="removeMethods">removeMethods	"Remove the selected methods. We dispense with a confirm dialog. But we do take note of methods that have references, and in that case try to give meaningful information that allows them to remove anyway, or browse the references."	| changes |	self changeRequest ifFalse: [^self].	changes := (self createMethodRemovalChange: self methodDefinitions)				ifNil: [^self].	(self validateMethodRemovalChange: changes) ifFalse: [^self].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="validateMethodRemovalChange:">validateMethodRemovalChange: aCompositeChange	"Determine if any of the method removals have senders else where in the system. If they do, have a dialog with the user about what to do about it (cancel, proceed, or browse them), return true/false based on whether the change should be allowed to proceed."	"First step is to extract the removals (there may be override adjustments in there too), and then build a map of removals to reference environments."	| ws definitionPrintSelector removals referenceEnvironments filteredDefinitions |	removals := aCompositeChange changes				select: [:each | each isKindOf: RemoveMethodChange].	referenceEnvironments := Dictionary new.	self showWaitCursorWhile: 			[removals do: 					[:each |					each methodDefinition hasSuperImplementor						ifFalse: 							[referenceEnvironments at: each selector								ifAbsentPut: [each referenceEnvironment]]]].	"Filter out any cases where the only reference is self referential (i.e. a recursive method)"	referenceEnvironments := referenceEnvironments reject: 					[:each |					each isEmpty or: 							[each numberSelectors = 1 and: 									[each methodDefinitions any selector										= (referenceEnvironments keyAtValue: each)]]].	referenceEnvironments isEmpty ifTrue: [^true].	ws := String new writeStream.	ws		nextPutAll: (#MethodRemovalsReferencedElsewhereC &lt;&lt; #browser					&gt;&gt; 'Some of the methods to be removed are referenced elsewhere in the system:')						asString;		cr.	"Determine how rich to print the method definitions of the removal. If they're all in the same class (usually the case), then contextually, just printing the selector is enough."	filteredDefinitions := (removals collect: #methodDefinition)				select: [:each | referenceEnvironments includesKey: each selector].	definitionPrintSelector := (filteredDefinitions				collect: #implementingClass) size				= 1 ifTrue: [#selector] ifFalse: [#printString].	self showWaitCursorWhile: 			[filteredDefinitions asSortedCollection do: 					[:each |					ws						cr;						tab;						nextPutAll: (each perform: definitionPrintSelector);						nextPutAll: ' -- ';						nextPutAll: ((referenceEnvironments at: each selector)									dispositionToMethodRemoval: each) asString]].	^self confirmRemoval: ws contents references: referenceEnvironments</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>removal-shares</category><body package="Browser-BrowserUI" selector="createSharedVariableRemovalChange:">createSharedVariableRemovalChange: aCollectionOfBindingReferences	"Create the change object used to remove the current shared variables. If they are overriden, find out how they want to deal with those. If they cancel, return nil."	| changes |	changes := CompositeRefactoryChange				named: #RemoveShares &lt;&lt; #browser &gt;&gt; 'Remove Shares'.	aCollectionOfBindingReferences do: 			[:eachReference |			(eachReference isPatched and: 					[(Dialog						choose: (#x1pIsOverridden &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; is overridden'								expandMacrosWith: eachReference)						fromVerticallyAlignedButtonsWithLabels: (Array								with: #RestoreOverridden &lt;&lt; #browser &gt;&gt; 'Restore Overridden'								with: #RemoveFromSystem &lt;&lt; #browser &gt;&gt; 'Remove from System'								with: #Cancel &lt;&lt; #browser &gt;&gt; 'Cancel')						values: (Array								with: [true]								with: [false]								with: [^nil])						default: [false]) value])				ifTrue: [changes restoreOverriddenShareReference: eachReference]				ifFalse: [changes removeSharedVariableNamed: eachReference asString]].	changes pruneEmptiedSharedVariableCategories.	^changes</body><body package="Browser-BrowserUI" selector="removeSharedVariableOverride">removeSharedVariableOverride	| overs over |	overs := Override overridesForStatic: (self classOrNameSpace 						bindingFor: self sharedVariableName)				in: self classOrNameSpace.	over := self 				choose: (#ChooseOverrideToRemove &lt;&lt; #browser &gt;&gt; 'Choose override to remove')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RemoveOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="removeSharedVariables">removeSharedVariables	| changes sharedVariableReferences |	self changeRequest ifFalse: [^self].	sharedVariableReferences := self sharedVariableNames collect: 					[:each |					(self classOrNameSpace unambiguousName , '.' , each) asQualifiedReference].	changes := (self				createSharedVariableRemovalChange: sharedVariableReferences) ifNil: [^self].	(self validateSharedVariableRemovalChange: changes) ifFalse: [^self].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="validateSharedVariableRemovalChange:">validateSharedVariableRemovalChange: aCompositeChange	"Determine if any of the shared variable removals have references from else where in the system."		| ws references removals |	"First step is to extract the removals (there may be override adjustments in there too)."	removals := (aCompositeChange changes		select: [:each | each isKindOf: RemoveSharedVariableChange]) collect:			#bindingReference.	references := Dictionary new.	self		showWaitCursorWhile:			[removals				do:					[:each | 					references						at: each						put: (BrowserEnvironment new referencesTo: each binding)]].	references := references reject: #isEmpty.	references isEmpty ifTrue: [^true].	ws := String new writeStream.	ws		nextPutAll:				(#ShareRemovalsReferencedElsewhereC &lt;&lt; #browser &gt;&gt;							'Some of the shared variables to be removed are referenced elsewhere in the system:')						asString;		cr.	references keys asSortedCollection		do:			[:each | 			ws				cr;				tab;				nextPutAll: each toolListDisplayString;				nextPutAll: ' -- ';				nextPutAll:						((references at: each) dispositionToSharedVariableRemoval: each) asString].	^self		confirmRemoval: ws contents		references: references</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>removal-scopes</category><body package="Browser-BrowserUI" selector="createObjectRemovalChange">createObjectRemovalChange	"Create the change object used to remove the current classes and namespaces. If they are overriden, find out how they want to deal with those. If they cancel, return nil."		| changes |	changes := CompositeRefactoryChange		named: #RemoveObjects &lt;&lt; #browser &gt;&gt; 'Remove Objects'.	self objectNamesOrderedForRemoval		do:			[:each | 			each asQualifiedReference value				ifNotNil:					[:object | 					(object isPatched						and:							[(Dialog								choose:									(#x1pIsOverridden &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; is overridden' expandMacrosWith:											each)								fromVerticallyAlignedButtonsWithLabels:									(Array										with: #RestoreOverridden &lt;&lt; #browser &gt;&gt; 'Restore Overridden'										with: #RemoveFromSystem &lt;&lt; #browser &gt;&gt; 'Remove from System'										with: #Cancel &lt;&lt; #browser &gt;&gt; 'Cancel')								values:									(Array										with: [true]										with: [false]										with: [^nil])								default: [false]) value])						ifTrue: [changes restoreOverriddenObject: object]						ifFalse: [changes removeObject: object]]].	^changes</body><body package="Browser-BrowserUI" selector="explainClassRemoval:subclassVictims:">explainClassRemoval: aClass subclassVictims: aSetOfClasses		aSetOfClasses size = 1		ifTrue:			[^aSetOfClasses any package = aClass package				ifTrue:					[#unselectedSubclass1sPSamePackageP &lt;&lt; #browser &gt;&gt;							'unselected subclass &lt;1s&gt; (same package)'						expandMacrosWith: aSetOfClasses any toolListDisplayString]				ifFalse:					[^#unselectedSubclass1sPFoundIn2pP &lt;&lt; #browser &gt;&gt;							'unselected subclass &lt;1s&gt; (found in &lt;2p&gt;)'						expandMacrosWith: aSetOfClasses any toolListDisplayString						with: aSetOfClasses any package]].	(aSetOfClasses collect: #package) size = 1		ifTrue:			[^#x1pUnselectedSubclassesPFoundIn2pP &lt;&lt; #browser &gt;&gt;					'&lt;1p&gt; unselected subclasses (found in &lt;2p&gt;)'				expandMacrosWith: aSetOfClasses size				with: aSetOfClasses any package].	^#x1pUnselectedSubclasses &lt;&lt; #browser &gt;&gt;			'&lt;1p&gt; unselected subclasses' expandMacrosWith: aSetOfClasses size</body><body package="Browser-BrowserUI" selector="explainScopeRemoval:containedVictims:">explainScopeRemoval: aScope containedVictims: aSetOfScopes		aSetOfScopes size = 1		ifTrue:			[^aSetOfScopes any package = aScope package				ifTrue:					[#ScopeRemovalRemoves1UnselectedObjectsSamePackage &lt;&lt; #browser &gt;&gt;							'unselected objects &lt;1s&gt; (same package)'						expandMacrosWith: aSetOfScopes any toolListDisplayString]				ifFalse:					[^#ScopeRemovalRemoves1UnselectedObjectDifferentPackage &lt;&lt; #browser &gt;&gt;							'unselected objects &lt;1s&gt; (found in &lt;2p&gt;)'						expandMacrosWith: aSetOfScopes any toolListDisplayString						with: aSetOfScopes any package]].	(aSetOfScopes collect: #package) size = 1		ifTrue:			[^#ScopeRemovalRemovesNUnselectedObjectsSamePackage &lt;&lt; #browser &gt;&gt;					'&lt;1p&gt; unselected objects (found in &lt;2p&gt;)'				expandMacrosWith: aSetOfScopes size				with: aSetOfScopes any package].	^#ScopeRemovalRemovesNUnselectedObjectsUnlikePackages &lt;&lt; #browser &gt;&gt;			'&lt;1p&gt; unselected objects' expandMacrosWith: aSetOfScopes size</body><body package="Browser-BrowserUI" selector="removeObjectOverride">removeObjectOverride	| over overs |	overs := Override overridesForClassOrNameSpace: self classOrNameSpace.	over := self 				choose: (#ChooseOverrideToRemove &lt;&lt; #browser &gt;&gt; 'Choose override to remove')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RemoveOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="removeObjects">removeObjects		| changes |	self changeRequest ifFalse: [^self].	changes := self createObjectRemovalChange ifNil: [^self].	(self validateObjectRemovalChange: changes) ifFalse: [^self].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="validateObjectRemovalChange:">validateObjectRemovalChange: aCompositeChange	"Determine if any of the object removals have references from else where in the system. We need to consider not only the objects themselves, but any contained objects (or subclasses) as well. If they do, have a dialog with the user about what to do about it (cancel, proceed, or browse them), return true/false based on whether the change should be allowed to proceed.First step is to extract the removals (there may be override adjustments in there too)."	| ws selectedRemovals classesWithChild notEmptyNamespaces references warningChunks allRemovals |	selectedRemovals := ((aCompositeChange changes select: [:each | each isKindOf: RemoveObjectChange]) collect: #changeObject)				asSet.	classesWithChild := Set new.	notEmptyNamespaces := Set new.	allRemovals := selectedRemovals copy.	selectedRemovals do: 			[:eachSelection |			eachSelection isNameSpace				ifTrue: 					[| victims |					victims := eachSelection withAllNameSpacesAndAllClasses.					selectedRemovals do: [:eachRemoval | victims remove: eachRemoval ifAbsent: []].					victims isEmpty						ifFalse: 							[notEmptyNamespaces add: eachSelection.							allRemovals addAll: victims]]				ifFalse: 					[eachSelection allSubclasses do: 							[:eachSubclass |							(selectedRemovals includes: eachSubclass)								ifFalse: 									[allRemovals add: eachSubclass.									classesWithChild add: eachSelection]]]].	references := Dictionary new.	self showWaitCursorWhile: 			[allRemovals do: [:each | references at: each put: (BrowserEnvironment new referencesTo: each fullyQualifiedReference binding)]].	references do: [:eachEnvironment | eachEnvironment removeScopes: allRemovals].	references := references reject: #isEmpty.	(references isEmpty and: [classesWithChild isEmpty and: [notEmptyNamespaces isEmpty]]) ifTrue: [^true].	warningChunks := OrderedCollection new.	references isEmpty		ifFalse: 			[ws := String new writeStream.			ws				nextPutAll: (#ObjectRemovalsReferencedElsewhereC &lt;&lt; #browser						&gt;&gt; 'Some of the objects to be removed are referenced elsewhere in the system:') asString.			(references keys asSortedCollection: [:a :b | a name &lt; b name]) do: 					[:each |					ws nextPutAll: ('&lt;n&gt;&lt;t&gt;&lt;1s&gt; -- &lt;2s&gt;' expandMacrosWith: each toolListDisplayString								with: ((references at: each) dispositionToObjectRemoval: each))].			warningChunks add: ws contents].	classesWithChild isEmpty		ifFalse: 			[ws := String new writeStream.			ws nextPutAll: (#ClassesToRemoveHaveChildrenC &lt;&lt; #browser &gt;&gt; 'Some of the classes to be removed have unselected subclasses:')						asString.			(classesWithChild asSortedCollection: [:a :b | a name &lt; b name]) do: 					[:each |					ws nextPutAll: ('&lt;n&gt;&lt;t&gt;&lt;1s&gt; -- &lt;2s&gt;' expandMacrosWith: each toolListDisplayString								with: (self explainClassRemoval: each subclassVictims: each allSubclasses asSet - selectedRemovals))].			warningChunks add: ws contents].	notEmptyNamespaces isEmpty		ifFalse: 			[ws := String new writeStream.			ws				nextPutAll: (#NamespacesToRemoveAreNotEmpty &lt;&lt; #browser &gt;&gt; 'Some of the namespaces to be removed contain unselected items:')						asString.			(notEmptyNamespaces asSortedCollection: [:a :b | a name &lt; b name]) do: 					[:each |					ws nextPutAll: ('&lt;n&gt;&lt;t&gt;&lt;1s&gt; -- &lt;2s&gt;' expandMacrosWith: each toolListDisplayString								with: (self explainScopeRemoval: each containedVictims: each withAllNameSpacesAndAllClasses asSet - selectedRemovals))].			warningChunks add: ws contents].	^self confirmRemoval: (warningChunks fold: [:a :b | '&lt;1s&gt;&lt;n&gt;&lt;n&gt;&lt;2s&gt;' expandMacrosWith: a with: b]) references: references</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>obsolete</category><body package="Browser-BrowserUI" selector="removeMethod">removeMethod	"Obsolete"		^self removeMethods</body><body package="Browser-BrowserUI" selector="removeMethodSafe">removeMethodSafe	"Obsolete"		^self removeMethods</body><body package="Browser-BrowserUI" selector="removeObject">removeObject	"obsolete"		self removeObjects</body><body package="Browser-BrowserUI" selector="removeObjectsSafe">removeObjectsSafe	"obsolete"		self removeObjects</body><body package="Browser-BrowserUI" selector="removeSharedVariable">removeSharedVariable	"obsolete"		self removeSharedVariables</body><body package="Browser-BrowserUI" selector="removeSharedVariableSafe">removeSharedVariableSafe	"obsolete"		self removeSharedVariables</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="classSpecQuery">classSpecQuery		^[:navigator | 	navigator environment useSingleClassNavigator		ifTrue:			[| classRef classNames |			classNames := navigator environment classNames asArray.			classNames isEmpty				ifTrue: [nil]				ifFalse:					[| packages |					classRef := classNames first asQualifiedReference.					packages := Store.Registry packagesContaining: classRef value.					navigator						addConstantStateBlock:							[:ns | 							ns pundles: packages.							ns objectName: classNames first].					#classWindowSpec]]		ifFalse: [nil]]</body><body package="Browser-BrowserUI" selector="updatePackageListsInOpenWindows">updatePackageListsInOpenWindows	self allInstancesDo:		[:navigator | | window safeToUpdate |		safeToUpdate :=			[window := navigator builder window.			window isOpen]				on: Error				do: [:ex | false].		safeToUpdate ifTrue: [[navigator updatePackageList] uiEventFor: window]]</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="canPerformPullUpVariable">canPerformPullUpVariable	| instVar class |	class := self variableClass.	instVar := self selectedInstanceVariable.	class isNil | instVar isNil ifTrue: [^false].	^(self doesClass: class defineInstanceVariable: instVar) not</body><body package="Browser-BrowserUI" selector="canPerformRemoveVariable">canPerformRemoveVariable	| instVar class |	class := self variableClass.	instVar := self selectedInstanceVariable.	class isNil | instVar isNil ifTrue: [^false].	^environment isEmpty</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changedInstanceVariable">changedInstanceVariable	| newEnv selectedVariable |	selectedVariable := self selectedInstanceVariable.	newEnv := selectedVariable isNil 				ifTrue: [variableEnvironment]				ifFalse: 					[variableEnvironment environmentForInstanceVariable: selectedVariable						in: self variableClass].	self selectEnvironment: newEnv</body><body package="Browser-BrowserUI" selector="changedVariableClass">changedVariableClass	| class |	class := self variableClass.	class isNil 		ifTrue: 			[self instanceVariableList list: List new.			self selectEnvironment: self environment]		ifFalse: 			[self instanceVariableList 				list: (variableEnvironment instanceVariablesFor: class) asSortedCollection 						asList.			self selectEnvironment: SelectorEnvironment new]</body><body package="Browser-BrowserUI" selector="selectEnvironment:">selectEnvironment: newEnv 	environment := newEnv.	super setState: self navigatorStateClass new</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="doesClass:defineInstanceVariable:">doesClass: class defineInstanceVariable: instVar 	^class allInstVarNames includes: instVar</body><body package="Browser-BrowserUI" selector="instanceVariableMenuHolder">instanceVariableMenuHolder	instanceVariableMenuHolder isNil 		ifTrue: 			[instanceVariableMenuHolder := self buildTopLevelMenuFrom: #variableMenu].	^instanceVariableMenuHolder</body><body package="Browser-BrowserUI" selector="windowMenuItems">windowMenuItems	| items |	items := OrderedCollection 				with: (#_Variable &lt;&lt; #browser &gt;&gt; '&amp;Variable') asString -&gt; self instanceVariableMenuHolder.	items addAll: super windowMenuItems.	^items</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="environment:">environment: anEnvironment 	super environment: anEnvironment.	variableEnvironment := anEnvironment</body><body package="Browser-BrowserUI" selector="getState">getState	| newState |	newState := super getState.	newState		propertyAt: #variableClassName put: self variableClassName;		propertyAt: #instanceVariable put: self selectedInstanceVariable.	^newState</body><body package="Browser-BrowserUI" selector="selectedInstanceVariable">selectedInstanceVariable	^self instanceVariableList selection</body><body package="Browser-BrowserUI" selector="setState:">setState: aNavigatorState 	self variableClassList 		selection: (aNavigatorState propertyAt: #variableClassName ifAbsent: [nil]).	self changedVariableClass.	self instanceVariableList 		selection: (aNavigatorState propertyAt: #instanceVariable ifAbsent: [nil]).	self selectedInstanceVariable notNil 		ifTrue: [self changedInstanceVariable].	^super setState: aNavigatorState</body><body package="Browser-BrowserUI" selector="variableClass">variableClass	| name |	name := self variableClassName.	^name notNil ifTrue: [self variableClassForName: name] ifFalse: [nil]</body><body package="Browser-BrowserUI" selector="variableClassName">variableClassName	^self variableClassList selection</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="instanceVariableList">instanceVariableList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^instanceVariableList isNil 		ifTrue: [instanceVariableList := SelectionInList new]		ifFalse: [instanceVariableList]</body><body package="Browser-BrowserUI" selector="variableClassList">variableClassList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^variableClassList isNil		ifTrue:			[variableClassList := SelectionInList new]		ifFalse:			[variableClassList]</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self updateNavigator</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>private</category><body package="Browser-BrowserUI" selector="refreshLists">refreshLists	| selection |	selection := self variableClassList selection.	self variableClassList 		list: variableEnvironment classNamesWithVariables asSortedCollection asList.	self variableClassList selection: selection.	self changedVariableClass.	super refreshLists</body><body package="Browser-BrowserUI" selector="variableClassForName:">variableClassForName: aSymbol 	| class index |	aSymbol isNil ifTrue: [^nil].	(index := aSymbol indexOf: $ ) &gt; 0 		ifTrue: 			[class := (aSymbol copyFrom: 1 to: index - 1) asQualifiedReference 						valueOrDo: [nil].			class isBehavior ifFalse: [^nil].			^class class]		ifFalse: 			[class := aSymbol asQualifiedReference valueOrDo: [nil].			class isBehavior ifFalse: [^nil].			^class]</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>accessing-browser</category><body package="Browser-BrowserUI" selector="spec">spec	^self 		replace: #navigatorSpec		with: self windowSpecSymbol		in: self class HorizontalWindowSpec</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>refactorings</category><body package="Browser-BrowserUI" selector="pullUpSelectedInstanceVariable">pullUpSelectedInstanceVariable	| class variable |	class := self variableClass.	variable := self selectedInstanceVariable.	class isNil | variable isNil ifTrue: [^self].	self handleError: 			[self 				performRefactoring: (PullUpInstanceVariableRefactoring variable: variable						class: class)]</body><body package="Browser-BrowserUI" selector="removeSelectedInstanceVariable">removeSelectedInstanceVariable	| class variable |	self changeRequest ifFalse: [^self].	class := self variableClass.	variable := self selectedInstanceVariable.	class isNil | variable isNil ifTrue: [^self].	self handleError: 			[self 				performRefactoring: (RemoveInstanceVariableRefactoring variable: variable						class: class).			variableEnvironment removeClass: class instanceVariable: variable.			self refreshLists]</body></methods><methods><class-id>Refactory.Browser.VariableNavigator class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="navigatorTypes">navigatorTypes	^#()</body></methods><methods><class-id>Refactory.Browser.BrowserStatusWidget</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: anObject	codeModel := anObject</body><body package="Browser-BrowserUI" selector="touch">touch	"Subclasses should check to see if they need to update whenever they are 'touch'ed."</body></methods><methods><class-id>Refactory.Browser.BrowserStatusWidget</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="release">release	codeModel := nil.	^super release</body></methods><methods><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id> <category>displaying</category><body package="Browser-BrowserUI" selector="displayBorderIn:on:">displayBorderIn: box on: aGC	aGC		paint: SymbolicPaint textDataBorder;		displayRectangularBorder: box</body><body package="Browser-BrowserUI" selector="displayInputFieldIn:on:">displayInputFieldIn: box on: aGC	| oldTranslation oldClip |	oldTranslation := aGC translation.	oldClip := aGC clippingRectangleOrNil.	aGC intersectClip: box.	aGC translateBy: box origin.	[inputField displayOn: aGC]		ensure:			[aGC				translation: oldTranslation;				clippingRectangle: oldClip]</body><body package="Browser-BrowserUI" selector="displayOn:">displayOn: aGC		| box |	self isEmpty ifTrue: [^self].	box := self bounds insetBy: (2 @ 2 corner: 3 @ 3).	self displayBorderIn: box on: aGC.	box := box insetBy: 1.	self displayInputFieldIn: box on: aGC</body></methods><methods><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id> <category>event driven</category><body package="Browser-BrowserUI" selector="handlerForMouseEvent:">handlerForMouseEvent: aMouseEvent		^inputField ifNotNil: [:if | if handlerForMouseEvent: aMouseEvent]</body></methods><methods><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id> <category>private</category><body package="Browser-BrowserUI" selector="compositionBoundsFor:">compositionBoundsFor: myInputField	^Point zero extent: (myInputField propertyAt: #frame) extent</body><body package="Browser-BrowserUI" selector="graphicsContextFor:">graphicsContextFor: myInputField	| box gc |	box := myInputField propertyAt: #frame.	gc := self parent graphicsContextFor: self.	gc intersectClip: box.	gc translateBy: box origin.	^gc</body><body package="Browser-BrowserUI" selector="updateIsActive">updateIsActive	| isCurrentlyActive |	isCurrentlyActive := self isEmpty not.	(self propertyAt: #isActive) == isCurrentlyActive ifTrue: [^self].	self propertyAt: #isActive put: isCurrentlyActive.	self changedPreferredBounds: nil</body><body package="Browser-BrowserUI" selector="updateStatus">updateStatus	codeModel selector notNil ifTrue: [^self updateStatusForMethod].	codeModel sharedVariableName notNil		ifTrue: [^self updateStatusForSharedVariable].	codeModel classOrNameSpace notNil		ifTrue: [^self updateStatusForClassOrNameSpace].	codeModel pundle notNil ifTrue: [^self updateStatusForPundle].	self updateStatusForNoSelection</body><body package="Browser-BrowserUI" selector="updateStatusForClassOrNameSpace">updateStatusForClassOrNameSpace	| classOrNameSpace |	classOrNameSpace := codeModel classOrNameSpace.	self		statusText:			(classOrNameSpace isBehavior				ifTrue: [self statusTextForClass: classOrNameSpace]				ifFalse: [self statusTextForNameSpace: classOrNameSpace])</body><body package="Browser-BrowserUI" selector="updateStatusForMethod">updateStatusForMethod	| selector class |	selector := codeModel selector.	class := codeModel selectedClass whichClassIncludesSelector: selector.	class ifNil: [^self updateStatusForNoSelection].	self statusText: (self statusTextForSelector: selector andClass: class)</body><body package="Browser-BrowserUI" selector="updateStatusForNoSelection">updateStatusForNoSelection	self statusText: ''</body><body package="Browser-BrowserUI" selector="updateStatusForPundle">updateStatusForPundle	| pundle |	pundle := codeModel pundle.	self statusText: (self statusTextForPundle: pundle)</body><body package="Browser-BrowserUI" selector="updateStatusForSharedVariable">updateStatusForSharedVariable	| variable classOrNameSpace |	variable := codeModel sharedVariableName.	classOrNameSpace := codeModel classOrNameSpace.	classOrNameSpace ifNil: [^self updateStatusForNoSelection].	self		statusText:			(self statusTextForSharedVariable: variable in: classOrNameSpace)</body></methods><methods><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="flushCoordinateCaches">flushCoordinateCaches	super flushCoordinateCaches.	inputField flushCoordinateCaches</body><body package="Browser-BrowserUI" selector="initialize">initialize		super initialize.	self initInputField.	self updateIsActive</body><body package="Browser-BrowserUI" selector="initInputField">initInputField	inputField := InputFieldView model: nil asValue.	inputField beReadOnly.	inputField displaySelection: false.	inputField textStyle: (TextAttributes styleNamed: #systemDefault).	inputField setFrame: Rectangle zero.	inputField container: self</body><body package="Browser-BrowserUI" selector="release">release	inputField release.	^super release</body></methods><methods><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id> <category>text generation</category><body package="Browser-BrowserUI" selector="statusTextForClass:">statusTextForClass: aClassOrNameSpace	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="statusTextForNameSpace:">statusTextForNameSpace: aClassOrNameSpace	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="statusTextForPundle:">statusTextForPundle: aPundle	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="statusTextForSelector:andClass:">statusTextForSelector: aSelector andClass: aClass	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="statusTextForSharedVariable:in:">statusTextForSharedVariable: aSymbol in: aClassOrNameSpace	^self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEmpty">isEmpty	^self statusText		ifNotNil: [:text | text isEmpty]		ifNil: [true]</body></methods><methods><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id> <category>bounds accessing</category><body package="Browser-BrowserUI" selector="bounds:">bounds: aBounds		super bounds: aBounds.	inputField		propertyAt: #frame		put: ((Point zero extent: aBounds extent) insetBy: 3)</body><body package="Browser-BrowserUI" selector="preferredBounds">preferredBounds	^inputField preferredBounds</body></methods><methods><class-id>Refactory.Browser.SimpleTextSelectionStatus</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="childrenDo:">childrenDo: aBlock	aBlock value: inputField</body><body package="Browser-BrowserUI" selector="statusText">statusText	^inputField editValue</body><body package="Browser-BrowserUI" selector="statusText:">statusText: aText	inputField editText: aText.	self invalidate</body><body package="Browser-BrowserUI" selector="touch">touch	self updateStatus.	self updateIsActive</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="convertToSourceInterval:">convertToSourceInterval: anInterval 	"Convert the selected interval from our text widget, to the interval in the stored source code.	For this widget, we don't need to do anything."	^anInterval</body><body package="Browser-BrowserUI" selector="isMethod">isMethod	^true</body><body package="Browser-BrowserUI" selector="modifiedTextColor">modifiedTextColor	^ColorValue red</body><body package="Browser-BrowserUI" selector="newMethodPatternFrom:">newMethodPatternFrom: node	| argName ws |	ws := String new writeStream.	argName := 'anObject'.	node selectorPartsDo: [:selectorPart | ws nextPutAll: selectorPart value]		argumentsDo: [:argument |			ws space.			argument isVariable				ifTrue: [ws nextPutAll: argument name]				ifFalse: [ws nextPutAll: argName.					(argName anySatisfy: #isDigit)						ifTrue: [argName := (argName reject: #isDigit)										, ((argName select: #isDigit) asNumber + 1) printString]						ifFalse: [argName := 'anObject2']].			ws space].	^self formattedText: ws contents</body><body package="Browser-BrowserUI" selector="updateSelection">updateSelection	| interval |	interval := self environment selectionIntervalFor: self text.	interval isNil ifTrue: [^self].	self selectFrom: interval first to: interval last.</body><body package="Browser-BrowserUI" selector="updateTextWidget">updateTextWidget	| widget prefs |	builder isNil ifTrue: [^self].	widget := builder componentAt: #textEditor.	widget isNil ifTrue: [^self].	modified 		= (widget lookPreferences foregroundColor = self modifiedTextColor) 			ifTrue: [^self].	prefs := modified 				ifTrue: [initialLookPrefs copy foregroundColor: self modifiedTextColor]				ifFalse: [initialLookPrefs].	widget lookPreferences: prefs</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController 	modified := nil.	[self compileMethodText: aText from: aController] 		ensure: [modified := false]</body><body package="Browser-BrowserUI" selector="format">format	| newText node |	node := RBParser parseMethod: self textController text				onError: [:aString :position | ^self insertError: aString at: position].	newText := (self formattedNode: node) asText.	newText makeSelectorBoldIn: self methodClass.	self textNoChange: newText</body><body package="Browser-BrowserUI" selector="protocol">protocol	| protocol definition |	protocol := super protocol.	^(protocol isNil and: [(definition := self definition) notNil]) 		ifTrue: [definition protocol]		ifFalse: [protocol]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>refactorings</category><body package="Browser-BrowserUI" selector="extractMethod">extractMethod		self updateRequest ifFalse: [^self].	self		performRefactoring:			(self				preloadSourceTree:					(ExtractMethodRefactoring						extract: (self convertToSourceInterval: self selectedInterval)						from: self selector						in: self methodClass))</body><body package="Browser-BrowserUI" selector="extractToComponent">extractToComponent		self updateRequest ifFalse: [^self].	self		performRefactoring:			(self				preloadSourceTree:					(ExtractMethodToComponentRefactoring						extract: (self convertToSourceInterval: self selectedInterval)						from: self selector						in: self methodClass))</body><body package="Browser-BrowserUI" selector="extractToTemp">extractToTemp		| newName node |	self updateRequest ifFalse: [^self].	node := self findNode.	(node isNil or: [node isValue not])		ifTrue:			[^self warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	newName := self		request:			#EnterNameForTemporaryC &lt;&lt; #browser &gt;&gt; 'Enter name forTemporary:'.	newName isEmpty ifTrue: [^self].	self		performRefactoring:			(self				preloadSourceTree:					(ExtractToTemporaryRefactoring						extract: (self convertToSourceInterval: node sourceInterval)						to: newName						from: self selector						in: self methodClass))</body><body package="Browser-BrowserUI" selector="inlineTemporary">inlineTemporary		| node |	self updateRequest ifFalse: [^self].	node := self findNode.	(node isNil or: [node isAssignment not])		ifTrue:			[^self warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	self		performRefactoring:			(self preloadSourceTree: (InlineTemporaryRefactoring				inline: (self convertToSourceInterval: node sourceInterval)				from: self selector				in: self methodClass))</body><body package="Browser-BrowserUI" selector="preloadSourceTree:">preloadSourceTree: aRefactoring	"Some refactorings which take source intervals may be sensitive to the fact the source in the browser is not the same format as found in the method. When such is the case, we preload the sourceTree into the refactoring, otherwise let the refactorings fetch it at will."		BrowseAutoFormat == true		ifTrue: [aRefactoring sourceTree: (self parseSource: self text asString)].	^aRefactoring</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	ChangeSet addDependent: self.	modified := false</body><body package="Browser-BrowserUI" selector="release">release	ChangeSet removeDependent: self.	builder := nil.	super release</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>messages</category><body package="Browser-BrowserUI" selector="inlineMethod">inlineMethod		| node |	node := self findNode.	(node isNil or: [node isMessage not])		ifTrue:			[^self				warn:					#CouldNotFindMessageSend &lt;&lt; #browser &gt;&gt; 'Could not find message send'].	(node receiver isVariable		and: [#('self' 'super') includes: node receiver name])		ifTrue:			[self				performRefactoring:					(self						preloadSourceTree:							(InlineMethodRefactoring								inline: (self convertToSourceInterval: node sourceInterval)								inMethod: self selector								forClass: self methodClass))]		ifFalse:			[self				performRefactoring:					(self						preloadSourceTree:							(InlineMethodFromComponentRefactoring								inline: (self convertToSourceInterval: node sourceInterval)								inMethod: self selector								forClass: self methodClass))]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	initialLookPrefs := (builder componentAt: #textEditor) lookPreferences.	self updateTextWidget.	self textController doNotHandleLocally: #explain</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>temporary variables</category><body package="Browser-BrowserUI" selector="bindTight">bindTight		| node |	node := self findNode.	(node isNil or: [node isVariable not])		ifTrue:			[^self warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	self		performRefactoring:			(self				preloadSourceTree:					(MoveVariableDefinitionRefactoring						bindTight: (self convertToSourceInterval: node sourceInterval)						in: self methodClass						selector: self selector))</body><body package="Browser-BrowserUI" selector="createInstVar">createInstVar	| node |	node := self findNode.	(node isNil or: [node isVariable not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	self performRefactoring: (TemporaryToInstanceVariableRefactoring 				class: self methodClass				selector: self selector				variable: node name)</body><body package="Browser-BrowserUI" selector="inlineParameter">inlineParameter	| node |	node := self findNode.	(node isNil or: [node isVariable not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	self handleError: 			[| ref |			ref := InlineParameterRefactoring 						inlineParameter: node name						in: self methodClass						selector: self selector.			ref execute.			codeModel setSelector: ref newSelector]</body><body package="Browser-BrowserUI" selector="removeParameter">removeParameter	| node |	node := self findNode.	(node isNil or: [node isVariable not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	self handleError: 			[| ref |			ref := RemoveParameterRefactoring 						removeParameter: node name						in: self methodClass						selector: self selector.			ref execute.			codeModel setSelector: ref newSelector]</body><body package="Browser-BrowserUI" selector="renameTemporary">renameTemporary		| newName node |	node := self findNode.	(node isNil or: [node isVariable not])		ifTrue:			[^self warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	newName := self		request: #EnterNewNameC &lt;&lt; #browser &gt;&gt; 'Enter new name:'		initialAnswer: node name.	newName isEmpty ifTrue: [^self].	self		performRefactoring: (self preloadSourceTree: 			(RenameTemporaryRefactoring				renameTemporaryFrom:					(self convertToSourceInterval: node sourceInterval)				to: newName				in: self methodClass				selector: self selector))</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>instance variables</category><body package="Browser-BrowserUI" selector="selectedVariableName">selectedVariableName	| node |	node := self findNode.	^(node notNil and: [node isVariable]) ifTrue: [node name] ifFalse: [nil]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="formatSource:for:">formatSource: aCharacterArray for: aCompiledMethod	| text |	text := aCharacterArray.	BrowseAutoFormat == true ifTrue: [text := self formattedText: text].	text := text asText makeSelectorBoldIn: self methodClass.	aCompiledMethod isProbed ifTrue: [aCompiledMethod highlightProbesIn: text].	text addHyperlinkEmphases.	^text</body><body package="Browser-BrowserUI" selector="formattedNode:">formattedNode: anRBProgramNode	| formatter |	formatter := anRBProgramNode formatterClass new.	(self textController notNil and: [formatter respondsTo: #lineLengthLimit:])		ifTrue: [formatter lineLengthLimit: self textController view bounds width						// (self textController view graphicsContext widthOfString: 'M')].	^formatter format: anRBProgramNode</body><body package="Browser-BrowserUI" selector="formattedText:">formattedText: aText	| node |	[node := RBParser parseMethod: aText] on: Error		do: [:ex |			InputState default altDown ifTrue: [ex pass].			Transcript				show: 'Browse auto format errror: ' , ex errorString;				cr.			^aText].	^self formattedNode: node</body><body package="Browser-BrowserUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	(#(#removeSelector:class: #changeSelector:class: #addSelector:class: #changeSelector:class:attributes: #addSelector:class:attributes:) 		includes: anAspectSymbol) 			ifTrue: 				[modified isNil ifTrue: [^self].	"We're making the modification so don't update the display"				(aParameter first = self selector 					and: [(aParameter at: 2) = self methodClass]) 						ifTrue: 							[modified := true.							self updateTextWidget]]			ifFalse: 				[super 					update: anAspectSymbol					with: aParameter					from: aSender]</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	| compiledMethod source text |	modified := false.	self updateTextWidget.	(self selectors size &gt; 1 or: [self selectedClass isNil])		ifTrue: [^self text: ''].	self selector isNil		ifTrue: [^self text: self selectedClass sourceCodeTemplate asText].	compiledMethod := self methodClass compiledMethodAt: self selector				ifAbsent: [self warn: #MethodHasBeenRemoved &lt;&lt; #pdp &gt;&gt; 'Method has been removed'.					^self text: ''].	source := self methodClass sourceCodeForMethod: compiledMethod				at: self selector.	text := self formatSource: source for: compiledMethod.	self text: text.	self updateSelection</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	super updateDisplay.	self isEditing ifFalse: [self updateSelection]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>global variables</category><body package="Browser-BrowserUI" selector="browseReferencesToGlobal">browseReferencesToGlobal	| binding |	binding := self selectedVariableBinding.	self navigator browseGlobalReferencesTo: binding</body><body package="Browser-BrowserUI" selector="navigateToClass">navigateToClass	| binding |	binding := self selectedVariableBinding.	binding ifNil: [^self].	(self updateRequest and: [self changeRequest]) ifFalse: [^self].	codeModel setBinding: binding.</body><body package="Browser-BrowserUI" selector="openBrowserForClass">openBrowserForClass	| binding |	binding := self selectedVariableBinding.	binding isNil ifTrue: [^self].	(RefactoringBrowser open navigator)		setBinding: binding;		changed</body><body package="Browser-BrowserUI" selector="selectedVariableBinding">selectedVariableBinding	| name |	name := self selectedVariableName.	name isNil ifTrue: [^nil].	^(name includes: $.) 		ifTrue: [name asQualifiedReference bindingOrNil]		ifFalse: [self nameSpace bindingFor: name asSymbol]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="canExtractMethod">canExtractMethod	^self isEditing not and: [self isTextSelected]</body><body package="Browser-BrowserUI" selector="canExtractToTemporary">canExtractToTemporary	^self isEditing not and: 			[| node |			node := self findNode.			node notNil and: [node isValue]]</body><body package="Browser-BrowserUI" selector="canPerformInlineAssignmentRefactoring">canPerformInlineAssignmentRefactoring	^self isEditing not and: [self hasAssignmentSelected]</body><body package="Browser-BrowserUI" selector="canPerformParameterRefactorings">canPerformParameterRefactorings	^self isEditing not and: [self hasParameterSelected]</body><body package="Browser-BrowserUI" selector="canPerformTemporaryVariableRefactorings">canPerformTemporaryVariableRefactorings	^self isEditing not and: [self hasTemporaryVariableSelected]</body><body package="Browser-BrowserUI" selector="findPotentialMNU">findPotentialMNU		| node |	node := self findNode ifNil: [^nil].	^node findPotentialMNUFor: self selectedClass</body><body package="Browser-BrowserUI" selector="hasInstanceVariableSelected">hasInstanceVariableSelected	^super hasInstanceVariableSelected 		and: [self hasTemporaryVariableSelected not]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^codeModel state notNil		and:			[codeModel selector notNil				or: [codeModel protocol notNil and: [codeModel isData not]]]</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#Source &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="addUndefinedMethod">addUndefinedMethod		| node newString targetClass |	self updateRequest ifFalse: [^self].	node := self findPotentialMNU.	newString := self newMethodPatternFrom: node.	targetClass := node receiver		messageSearchClassFromScope: self selectedClass.	targetClass == self selectedClass		ifFalse: [self navigator selectClass: targetClass].	self text: newString.	self textController selectAt: newString size + 2</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>parcel load/unload/save</category><body package="Browser-BrowserUI" selector="preUnloadActionFor:">preUnloadActionFor: aParcel 	self allInstances do: [:each | ChangeSet removeDependent: each]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>autoformat</category><body package="Browser-BrowserUI" selector="browseAutoFormat">browseAutoFormat	^BrowseAutoFormat</body><body package="Browser-BrowserUI" selector="browseAutoFormat:">browseAutoFormat: aBoolean	BrowseAutoFormat := aBoolean</body><body package="Browser-BrowserUI" selector="saveAutoFormat">saveAutoFormat	^SaveAutoFormat</body><body package="Browser-BrowserUI" selector="saveAutoFormat:">saveAutoFormat: aBoolean	SaveAutoFormat := aBoolean</body></methods><methods><class-id>Refactory.Browser.CopyrightNoticeTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^self narrowestSelectionType == #codeComponent</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#CopyrightNotice &lt;&lt; #browser &gt;&gt; 'Copyright'</body></methods><methods><class-id>Refactory.Browser.CopyrightNoticeTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController		self		performChange:			((CodeComponentPropertyChange component: self codeComponent)				propertyAt: #notice				put: aText asString).	self text: aText.	codeModel update.	self navigator refreshLists</body></methods><methods><class-id>Refactory.Browser.CopyrightNoticeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents		| noticeText |	builder ifNil: [^self].	noticeText := (self codeComponent		ifNil: ['']		ifNotNil: [:codeComponent | codeComponent copyrightNotice ifNil: ['']]) asText.	noticeText addHyperlinkEmphases.	self text: noticeText</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="commentTextOn:">commentTextOn: aTextStream	"Print a header and a synopsis of the comment. The 'synopsis' tries to be elegant in that it removes empty lines. And limits the number of printed characters. But tries to find a nice word boundary to chop at."		| comment rs linesWritten trimmed |	self		heading: #Comment &lt;&lt; #browser &gt;&gt; 'Comment'		textOn: aTextStream.	comment := self codeComponent comment.	comment isEmpty ifTrue: [^self noneTextOn: aTextStream].	trimmed := false.	comment size &gt; 333		ifTrue:			[| chopPoint |			trimmed := true.			chopPoint := (333 to: 333 + 33)				detect: [:n | (comment at: n) isAlphaNumeric not]				ifNone: [334].			comment := comment first: chopPoint - 1].	rs := comment readStream.	linesWritten := 0.	[linesWritten &lt; 6 and: [rs atEnd not]]		whileTrue:			[| line |			line := (rs upTo: Character cr) trimBlanks.			line isEmpty				ifFalse:					[linesWritten &gt; 0 ifTrue: [aTextStream cr].					aTextStream nextPutAll: line.					linesWritten := linesWritten + 1]].	trimmed ifTrue: [aTextStream nextPutAll: '...']</body><body package="Browser-BrowserUI" selector="connectionsTextOn:">connectionsTextOn: aTextStream	"Show a line for each connection according to the connections toolText."		| connections |	self		heading: #Repositories &lt;&lt; #browser &gt;&gt; 'Repositories'		textOn: aTextStream.	connections := (self codeComponent isKindOf: Store.PundleModel)		ifTrue:			[(self codeComponent databaseInformations				reject: [:each | each dbIdentifier isEmpty])				sorted: [:a :b | a dbIdentifier &lt; b dbIdentifier]]		ifFalse: [#()].	connections isEmpty ifTrue: [^self noneTextOn: aTextStream].	connections		do: [:each | aTextStream nextPutAllText: each toolText]		separatedBy: [aTextStream cr]</body><body package="Browser-BrowserUI" selector="heading:textOn:">heading: aStringable textOn: aTextStream	"Place a section header for the summary with specific styling on aTextStream."		aTextStream		emphasize: #(#large #bold)			during: [aTextStream nextPutAll: aStringable asString];		cr</body><body package="Browser-BrowserUI" selector="nameTextOn:">nameTextOn: aTextStream	"Print the name at the top big and bold."		aTextStream		emphasize: #(#large #bold #underline)		during: [aTextStream nextPutAll: self codeComponent name]</body><body package="Browser-BrowserUI" selector="noneTextOn:">noneTextOn: aTextStream	"Handy for emitting the &lt;none&gt; text for different sections."		^aTextStream		emphasize:			(Array				with: #color -&gt; SymbolicPaint inactiveForeground				with: #italic)		during: [aTextStream nextPutAll: (#None &lt;&lt; #browser &gt;&gt; '&lt;None&gt;') asString]</body><body package="Browser-BrowserUI" selector="prerequisiteTextOn:">prerequisiteTextOn: aTextStream	"Print the prerequisite section. Provide annotations for the cases where the two prerequisite streams do not match."	self heading: #Prerequisites &lt;&lt; #browser &gt;&gt; 'Prerequisites'		textOn: aTextStream.	self codeComponent prerequisiteDescriptions isEmpty		ifTrue: [^self noneTextOn: aTextStream].	self codeComponent prerequisiteDescriptions do: 			[:each |			aTextStream nextPutAll: each name.			each isParcelOnly				ifTrue: 					[aTextStream						space;						emphasize: (Array with: #color -&gt; ColorValue red with: #italic)							during: 								[aTextStream nextPutAll: ('(&lt;1s&gt;)'											expandMacrosWith: #ParcelOnly &lt;&lt; #IDE &gt;&gt; 'Parcel Only')]].			each isStoreOnly				ifTrue: 					[aTextStream						space;						emphasize: (Array with: #color -&gt; ColorValue orange with: #italic)							during: 								[aTextStream									nextPutAll: ('(&lt;1s&gt;)' expandMacrosWith: #StoreOnly &lt;&lt; #IDE &gt;&gt; 'Store Only')]].			aTextStream cr]</body><body package="Browser-BrowserUI" selector="summaryText">summaryText		| stream |	stream := TextStream on: String new.	self nameTextOn: stream.	stream		cr;		cr.	self commentTextOn: stream.	stream		cr;		cr.	self connectionsTextOn: stream.	stream		cr;		cr.	self prerequisiteTextOn: stream.	^stream contents</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="tabName">tabName		^#Summary &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder		super postBuildWith: aBuilder.	(self textController)		readOnly: true;		selectable: true</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	"What a pain, TextEditorView makes this (where this equals messing with the tabs via the style) kind of hard, so we have to get down and dirty with its guts."		| newText view paragraph newStyle widths left tabs |	newText := self summaryText addHyperlinkEmphases.	self textController ifNil: [^self].	view := self textController view.	paragraph := view displayContents.	newStyle := paragraph textStyle copy.	widths := newText computeMinimumTabWidthsUsing: view graphicsContext.	left := 0.	tabs := widths collect: [:each | left := left + each + 45].	newStyle useTabs: #(1) , tabs.	paragraph		compositionWidth: view wrappingBox width		text: newText		style: newStyle		fitWidth: true.	view		displayContents: paragraph;		invalidate</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="postLoadBlock">postLoadBlock	"Named with the 'Block' because postLoad is superclass implemented."	^(self new)		property: #postLoadBlock;		name: #PostLoad &lt;&lt; #browser &gt;&gt; 'Post-load';		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'Post-load Action';		yourself</body><body package="Browser-BrowserUI" selector="postUnload">postUnload	^(self new)		property: #postUnloadBlock;		name: #PostUnload &gt;&gt; 'Post-unload ' &lt;&lt; #browser;		argumentCount: 0;		defaultSource: '[]';		helpTopic: 'Post-unload Action';		yourself</body><body package="Browser-BrowserUI" selector="preLoad">preLoad	^(self new)		property: #preLoadBlock;		name: #PreLoad &gt;&gt; 'Pre-load' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'Pre-load Action';		yourself</body><body package="Browser-BrowserUI" selector="preRead">preRead	^(self new)		property: #preReadBlock;		name: #PreRead &gt;&gt; 'Pre-read' &lt;&lt; #browser;		argumentCount: 0;		defaultSource: '[booleanExpression]';		helpTopic: 'Pre-read Action';		yourself</body><body package="Browser-BrowserUI" selector="prerequisiteVersionSelection">prerequisiteVersionSelection	^(self new)		property: #versionSelectionBlock;		name: #PrerequisiteVersionSelection &gt;&gt; 'Prerequisite Version Selection' &lt;&lt; #browser;		argumentCount: 3;		defaultSource: '[:parcelName :versionString :requiredVersionString |booleanExpression]';		helpTopic: 'Prerequisite Version Action';		yourself</body><body package="Browser-BrowserUI" selector="preSave">preSave	^(self new)		property: #preSaveBlock;		name: #PreSave &gt;&gt; 'Pre-save' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'Pre-save Action';		yourself</body><body package="Browser-BrowserUI" selector="preUnload">preUnload	^(self new)		property: #preUnloadBlock;		name: #PreUnload &gt;&gt; 'Pre-unload' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'Pre-unload Action';		yourself</body><body package="Browser-BrowserUI" selector="warningSuppression">warningSuppression	^(self new)		property: #warningSuppressionBlock;		name: #WarningSuppression &lt;&lt; #browser &gt;&gt; 'Warning Suppression';		argumentCount: 1;		defaultSource:				'[:prerequisiteName |booleanExpression]';		helpTopic: 'Warning Suppression Action';		yourself</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="restore">restore	| codeComponent |	codeComponent := self codeComponent.	codeComponent isNil 		ifFalse: [codeComponent perform: (property , ':') asSymbol with: nil].	self updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="parseSource:">parseSource: aString 	| tree |	tree := super parseSource: aString.	tree isNil ifTrue: [^nil].	tree isBlock ifFalse: [^nil].	^tree</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="argumentCount:">argumentCount: anInteger	argumentCount := anInteger</body><body package="Browser-BrowserUI" selector="defaultSource:">defaultSource: aString 	defaultSource := aString</body><body package="Browser-BrowserUI" selector="helpTopic:">helpTopic: aString 	helpTopic := aString</body><body package="Browser-BrowserUI" selector="name:">name: anObject	name := anObject</body><body package="Browser-BrowserUI" selector="property:">property: aSymbol	property := aSymbol</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController 	| block codeComponent |	codeComponent := self codeComponent.	codeComponent isNil ifTrue: [^self].	block := self class compilerClass new 				evaluate: aText				in: nil				allowReceiver: false				receiver: nil				environment: Smalltalk				notifying: aController				ifFail: [^self].	(block isKindOf: BlockClosure) 		ifFalse: [^self warn: (#DidNotEvaluateToABlock &lt;&lt; #browser &gt;&gt; 'Did not evaluate to a block')].	block numArgs ~= argumentCount 		ifTrue: 			[^self 				warn: ((#BlockDoesNotHaveCorrectNumArgs1s &lt;&lt; #browser &gt;&gt; 'Block does not have the correct number of arguments (&lt;1s&gt;)')			expandMacrosWith: argumentCount printString)].	codeComponent perform: ((#x1sC &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;:')			expandMacrosWith: property) asSymbol		with: (CodeComponent asActionBlock: aText).	self updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="defaultBlockSource">defaultBlockSource	^defaultSource asText emphasizeAllWith: #italic</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	| codeComponent block |	codeComponent := self codeComponent.	property isNil | codeComponent isNil ifTrue: [^self text: ''].	block := codeComponent perform: property.	self		text:			(block				ifNil: [self defaultBlockSource]				ifNotNil:					[block isString						ifTrue: [block]						ifFalse: [block method getSource]])</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>help</category><body package="Browser-BrowserUI" selector="helpTopic">helpTopic	^helpTopic</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="tabName">tabName	^name asString</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="postLoadBlock">postLoadBlock	"Named with the 'Block' because postLoad is superclass implemented."	^(self new)		property: #postLoadBlock;		name: #PostLoad &lt;&lt; #browser &gt;&gt; 'Post-load';		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'Post-load Action';		yourself</body><body package="Browser-BrowserUI" selector="postUnload">postUnload	^(self new)		property: #postUnloadBlock;		name: #PostUnload &gt;&gt; 'Post-unload ' &lt;&lt; #browser;		argumentCount: 0;		defaultSource: '[]';		helpTopic: 'Post-unload Action';		yourself</body><body package="Browser-BrowserUI" selector="preLoad">preLoad	^(self new)		property: #preLoadBlock;		name: #PreLoad &gt;&gt; 'Pre-load' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'Pre-load Action';		yourself</body><body package="Browser-BrowserUI" selector="preRead">preRead	^(self new)		property: #preReadBlock;		name: #PreRead &gt;&gt; 'Pre-read' &lt;&lt; #browser;		argumentCount: 0;		defaultSource: '[booleanExpression]';		helpTopic: 'Pre-read Action';		yourself</body><body package="Browser-BrowserUI" selector="prerequisiteVersionSelection">prerequisiteVersionSelection	^(self new)		property: #versionSelectionBlock;		name: #PrerequisiteVersionSelection &gt;&gt; 'Prerequisite Version Selection' &lt;&lt; #browser;		argumentCount: 3;		defaultSource: '[:parcelName :versionString :requiredVersionString |booleanExpression]';		helpTopic: 'Prerequisite Version Action';		yourself</body><body package="Browser-BrowserUI" selector="preSave">preSave	^(self new)		property: #preSaveBlock;		name: #PreSave &gt;&gt; 'Pre-save' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'Pre-save Action';		yourself</body><body package="Browser-BrowserUI" selector="preUnload">preUnload	^(self new)		property: #preUnloadBlock;		name: #PreUnload &gt;&gt; 'Pre-unload' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'Pre-unload Action';		yourself</body><body package="Browser-BrowserUI" selector="warningSuppression">warningSuppression	^(self new)		property: #warningSuppressionBlock;		name: #WarningSuppression &lt;&lt; #browser &gt;&gt; 'Warning Suppression';		argumentCount: 1;		defaultSource:				'[:prerequisiteName |booleanExpression]';		helpTopic: 'Warning Suppression Action';		yourself</body></methods><methods><class-id>Refactory.Browser.IconViewer</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self updateContents</body></methods><methods><class-id>Refactory.Browser.IconViewer</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents		| image |	builder ifNil: [^self].	self methodClass ifNil: [^self].	((self methodClass isMeta and: [self selector notNil])		and:			[((self methodClass compiledMethodAt: self selector) resourceType = #image				and: [self selector numArgs = 0])				and:					[image := [self methodClass instanceBehavior perform: self selector]						on: Error						do: [:ex | ex return: nil].					image isKindOf: PixelArray]])		ifTrue: [(builder componentAt: #icon) widget label: image]		ifFalse: [(builder componentAt: #icon) widget label: nil]</body></methods><methods><class-id>Refactory.Browser.IconViewer</class-id> <category>private</category><body package="Browser-BrowserUI" selector="editorClass">editorClass	^#{UIMaskEditor} valueOrDo: [nil]</body><body package="Browser-BrowserUI" selector="resourceType">resourceType	^#image</body></methods><methods><class-id>Refactory.Browser.CanvasViewer</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	self updateDisplay</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	"Update the subcanvas with the current spec. Use a builder that is editing so that	the canvas can be built properly. This can fail if UIPainter is not loaded, so be prepared.	In particular, the subcanvas's container is wiped out during such failed builds, so it must	be restored before installing an error message canvas for the viewer to keep working."	| subcanvas originalContainer |	builder notNil ifTrue: 		[subcanvas := self widgetAt: #subcanvas.		originalContainer := subcanvas container.		[self installPreviewCanvasIn: subcanvas] 			on: Error 			do: [:ex | 				subcanvas container: originalContainer.				self installErrorCanvasIn: subcanvas]].	super updateDisplay</body></methods><methods><class-id>Refactory.Browser.CanvasViewer</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="openSpec">openSpec	self nonMetaClass openWithSpec: self selector</body></methods><methods><class-id>Refactory.Browser.CanvasViewer</class-id> <category>private</category><body package="Browser-BrowserUI" selector="disableSpec:">disableSpec: aFullSpec 	aFullSpec collection do: 			[:each | 			(each isKindOf: SpecCollection) ifTrue: [self disableSpec: each].			(each isKindOf: NamedSpec) ifTrue: [each initiallyDisabled: true]]</body><body package="Browser-BrowserUI" selector="editorClass">editorClass	^#{UIPainter} valueOrDo: [nil]</body><body package="Browser-BrowserUI" selector="installErrorCanvasIn:">installErrorCanvasIn: aSubCanvas	^aSubCanvas		client: self		spec: #errorMessageSpec		builder: self builder newSubBuilder</body><body package="Browser-BrowserUI" selector="installPreviewCanvasIn:">installPreviewCanvasIn: aSubCanvas	^aSubCanvas		client: ApplicationModel new		spec: self spec		builder: (self builderClass new				isEditing: true;				yourself)</body><body package="Browser-BrowserUI" selector="resourceType">resourceType	^#canvas</body><body package="Browser-BrowserUI" selector="spec">spec	| class selector method specArray spec |	class := self selectedClass.	selector := self selector.	specArray := selector notNil 				ifTrue: 					[method := class compiledMethodAt: selector ifAbsent: [nil].					(method notNil and: [method resourceType == #canvas]) 						ifTrue: 							[[self nonMetaClass perform: selector] on: Error								do: [:ex | ex return: self class emptySpec]]						ifFalse: [self class emptySpec]]				ifFalse: [self class emptySpec].	spec := specArray decodeAsLiteralArray.	spec isNil ifTrue: [^nil].	self disableSpec: spec component.	^spec</body></methods><methods><class-id>Refactory.Browser.CanvasViewer</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(aBuilder componentAt: #open) 		ifNotNil: [:wrapper | wrapper isEnabled: (self nonMetaClass respondsTo: #openWithSpec:)]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>browsing</category><body package="Browser-BrowserUI" selector="browseSymbols">browseSymbols	| symbol |	symbol := IncrementalSearchDialog 				requestReferencedSymbol: #EnterASymbolC &lt;&lt; #browser &gt;&gt; 'Enter a symbol:'.	(symbol isNil or: [symbol isEmpty]) ifTrue: [^self].	self navigator browseReferencesTo: symbol</body><body package="Browser-BrowserUI" selector="browseVariables">browseVariables	self showWaitCursorWhile: 			[| searchString env |			searchString := self 						request: (#EnterVarToSearchForRGBrowser &lt;&lt; #browser &gt;&gt; 'Enter variable to search for ("*browser*"):').			(searchString isNil or: [searchString isEmpty]) ifTrue: [^self].			env := ClassEnvironment onEnvironment: self environment.			self environment classesDo: 					[:each | 					(each instVarNames anySatisfy: [:name | searchString match: name]) 						ifTrue: [env addClass: each]].			self class openOnEnvironment: env]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>private</category><body package="Browser-BrowserUI" selector="deselectClass">deselectClass	| state |	state := navigator getState.	state		definitions: #();		protocols: #();		objectNames: #().	navigator updateWithState: state</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="menuBar">menuBar	| menu |	menu := Menu new.	menu		addItem:				((MenuItem labeled: #_Browser &lt;&lt; #browser &gt;&gt; '&amp;Browser')						nameKey: #Browser;						submenu: (self buildTopLevelMenuFrom: #browserMenu);						yourself);		addItem:				((MenuItem labeled: #_Edit &lt;&lt; #browser &gt;&gt; '&amp;Edit')						nameKey: #Edit;						submenu: [self currentToolset menu value];						yourself);		addItem:				((MenuItem labeled: #_Find &lt;&lt; #browser &gt;&gt; '&amp;Find')						nameKey: #Find;						submenu: (self buildTopLevelMenuFrom: #findMenu);						yourself);		addItem:				((MenuItem labeled: #_View &lt;&lt; #browser &gt;&gt; '&amp;View')						nameKey: #View;						submenu: (self buildTopLevelMenuFrom: #viewMenu);						yourself).	navigator windowMenuItems		do:			[:each | 			menu				addItem:					((MenuItem labeled: each key)						nameKey: (each key copyWithout: $&amp;) asSymbol;						submenu: each value;						yourself)].	menu		addItem:				((MenuItem labeled: #Tools &lt;&lt; #browser &gt;&gt; 'Tools')						nameKey: #Tools;						submenu: (self buildTopLevelMenuFrom: #toolsMenu);						yourself);		addItem:				((MenuItem labeled: #Help &lt;&lt; #browser &gt;&gt; 'Help')						nameKey: #Help;						submenu: (self buildTopLevelMenuFrom: #helpMenu);						yourself).	menu		augmentFrom: self class		to: self menuAugmentationRoot		menuName: #menuBar		for: self.	^menu</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initializeOnEnvironment:">initializeOnEnvironment: anEnvironment	super initializeOnEnvironment: anEnvironment.	self policyClass: StateLockPolicy</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="policyClass">policyClass	^policyClass</body><body package="Browser-BrowserUI" selector="policyClass:">policyClass: aLockPolicyClass	policyClass := aLockPolicyClass.	self toolsets do: [:each | each lockPolicyClass: policyClass]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="redoLabel">redoLabel	| manager |	manager := RefactoryChangeManager instance.	^manager hasRedoableOperations 		ifTrue: [((#_Redo1s &lt;&lt; #browser &gt;&gt; '&amp;Redo &lt;1s&gt;')			expandMacrosWith: manager redoChange name)]		ifFalse: [(#_Redo &lt;&lt; #browser &gt;&gt; '&amp;Redo')]</body><body package="Browser-BrowserUI" selector="undoLabel">undoLabel	| manager |	manager := RefactoryChangeManager instance.	^manager hasUndoableOperations 		ifTrue: [((#_Undo1s &lt;&lt; #browser &gt;&gt; '&amp;Undo &lt;1s&gt;')			expandMacrosWith: manager undoChange name)]		ifFalse: [(#_Undo &lt;&lt; #browser &gt;&gt; '&amp;Undo')]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="newBuffer">newBuffer	super newBuffer.	self currentToolset lockPolicyClass: self policyClass</body><body package="Browser-BrowserUI" selector="newClass">newClass	self changeRequest ifFalse: [^self].	self navigator createNewClass</body><body package="Browser-BrowserUI" selector="newNameSpace">newNameSpace		self changeRequest ifFalse: [^self].	self navigator createNewNameSpace</body><body package="Browser-BrowserUI" selector="newSharedVariable">newSharedVariable		self changeRequest ifFalse: [^self].	self navigator createNewSharedVariable</body><body package="Browser-BrowserUI" selector="redoOperation">redoOperation	self changeRequest ifFalse: [^self].	self showWaitCursorWhile: 			[RefactoryChangeManager instance redoOperation.			navigator refreshLists]</body><body package="Browser-BrowserUI" selector="setUndoCount">setUndoCount	"Don't like the isKindOf:, but don't have a portable way to determine if something is a number."	| undoString undoTree |	undoString := self request: (#EnterUndoStackSizeC &lt;&lt; #browser &gt;&gt; 'Enter undo stack size:')				initialAnswer: RefactoryChangeManager undoSize printString.	undoString isEmpty ifTrue: [^self].	undoTree := RBParser parseExpression: undoString				onError: [:str :pos | ^self].	(undoTree isLiteralNode and: [undoTree value respondsToArithmetic]) 		ifFalse: [^self].	RefactoryChangeManager undoSize: undoTree value asInteger</body><body package="Browser-BrowserUI" selector="spawnBrowser">spawnBrowser	self class openWithSelection: self navigator getState</body><body package="Browser-BrowserUI" selector="undoOperation">undoOperation	self changeRequest ifFalse: [^self].	self showWaitCursorWhile: 			[RefactoryChangeManager instance undoOperation.			navigator refreshLists]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="hasRedoableOperations">hasRedoableOperations	^RefactoryChangeManager instance hasRedoableOperations</body><body package="Browser-BrowserUI" selector="hasUndoableOperations">hasUndoableOperations	^RefactoryChangeManager instance hasUndoableOperations</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="reInstallInterface">reInstallInterface	| spec window |	self currentToolset lock.	window := builder window.	self resetBuilder.	window component release.	window controller reInstallEventDispatcher.	builder := self builderClass new.	builder setWindow: window.	builder source: self.	spec := self class interfaceSpecFor: #windowSpec.	self preBuildWith: builder.	builder add: spec.	self postBuildWith: builder.	builder doFinalHookup.	self postOpenWith: builder.	self currentToolset unlock.	^builder</body><body package="Browser-BrowserUI" selector="windowEvent:from:">windowEvent: anEvent from: aWindow	super windowEvent: anEvent from: aWindow.	(#(#newGraphicsDevice #reopen) includes: anEvent key)		ifTrue: [self reInstallInterface]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="openHierarchyOnEnvironment:withSelection:">openHierarchyOnEnvironment: aBrowserEnvironment withSelection: aNavigatorState		^self openOnEnvironment: aBrowserEnvironment state: aNavigatorState		hierarchy: true</body><body package="Browser-BrowserUI" selector="openHierarchyWithSelection:">openHierarchyWithSelection: aNavigatorState 	^self openHierarchyOnEnvironment: BrowserEnvironment new		withSelection: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>compatibility messages</category><body package="Browser-BrowserUI" selector="newOnClass:">newOnClass: aClass 	"Set the default VW class browser to be a Refactoring Browser."	"#(browserType classBrowserType methodListBrowserType) do: [:each | UISettings preferenceFor: each put: 'Refactory.Browser.RefactoringBrowser']"	(self open navigator)		selectClass: aClass;		changed;		beHierarchy</body><body package="Browser-BrowserUI" selector="openListBrowserOn:label:initialSelection:">openListBrowserOn: referenceCollection label: aString initialSelection: selection 	| browserEnvironment |	browserEnvironment := SelectorEnvironment onMethods: referenceCollection.	browserEnvironment label: aString.	selection notNil ifTrue: [browserEnvironment addSearchString: selection].	^self openOnEnvironment: browserEnvironment</body><body package="Browser-BrowserUI" selector="openListBrowserOn:label:initialSelection:spawnedFrom:">openListBrowserOn: methodCollection label: aString initialSelection: selection spawnedFrom: aBrowserOrNil 	^self 		openListBrowserOn: methodCollection		label: aString		initialSelection: selection</body></methods><methods><class-id>Refactory.Browser.SelectionPackageStatus</class-id> <category>label generation</category><body package="Browser-BrowserUI" selector="statusTextForClass:">statusTextForClass: aBehavior	| text component |	text := (#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ') asText allBold.	component := codeModel storeRegistry containingPackageForClass: aBehavior.	^component		ifNil:			[#x1sNotPackaged &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; Not packaged' expandMacrosWith: text]		ifNotNil: [text , component name]</body><body package="Browser-BrowserUI" selector="statusTextForNameSpace:">statusTextForNameSpace: aNameSpace	| text component |	text := (#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ') asText allBold.	component := codeModel storeRegistry		containingPackageForNameSpaceSymbol: aNameSpace absoluteSymbol.	^component		ifNil:			[#x1sNotPackaged &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; Not packaged' expandMacrosWith: text]		ifNotNil: [text , component name]</body><body package="Browser-BrowserUI" selector="statusTextForSelector:andClass:">statusTextForSelector: aSelector andClass: aClass	| text codeComponents |	text := (#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ') asText allBold.	codeComponents := codeModel storeRegistry		allContainingPackagesForSelector: aSelector class: aClass.	text := text		,			(codeComponents isEmpty				ifTrue: [#NotPackaged &lt;&lt; #browser &gt;&gt; 'Not packaged']				ifFalse: [codeComponents asArray first name]).	^text</body><body package="Browser-BrowserUI" selector="statusTextForSharedVariable:in:">statusTextForSharedVariable: aSymbol in: aClassOrNameSpace	| text component |	text := (#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ') asText allBold.	component := codeModel storeRegistry		containingPackageForDataKey: aSymbol		symbol: aClassOrNameSpace absoluteSymbol.	^component notNil		ifTrue: [text , component name]		ifFalse:			[#x1sNotPackaged &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; Not packaged' expandMacrosWith: text]</body></methods><methods><class-id>Refactory.Browser.SelectionPackageStatus</class-id> <category>updating-label</category><body package="Browser-BrowserUI" selector="statusTextForPundle:">statusTextForPundle: pundle	^(#VersionCSpace &lt;&lt; #browser &gt;&gt; 'Version: ') asString asText allBold		, pundle versionString</body></methods><methods><class-id>Refactory.Browser.SelectionPackageStatus</class-id> <category>tooltips</category><body package="Browser-BrowserUI" selector="allConnectionsText">allConnectionsText	"Build a paragraph from the toolTexts of the selections repository connections. Build a style for the paragraph that makes the tabs look good."	| pundle ws paragraph style text columnWidths left |	codeModel state narrowestSelectionType == #codeComponent ifFalse: [^nil].	pundle := codeModel state codeComponent.	pundle databaseInformations isEmpty ifTrue: [^nil].	ws := TextStream on: String new.	((pundle databaseInformations reject: [:each | each dbIdentifier isEmpty])		sorted: [:a :b | a dbIdentifier &lt; b dbIdentifier])			do: [:each | ws nextPutAllText: each toolText]			separatedBy: [ws cr].	text := ws contents.	text isEmpty ifTrue: [^nil].	paragraph := ComposedText withText: text.	style := inputField widgetPolicy lookPolicyClass systemTextStyle copy.	columnWidths := text				computeMinimumTabWidthsUsing: inputField graphicsContext.	left := 0.	style		useTabs: #(1) , (columnWidths collect: [:each | left := left + each + 30]).	paragraph textStyle: style.	^paragraph</body></methods><methods><class-id>Refactory.Browser.SelectionPackageStatus</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initInputField">initInputField		super initInputField.	inputField tooltip: [self allConnectionsText]</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize		super initialize.	inspector := Tools.Trippy.InspectorHolder		with: (CodeComponentPropertiesInspector on: nil).	^self</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	inspector inspector initialize: self codeComponent</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="inspector">inspector	^inspector</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>help</category><body package="Browser-BrowserUI" selector="helpTopic">helpTopic	^'Component Properties'</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="tabName">tabName	^#InspectAll &gt;&gt; 'Inspect All' &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="activeTools">activeTools	^tools select: [:each | each isActive]</body><body package="Browser-BrowserUI" selector="isZoomed:">isZoomed: aBoolean 	isZoomed := aBoolean</body><body package="Browser-BrowserUI" selector="lock">lock	self isLocked ifTrue: [^self].	lockPolicy lock.	self saveState</body><body package="Browser-BrowserUI" selector="navigator">navigator	^navigator</body><body package="Browser-BrowserUI" selector="navigator:">navigator: aNavigator	navigator ifNotNil: [navigator removeDependent: self].	navigator := aNavigator.	navigator addDependent: self.	lockPolicy := StateLockPolicy on: self.	self update</body><body package="Browser-BrowserUI" selector="selectTool:">selectTool: aCodeTool	tabList selection: aCodeTool</body><body package="Browser-BrowserUI" selector="selectedTool">selectedTool	^tabList selection</body><body package="Browser-BrowserUI" selector="state">state	state isNil ifTrue: [state := navigator getState].	^state</body><body package="Browser-BrowserUI" selector="state:">state: anObject	^state := anObject</body><body package="Browser-BrowserUI" selector="tabBarPart">tabBarPart	^(builder componentAt: #tabbedTools) bottomComponent tabBar</body><body package="Browser-BrowserUI" selector="tool">tool	^self selectedTool</body><body package="Browser-BrowserUI" selector="unlock">unlock	self isLocked ifFalse: [^self].	navigator setState: self state.	lockPolicy unlock</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>navigator accessing</category><body package="Browser-BrowserUI" selector="classOrNameSpace">classOrNameSpace	^self state classOrNameSpace</body><body package="Browser-BrowserUI" selector="classesAndNameSpaces">classesAndNameSpaces	^self state classesAndNameSpaces</body><body package="Browser-BrowserUI" selector="definition">definition	^state definition</body><body package="Browser-BrowserUI" selector="definitions">definitions	^state definitions</body><body package="Browser-BrowserUI" selector="environment">environment	^self navigator environment</body><body package="Browser-BrowserUI" selector="isData">isData	^state isData</body><body package="Browser-BrowserUI" selector="methodClass">methodClass	^state methodClass</body><body package="Browser-BrowserUI" selector="nameSpace">nameSpace	^self state nameSpace</body><body package="Browser-BrowserUI" selector="navigatorStateClass">navigatorStateClass	^NavigatorState</body><body package="Browser-BrowserUI" selector="nonMetaClass">nonMetaClass	^self state nonMetaClass</body><body package="Browser-BrowserUI" selector="nonMetaClasses">nonMetaClasses	^self state nonMetaClasses</body><body package="Browser-BrowserUI" selector="objectName">objectName	^self state objectName</body><body package="Browser-BrowserUI" selector="objectNames">objectNames	^self state objectNames</body><body package="Browser-BrowserUI" selector="package">package	^self state package</body><body package="Browser-BrowserUI" selector="packages">packages	^self state packages</body><body package="Browser-BrowserUI" selector="protocol">protocol	^self state protocol</body><body package="Browser-BrowserUI" selector="protocols">protocols	^self state protocols</body><body package="Browser-BrowserUI" selector="pundle">pundle	^state pundle</body><body package="Browser-BrowserUI" selector="pundles">pundles	^state pundles</body><body package="Browser-BrowserUI" selector="selectedBinding">selectedBinding	^self state selectedBinding</body><body package="Browser-BrowserUI" selector="selectedBindings">selectedBindings	^self state selectedBindings</body><body package="Browser-BrowserUI" selector="selectedClass">selectedClass	^self state selectedClass</body><body package="Browser-BrowserUI" selector="selectedClasses">selectedClasses	^self state selectedClasses</body><body package="Browser-BrowserUI" selector="selector">selector	^self state ifNotNil: [:object | object selector]</body><body package="Browser-BrowserUI" selector="selectors">selectors	^self state selectors</body><body package="Browser-BrowserUI" selector="setBinding:">setBinding: aBinding 	navigator setBinding: aBinding</body><body package="Browser-BrowserUI" selector="setClass:">setClass: aClass 	navigator updateWithState: ((self navigatorStateClass new)				selectedClass: aClass;				yourself)</body><body package="Browser-BrowserUI" selector="setNameSpace:">setNameSpace: aNameSpace 	navigator updateWithState: ((self navigatorStateClass new)				classOrNameSpace: aNameSpace;				yourself)</body><body package="Browser-BrowserUI" selector="setSelector:">setSelector: aSelector 	navigator updateWithState: ((state copy)				selector: aSelector;				yourself)</body><body package="Browser-BrowserUI" selector="sharedVariableName">sharedVariableName	^state sharedVariableName</body><body package="Browser-BrowserUI" selector="sharedVariableNames">sharedVariableNames	^state sharedVariableNames</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>window properties</category><body package="Browser-BrowserUI" selector="takeFocus">takeFocus	self selectedTool activeTool takeFocus.	self updateStatusPanel</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="mainView">mainView	| panel |	panel := Panel new.	panel		layoutAlgorithm:			[:rectangle :subParts | 			| statusHeight |			"We expect just two parts. Hard code for that until we need more flexibility."			statusHeight := (subParts last propertyAt: #desiredHeight) ifNil: [0].			Array				with:					(rectangle origin						extent: rectangle width @ (rectangle height - statusHeight))				with:					(rectangle left @ (rectangle bottom - statusHeight)						corner: rectangle corner)].	panel add: self newTabbedTools.	panel add: self newStatusPanel.	^panel</body><body package="Browser-BrowserUI" selector="newTabbedTools">newTabbedTools		| tabBarView composite dispatch |	tabBarView := builder policy tabControlBarClass new.	tabBarView model: tabList listHolder.	tabBarView selectionChannel: tabList selectionIndexHolder.	tabBarView textStyle: builder policy class systemWidgetTextStyle.	dispatch := UIDispatcher new.	dispatch receiver: self.	dispatch requestValueChangeSelector: #updateRequest.	dispatch valueChangeSelector: #selectedToolChanged.	tabBarView controller setDispatcher: dispatch.	tabBarView widgetState canTakeFocus: true.	composite := builder policy newTabControlFor: tabBarView.	builder componentAt: #tabbedTools put: composite.	^composite</body><body package="Browser-BrowserUI" selector="tabList">tabList	^tabList</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initTabList">initTabList	tabList := SelectionInList new</body><body package="Browser-BrowserUI" selector="initTools">initTools	tools := self class toolClasses collect: [:each | each codeModel: self]</body><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	isZoomed := false.	self initTools.	self initTabList</body><body package="Browser-BrowserUI" selector="lockPolicyClass:">lockPolicyClass: aClass	lockPolicy := aClass on: self</body><body package="Browser-BrowserUI" selector="release">release	statusPanel ifNotNil: [statusPanel release].	navigator removeDependent: self.	tools do: [:each | each release].	super release</body><body package="Browser-BrowserUI" selector="resyncTools">resyncTools	(builder isNil or: [builder window isNil or: [builder window isOpen not]])		ifTrue: [^self].	self initTools.	self update</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="changeRequest">changeRequest	^self updateRequest</body><body package="Browser-BrowserUI" selector="firstDefaultTool">firstDefaultTool	tabList list		do: [:each | each isDefaultSelectionCandidate ifTrue: [^each]].	^nil</body><body package="Browser-BrowserUI" selector="selectDefaultTab">selectDefaultTab	self selectTool: (self firstDefaultTool ifNil: [tabList list first])</body><body package="Browser-BrowserUI" selector="update">update	self updateState.	self updateTabLabels.	self updateTabList.	self selectedTool updateContents.	self updateStatusPanel</body><body package="Browser-BrowserUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender	anAspectSymbol = #closed ifTrue: [^self closeRequest].	lockPolicy isLocked ifTrue: [^self].	anAspectSymbol = #updateState ifTrue: [^self updateState].	self update</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	"Suppress the generic implementation."</body><body package="Browser-BrowserUI" selector="updateRequest">updateRequest	"Answer true if the receiver may be changed."		^self selectedTool notNil and: [self selectedTool updateRequest]</body><body package="Browser-BrowserUI" selector="updateState">updateState	"We need to resync with the state."	self state: navigator getState</body><body package="Browser-BrowserUI" selector="updateTabLabels">updateTabLabels	builder ifNotNil: [self tabBarPart invalidate]</body><body package="Browser-BrowserUI" selector="updateTabList">updateTabList	"We watch for a change in the default tab to force an update of the selected tabs, otherwise, if it's still present, maintain the selection."	| list selected previousDefault newDefault |	previousDefault := self firstDefaultTool.	selected := self selectedTool.	list := self activeTools.	list = tabList list		ifFalse: 			[self tabList list: list.			newDefault := self firstDefaultTool.			((list includes: selected) and: [previousDefault = newDefault])				ifTrue: [self selectTool: selected]				ifFalse: [self selectDefaultTab]]</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>status panel</category><body package="Browser-BrowserUI" selector="newStatusPanel">newStatusPanel	| newStatusPart |	statusPanel ifNotNil: [statusPanel release].	statusPanel := StatusPanel new.	self class statusClasses		do:			[:each | 			newStatusPart := each new codeModel: self.			newStatusPart touch.			statusPanel add: newStatusPart].	^statusPanel</body><body package="Browser-BrowserUI" selector="updateStatusPanel">updateStatusPanel	statusPanel ifNotNil: [statusPanel childrenDo: [:each | each touch]]</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="menu">menu	self selectedTool ifNil: [^Menu new].	^self selectedTool menu</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>navigator testing</category><body package="Browser-BrowserUI" selector="isMeta">isMeta	^self state isMeta</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>subcanvases</category><body package="Browser-BrowserUI" selector="saveState">saveState	self selectedTool ifNotNil: [:tool | tool saveState]</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isDirty">isDirty	^false</body><body package="Browser-BrowserUI" selector="isLocked">isLocked	^lockPolicy isLocked</body><body package="Browser-BrowserUI" selector="isReadOnly">isReadOnly	^true</body><body package="Browser-BrowserUI" selector="isStatusBarEnabled">isStatusBarEnabled	^statusPanel		ifNil: [false]		ifNotNil: [statusPanel isEnabled]</body><body package="Browser-BrowserUI" selector="isZoomed">isZoomed	^isZoomed</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="selectionPolicyMenuSpecifications">selectionPolicyMenuSpecifications	^(tools select: [:each | each isActive])		collect:			[:each | 			(self selectedTool == each				ifTrue: [RBCheckedCommand]				ifFalse: [RBCommand])				named: each name				description: (#SelectTool &lt;&lt; #browser &gt;&gt; 'Select Tool') asString				action: [self changeRequest ifTrue: [self selectTool: each]]				receiver: #yourself]</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="navigate">navigate	navigator setState: self state</body><body package="Browser-BrowserUI" selector="selectedToolChanged">selectedToolChanged	self selectedTool updateContents</body><body package="Browser-BrowserUI" selector="toggleStatusBar">toggleStatusBar	statusPanel ifNotNil: [statusPanel toggleVisible]</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>events</category><body package="Browser-BrowserUI" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	navigator removeDependent: self.	self release.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="configureTabPart">configureTabPart	| tabPart tabBar partPort |	tabPart := (builder componentAt: #tabbedTools) bottomComponent.	tabBar := tabPart tabBar bottomComponent.	tabBar		visualBlock:			[:view :index | 			| graphic |			graphic := (view sequence at: index) tabGraphic.			(graphic respondsTo: #textStyle:)				ifTrue: [graphic textStyle: view textStyle].			BoundedWrapper on: graphic].	partPort := PartPort new.	partPort partCreationBlock: [:tool | self newToolView: tool].	partPort selectionSlot: tabList selectionHolder.	tabPart subCanvas		add: partPort		in: (0 @ 0 corner: 1 @ 1)</body><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self configureTabPart</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>private</category><body package="Browser-BrowserUI" selector="newToolView:">newToolView: aTool	| composite |	composite := CompositePart new.	composite		client: aTool		spec: aTool class windowSpec decodeAsLiteralArray		builder: builder newSubBuilder.	aTool updateDisplay.	^composite</body><body package="Browser-BrowserUI" selector="subcanvases">subcanvases		^super subcanvases , self tools select: [:each | each builder notNil]</body><body package="Browser-BrowserUI" selector="tools">tools		^tools</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="printOn:">printOn: aStream	self state printOn: aStream</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel class</class-id> <category>tool registration</category><body package="Browser-BrowserUI" selector="toolClasses">toolClasses	| methods tagsWithSortCodes tagsWithoutSortCodes |	tagsWithSortCodes := (Pragma allNamed: #tool: in: self class) sorted: 					[:a :b |					a arguments first = b arguments first						ifTrue: [a selector &lt; b selector]						ifFalse: [a arguments first &lt;= b arguments first]].	tagsWithoutSortCodes := (Pragma allNamed: #tool in: self class)				sorted: [:a :b | a selector &lt; b selector].	methods := tagsWithSortCodes , tagsWithoutSortCodes				collect: [:each | each selector].	^methods collect: [:each | self perform: each]</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel class</class-id> <category>status registration</category><body package="Browser-BrowserUI" selector="statusClasses">statusClasses	| methods |	methods := (Pragma		allNamed: #status:		in: self class		sortedByArgument: 1)		,			(Pragma				allNamed: #status				in: self class) collect: [:each | each selector].	^methods collect: [:each | self perform: each]</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel class</class-id> <category>private</category><body package="Browser-BrowserUI" selector="classMethodsChanged">classMethodsChanged	"Get all models to update tabs, but be careful about it."	self allGeneralInstancesDo: 			[:each |			[each resyncTools] on: Error				do: 					[:ex |					Transcript						show: 'Error updating tabs due to CodeModel changes: ' , ex errorString]]</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="navigator:">navigator: aNavigator	^(self new)		navigator: aNavigator;		yourself</body></methods><methods><class-id>Refactory.Browser.SelectionInfoStatus</class-id> <category>updating-label</category><body package="Browser-BrowserUI" selector="statusTextForClass:">statusTextForClass: aClass	^(#ClassCSpace &lt;&lt; #browser &gt;&gt; 'Class: ') asString asText allBold		, aClass toolListDisplayString</body><body package="Browser-BrowserUI" selector="statusTextForNameSpace:">statusTextForNameSpace: aNameSpace	^(#NameSpaceCSpace &lt;&lt; #browser &gt;&gt; 'Name Space: ') asString asText allBold		, aNameSpace toolListDisplayString</body><body package="Browser-BrowserUI" selector="statusTextForPundle:">statusTextForPundle: pundle	^(pundle isPackage		ifTrue: [#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ']		ifFalse: [#BundleCSp &lt;&lt; #browser &gt;&gt; 'Bundle: ']) asText allBold		, pundle name</body><body package="Browser-BrowserUI" selector="statusTextForSharedVariable:in:">statusTextForSharedVariable: aSymbol in: aClassOrNameSpace	^(#SharedVariableCSpace &lt;&lt; #browser &gt;&gt; 'Shared Variable: ') asString		asText allBold , aSymbol</body></methods><methods><class-id>Refactory.Browser.SelectionInfoStatus</class-id> <category>private</category><body package="Browser-BrowserUI" selector="selectorProtocol:inClass:">selectorProtocol: aSelector inClass: aClass	^codeModel navigator environment whichProtocolIncludes: aSelector in:			aClass</body></methods><methods><class-id>Refactory.Browser.SelectionInfoStatus</class-id> <category>label generation</category><body package="Browser-BrowserUI" selector="statusTextForSelector:andClass:">statusTextForSelector: aSelector andClass: aClass	| text |	text := (#MethodCSpace &lt;&lt; #browser &gt;&gt; 'Method: ') asText allBold.	text := text , '#' , aSelector.	(self selectorProtocol: aSelector inClass: aClass)		ifNotNil: [:protocol | text := text , ' (' , protocol , ')'].	^text</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateRequest">updateRequest	"Answer true if the receiver may be changed."		^self isLocked		or: [self selectedTool notNil and: [self selectedTool updateRequest]]</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isDirty">isDirty	^self isLocked and: [self isEditing]</body><body package="Browser-BrowserUI" selector="isEditing">isEditing	^(self selectedTool) notNil and: [(self selectedTool) isEditing]</body><body package="Browser-BrowserUI" selector="isReadOnly">isReadOnly	^false</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="printOn:">printOn: aStream	super printOn: aStream.	(self selectedTool notNil and: [self selectedTool isEditing])		ifTrue: [aStream nextPut: $*]</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>methods</category><body package="Browser-BrowserUI" selector="textHolder">textHolder	| stream |	stream := TextStream on: String new.	stream		nextPutAll: 'The ';		emphasis: #italic;		nextPutAll: 'System Browser';		emphasis: nil;		nextPutAll:				' presents a structured view of the VisualWorks class library. Use it for browsing classes and their method definitions in the current image. You can browse classes as they are organized into ';		emphasis: #italic;		nextPutAll: 'packages';		emphasis: nil;		nextPutAll: ' or browse a specific class ';		emphasis: #italic;		nextPutAll: 'hierarchy';		emphasis: nil;		nextPutAll:				'. Method definitions are browsed as they are defined in each selected class.As the principal programming tool in VisualWorks, you can use the browser to define new packages, classes, and name spaces, as well as for editing and refactoring any portion of the class library.For complete documentation, start with the ';		emphasis: #bold;		nextPutAll: 'Help';		emphasis: nil;		nextPutAll:				' menu or refer to the discussion of "Browsing and Editing Smalltalk Code" in the ';		emphasis: #italic;		nextPutAll: 'VisualWorks Application Developer''s Guide';		emphasis: nil;		nextPutAll:				':http://www.cincomsmalltalk.com/documentation/current/AppDevGuide.pdfScreencasts are also available to illustrate the System Browser in action:http://smalltalk-daily.cincomsmalltalk.com'.	^stream contents addHyperlinkEmphases asValue</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^self narrowestSelectionType isNil</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#Overview &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="checkForMethod:">checkForMethod: aString	"With the comment tool being more prevalent, a common mishap is to select the class and begin typing a method and hit accept, replacing the class comemnt  with an intended method body. This method tries to determine IF that might be happening, and if so to prompt the user before accepting. Accept it as a method and return true if it is indeed a method."	self commentObject isBehavior ifFalse: [^false].	"only happens for classes"	self commentObject comment size = 0 ifFalse: [^false].	"only likely when they didn't see a comment there already"	aString isProbableSmalltalkCode		ifTrue:			[(Dialog				choose:					#SmalltalkCodeInCommentsConfirmation &gt;&gt;							'This text looks like a Smalltalk method, but you are on the class comment tab.'						&lt;&lt; #browser				labels:					(Array						with: #AcceptAsCommment &gt;&gt; 'Accept as comment' &lt;&lt; #browser						with: #AcceptAsMethod &gt;&gt; 'Accept as method' &lt;&lt; #browser)				values: #(false true)				default: true) ifTrue: [^true]].	^false</body><body package="Browser-BrowserUI" selector="commentObject">commentObject	| object |	object := self classOrNameSpace.	object isNil ifTrue: [object := self pundle].	^object</body><body package="Browser-BrowserUI" selector="defaultClassComment">defaultClassComment	| typer class vars commentStream |	class := self commentObject.	typer := (RefactoryTyper new)				runOn: class;				yourself.	commentStream := WriteStream on: String new.	commentStream		emphasis: #bold;		nextPutAll: class name;		nextPutAll: (#HasNotBeenCommented &lt;&lt; #browser &gt;&gt; ' has not been commented.') asString;		emphasis: nil;		nextPutAll: (#CommentShouldStateClassPurposeEtc &lt;&lt; #browser &gt;&gt; '  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.') asString;		cr;		cr.	self printSubclassResponsibilitiesFor: class on: commentStream.	vars := class instVarNames.	vars notEmpty 		ifTrue: 			[commentStream				nextPutAll: (#InstanceVariablesC &lt;&lt; #browser &gt;&gt; 'Instance Variables:') asString;				cr.			self 				printVariables: vars				types: typer				on: commentStream].	^commentStream contents</body><body package="Browser-BrowserUI" selector="defaultCodeComponentComment">defaultCodeComponentComment	^(#ThisObjectHasNotBeenCommented &lt;&lt; #browser &gt;&gt; 'This object has not been commented.') asString</body><body package="Browser-BrowserUI" selector="defaultComment">defaultComment	self showWaitCursorWhile: 			[| object |			object := self commentObject.			^object isBehavior 				ifTrue: [self defaultClassComment]				ifFalse: 					[object isNameSpace 						ifTrue: [self defaultNameSpaceComment]						ifFalse: [self defaultCodeComponentComment]]]</body><body package="Browser-BrowserUI" selector="defaultNameSpaceComment">defaultNameSpaceComment	^(#ThisNameSpaceHasNotBeenCommented &lt;&lt; #browser &gt;&gt; 'This name space has not been commented.') asString</body><body package="Browser-BrowserUI" selector="generateDefaultComment">generateDefaultComment	self textNoChange: self defaultComment</body><body package="Browser-BrowserUI" selector="printSubclassResponsibilitiesFor:on:">printSubclassResponsibilitiesFor: class on: commentStream 	| protocols selectors |	selectors := class 				whichSelectorsReferTo: 'subclassResponsibility' asSymbol.	selectors isEmpty ifTrue: [^self].	commentStream		nextPutAll: (#SubclassesMustImplementTheseC &lt;&lt; #browser &gt;&gt; 'Subclasses must implement the following messages:') asString;		cr.	protocols := (selectors 				collect: [:each | BrowserEnvironment new whichProtocolIncludes: each in: class]) 					asSet asSortedCollection.	selectors := selectors asSortedCollection.	protocols do: 			[:protocol | 			commentStream				tab;				nextPutAll: protocol;				cr.			selectors do: 					[:sel | 					protocol == (BrowserEnvironment new whichProtocolIncludes: sel in: class) 						ifTrue: 							[commentStream								tab;								tab;								nextPutAll: sel;								cr]]].	commentStream cr</body><body package="Browser-BrowserUI" selector="printVariables:types:on:">printVariables: vars types: aRefactoryTyper on: commentStream 	vars asSortedCollection do: 			[:each | 			commentStream				tab;				nextPutAll: each;				tab;				nextPut: $&lt;.			aRefactoryTyper printTypeFor: each on: commentStream.			commentStream				nextPutAll: ((#DescriptionOf1s &lt;&lt; #browser &gt;&gt; '&gt;	description of &lt;1s&gt;')					expandMacrosWith: each);				cr].	commentStream cr</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	| comment |	builder ifNil: [^self].	self commentObject isNil ifTrue: [^self text: '' asText].	comment := self commentObject comment asText.	self hasReadOnlyComment		ifTrue: [comment := comment emphasizeAllWith: #italic].	comment addHyperlinkEmphases.	self		text:			((self commentObject needsComment and: [comment isEmpty])				ifTrue: [self defaultComment]				ifFalse: [comment]).	self textController readOnly: self hasReadOnlyComment</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="hasReadOnlyComment">hasReadOnlyComment	^self commentObject isNil		or: [self commentObject == Store.Registry nullPackage]</body><body package="Browser-BrowserUI" selector="isEnabled">isEnabled	^self commentObject notNil</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController	| object |	(self checkForMethod: aText asString)		ifTrue: [^self compileMethodText: aText from: aController].	object := self commentObject.	self		performChange:			((object isBehavior or: [object isNameSpace])				ifTrue:					[CommentChange						object: object						comment: aText asString]				ifFalse:					[CodeComponentCommentChange						codeComponent: object						comment: aText asString]).	self text: aText.	codeModel update.	self navigator refreshLists</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>tab APIs</category><body package="Browser-BrowserUI" selector="isActive">isActive	^self commentObject notNil</body><body package="Browser-BrowserUI" selector="isDefaultSelectionCandidate">isDefaultSelectionCandidate	^self protocol isNil		and:			[self selector isNil				and:					[self commentObject notNil and: [self commentObject comment size &gt; 0]]]</body><body package="Browser-BrowserUI" selector="tabGraphic">tabGraphic	| row |	row := super tabGraphic.	self commentObject		ifNotNil:			[:object | object needsComment ifTrue: [row add: GeneralIcons warning]].	^row</body><body package="Browser-BrowserUI" selector="tabIcon">tabIcon	^self commentObject ifNotNil: [:object | object safeToolListIcon]</body><body package="Browser-BrowserUI" selector="tabName">tabName	^#Comment &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="text:">text: aString	"Do some simple processing on the comment string, to provide some minimal formatting for things that look like section headers."		super text: (self class formattedComment: aString) styleEmbeddedHttps</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool class</class-id> <category>utility</category><body package="Browser-BrowserUI" selector="formattedComment:">formattedComment: aString	"Do some simple processing on the comment string, to provide some minimal formatting for things that look like section headers. (named such to avoid confusion with other uses of formatComment:)"		| input output line |	input := aString readStream.	output := TextStream on: String new.	[input atEnd]		whileFalse:			[line := input upTo: Character cr.			(self sectionHeadingLineFrom: line)				ifNotNil:					[:heading | 					output						emphasize: #(#bold #large)						during: [output nextPutAll: heading]]				ifNil: [output nextPutAll: line].			output cr].	^output contents</body><body package="Browser-BrowserUI" selector="sectionHeadingLineFrom:">sectionHeadingLineFrom: aString	"Evaluate if aString looks like a comment section header, if it does return it, otherwise return nil. Remove any trailing $:'s. "		| lastIndex candidateHeader |	aString isEmpty ifTrue: [^nil].	lastIndex := aString size.	[lastIndex &gt; 0 and: [(aString at: lastIndex) isSeparator]]		whileTrue: [lastIndex := lastIndex - 1].	lastIndex isZero ifTrue: [^nil].	(aString at: lastIndex) = $: ifTrue: [lastIndex := lastIndex - 1].	candidateHeader := (aString size = lastIndex		ifTrue: [aString]		ifFalse: [aString copyFrom: 1 to: lastIndex]) asString asLowercase.	^self knownSectionHeadings		detect: [:each | each asLowercase = candidateHeader]		ifNone: [nil]</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool class</class-id> <category>comment section headings</category><body package="Browser-BrowserUI" selector="knownSectionHeadings">knownSectionHeadings		| taggedMethods result |	taggedMethods := Pragma		allNamed: #commentSectionHeadings		in: self class.	result := OrderedCollection new.	taggedMethods do: [:each | result addAll: (self perform: each selector)].	^result</body></methods><methods><class-id>UI.StatusPanel</class-id> <category>private</category><body package="Browser-BrowserUI" selector="computeDesiredHeight">computeDesiredHeight	^isEnabled		ifTrue: [sumRowHeight]		ifFalse: [0]</body><body package="Browser-BrowserUI" selector="updateChildFrames:">updateChildFrames: aRectangle	super updateChildFrames: aRectangle.	self updateDesiredHeight</body><body package="Browser-BrowserUI" selector="updateDesiredHeight">updateDesiredHeight	| height |	(height := self computeDesiredHeight) = (self propertyAt: #desiredHeight)		ifTrue: [^self].	self propertyAt: #desiredHeight put: height.	self changedPreferredBounds: nil</body></methods><methods><class-id>UI.StatusPanel</class-id> <category>layout algorithms</category><body package="Browser-BrowserUI" selector="layoutRow:in:">layoutRow: aCollection in: aRectangle	"Compute the boxes for aCollection of parts that all lie on one row. aRectangle has already been determine to be the rectangle that the row will occupy. The algorithm is to give parts that define a desiredWidth the width they want, and spread the remainder evenly with the remaining space. Take care to scale all proportionally if we run out of room. Guarantee a little bit of room for any part that doesn't desire width."	| countToSpread widths totalPreferredWidth box sumWidth |	widths := aCollection collect: [:each | each propertyAt: #desiredWidth].	totalPreferredWidth := widths		inject: 0		into: [:sum :each | sum + (each ifNil: [0])].	countToSpread := (aCollection		select: [:each | (each propertyAt: #desiredWidth) isNil]) size.	countToSpread isZero		ifFalse:			[| spread |			spread := (aRectangle width - totalPreferredWidth max: 0) /					countToSpread max: 10.			widths := widths collect: [:each | each ifNil: [spread]]].	sumWidth := widths		inject: 0		into: [:sum :each | sum + each].	sumWidth &gt; aRectangle width		ifTrue:			[widths := widths collect: [:each | each * (aRectangle width / sumWidth)]].	box := aRectangle topLeft corner: aRectangle bottomLeft.	^widths		collect: [:width | box := box topRight extent: width @ aRectangle height]</body><body package="Browser-BrowserUI" selector="layoutRows:in:">layoutRows: aCollection in: aRectangle	"The panel's height will be reset to sumRowHeights in #updateDesiredHeight but that will not be called until after this has completed.  Therefore we drop the resetting of	rowHeights := rowHeights collect: [:each | aRectangle height / sumRowHeight * each]since in this method aRectangle is the height appropriate to the previous selection.  If, later, the outer call can pass in some maximum dimension for the rectangle (when the RB window is very small, for example) then some similar code could be restored."	| rectangles rows rowHeights rowRectangle rowParts activeParts |	rectangles := Dictionary new.	activeParts := aCollection select:		[:each | (each propertyAt: #isActive) ~~ false].	rows := activeParts groupedBy:		[:each | (each propertyAt: #row) ifNil: [0]].	rowHeights := rows collect:		[:parts |		parts			inject: 0			into: [:biggest :each | biggest max: (self partHeight: each)]].	sumRowHeight := rowHeights inject: 0 into: [:sum :each | sum + each].	sumRowHeight isZero ifFalse:		[rowRectangle := aRectangle topLeft corner: aRectangle topRight.		rows keys asSortedCollection do:			[:row |			rowRectangle := rowRectangle bottomLeft					extent: aRectangle width @ (rowHeights at: row).			rowParts := rows at: row.			rowParts				with: (self layoutRow: rowParts in: rowRectangle)				do: [:part :box | rectangles at: part put: box]]].	^aCollection collect:		[:each | rectangles at: each ifAbsent: [0 @ 0 corner: 0 @ 0]]</body><body package="Browser-BrowserUI" selector="partHeight:">partHeight: aVisualPart	^(aVisualPart propertyAt: #desiredHeight) ifNil: [28]</body></methods><methods><class-id>UI.StatusPanel</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	"Set isEnabled first, or the algorithm layout gets confused."	isEnabled := LastEnablement.	super initialize</body><body package="Browser-BrowserUI" selector="initializeLayoutAlgorithm">initializeLayoutAlgorithm	self		layoutAlgorithm:			[:rectangle :subParts | self layoutRows: subParts in: rectangle]</body></methods><methods><class-id>UI.StatusPanel</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="toggleVisible">toggleVisible	LastEnablement := isEnabled := isEnabled not.	self updateDesiredHeight</body></methods><methods><class-id>UI.StatusPanel</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEnabled">isEnabled	^isEnabled</body></methods><methods><class-id>UI.StatusPanel class</class-id> <category>default enablement</category><body package="Browser-BrowserUI" selector="lastEnablement">lastEnablement	^LastEnablement</body><body package="Browser-BrowserUI" selector="lastEnablement:">lastEnablement: aBoolean	LastEnablement := aBoolean</body></methods><methods><class-id>Refactory.Browser.BundleLoadOrderWarningStrip</class-id> <category>view construction</category><body package="Browser-BrowserUI" selector="addReasonsPrompter">addReasonsPrompter	| badDependencies clicker |	badDependencies := self outOfOrderDependencies.	clicker := ClickableGraphic				clickableText: (#_1POutOfOrderDependencies						&gt;&gt; '&lt;1p&gt; out of order dependencies' &lt;&lt; #IDE						expandMacrosWith: badDependencies size) asText						allBold.	clicker tooltip: [self tooltipTextForDependencies: badDependencies].	clicker		when: Clicked		do: [self openDependencies: badDependencies]		for: self.	self add: clicker.	^clicker</body><body package="Browser-BrowserUI" selector="addSuppresionToggle">addSuppresionToggle	| clicker suppressed |	self add: (Label with: '(').	suppressed := (self bundle propertyAt: #isLoadOrderWarningSuppressed)				== true.	clicker := ClickableGraphic				clickableText: (suppressed						ifTrue: [#ShowWarning &gt;&gt; 'Show Warning' &lt;&lt; #IDE]						ifFalse: [#DontShowWarning &gt;&gt; 'Don''t Show Warning' &lt;&lt; #IDE]) asText						allBold.	clicker when: Clicked send: #toggleSuppresion to: self.	self add: clicker.	self add: (Label with: ')')</body><body package="Browser-BrowserUI" selector="addWarningLabel">addWarningLabel	self add: GeneralIcons warning.	self add: (PixelSpace width: 5).	self add: (Label				with: ((#InvalidLoadOrderC &gt;&gt; 'Invalid Load Order:' &lt;&lt; #IDE) asText						emphasizeAllWith: (Array with: #color -&gt; ColorValue red with: #bold)))</body><body package="Browser-BrowserUI" selector="outOfOrderDependencies">outOfOrderDependencies	| output |	output := Array new writeStream.	Store.BundleModel outOfOrderLoadDependencies: (Array with: self bundle)		do: 			[:neededObject :wantingPackage :supplyingPackage |			output nextPut: (Array						with: neededObject						with: wantingPackage						with: supplyingPackage)].	^output contents</body><body package="Browser-BrowserUI" selector="populate">populate	self releaseAllComponents.	(self bundle isNil or: [self bundle hasValidLoadOrder]) ifTrue: [^self].	self add: (PixelSpace width: 40).	self addWarningLabel.	self add: (PixelSpace width: 10).	self addReasonsPrompter.	self add: (PixelSpace width: 10).	self addSuppresionToggle</body><body package="Browser-BrowserUI" selector="printDependency:on:">printDependency: anArray on: aStream	"anArray is a tuple of objectNeeded, requiringPackage, supplyingPackage."	aStream		nextPutAll: (#_2SNeeds1SPFoundIn3sP &gt;&gt; '&lt;2s&gt; needs &lt;1s&gt; (found in &lt;3s&gt;)'				&lt;&lt; #IDE expandMacrosWithArguments: (anArray collect: #name))</body><body package="Browser-BrowserUI" selector="tooltipTextForDependencies:">tooltipTextForDependencies: aSequence	| output limit |	output := TextStream on: String new.	limit := aSequence size &gt; 15 ifTrue: [9] ifFalse: [aSequence size].	1 to: limit		do: 			[:n |			n &gt; 1 ifTrue: [output cr].			self printDependency: (aSequence at: n) on: output].	limit = aSequence size		ifFalse: 			[output				cr;				tab;				emphasis: (Array with: #italic							with: #color -&gt; SymbolicPaint inactiveForeground);				nextPutAll: (#dot1PMoreDot &gt;&gt; '...&lt;1p&gt; more...' &lt;&lt; #IDE							expandMacrosWith: aSequence size - limit)].	^output contents</body></methods><methods><class-id>Refactory.Browser.BundleLoadOrderWarningStrip</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="bundleHolder:">bundleHolder: aValueHolder		bundleHolder := aValueHolder.	bundleHolder onChangeSend: #bundleChanged to: self.	self bundleChanged</body><body package="Browser-BrowserUI" selector="initializeLayoutAlgorithm">initializeLayoutAlgorithm	self beRow: 0.5</body></methods><methods><class-id>Refactory.Browser.BundleLoadOrderWarningStrip</class-id> <category>private</category><body package="Browser-BrowserUI" selector="bundleChanged">bundleChanged	self populate</body><body package="Browser-BrowserUI" selector="openDependencies:">openDependencies: aSequence	| output |	output := String new writeStream.	aSequence do: [:eachTuple | self printDependency: eachTuple on: output]		separatedBy: [output cr].	(Workspace with: output contents) open</body><body package="Browser-BrowserUI" selector="toggleSuppresion">toggleSuppresion	(self bundle propertyAt: #isLoadOrderWarningSuppressed) == true		ifTrue: [self bundle propertyAt: #isLoadOrderWarningSuppressed put: nil]		ifFalse: [self bundle propertyAt: #isLoadOrderWarningSuppressed put: true].	self populate</body></methods><methods><class-id>Refactory.Browser.BundleLoadOrderWarningStrip</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="bundle">bundle		^bundleHolder value</body></methods><methods><class-id>Refactory.Browser.ProtocolEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useProtocolNavigator">useProtocolNavigator	^true</body></methods><methods><class-id>Refactory.Browser.ProtocolNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canDropInProtocol:">canDropInProtocol: aDC 	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[self showDropFeedbackForList: #objectList in: aDragContext.			(self canDropInProtocol: aDragContext) 				ifTrue: 					[(self dropClassFrom: aDragContext sourceData clientData) 						= navigator selectedClass 							ifTrue: [#dropEffectMove]							ifFalse: [#dropEffectCopy]]				ifFalse: [#dropEffectNone]]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	^[self dropUsing: aDragContext] ensure: 			[self restoreListStateFrom: aDragContext clientData.			aDragContext clientData: nil.			navigator refreshLists]</body><body package="Browser-BrowserUI" selector="dropUsing:">dropUsing: aDragContext 	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="wantToDrag:">wantToDrag: aController 	^self codeToolHasChanges not</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="wantToDrag:">wantToDrag: aController 	^self codeToolHasChanges not</body></methods><methods><class-id>Refactory.Browser.PundleEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useSystemNavigator">useSystemNavigator	^true</body></methods><methods><class-id>Kernel.Parcel</class-id> <category>Refactoring Browser</category><body package="Browser-BrowserUI" selector="textForItem">textForItem	^self printString</body></methods><methods><class-id>Refactory.Browser.ClassEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useSingleClassNavigator">useSingleClassNavigator	| allClasses |	(instanceBehaviorNames size &gt; 1 or: [classBehaviorNames size &gt; 1]) ifTrue: [^false].	allClasses := Set withAll: instanceBehaviorNames.	allClasses addAll: classBehaviorNames.	^allClasses size = 1</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="dropSelection:">dropSelection: aDragContext	^(super dropSelection: aDragContext) ifNotNil: [:listElement | listElement codeComponent]</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator selector isNil ifTrue: [^self].	self doDragAndDrop: #selector for: aController</body></methods><methods><class-id>Refactory.Browser.RBMessageNode</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="findPotentialMNUFor:">findPotentialMNUFor: aClass		receiver isMessage		ifTrue:			[(receiver findPotentialMNUFor: aClass)				ifNotNil: [:result | ^result]].	(receiver messageSearchClassFromScope: aClass)		ifNotNil:			[:understandingClass | (understandingClass canUnderstand: self selector) ifFalse: [^self]].	^nil</body></methods><methods><class-id>Store.XChangeSet</class-id> <category>user interface</category><body package="Browser-BrowserUI" selector="changeCount">changeCount	"Return the real 'size' of changes. My size is only 'normal' changes, not those stored in my other variables. itemCount will be biased +1 since it includes the change set itself  as 1."		^(self itemCount - 1)		+			(self otherOrNil				ifNil: [0]				ifNotNil: [other size])		+			(self propertiesOrNil				ifNil: [0]				ifNotNil: [properties size])</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="openEditor">openEditor	^RefactoringBrowser openOnEnvironment: self</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>private</category><body package="Browser-BrowserUI" selector="isProbableSmalltalkCode">isProbableSmalltalkCode	| rs firstLine words |	rs := self readStream.	firstLine := rs upTo: Character cr.	words := firstLine runsFailing: [:char | char isSeparator].	words isEmpty ifTrue: [^false].	words size = 1 ifTrue: [^words first looksLikeUnary].	words size odd ifTrue: [^false].	(words size = 2		and: [words first looksLikeBinary and: [words last looksLikeUnary]])		ifTrue: [^true].	1		to: words size		by: 2		do: [:n | (words at: n) looksLikeKeyword ifFalse: [^false]].	2		to: words size		by: 2		do: [:n | (words at: n) looksLikeUnary ifFalse: [^false]].	^true</body><body package="Browser-BrowserUI" selector="looksLikeBinary">looksLikeBinary	^self allSatisfy: [:char | (char isAlphaNumeric or: [char = $_]) not]</body><body package="Browser-BrowserUI" selector="looksLikeKeyword">looksLikeKeyword	^self last = $:		and: [self size &gt; 1 and: [(self allButLast: 1) looksLikeUnary]]</body><body package="Browser-BrowserUI" selector="looksLikeUnary">looksLikeUnary	^(self first isAlphabetic or: [self first = $_])		and: [self allSatisfy: [:char | char isAlphaNumeric or: [char = $_]]]</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^#(#protocol #selector) includes: aDC key</body><body package="Browser-BrowserUI" selector="canExtract:">canExtract: aDragContext 	| dropClassName dropClass aDict |	aDict := aDragContext sourceData clientData.	dropClassName := self dropSelection: aDragContext.	dropClass := dropClassName isNil 				ifTrue: [nil]				ifFalse: [self classForName: dropClassName].	^dropClass notNil and: 			[dropClass fullRootName ~~ (self dropClassNameFrom: aDict) 				or: [(self dropMetaFrom: aDict) ~~ navigator isMeta]]</body><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator objectName isNil ifTrue: [^self].	navigator classOrNameSpace isNil 		ifTrue: 			[^self warn: ((#Object1sNoLongerExists &lt;&lt; #browser &gt;&gt; 'Object &lt;1s&gt; no longer exists.') 						expandMacrosWith: navigator objectName)].	self doDragAndDrop: #class for: aController</body><body package="Browser-BrowserUI" selector="dragEnter:">dragEnter: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	aDragContext dropTarget 		clientData: (self initialDropStateFor: #objectList).	^#dropEffectCopy</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[self showDropFeedbackForList: #objectList in: aDragContext.			(self canExtract: aDragContext) 				ifTrue: [^#dropEffectCopy]				ifFalse: [^#dropEffectNone]]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	^	[| dropClassName |	dropClassName := self dropSelection: aDragContext.	(self canExtract: aDragContext) 		ifTrue: 			[aDragContext key == #selector 				ifTrue: 					[self dropSelectorIn: dropClassName						using: aDragContext sourceData clientData]				ifFalse: 					[self dropProtocolIn: dropClassName						using: aDragContext sourceData clientData]]		ifFalse: [#dropEffectNone]] 			ensure: 				[self restoreListStateFrom: aDragContext clientData.				aDragContext clientData: nil.				navigator refreshLists]</body><body package="Browser-BrowserUI" selector="dropProtocolIn:using:">dropProtocolIn: dropClassName using: aDictionary 	| protocols fromClass meta class classNames |	class := self classForName: dropClassName.	protocols := self dropProtocolsFrom: aDictionary.	classNames := self dropClassNamesFrom: aDictionary.	(protocols isEmpty or: [classNames size ~~ 1]) ifTrue: [^#dropEffectNone].	fromClass := self classForName: classNames first.	meta := self dropMetaFrom: aDictionary.	class isNil ifTrue: [^#dropEffectNone].	meta ifTrue: [fromClass := fromClass class].	navigator isMeta ifTrue: [class := class class].	fromClass == class ifTrue: [^#dropEffectNone].	navigator 		copyProtocols: protocols		from: fromClass		to: class.	^#dropEffectCopy</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>private-overrides</category><body package="Browser-BrowserUI" selector="dropSelection:">dropSelection: aDragContext	^(super dropSelection: aDragContext) ifNotNil: [:item | item fullName]</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="dropSelectorIn:using:">dropSelectorIn: dropClassName using: aDictionary 	| selectors fromClass class |	class := self classForName: dropClassName.	selectors := self dropSelectorsFrom: aDictionary.	fromClass := self dropClassFrom: aDictionary.	selectors isEmpty ifTrue: [^#dropEffectNone].	fromClass = class ifTrue: [^#dropEffectNone].	fromClass isNil | class isNil ifTrue: [^#dropEffectNone].	navigator isMeta ifTrue: [class := class class].	navigator 		copySelectors: fromClass		from: selectors		to: class.	^#dropEffectCopy</body><body package="Browser-BrowserUI" selector="wantToDrag:">wantToDrag: aController 	^self codeToolHasChanges not</body></methods><methods><class-id>Refactory.Browser.SharedVariableProtocolNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^aDC key = #sharedVariable</body><body package="Browser-BrowserUI" selector="canDropInProtocol:">canDropInProtocol: aDC 	| aDict |	aDict := aDC sourceData clientData.	^aDC key = #sharedVariable and: 			[(self dropProtocolFrom: aDict) ~= (self dropSelection: aDC) 				and: [(self dropClassOrNameSpaceFrom: aDict) = navigator classOrNameSpace]]</body><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator protocol notNil 		ifTrue: [self doDragAndDrop: #sharedVariableProtocol for: aController]</body><body package="Browser-BrowserUI" selector="dropUsing:">dropUsing: aDragContext 	| dataClass protocol variables |	variables := self 				dropSharedVariableNamesFrom: aDragContext sourceData clientData.	dataClass := navigator classOrNameSpace.	protocol := self dropSelection: aDragContext.	(dataClass isNil | protocol isNil or: [self changeRequest]) 		ifFalse: [^#dropEffectNone].	navigator 		moveSharedVariableNames: variables		to: protocol		in: dataClass.	^#dropEffectMove</body></methods><methods><class-id>Refactory.Browser.RBProgramNode</class-id> <category>querying</category><body package="Browser-BrowserUI" selector="findPotentialMNUFor:">findPotentialMNUFor: aClass		^parent ifNotNil: [parent findPotentialMNUFor: aClass]</body></methods><methods><class-id>Store.DatabaseConnectionInformation</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="toolText">toolText	"Return a text which shows in tabbed field form, the name of the database, the version number, and the owner. If we have changes, place a styled change count next to the version number."		| stream |	stream := TextStream on: String new.	stream		nextPutAll: self dbIdentifier;		tab;		nextPutAll:				((self versionString first: (self versionString lastIndexOf: $,) - 1)						allButFirst: 1).	self isChangeSetEmpty "filters out both a nil change set and an empty change set, so we don't have to worry about nil checks inside the branch"		ifFalse:			[stream				emphasis:						(Array								with:									#color										-&gt;											(ColorValue												hue: 1 / 12												saturation: 1												brightness: 0.75));				nextPutAll:						(#changeCount &lt;&lt; #browser &gt;&gt; ' (+&lt;1p&gt; changes)'								expandMacrosWith: changeSet changeCount);				emphasis: nil].	stream		tab;		nextPutAll:				((self versionString allButFirst: (self versionString lastIndexOf: $,))						allButLast: 1).	^stream contents</body></methods><methods><class-id>Refactory.Browser.SelectorProtocolNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^aDC key = #selector</body><body package="Browser-BrowserUI" selector="canDropInProtocol:">canDropInProtocol: aDC 	| aDict |	aDict := aDC sourceData clientData.	^aDC key = #selector and: 			[(self dropProtocolFrom: aDict) ~= (self dropSelection: aDC) 				or: [(self dropClassFrom: aDict) ~= navigator selectedClass]]</body><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator protocol notNil 		ifTrue: [self doDragAndDrop: #protocol for: aController]</body><body package="Browser-BrowserUI" selector="dropUsing:">dropUsing: aDragContext 	| dataClass protocol dataSelectors |	dataSelectors := self 				dropSelectorsFrom: aDragContext sourceData clientData.	dataClass := self dropClassFrom: aDragContext sourceData clientData.	protocol := self dropSelection: aDragContext.	(dataClass isNil | protocol isNil or: [self changeRequest]) 		ifFalse: [^#dropEffectNone].	dataClass == navigator selectedClass 		ifTrue: 			[navigator 				moveMethods: dataSelectors				to: protocol				in: dataClass.			^#dropEffectMove]		ifFalse: 			[navigator 				moveMethods: dataSelectors				to: ('&lt;1s&gt;&gt;&lt;2s&gt;' expandMacrosWith: navigator selectedClass fullName						with: (protocol ifNil: [ClassOrganizer defaultProtocol]))				in: dataClass.			^#dropEffectCopy]</body></methods><methods><class-id>Refactory.Browser.SelectorEnvironment</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="dispositionToMethodRemoval:">dispositionToMethodRemoval: aMethodDefinition	"aMethodDefinition was used to compute the receiver which is referencesTo: it. If aMethodDefinition is to be removed, return a description that represents as concisely as possible what the impact of this removal is."		| definitions myTree |	definitions := self methodDefinitions.	definitions size = 1		ifTrue:			[^#ReferencedBy1p &lt;&lt; #browser &gt;&gt; 'referenced by &lt;1p&gt;'				expandMacrosWith: definitions any].	self uniqueMethodDefinitionScope		ifNotNil:			[:uniqueClass | 			^#x1pReferencesAllIn &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; references (all in &lt;2p&gt;)'				expandMacrosWith: definitions size				with: uniqueClass].	myTree := aMethodDefinition implementingClass instanceBehavior		allSubclasses		,			aMethodDefinition implementingClass instanceBehavior withAllSuperclasses.	(self classes allSatisfy: [:each | myTree includes: each])		ifTrue:			[^#x1pReferencesInSameHierarchy &lt;&lt; #browser &gt;&gt;					'&lt;1p&gt; references (all in the same hierarchy)'				expandMacrosWith: definitions size].	aMethodDefinition isPatched		ifFalse:			[self uniquePackage				ifNotNil:					[:uniquePackage | 					^#x1pReferencesAllIn &lt;&lt; #browser &gt;&gt;							'&lt;1p&gt; references (all in &lt;2p&gt;)'						expandMacrosWith: definitions size						with: uniquePackage]].	^#x1pOtherReferences &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; references'		expandMacrosWith: definitions size</body><body package="Browser-BrowserUI" selector="dispositionToObjectRemoval:">dispositionToObjectRemoval: anObject	"anObject was used to compute the receiver which is referencesTo: it. If anObject is to be removed, return a description that represents as concisely as possible what the impact of this removal is."		| definitions |	definitions := self methodDefinitions.	definitions size = 1		ifTrue:			[^#ReferencedBy1p &lt;&lt; #browser &gt;&gt; 'referenced by &lt;1p&gt;'				expandMacrosWith: definitions any].	self uniqueMethodDefinitionScope		ifNotNil:			[:uniqueScope | 			^#x1pReferencesAllIn &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; references (all in &lt;2p&gt;)'				expandMacrosWith: definitions size				with: uniqueScope].	anObject isPatched		ifFalse:			[self uniquePackage				ifNotNil:					[:uniquePackage | 					^#x1pReferencesAllIn &lt;&lt; #browser &gt;&gt;							'&lt;1p&gt; references (all in &lt;2p&gt;)'						expandMacrosWith: definitions size						with: uniquePackage]].	^#x1pOtherReferences &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; references'		expandMacrosWith: definitions size</body><body package="Browser-BrowserUI" selector="dispositionToSharedVariableRemoval:">dispositionToSharedVariableRemoval: aBindingReference	"aBindingReference was used to compute the receiver which is referencesTo: it. If aBindingReference is to be removed, return a description that represents as concisely as possible what the impact of this removal is."		| definitions |	definitions := self methodDefinitions.	definitions size = 1		ifTrue:			[^#ReferencedBy1p &lt;&lt; #browser &gt;&gt; 'referenced by &lt;1p&gt;'				expandMacrosWith: definitions any].	self uniqueMethodDefinitionScope		ifNotNil:			[:uniqueScope | 			^#x1pReferencesAllIn &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; references (all in &lt;2p&gt;)'				expandMacrosWith: definitions size				with: uniqueScope].	aBindingReference isPatched		ifFalse:			[self uniquePackage				ifNotNil:					[:uniquePackage | 					^#x1pReferencesAllIn &lt;&lt; #browser &gt;&gt;							'&lt;1p&gt; references (all in &lt;2p&gt;)'						expandMacrosWith: definitions size						with: uniquePackage]].	^#x1pOtherReferences &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; references'		expandMacrosWith: definitions size</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel class</class-id> <category>compling</category><body package="Browser-BrowserUI" selector="instanceMethodsChanged">instanceMethodsChanged	Screen default allScheduledControllersDo: 			[:each | 			(each model isKindOf: RefactoringBrowser) 				ifTrue: [each model rebuildMenus]]</body></methods><methods><class-id>Refactory.Browser.RBActionDispatcher</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="activeTool">activeTool	^self codeTool activeTool</body><body package="Browser-BrowserUI" selector="browser">browser	^self objects at: #browser ifAbsent: [nil]</body><body package="Browser-BrowserUI" selector="browser:">browser: aRefactoringBrowser 	self objects at: #browser put: aRefactoringBrowser</body><body package="Browser-BrowserUI" selector="codeModel">codeModel	^self browser currentToolset</body><body package="Browser-BrowserUI" selector="codeTool">codeTool	^self codeModel tool</body></methods><methods><class-id>Core.TextStream</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="addEmphasis:">addEmphasis: anObject	"Merge anObject emphasis into our current emphases."		| newEmphases |	(anObject isSequenceable and: [anObject isSymbol not]) ifTrue:			[anObject do: [:each | self addEmphasis: each].			^self].	newEmphases := self allEmphases.	(newEmphases includes: anObject) ifTrue: [^self].	newEmphases := newEmphases copyWith: anObject.	self emphasis: (newEmphases size = 1 ifTrue: [newEmphases first] ifFalse: [newEmphases])</body><body package="Browser-BrowserUI" selector="allEmphases">allEmphases		currentEmphasis ifNil: [^Array new].	^(currentEmphasis isSequenceable and: [currentEmphasis isSymbol not]) ifTrue: [currentEmphasis] ifFalse: [Array with: currentEmphasis]</body><body package="Browser-BrowserUI" selector="emphasize:during:">emphasize: anObject during: aBlock		| originalEmphasis |	originalEmphasis := currentEmphasis.	self addEmphasis: anObject.	aBlock ensure: [self emphasis: originalEmphasis]</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^#(#category #class #protocol #selector #sharedVariable #sharedVariableProtocol) 		includes: aDC key</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[| bundle |			self showDropFeedbackForList: #objectList in: aDragContext.			bundle := self dropSelection: aDragContext.			(bundle notNil and: [bundle isPackage]) ifFalse: [^#dropEffectNone].			#dropEffectMove]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	^	[| dropPackage |	dropPackage := self dropSelection: aDragContext.	(dropPackage notNil and: [dropPackage isPackage]) 		ifFalse: [^#dropEffectNone].	self moveToPackage: dropPackage using: aDragContext] 			ensure: 				[self restoreListStateFrom: aDragContext clientData.				aDragContext clientData: nil.				navigator refreshLists]</body><body package="Browser-BrowserUI" selector="moveToPackage:using:">moveToPackage: aPackage using: aDragContext 	aDragContext key = #category 		ifTrue: 			[^navigator moveCategories: (self 						dropCategoriesFrom: aDragContext sourceData clientData)				toPackage: aPackage].	aDragContext key = #class 		ifTrue: 			[^navigator 				moveObjectsIn: (self dropStateFrom: aDragContext sourceData clientData)				toPackage: aPackage].	(#(#protocol #sharedVariableProtocol) includes: aDragContext key) 		ifTrue: 			[^navigator moveDefinitions: (self 						dropAllDefinitionsFrom: aDragContext sourceData clientData)				toPackage: aPackage].	(#(#selector #sharedVariable) includes: aDragContext key) 		ifTrue: 			[^navigator moveDefinitions: (self 						dropDefinitionsFrom: aDragContext sourceData clientData)				toPackage: aPackage]</body></methods><methods><class-id>Refactory.Browser.SelectorNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator selector isNil ifTrue: [^self].	self doDragAndDrop: #selector for: aController</body></methods><methods><class-id>Core.Text</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="computeMinimumTabWidthsUsing:">computeMinimumTabWidthsUsing: aGC	"Given a aGC to be used for character measurement, sweep through the receiver, looking for lines that have tabs in them. Compute widths per each ordinal tab that would be needed to  accomidate the width of the maximum text preceeding the tab on each line including tabs."		| lines widths firstPhrases longestPhraseWidth |	lines := (self runsFailing: [:char | char = Character cr])		select: [:each | each includes: Character tab].	lines isEmpty ifTrue: [^#()].	widths := OrderedCollection new.	[lines isEmpty]		whileFalse:			[firstPhrases := lines				collect: [:each | each readStream upTo: Character tab].			longestPhraseWidth := (firstPhrases				collect: [:phrase | aGC widthOfString: phrase])				inject: 0				into: [:longest :each | longest max: each].			widths add: longestPhraseWidth.			lines := lines				collect:					[:each | 					(each readStream)						skipThrough: Character tab;						upToEnd].			lines := lines select: [:each | each includes: Character tab]].	^widths</body></methods><methods><class-id>Core.Point</class-id> <category>opening placement algorithm</category><body package="Browser-BrowserUI" selector="constrainedBy:">constrainedBy: screenBox		^(self max: screenBox origin) min: screenBox corner</body></methods><methods><class-id>Refactory.Browser.SharedVariableNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator sharedVariableName isNil ifTrue: [^self].	self doDragAndDrop: #sharedVariable for: aController</body></methods><methods><class-id>Tools.Trippy.TextAttribute</class-id> <category>comparing</category><body package="Browser-BrowserUI" selector="&lt;=">&lt;= aPropertyPart	^self isProtected ~= aPropertyPart isProtected		ifTrue: [aPropertyPart isProtected]		ifFalse: [self key &lt;= aPropertyPart key]</body></methods><methods><class-id>Refactory.Browser.VariableEnvironment</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="navigatorClass">navigatorClass	^(self numberVariables &gt; 1 or: [self numberSelectors = 0]) 		ifTrue: [VariableNavigator]		ifFalse: [super navigatorClass]</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserEnvironment</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="fullNameFor:">fullNameFor: aClassOrNamespace	| name |	name := aClassOrNamespace fullName asString.	(name ~= 'Root'		and: [(name indexOfSubCollection: 'Root.' startingAt: 1) ~= 1])		ifTrue:			[name := (name indexOfSubCollection: 'Smalltalk.' startingAt: 1) = 1				ifTrue: ['Root.' , name]				ifFalse: ['Root.Smalltalk.' , name]].	^name.</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserEnvironment</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="navigatorClass">navigatorClass	^BrowserNavigator</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useProtocolNavigator">useProtocolNavigator	^false</body><body package="Browser-BrowserUI" selector="useSingleClassNavigator">useSingleClassNavigator	^false</body><body package="Browser-BrowserUI" selector="useSystemNavigator">useSystemNavigator	^self isSystem</body></methods><methods><class-id>Graphics.Window</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="application">application	"For compatability with others that do this."		^nil</body></methods><methods><class-id>Refactory.Browser.BundleStructureView</class-id> <category>event states</category><body package="Browser-BrowserUI" selector="defaultButton1Up:">defaultButton1Up: aButton1Up	"This will come from either a #scrolling or #dragging state. We want to return to the #idle state AND if the mouse is in bounds (dragging), then go ahead and do the drag."	&lt;event: #Button1Up&gt;	self endConsumingMouse.	(self containsMouseEvent: aButton1Up) ifTrue: [self updateBundleOrder].	self returnToIdle.	self populate</body><body package="Browser-BrowserUI" selector="draggingMouseMoved:">draggingMouseMoved: aMouseMoved	"If the mouse has moved outside of bounds vertically, change state to #scrolling and reissue the event so it is processed by scrollingMouseMovedEvent:. Otherwise determine the row we're targeting as dragging under. We take some care (adjustedTargetRow:) to determine the logical row it would be inserted under, not necessarily the same as the one the mouse is over, this being the case for the #missing and #disregard sections which are always alphabetical. When we've determined it can be moved, we change the position of the row as appropriate, and then force an animated update of the layouts."	&lt;event: #MouseMoved filter: #isDragging&gt;	| point newTargetRow |	point := self globalPointToLocal: aMouseMoved point.	(point y &lt; self bounds top or: [point y &gt; self bounds bottom])		ifTrue: 			[state := #scrolling.			^self handleEvent: aMouseMoved].	(rowToDrag frame containsPoint: point) ifTrue: [^self].	newTargetRow := self children reverse				detect: [:each | point y &gt; each frame center y]				ifNone: [self children first].	newTargetRow == rowToDrag ifTrue: [^self].	targetPreceedingIndex := components indexOf: newTargetRow.	components remove: rowToDrag.	components add: rowToDrag beforeIndex: targetPreceedingIndex.	self		updateChildFrames: (Point zero extent: self bounds extent)		animate: [:n | n ** 0.5]		for: 200 milliseconds</body><body package="Browser-BrowserUI" selector="idleButton1Down:">idleButton1Down: aButton1Down	&lt;event: #Button1Down filter: #isIdle&gt;	rowToDrag := self children				detect: [:each | each containsMouseEvent: aButton1Down]				ifNone: [^self].	state := #dragging.	self noTooltips.	self beginConsumingMouse.	rowToDrag invalidate</body><body package="Browser-BrowserUI" selector="idleMouseMoved:">idleMouseMoved: aMouseMoved	&lt;event: #MouseMoved filter: #isIdle&gt;	self childrenDo: 			[:each |			(each containsMouseEvent: aMouseMoved)				ifTrue: [each announceFrameEntered]				ifFalse: [each announceFrameExited]]</body><body package="Browser-BrowserUI" selector="mouseEnter">mouseEnter	&lt;event: #MouseEnter&gt;	self returnToIdle</body><body package="Browser-BrowserUI" selector="mouseExit">mouseExit	&lt;event: #MouseExit&gt;	self noTooltips.	self returnToIdle</body><body package="Browser-BrowserUI" selector="mouseWheel:">mouseWheel: anEvent	&lt;event: #MouseWheel&gt;	self scrollBy: (anEvent up				ifTrue: [scrollOffsetHolder grid y negated]				ifFalse: [scrollOffsetHolder grid y])</body><body package="Browser-BrowserUI" selector="scrollingMouseMoved:">scrollingMouseMoved: aMouseMoved	"If we're back in vertical bounds, change state, and reissue the event so it gets handled by draggingMouseMovedEvent:. Otherwise scroll as appropriate."	&lt;event: #MouseMoved filter: #isScrolling&gt;	| y |	y := (self globalPointToLocal: aMouseMoved point) y.	(y &lt; self bounds top or: [y &gt; self bounds bottom])		ifFalse: 			[state := #dragging.			^self handleEvent: aMouseMoved].	self scrollFrom: y</body></methods><methods><class-id>Refactory.Browser.CodeTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Refresh #defaultString: 'Refresh' #catalogID: #browser) 				#nameKey: #'Update Code Tool Display' 				#value: 				#action: ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BundleStructureTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 680 435 880 635 ) 			#flags: 8 ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.Rectangle} 6 12 22 28 ) 					#name: #resetButton 					#flags: 0 					#component: #resetButton ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.Rectangle} 30 12 46 28 ) 					#name: #addButton 					#flags: 0 					#component: #addButton ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 30 0 0.5 1 ) 					#name: #explanationLabel 					#label: #explanationText 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 40 0 0 1 -40 1 ) 					#name: #bundleStructureView 					#flags: 1 					#component: #bundleStructureView ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -40 1 0 1 0 1 ) 					#name: #loadOrderWarningStrip 					#flags: 0 					#component: #loadOrderWarningStrip ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserIcons class</class-id> <category>png imports</category><body package="Browser-BrowserUI" selector="addClass">addClass	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'addClass.png'&gt;	&lt;md5sum: #[221 114 152 111 76 96 176 237 1 119 37 254 23 158 235 107]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@DB5W0A@-U&lt;@@@@@@@@@@@@@@@@@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@A0.&amp;T@;&lt;:JI/? +%''?8Z9Z;=FPK7B:Y @@@@@@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@GB:YPC?7*!O??[T%O?86ZC?&gt;]*!??[U&amp;O?Z''#-0.6\@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@N?L!Q3?=-RT??+]*/?;8KK?==BQ?&gt;25VO?!(R3/1WT@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????PKU_@O?T$!??=L6F??#U''_?74IK?=&lt;2J??F&gt;[O?(+TK?4HTKPK!"@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????PKU_@O?N  C?9:(9??B:Y_?73H+?&gt;MBQ??G@[??(+T[?4HXMPK!"@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@N?E]PC?8Z@&amp;?&gt;23T/?1/&amp;3?&lt;\A/?&gt;67V/?#(#S/1''\D@@@@@@@@@@@_?????&lt;?K1??N2,[?1,J&gt;A @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@@@@@GB:Y C?3(HE?&gt;F!KO?(+TK?:J5F?&gt;N"MO?N!P&gt;@.6X@@@@@@@@@@@@S?????&lt;W@/O?@.;_?**Z"GP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@@@@@@@@@@A0.6\@;&lt;U5@O?P!P/?4HXM;&lt;Y7AHB;Y @@@@@@@@@@@@@@@@@S?????;::-_&gt;9-J??)JB[GP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@@@@@@@@@@@@@@@@@@@@@DB8X A@.FH@@@@@@@@@@@@@@@@@@@@@@@@@@@@S?????;"1+O&gt;2*:W?'')"RGP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@@@@@@@@@@@@@@@@@@S?????:&gt;((/&gt;)(Y+?%(&gt;HGP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????I_???2_???&lt;''????I????2_???&lt;+?????:.#&amp;?&gt;_%(7?&amp;9JJA/???2_???&lt;''????I????2_???&lt;S????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@?????:^_%/&gt;%''YS?)Y6T?:V]%O&gt;%''YS?)I2S?9&gt;V#_&gt;U"8G?%86C?96T"/&gt;%''YS?)Y6T?:V]%O&gt;%''YS?%8:D@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@?????9NI__&gt;J_7O?"''=3?8)?\?&gt;J_7O?"''=3?8)?\?&gt;J_7O?"''=3?8)?\?&gt;J_7O?"''=3?8)?\?&gt;J_7O?^''E&amp;@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@?????7]+XO=(W%S?ZE9T?6!^UO=(W%S?]F%^?7-/YO=?\6_?\6!]?61!U?=(W%S?ZE9T?6!^UO=(W%S?ZE9T@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????E0@@@B8@@@@.@@@@K @@@B8@@@@Q@@@@?7M&amp;V_=4Y5+?YU)NK0@@@B8@@@@.@@@@K @@@B8@@@@''@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@@@@@@@@@@@@@@@@@@S?????7U)WO=*WT??W%IFGP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@@@@@@@@@@@@@@@@@@S?????61_UO= T$[?UT$&gt;GP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@@@@@@@@@@@@@@@@@@S?????6QWSO=WR#;?STH7GP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@@@@@@@@@@@@@@@@@@S?????5-PQ?=NP##?QS(2GP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@@@@@@@@@@@@@@@@@@B@@@@?4H9L/&lt;:L"3?N#H,HP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="adoptOverrideIdle">adoptOverrideIdle	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'adoptOverrideIdle.png'&gt;	&lt;md5sum: #[53 43 99 100 106 87 167 67 255 57 72 28 67 179 191 102]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;LPDA@#4-KR=1KR4/&gt;RT%I?4%IR_=IRT''?R$)J?4)JR/=JR$+?R4-K?4-KR?=KR4/?SD1L?41LSO=LSD3?SD1L?$5MS]1PTEBOTEAPCEUUUPC???&lt;@????@O???05NS$;ZTEAP+6Y&amp;Y%:3,;MA&gt;?/;PO???4C???=@????PO???4C???=@????PO???4C???=@&gt;?/;PO/;&gt;4C7=?]@=?_7P_O3&lt;5:.+*:/Z&amp;)*6%UUUP5NS$8@????@O???9QVU%Z.[F1,PO/;&gt;4C;&gt;?-@=?_7PO_7=4C3&lt;?MC9NS$%UYVU$O$9NQ@;&gt;?/PN/+:4O!8^FUZ&amp;)*P=7]7TC#8&gt;M@8&gt;O#PNO#84C_7==@7=?_+&amp;1,[IQ]WU4@????@O???==[V5-\+:&gt;/PN_''94C#8&gt;M@8&gt;O#PNO#84OQ4]G@L#H2;R(*J,AAPTEC4]GQP&lt;;N3,ANS$;-RD!H0E)ZV$OF1,Y@3&lt;?OPL?O34CK2&lt;-@2&lt;/KWI:^''-="X&amp;H@????@O????=!XVEA4MCPPMOS44CO3&lt;=@3&lt;?OP&lt;KB0,@)JR''@LC@0Q;R4-L@&gt;O#;AQ$YF0TYFQ,AMST5G,KB00E%YV\A XFAC-;^7PK^7-4B7-;]@-;^7P[F1,_=''Y6\@????@O????=''Y6]@/;&gt;?PK&gt;?/4B;.;-C+:&gt;/0B@ HL@''I2]C+:&gt;/PKN3,4Z$)JS-TS,9;UYAO$Z (JA@*:.+P:^'')&lt;A^W%;@YVU%P:B (DB#(:M@(:N#PI&gt;_''?=.[&amp;8@????@O????=.[&amp;9@*:.+PJ.+*4N\''I3@E1\W0A&lt;_G4N\''I1@(:N#P9"X&amp;L!TN3#78D9@=&gt;IOP\!+T$=C%IRTPI^W%4NQ$YG@YFQ$0F%)ZTNM#X5@#8&gt;OPH.K"?=4]GP@????@O????=4]GQ@%9^WQH.K"&lt;@PDAC@EQTUP8&amp;I"TBO#8=D!8^G2D44L/_WQ##?94 8?&gt;]HNO_YRS+H[5USQHB@ DB@ HAC_''9&gt;0F!(ZLA.[&amp;9D_G1&lt;PG!8^O=:^''(@????@O????=:^'')@ 8NCQG!8^L@OC0?@EAPTP7Y6]$A&lt;_G1D]GQ42D(2K?_NO"??7#&lt;/?=8?K?_QPSKHZ5IOQF5-[TA,[F1CZ6-+0FY&amp;Y,A-[V5DYVU%PFQ$YO&gt;A XD@????@O????&gt;A XE@\GA0PGA0\DM''Y6_@D1LS0A$YFTM#X6M@ZF!(P5=_W&lt;!ML3C71S\(=&lt;\8J\!"RTYCV5-[PE1\WDMXVE#@W%9^0FQ$YDMTUEQ@UEQTPEAPTO&gt;G!8\@????@O????&gt;G!8]@WE1\PE1\WDAXVE!CUEQT0A XFL@_G1=CTEAPPEAPTDYIRT''-R#T3;UD&lt;N$YIRT%@RD!HP4!HRLAVU%[@WU5]P4EAPTA@PDA@OC0&lt;PC0&lt;OO&gt;N#(8@????@O????&gt;M#X5AQ4]GPD!HRDADQDQ@QDQDP34=O\@]GQ7@IBP$Q3$9N\@2L#KAN#(:0S4=O\ABP$IGM#X60EAPTLAUUUUCLSD1PB0,KD@,KB1@JB (PR,+J?&gt;T%IP@????@O???=&gt;R$)I\V5-[PCP4MD@0LCA@LC@0PB0,KDL*J"+@H2L#;R(*J,@1LSECI"X&amp;P2X&amp;I,AAPTG-R4-K0D5MSTL^G!9@GA0\PA XFD@XFA!@EAPTWD-KR=&gt;X&amp;I @????@O???9RY&amp;Y&amp;."(*JPA0\GD@\GA1@GA0\PA XFD@XFA!CD1LS%RX&amp;I$LWE1]@DA@PPA@PDDLOC0&gt;UO#8&gt;P0,KB4@HB@!@B@ HP@PDAD@DA@Q@@@@@+(*J")R_''9&lt;@????@O???06]''Y7Z''9&gt;_+82L#E9IRT%AC@0LP@PDAD@DA@Q@@@@@P@@@@D@@@@A@@@@@P@@@@D@@@@A@@@@@P@@@@D@@@@A@@@@@PPPDAE9GQ4^/#8&gt;O6*V%)P61,[D@????@O???0C???&lt;L****#:Z&amp;)-2&amp;)*[&gt;*J"(?:"(*O&gt;)*Z''?*Z&amp;)?:&amp;)*_&gt;***+?****?:***/&gt;***+?*:.+?:.+*?&gt;+*:/?+J2,?*2,+M2)*Z&amp;O*:.+CJ*** C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="basicFind">basicFind	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'basicFind.png'&gt;	&lt;md5sum: #[101 8 242 94 205 165 113 219 183 140 241 237 114 85 169 190]&gt;	^[AlphaCompositedImage image: ((Image extent: 16@16 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ZRT%I]H%IRWRIRT%ZRT%IP@@@@@@@@@@@@@@@@@@@@A)IRT%4"T%I]H%IRU)IRT%@@@@@@@@@@@@@@@@@2T%I_,%IRW?IRT%?2T%I^ %IRTBU5]W@@@@@@@@@@@BMCP4:BT%I_&lt;%IRW?IRT%&gt;2T%IPL%IRT@@@@@@@@@@CT%IRW?O#8&gt;?9ZV%/&lt;%IRW?IRT%1&amp;1,[K]^W%:7PTEA1#4=O_&lt;%IRW?IRT%?9ZV%/&lt;&gt;O#85IRT%@@@@@@@@@@B[H"H"?4=OS?&gt;V%)[?IRT%?2T%I_=.[&amp;;?!HRD?6U%Y_=DQDS?IRT%?2T%I_&gt;V%)[?S4=O&amp;2H"H @@@@@@@@@@6"H"H/=MST7?$IBP?2T%I_&lt;%IRW?_G1&lt;?2T%I_?X6M#?S$9N?2T%I_&lt;%IRW?$IBP?45MS]("H"H@@@@@@@@@@OL$IBS?K"8.?45MS_&lt;5MSW?IRT%?6]''Y?&lt;%IRW?6M#X?45MS_&lt;%IRW?MST5?45MS_&lt;.K";3IBP$@@@@@@@@@@CYHRD!?6U%Y_&gt;$)JS?#H2L?34=O_&lt;3L3O?M#X6?3L3L?&lt;-KR7?OC0&lt;?82L#O&gt;$)JS?YVU%6RD!HP@@@@@@@@@@:2 (JO=-[V7?)ZV%?86M#_=@PDC&gt;IBP$?:R$)O&gt;%)ZW&gt;IBP$?4A@PO&gt;M#X7?)ZV%?65-[^,(JB @@@@@@@@@@OT7M3_?]''Y6?:N#(?&gt;N#(;?R4-K;2X&amp;I/&gt;J"(+?"(*J;2X&amp;I/=KR4/?#(:N?:N#(?=6]''[5M3\7@@@@@@@@@@C?QTUE?4R&lt;7?=&lt;=_?? _''??3B;9O,5MSTLIRT%CBT%I_,5MSW?LK/$?8G9??=&lt;=_??QK3_?4UEQP@@@@@@@@@@?S8&gt;O/&lt;13???Y.[??6K#??&lt;81/O&lt;K"8.@@@@@@@@@@C&lt;K"8.?3#F&lt;?="8???Y.[??3GO??4&gt;O#8@@@@@@@@@@L$&amp;I"[?ZX&gt;Z?;B://&gt;..+3?W(6[0BT%IP@@@@@@@@@@0BT%I_=^#Y/?++*&lt;?;B://=)#9+II"X&amp;@@@@@@@@@@A/IBP$0RT%I_@%IRW0IRT%/2T%IU\%IRT@@@@@@@@@@E\%IRV?IRT%&lt;BT%I_@%IRWAIRT%[2P$I@@@@@@@@@@@L2T%IVL%IRU)IRT%ZRT%IU,%IRT^I2\''@@@@@@@@@@@^I2\''V2T%IV$%IRU)IRT%X2T%ISL%IRT@@@@@@@@@@@P(JB _IRT%MBT%IR&lt;%IRTUIBP$@R$)JP@@@@@@@@@@@R$)JQT$IBP/IRT%MBT%IQ&lt;%IRTDJB (@@@@@@@a')))] once</body><body package="Browser-BrowserUI" selector="browseSystem">browseSystem	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'browseSystem.png'&gt;	&lt;md5sum: #[249 80 142 159 162 82 153 217 69 148 253 209 31 28 188 165]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????B\Y1NZOX(73+7J6H:M^ ]Y/T&amp;68G-$$@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????&amp;=NTZO?!,(S?:LFG?&gt;#B ??\(%M:/&amp;HW@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????:]*$_O?(0X_?9&lt;A0?&gt;V1T??Z(B[Q2W(T@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???&gt;A.[&amp;;?[&amp;9.?;]-L/?[''##?9J=N??;S+_?$+4;O3(LW@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????=.[&amp;8@????^;%WC??N_1G?6*D''?&gt;V0S/?Y''2]10''LW@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????=.[&amp;8@????A;YI@G^=W ?Q2W(T3&lt;:CE7GB\1\G-$$@@O???0C???&lt;H/;&gt;?NK&gt;;-&amp;*&gt;/KQ*/+24M;:9-P"?/;&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????=.[&amp;8@????@O???0C???&lt;@????@O???0C???&lt;@????@O???5&amp;7,*''..KJ''8+&amp;1''&lt;&amp;=,H#I/[BH8+&amp;1''&gt;:7,ZYY-:&gt;)@O???0C???&lt;@????@O???0C???&lt;@????@O????=.[&amp;8@????@O???0C???&lt;@????@O???0C???&lt;@????([F(&amp;&gt;R2*YVS2[E@^M^7EW#Y.Q)86[$\^M&amp;9F)OI,TW$,Z"T(Z:&amp;&amp;@C???&lt;@????@O???0C???&lt;@????@O????=.[&amp;8@????B\Y1NZOX(73+7J6H:M^ ]Y/T&amp;69^*)&amp;N9J. #W7T.B%86;4+^M6?L7#]0SU87\D7^M7AMW#]/3M=5+(19J&amp;_"5&amp;&amp;'')H@????@O???0C???&lt;@????@O????=.[&amp;8@????&amp;=NTZO?!,(S?:LFG?&gt;#B ??Z(%S6()RD$&lt;Z/SG#]0S]87&lt;YD^NGHSW#!2%M88\)U^NGJT7#!2D587&lt;YD$&lt;^1T&gt;:^%HXH''9&gt;@@O???0C???&lt;@????@O????=.[&amp;8@????:]*$_O?(0X_?9&lt;A0?&gt;V1T??L&amp;3'':(H50^M7DPG#!2EE88&lt;1^^N[PZG#&amp;4&amp;=8:MI1^N[R[7#&amp;4F!88&lt;1^^NGHT^JY#''$7%H-=@O???0C???&lt;@????@O????=.[&amp;;?[&amp;9.?;]-L/?[''##?9J=N??;S+_?@''E;5)85[^NGJUW#&amp;3&amp;Y8:MU7^N+Y ''#,68)8;M.L^N3["''#*6XI8:MU7^N[NY,&amp;]#61*#(A1@O???0C???&lt;@????@O????=.[&amp;8@????^;%WC??N_1G?6*D''?&gt;V0S/&gt;7#4O!''(]\^N[NY''#(5W%8;M.L^N;_&amp;7#08:Y8&lt;NN*^OC#)''#.79-8;M.L^N#U^\&amp;X"VU*!GY%@O???0C???&lt;@????@O????=.[&amp;8@????A;YI@G^=W ?Q2W(T3&lt;:CE9B(\#K#!WU]^N#R\7#,68)8;.F_^OK(,7#4;K=8=N;F^OS,/7#2:KM8;.F_^N3[".JC\547_V=]@O???0C???&lt;@????@O????=.[&amp;8@????@O???0C???&lt;@????@O???0"@XFC.^F!T$&lt;F/[W#.7YU8&lt;NZ,^OS,1G#9&lt;-%8&gt;?_!^O''26W#4;LQ8&lt;NZ,$&lt;R3_^96YU@H FA @O???0C???&lt;@????@O????=.[&amp;8@????@O???0C???&lt;@????@O???0C???=Y[U1H9GU$SG7$5)M8&lt;."3^O_.3G#;=&gt;Y8????^O/79''#7;,244,Z ?G=/VKBG^&amp; B]VQP@O???0C???&lt;@????@O????=.[&amp;8@????B\Y1NZOX(73+7J6H:M^ ]Y/T&amp;68G-$$@(WA_Q&gt;Q5YD.S0+ZI^OS,1G#9&lt;-%8&gt;?_!^O''26YOF.)''&lt;]VQN?8I4X_?[6=*^'')RH@''!(UPC???&lt;@????@O????=.[&amp;8@????&amp;=NTZO?!,(S?:LFG?&gt;#B ??\(%M:/&amp;HW@O???5%-WDW.[55H8''U#S\&amp;H]5;I"G%_8''U$S.9/WT"7#8M3?7I!S_&gt;$&amp;9C?6M_U'')*P 0I&lt;[E(@????@O????=.[&amp;8@????:]*$_O?(0X_?9&lt;A0?&gt;V1T??Z(B[Q2W(T@O???0C???&lt;HXFA@NF5[QF),V4Y*[E-FM6=]Q ! XD@B4L?K''*.$&amp;/=.WD#?*I&gt;U?=SS4I:W#G8B_7A_@O???&gt;A.[&amp;;?[&amp;9.?;]-L/?[''##?9J=N??;S+_?$+4;O3(LW@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@-SS4I:(''9W?[%5H?:.$&amp;/?P3,.Q$8]9@O???0C???&lt;@????^;%WC??N_1G?6*D''?&gt;V0S/?Y''2]10''LW@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0KX5=V^)I.P?7I!S_&gt;/*I?^3\+G@O???0C???&lt;@????A;YI@G^=W ?Q2W(T3&lt;:CE7GB\1\G-$$@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;B6=/Z!*FW"&gt;I5YUE+,:2#@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="definitionsMethod">definitionsMethod	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'definitionsMethod.png'&gt;	&lt;md5sum: #[200 194 50 128 163 19 138 6 116 182 149 254 219 36 99 36]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@F????3_???&lt;M????@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@T?F.K_7.*23=::\+T&gt;&amp;%JP@@@@AS&lt;;D.?^&gt;-KO7,*B-S:JL)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@K???&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@EO&amp;(2#=9I&lt;''?^F]IUO^&amp;RP@@@@@T&gt;"#J_7%(B_=8Y0&amp;T=:XI@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AS7IX#?]&amp;RH/7W$BAS5H8_@@@@@EO^&amp;BS=6)P"?]^PHEOS#Q&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@T=FJG/7O"A3=3HT[T&lt;*BF @@@@AS484_?]BIG_7L!Q-S2XDY@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@T&lt;&amp;AF/7G_1#=1G,WT&lt;I9E @@@@AS3HT[?\&amp;AF_7E_A!S0''$V@@@@@O&gt;F!([?Z&amp;)*?65-[_=/[6??\GA0?69.[/=&amp;Y&amp;XD\''I2@@@@@@@@@@@@@@@@@@@@@@@@@@AS1G,W?\E8E/6?]QUS/GHS@@@@@EOI Q''=1W0X?\I9E%N&gt;]AP@@@@@@@@@@O=_W5????????????????????????????=.[&amp;;?UEQTB7Q4]@@@@@@@@@@@@@@@@EN?]!S=/GHS?[)0D%N7Z1D@@@@@T&lt;U&lt;FO7B^Q[=/''PTT;-1D0@@@@C?!(ZF?6)*Z/=-[V7?[6=/?7A0\O=.[&amp;;?Y&amp;Y&amp;??3&lt;?O=!XVG?PTEA?5YVU Y4]GP@@@@@T;%/D/67Z1G=-F$OT;I&amp;CP@@@@AS0''$V?[94EO6;\QMS-64Q@@@@@@@@@@C?W5=_????????????????????????????[&amp;9.?5QTUO=-[V7?PDA@?5IRT/=UUUTC]GQ4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?8ZF!/=*Z&amp;+?[V5-?6=/[?=0\GC?[&amp;9.?6Y&amp;Y/?&lt;?O3?XVE!?4EAP_=VU%[?WU5]?59^W/=^W%;?WE1\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?5=_W????????????????????????????69.[/=TUES?[V5-?4A@PO=RT%K?UUUU??7=?_??????YVU%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?6I"X/??????-KR4?;6=/_?@0LC??????6E!X_=APTG?U%YV?55]W_=^W%;?W%9^?51\WO??????Y6]''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?6U%Y_??????/[6=?&lt;OC0??L3L3??????65-[_=@PDC?T%IR?5UUU_?=?_7??????6U%Y_??????ZV%)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?6]''Y???????0\GA?&lt;7M3_?R4-K??????7M3\?=]WU7?W%9^?59^W/=\WE3??????6]''Y???????Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?6)*Z/??????1,[F?=KR4/?W5=_???????????????????????????=%YVW??????6%)Z_??????YVU%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?61,[O??????2\''I?=ST5O?X6M#?6-+Z?=WU5_?M3\7?0\GA??????=''Y6_??????6Y&amp;Y/??????YVU%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?61,[O??????2,+J?=KR4/?Z6-+?6=/[?=_W5??Q4]G?1LSD??????=)ZV''??????6U%Y_??????W%9^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?6Q$YO??????/[6=?&lt;[F1/?Q4]G?4-KR?&lt;?O3??I2\''?0LC@??????=&amp;Y&amp;[??????6U%Y_??????WE1\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?5=_W???????-+Z6?&lt;C@0O?D1LS?2,+J?&lt;SD1O?@0LC?-;^7??????=%YVW??????59^W/=HRD#?S$9N@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?5%YV_??????+Z6-?;Z6-/&gt;&gt;/+;?0LC@?;:&gt;//&gt;9.[''?+*:.??????=%YVW??????51\W@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?5IRT/??????''9&gt;_?:^'')?&gt;.+*;?,KB0?::.+/&gt;,+J3?(:N#??????=^W%;?RD!H?49NS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?5YVU/????????????????????????????????????????????????=\WE0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?5QTUO=GQ4_?RD!H?4)JR/=LSD3?NC 8?3X6M/&lt;8NC#?O#8&gt;?4!HRO=NS$8@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')))] once</body><body package="Browser-BrowserUI" selector="extractMethod">extractMethod	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'extractMethod.png'&gt;	&lt;md5sum: #[221 160 154 22 119 60 170 238 162 86 105 150 103 227 209 43]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????HN*&amp;J.C))"''?:ZX) N&amp;%JPC???&lt; 9:\(8N&amp;&amp;J_?))"&amp;@:ZT*@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???2C!''BW?8JP;?&gt;B[I_?]-73?5-CO?=WF-??^(S''?8I,%?=R.\/?E/[/?0[&amp;7?;:6,?&gt;:,*??-*:+?;N*)?&gt;/)*O?+JJ_?:"_&amp;?&gt;%&amp;9\@????@O???0C???&lt;@????@O???0C???&lt; 6IH 8M^RHO?W$RB@59D @O???2CW#2C 59H ?=^QHHCW$R@@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C?????6-SS?=WG._?O#3G?3(\[?&lt;6&amp;[??H0[??1+Z(?&lt;2MK??N!1/?1I5%?;Z.*?&gt;3**_?+:Z#?:2"''?&gt;(''9/?)Y.W?:FW$?&gt;]$8&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????HLY&gt;E&gt;CF_!_?1''8W LY&gt;E0C???&lt; 18@X8LY&gt;E??F_!^@1W8X@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C?????4\J4?&lt;RCKO?B^Q[?1Y5*?&lt;R=.??A,ZO?0X@)?&lt;I9E/&gt;&lt;%FC?,:*''?:&gt;&amp;(?&gt;,()??*I&gt;[?:V[%?&gt;!%9O?''YNO?9*O"?&gt;V"8\@????@O???0C???&lt;@????@O???2B&gt;]AS /''PT?;94EHB&gt;]AP@????HK=8FNB&gt;]AS?/''PT K54E@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????HK)/D.B:[1K?.&amp;&lt;R?&lt;FWZO?D/[/?0KB"?;)8I/&gt;:[1K?.H9^?;N*)?&gt;/)*O?+JJ_?:"^&amp;?&gt;$&amp;9_?(Y^S?96S#?&gt;Z#8/?%(.G?9NH ?&gt;O!G&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C?????1K6;?&lt;F9-?&gt;=-[O?.+F/?;Z.*?&gt;3**_?+:Z#?:2"''?&gt;('')/?)I.W?:FW$?&gt;]$8??&amp;(&gt;K?9ZK!?&gt;S!8O?#8Q??8.@^?&gt;H_G\@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@?????51\WO=XVE#?T5MS?49NS/=JR$+?QTUE?4EAP_&lt;&lt;OC3?NC 8?3L3L?&lt;/K2??J"(*?2X&amp;I/&lt;!HRG?GQ4]?1 XFO&lt;SD1O?C0&lt;O@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@?????5YVU/=RT%K?ST5M?4%IR_=DQDS?O3&lt;??3,;N?&lt;6M#[?L#H2?24-K_&lt;)JR''?IBP$?2@ HO&lt;[F1/?E1\W?1HRD/&lt;MCP7?BP$I@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@?????5APTO=LSD3?Q4]G?4MCP?&lt;&gt;O#;?NS$9?3T5M_&lt;0LCC?KB0,?2\''I?&lt;#H2O?G!8^?1(ZF/&lt;UEQW?DQDQ?00LCO&lt;HB@#?@0LC@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C?????*I:Z?:RZ%/&gt; %)K?''YJO?9&amp;O"?&gt;V"8_?$(^C?8&gt;C_?&gt;K_7/?"G17?8Q8\?&gt;A]F??_WA+?7%,Y?=6ZVO?\&amp;U_?6=!V?=+WU\@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C?????(IZR?96R#?&gt;Y#8/?%(.G?9JG ?&gt;O 7??"7=;?8!&lt;]?&gt;D^GO? GQ/?750Z?=9[F_?]&amp;!#?7I%W?=/XU/?Z55W?6!YT?=$UT&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C?????&amp;X&gt;J?9ZK!/&gt;R!8K?#8M??8-?^?&gt;H^7_?!G!3?8A4[?==\F/?^V1''?7Y(X?=2YU??[6E[?6-]U?=(VUO?YEUO?6ERR?=]S$\@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="findClass">findClass	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'findClass.png'&gt;	&lt;md5sum: #[206 229 170 221 255 161 57 245 183 232 82 73 56 15 16 200]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@DB5W0A@-U&lt;@@@@@@@@@@@@@@@@@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@A0.&amp;T@;&lt;:JI/? +%''?8Z9Z;=FPK7B:Y @@@@@@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@GB:YPC?7*!O??[T%O?86ZC?&gt;]*!??[U&amp;O?Z''#-0.6\@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@N?L!Q3?=-RT??+]*/?;8KK?==BQ?&gt;25VO?!(R3/1WT@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????PKU_@O?T$!??=L6F??#U''_?74IK?=&lt;2J??F&gt;[O?(+TK?4HTKPK!"@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????PKU_@O?N  C?9:(9??B:Y_?73H+?&gt;MBQ??G@[??(+T[?4HXMPK!"@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@N?E]PC?8Z@&amp;?&gt;23T/?1/&amp;3?&lt;\A/?&gt;67V/?#(#S/1''\D@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@GB:Y C?3(HE?&gt;F!KO?(+TK?:J5F?&gt;N"MO?N!P&gt;@.6X@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@A0.6\@;&lt;U5@O?P!P/?4HXM;&lt;Y7AHB;Y @@@@@@@@@@@@C???=)IRT%4"T%I]H%IRU)IRT%@O???0C???&lt;@????@O???6$%IRWRIRT%4"T%IV$%IRT@????@@@@@@@@@@@@@@@@@@@@@DB8X A@.FH@@@@@@@@@@@@@@@@@@@@@@@L%IRW;IRT%?2T%I_&lt;%IRW(IRT%@%]WU0AGQ4\@M#X6@#P4MN %IRW?IRT%?2T%I_,%IRTCIRT%@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???3T%IRW?O#8&gt;?9ZV%/&lt;%IRW?IRT%1&amp;1,[K]^W%:7PTEA1#4=O_&lt;%IRW?IRT%?9ZV%/&lt;&gt;O#85IRT%@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???9,"H"K?S4=O?9ZV%/&lt;%IRW?IRT%?69.[/&gt;D!HS?YVU%?4QDQO&lt;%IRW?IRT%?9ZV%/=OS4&gt;[H"H"@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???=("H"K?ST5M?9BP$O&lt;%IRW?IRT%?71&lt;_O&lt;%IRW?6M#X?49NS/&lt;%IRW?IRT%?9BP$O=MST7ZH"H"@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????L$IBS?K"8.?45MS_&lt;5MSW?IRT%?6]''Y?&lt;%IRW?6M#X?45MS_&lt;%IRW?MST5?45MS_&lt;.K";3IBP$@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???=$!HRG?YVU%?:R$)O&gt;L#H3?OS4=?3L3L?&lt;6M#[?L3L3?24-K_&lt;&lt;OC3?#H2L?:R$)O=%YVWYHRD!@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???&gt;,(JB#?[V5-?:V%)_&gt;M#X7?PDA@?"P$IO&gt;$)JS?)ZV%?"P$IO=@PDC?#X6M?:V%)_=-[V7+JB (@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????T7M3_?]''Y6?:N#(?&gt;N#(;?R4-K;2X&amp;I/&gt;J"(+?"(*J;2X&amp;I/=KR4/?#(:N?:N#(?=6]''[5M3\7@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????=EQTW?QK3_?735??&gt;A&gt;_??LK/$&gt;3T5MP0%IRTLIRT%&gt;3T5M_&lt;0.&gt;S? _''??735??=D/M??QTUE@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????4&gt;O#;?L\???6[&amp;??="8???NL[3?B8.K @^G!8@G!8^?B8.K/&lt;81/O?X.O??6[&amp;??&lt;13??=O#8&gt;@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???&lt;$&amp;I"[?ZX&gt;Z?;B://&gt;..+3?W(6[0BT%IP@ HB@@HB@ 0BT%I_=^#Y/?++*&lt;?;B://=)#9+II"X&amp;@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???6&lt;$IBSAIRT%&lt;BT%I_@%IRV?IRT%U2T%IP@''I2\@I2\''U2T%I[&lt;%IRW0IRT%&lt;BT%I\D%IRU/IBP$@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???3L%IRU#IRT%ZRT%IV$%IRU[IRT%G"\''I0@_G1&lt;@G1&lt;_G"\''I5,%IRU)IRT%ZRT%IVL%IRT3IRT%@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0P(JB _IRT%MBT%IR&lt;%IRTUIBP$@R$)JP@ HB@@HB@ @R$)JQT$IBP/IRT%MBT%IQ&lt;%IRTDJB (@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="findMethod">findMethod	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'findMethod.png'&gt;	&lt;md5sum: #[30 156 235 23 59 71 231 87 47 245 209 188 18 97 124 162]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????T?F.K_7.*23=::\+T&gt;&amp;%JPC???=S&lt;;D.?^&gt;-KO7,*B-S:JL)@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???5O&amp;(2#=9I&lt;''?^F]IUO^&amp;RP@????T&gt;"#J_7%(B_=8Y0&amp;T=:XI@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???=S7IX#?]&amp;RH/7W$BAS5H8_@O???5O^&amp;BS=6)P"?]^PHEOS#Q&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????T=FJG/7O"A3=3HT[T&lt;*BF C???=S484_?]BIG_7L!Q-S2XDY@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????T&lt;&amp;AF/7G_1#=1G,WT&lt;I9E C???=S3HT[?\&amp;AF_7E_A!S0''$V@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???=S1G,W?\E8E/6?]QUS/GHS@O???5OI Q''=1W0X?\I9E%N&gt;]AP@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???5N?]!S=/GHS?[)0D%N7Z1D@????T&lt;U&lt;FO7B^Q[=/''PTT;-1D0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????T;%/D/67Z1G=-F$OT;I&amp;CPC???=S0''$V?[94EO6;\QMS-64Q@O???0C???=)IRT%4"T%I]H%IRU)IRT%@O???0C???&lt;@????@O???6$%IRWRIRT%4"T%IV$%IRT@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0L%IRW;IRT%?2T%I_&lt;%IRW(IRT%@%]WU0AGQ4\@M#X6@#P4MN %IRW?IRT%?2T%I_,%IRTCIRT%@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???3T%IRW?O#8&gt;?9ZV%/&lt;%IRW?IRT%1&amp;1,[K]^W%:7PTEA1#4=O_&lt;%IRW?IRT%?9ZV%/&lt;&gt;O#85IRT%@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???9,"H"K?S4=O?9ZV%/&lt;%IRW?IRT%?69.[/&gt;D!HS?YVU%?4QDQO&lt;%IRW?IRT%?9ZV%/=OS4&gt;[H"H"@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???=("H"K?ST5M?9BP$O&lt;%IRW?IRT%?71&lt;_O&lt;%IRW?6M#X?49NS/&lt;%IRW?IRT%?9BP$O=MST7ZH"H"@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????L$IBS?K"8.?45MS_&lt;5MSW?IRT%?6]''Y?&lt;%IRW?6M#X?45MS_&lt;%IRW?MST5?45MS_&lt;.K";3IBP$@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???=$!HRG?YVU%?:R$)O&gt;L#H3?OS4=?3L3L?&lt;6M#[?L3L3?24-K_&lt;&lt;OC3?#H2L?:R$)O=%YVWYHRD!@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???&gt;,(JB#?[V5-?:V%)_&gt;M#X7?PDA@?"P$IO&gt;$)JS?)ZV%?"P$IO=@PDC?#X6M?:V%)_=-[V7+JB (@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????T7M3_?]''Y6?:N#(?&gt;N#(;?R4-K;2X&amp;I/&gt;J"(+?"(*J;2X&amp;I/=KR4/?#(:N?:N#(?=6]''[5M3\7@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????=EQTW?QK3_?735??&gt;A&gt;_??LK/$&gt;3T5MP0%IRTLIRT%&gt;3T5M_&lt;0.&gt;S? _''??735??=D/M??QTUE@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O????4&gt;O#;?L\???6[&amp;??="8???NL[3?B8.K @^G!8@G!8^?B8.K/&lt;81/O?X.O??6[&amp;??&lt;13??=O#8&gt;@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???&lt;$&amp;I"[?ZX&gt;Z?;B://&gt;..+3?W(6[0BT%IP@ HB@@HB@ 0BT%I_=^#Y/?++*&lt;?;B://=)#9+II"X&amp;@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???6&lt;$IBSAIRT%&lt;BT%I_@%IRV?IRT%U2T%IP@''I2\@I2\''U2T%I[&lt;%IRW0IRT%&lt;BT%I\D%IRU/IBP$@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???3L%IRU#IRT%ZRT%IV$%IRU[IRT%G"\''I0@_G1&lt;@G1&lt;_G"\''I5,%IRU)IRT%ZRT%IVL%IRT3IRT%@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0P(JB _IRT%MBT%IR&lt;%IRTUIBP$@R$)JP@ HB@@HB@ @R$)JQT$IBP/IRT%MBT%IQ&lt;%IRTDJB (@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="newView">newView	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'newView.png'&gt;	&lt;md5sum: #[24 51 215 153 119 231 228 2 249 40 118 39 106 8 191 63]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0@@@@C?-J:+?;R.*?&gt;4+*/?-J:+?;R.*?&gt;4+*/?-J:+?;R.*?&gt;4+*/?-J:+?;R.*?&gt;4+*/?-J:+?;R.*?&gt;4+*/?-J:+?;R.*?&gt;4+*/?,:6*?:2&amp;)@C???&lt;@????@O???0@@@@C?-J:+?49LSO=NSD3?S$1L?49LSO=NSD3?S$1L?49LSO=NSD3?S$1L?49LSO=NSD3?S$1L?49LSO=NSD3?S$1L?49LSO=NSD3?QDQD?:V ''PC???&lt;@????@O???0@@@@C?-J:+?49LSO=NSD3?S$1L?49LSO=NSD3?S$1L?49LSO=NSD3?S$1L?49LSO=NSD3?S$1L?49LSO=NSD3?S$1L?49LSO=NSD3?QDQD?:BZ&amp;@C???&lt;@????@O???0@@@@C?-J:+??CZ2??06,/?&lt;M+K?&gt;O[5/?C4M3?*&lt;+#?;CL:/&gt;&amp;1^S?$+CQ?8*)3O&gt;J+MW?&amp;K3.?8&gt;6:/&gt;N-NW?2\/R?&lt;29+O?T0KK?5&lt;N5?9.U$0@@@@@@????@O???0@@@@C?-J:+??CZ2??/4&lt;G?8]''T?;OJ8_&gt;,2.#?#Z+F?7^L(?&gt;F#Y''?(9VS?:RR#_&gt;"#X[?!("S?6ZH,?==*&gt;#?^Z''*?;KB6/?E,JK?1+N''?9^R$@@@@@@@????@O???0@@@@C?-J:+??CZ2??!5L+?.\7!?:#G:O&gt;A&amp;[G?3[&gt;9?&gt;27%??,,9G?:*2H?&gt;&amp;&amp;_/?''(G[?9I%+?&gt;2;(O&gt;Q*=G?ZI+^?62 ;_&gt;"*;_?.J^\?9VP# @@@@@@????@O???0@@@@C?-J:+??CZ2??L5M+?&amp;&lt;C_?:&gt;?3_?:&gt;/+?;+6"?&gt;21#/?**8[?"2HB?8,"@/?&amp;&amp;F+?89I ?&gt;RXZ/?:&gt;/+?-&lt;#"?5&gt;S7?=Z!L[?))ZL?9BK"P@@@@@@????@O???0@@@@C?-J:+??CZ2?&gt; /=#?5]3#??W5=_?:&gt;/+?;[^Y?&gt;") /?()G''?"2HB?0@@@O?"$U;?78!U?&gt;JQX_?:&gt;/+?=_W5?&lt;#U:O=H]&lt;G?&amp;X*A?82G!P@@@@@@????@O???0@@@@C?-J:+??CZ2??V6];?:.+*??K2&lt;/?8&gt;O#?;\^0?&gt;R ]/?"&amp;V3?79M"?=:LV/?]!%G?68AH?&gt;^,"_?8&gt;O#?&lt;/K2?&gt;+*:/==(M[?%(!??8.F!@@@@@@@????@O???0@@@@C?-J:+??CZ2?&gt;82M+?3-''$?&gt;7-;_?2&lt;/K?;=;U?&gt;J(!O?\#U??68!U?="BS_?W_DO?7H9 ?&gt;3S1_?2&lt;/K?;^7-?&lt;CL8/=\#MW?%(!??8.F!@@@@@@@????@O???0@@@@C?-J:+??CZ2??S3\+?&amp;;3#?;OJ9/?Y8^''?;N3,?&gt;SR1??[*(7?4(]Z?=FBT??X''7;?8&lt;.=?&gt;7-;_?!9N+?)[7$?4V@7O=&amp;_*_?&amp;H*A?8.G!P@@@@@@????@O???0@@@@C?-J:+??CZ2??$1+K?/[?E?8^.7_&gt;H,&gt;#?+&lt;O ?&lt;GK6??X6&gt;C?7=?_?=?_7??_7=??7-;^?;/I7/=9(&gt;K?QXC[?5-:*/&gt;L_''[?()NI?8&gt;J"@@@@@@@????@O???0@@@@C?_IZA?4"BV/&lt;6]T/?K6]A?9""(/=&gt;%;#?Z9#V?7V$9O&gt;F+NS?$+O"?9J18_&gt;M+&gt;K?^JC]?46D7_&lt;&gt;[K[?[8B\?8:A^/&gt;^$HW?-*VZ?9VP# @@@@@@????@O???8@8]4;?Q9](?5Z0_O&gt;P3J+?R*Y0?1!-N_=Y[UK?!8RM?6A2#?=EZI3?PF^$?31''*O&lt;9X*[?P6FT?6A,!_&gt;C_(G?&amp;X.A?:JT"_&gt;6)Y+?1[J''?9^R$@@@@@@@????@O????\-[$S?S:17?42+]O??????RZ%1?4&amp;&amp;\O&lt;QTBS?1J"U?;*^#O&gt;.%XO?)H9&gt;?96P!/&gt;^$HW?(IFG?:ZW#O&gt;/(IS?-:^[?;6,(O?F,:_?2[Z*?9^R$@@@@@@@????@O????&lt;]X#S?","$?????????????????9GM*?&lt;LTRK?3+:1?&lt;&amp;9+O?E-Z#?0[F%?;&gt;/(??A+:K?0+B#?&lt;V3)/?J.J+?3K&amp;,?&lt;&amp;7*/?I-*+?2[Z*?9^R$@@@@@@@????@O????\MT"S?RJ!3?4^([/??????K(5T?3BNU/&lt;PT2[?&amp;YRR?9&amp;T$/&gt;Y%IK?&amp;YRR?9&amp;T$/&gt;Y%IK?&amp;YRR?9&amp;T$/&gt;Y%IK?&amp;INP?9^R$O&gt;W$)C?%9JP?9^R$@@@@@@@????@O???8PLTRK?E''P:?4*(]_=?0)+?LH9W?1Y4N)0MR2@$D!HTIAHREBPREAP$D1LSIALSD2PSD1L$D1LSIALSD2PSD1L$D1LSIALSD2PSD1L&amp;EAPTE ,KB0C???&lt;@????@O???0@@@@BHCED"&lt; 1QH/&lt;LTRK2CED""@1QH @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="redo">redo	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'redo.png'&gt;	&lt;md5sum: #[47 226 21 50 1 180 12 2 101 60 189 207 193 122 119 128]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@A@I^2M1B8D%0@&gt;LKLDS$#GAEYP2,QJRKVPK""XC@@@@@P@@@@@@@@@@@@@@@@@@@AHN 20@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@TP-&lt;IN&lt;P#B3?FZH:?2B,QO&lt;"+D_?I:5J?3B-T_&lt;/*$7!GI8:U .JI0P@@@@A@@@@D@-=H&lt;4O"2&lt;E@@@@@ @@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@AQBW$#?1RPL/&lt;_*DS?HJ=E?2B1Q?&lt;",$_?IKAH?2B-Q_&lt;#+T_?NKEW?2&amp;''RIXP%B8WBFL\4AZKLO&lt;P&amp;#PO@@@@A @@@@@@@@@@????@O???0C???&lt;@????@O???1@F]"C/DHX,?2B''P?&lt;#,4#?F*(&gt;5!JZL, P$3C$D9P2?2B!PO&lt;*+D3?GZ)C?3F0UO&lt;0*470E)45?4J''V?&lt;R)S X@@@@BP@@@@@@@@@@????@O???0C???&lt;@????@O???6DM^R[?F) :?2R0R_DV(3%[B6$"G0@@@A(@@@@Y@@@@_0-6IODX$#_?J*!K?16)P?&lt;3,EO?PKE\?3^/U/&lt;R*S$\@@@@B @@@@@@@@@@????@O???0C???&lt;@????@O???;@O B3?HZQE?1.(O6$L]R \@@@@DP@@@@$@@@@H@@@@B @@@C&lt;JX!??E9H6?2^)SO&lt;^+DS?I:5J?2R,Q?&lt;R*S$\@@@@B @@@@@@@@@@????@O???0C???&lt;@????@O???&lt;DN R/?HJ]F5QF[MA&lt;@@@@Q@@@@AP@@@@D@@@@@@@@@@P@@@ATEW!/!C((,?2^*R_&lt;_+T_?GJ-D?2R,R_&lt;R*S$\@@@@B @@@@@@@@@@????@O???0C???&lt;@????@O???=@Q!SC?HZ!H$P:JLA$@@@@I@@@@@P@@@@@@@@@@@@@@D@%=JM@K!"+?E:L:?1..QO&lt; +4#?HZ=G?2&amp;/SO&lt;R*S$\@@@@B @@@@@@@@@@????@O???0C???&lt;@????@O???&lt;DR 3G?HJMFYP=&lt;K!P@@@@E@@@@@@@@@@@@@@@@@@@@30*@J_&lt;O$CG?DI(4?1F^M_&lt;Q''3[?DY&lt;6?1F_M/&lt;Q''3X\@@@@B @@@@@@@@@@????@O???0C???&lt;@????@O???;DR 3K?G9=EU!A4KQ@@@@@C@@@@@@@@@@@@@@@@@@@@A@@@@@&lt;@@@@X@@@@G@@@@A0@@@@\@@@@G@@@@A0@@@@U@@@@A0@@@@@@@@@@????@O???0C???&lt;@????@O???6PQ_SG?G)%A AVHNP&lt;@@@@C@@@@@@@@@@@@@@@@@@@@@ @@@@X@@@@I@@@@B @@@@(@@@@J@@@@B @@@@(@@@@G@@@@@ @@@@@@@@@@????@O???0C???&lt;@????@O???1HOX2#UF(4&lt;"1"JOAD@@@@D@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0D@@@A E''88&amp;!&amp;IO!D@@@@E@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@LDE\'']!"COA4PTBXE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@A@@@@FQQ&amp;K#HV]#\E@@@@@P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@P@@@@(NS2LC@@@@@P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@D@@@@A@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????')))] once</body><body package="Browser-BrowserUI" selector="referenceClass">referenceClass	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'referenceClass.png'&gt;	&lt;md5sum: #[204 144 247 237 108 235 137 66 26 211 234 23 210 151 199 151]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@DB5W0A@-U&lt;@@@@@@@@@@@@@@@@@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@@@@@@A0.&amp;T@;&lt;:JI/? +%''?8Z9Z;=FPK7B:Y @@@@@@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@GB:YPC?7*!O??[T%O?86ZC?&gt;]*!??[U&amp;O?Z''#-0.6\@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@N?L!Q3?=-RT??+]*/?;8KK?==BQ?&gt;25VO?!(R3/1WT@@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????PKU_@O?T$!??=L6F??#U''_?74IK?=&lt;2J??F&gt;[O?(+TK?4HTKPK!"@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????PKU_@O?N  C?9:(9??B:Y_?73H+?&gt;MBQ??G@[??(+T[?4HXMPK!"@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@N?E]PC?8Z@&amp;?&gt;23T/?1/&amp;3?&lt;\A/?&gt;67V/?#(#S/1''\D@@@@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@@@@@GB:Y C?3(HE?&gt;F!KO?(+TK?:J5F?&gt;N"MO?N!P&gt;@.6X@@@@@@@C6=/X@&gt;O#8@JN#(3?\7M1].[&amp;9VZ2,+B&amp;?/;&lt;@=_W5@O#8&gt;@C5=_T@=/[6@O[6= C???&lt;@????@@@@@@@@@@A0.6\@;&lt;U5@O?P!P/?4HXM;&lt;Y7AHB;Y @@@@@@@@@@@@/6=/Y&lt;)JR$38VE!_A&gt;_'';8_''9&gt;=''5=_^!7]7^8[F1,TVU%YPC8&gt;O @&gt;O#8@O[6= C???&lt;@????@@@@@@@@@@@@@@@@@@@@@DB8X A@.FH@@@@@@@@@@@@@@@@@I&lt;OC0&gt;BC 8O?[F1,?7-;^?&gt;^'');?-[V5?&lt;C@0O&gt;;.;/?(:N#?7E1\ZYLSD0@1LSD@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C8&gt;O R.[&amp;9:''I2\/= XFC?$IBP?&lt;KB0/?W5=_?7M3\?=+Z6/?V5-[?2&lt;/K?;V5-_=_W5&gt; MST5@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/ZH[F1,?5MST?=5]WW?!XVE?:B (O&gt;2,+K?/;&gt;??&lt;SD1O?O3&lt;??2L#H?&lt;C@0O&gt;6-+[?ST5MLR@ H@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0E''Y6_MS$9N?5-[V?&gt;_''9?? 8NC?8:N#/&gt;^'');?*J"(?;Z6-/?@0LC?-[V5?;:&gt;//? 8NC? (JB_BH"H C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0U\WE3YO#8&gt;?7U5]_&gt;5-[W?\WE1?7=?_?&gt;W%9_?(:N#?::.+/&gt;&lt;/K3?,[F1?;Z6-/?*:.+?&amp;)*Z#"@ H@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C5=_WBMST5?7I2\/&gt;9.[''? 8NC?9BP$O&gt; (JC?+Z6-?;&amp;9._?C0&lt;O?.;.;?;&gt;?/??+:&gt;/?!HRD[P&lt;OC0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/Y%I"X&amp;?4%IR_&gt;***+?!XVE?9RT%O&gt;$)JS?+J2,?;Z6-/?@0LC?.[&amp;9?&lt;KB0/?$9NS&gt;N3,;F @@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/X@B (J/"D!H_=$YFS?4]GQ?&gt;;.;/?,;N3?;N3,?&gt;+*:/?*:.+?;N3,?&gt;#(:O=OS4=,APTE@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C8&gt;O @=_W5APLC@:XWE1_?Q4]G?9.[&amp;??Q4]G?8NC ?&gt;G!8_?N3,;?3&lt;?O&gt;$1LSF @@@@@=/[6@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/X@=_W5@O[6= C6=/Y@A@PD)ALSD=0)JR''0L3L3:#D1L]HUEQW?PDA@+A8^G C8&gt;O @=_W5@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C8&gt;O @&gt;O#8@O[6= C6=/X@=/[6@OW5=PC6=/XF@@@@@E)ZV"T@@@C?D1LSQ DA@PC6=/X@=/[6@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C5=_T@=/[6@V)*Z Y$YFPMX6M#EVE!XQ-#X6L\]7]7HTQDQLLA@PF&lt;APTEBZ2,+@-$YFPDY6]''@F5-[PC???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C5=_T@&gt;O#8B&amp;U%YQ=#X6L4XFA RU9^W%-ZV%)(W%9^ C0&lt;OIP^G!9I[F1,O6I"X"5#X6LWYFQ$AF5-[PC???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C5=_T@=/[6@O[6= CO3&lt;&lt;EZ6-+CF!(ZAI$YFPWWE1\D*&gt;/+0W6=/XO[&amp;9.B&amp;M#X0M(ZF @&gt;O#8@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="referenceMethod">referenceMethod	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'referenceMethod.png'&gt;	&lt;md5sum: #[57 207 149 64 239 105 96 22 154 8 133 125 209 178 154 223]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????T?F+K_7.*B3=::P+T&gt;&amp;"JPC???=S&lt;:4.?^&gt;)KO7,)B-S:J@)@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???5O&amp;''2#=9I,''?^FYIUO^%RP@????T&gt;" J_7%''B_=8Y$&amp;T=:UI@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???=S7IH#?]&amp;OH/7W#RAS5H(_@O???5O^%RS=6)@"?]^MHEOS"Q&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????T=FFG/7O!A3=3HD[T&lt;)&gt;F C???=S48$_?]BEG_7L Q-S2W4Y@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????T&lt;%=F/7G^1#=1G WT&lt;I5E C???=S3HD[?\%=F_7E^Q!S0''TV@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???=S1G W?\E4E/6?\!US/F&lt;S@O???5OI_Q''=1W$X?\I5E%N&gt;\QP@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???5N?\!S=/F&lt;S?[)-D%N7ZAD@????T&lt;U9FO7B]Q[=/''DTT;-.D0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????T;%+D/67ZAG=-FXOT;I#CPC???=S0''TV?[91EO6;[!MS-6(Q@O[6= C6=/X@&gt;O#8@JN#(3?\7M1].[&amp;9VZ2,+B&amp;?/;&lt;@=_W5@O#8&gt;@C5=_T@=/[6@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C8&gt;O @=/[6@O[6= /6=/Y&lt;)JR$38VE!_A&gt;_'';8_''9&gt;=''5=_^!7]7^8[F1,TVU%YPC8&gt;O @&gt;O#8@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/X@=/[6I&lt;OC0&gt;BC 8O?[F1,?7-;^?&gt;^'');?-[V5?&lt;C@0O&gt;;.;/?(:N#?7E1\ZYLSD0@1LSD@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C8&gt;O R.[&amp;9:''I2\/= XFC?$IBP?&lt;KB0/?W5=_?7M3\?=+Z6/?V5-[?2&lt;/K?;V5-_=_W5&gt; MST5@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/ZH[F1,?5MST?=5]WW?!XVE?:B (O&gt;2,+K?/;&gt;??&lt;SD1O?O3&lt;??2L#H?&lt;C@0O&gt;6-+[?ST5MLR@ H@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0E''Y6_MS$9N?5-[V?&gt;_''9?? 8NC?8:N#/&gt;^'');?*J"(?;Z6-/?@0LC?-[V5?;:&gt;//? 8NC? (JB_BH"H C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0U\WE3YO#8&gt;?7U5]_&gt;5-[W?\WE1?7=?_?&gt;W%9_?(:N#?::.+/&gt;&lt;/K3?,[F1?;Z6-/?*:.+?&amp;)*Z#"@ H@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C5=_WBMST5?7I2\/&gt;9.[''? 8NC?9BP$O&gt; (JC?+Z6-?;&amp;9._?C0&lt;O?.;.;?;&gt;?/??+:&gt;/?!HRD[P&lt;OC0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/Y%I"X&amp;?4%IR_&gt;***+?!XVE?9RT%O&gt;$)JS?+J2,?;Z6-/?@0LC?.[&amp;9?&lt;KB0/?$9NS&gt;N3,;F @@@@C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/X@B (J/"D!H_=$YFS?4]GQ?&gt;;.;/?,;N3?;N3,?&gt;+*:/?*:.+?;N3,?&gt;#(:O=OS4=,APTE@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C8&gt;O @=_W5APLC@:XWE1_?Q4]G?9.[&amp;??Q4]G?8NC ?&gt;G!8_?N3,;?3&lt;?O&gt;$1LSF @@@@@=/[6@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C6=/X@=_W5@O[6= C6=/Y@A@PD)ALSD=0)JR''0L3L3:#D1L]HUEQW?PDA@+A8^G C8&gt;O @=_W5@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C8&gt;O @&gt;O#8@O[6= C6=/X@=/[6@OW5=PC6=/XF@@@@@E)ZV"T@@@C?D1LSQ DA@PC6=/X@=/[6@O[6= C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C5=_T@=/[6@V)*Z Y$YFPMX6M#EVE!XQ-#X6L\]7]7HTQDQLLA@PF&lt;APTEBZ2,+@-$YFPDY6]''@F5-[PC???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C5=_T@&gt;O#8B&amp;U%YQ=#X6L4XFA RU9^W%-ZV%)(W%9^ C0&lt;OIP^G!9I[F1,O6I"X"5#X6LWYFQ$AF5-[PC???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C5=_T@=/[6@O[6= CO3&lt;&lt;EZ6-+CF!(ZAI$YFPWWE1\D*&gt;/+0W6=/XO[&amp;9.B&amp;M#X0M(ZF @&gt;O#8@O[6= C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="removeOverrideIdle">removeOverrideIdle	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'removeOverrideIdle.png'&gt;	&lt;md5sum: #[141 79 186 51 152 88 126 113 200 32 78 1 114 40 168 157]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;LPDA@#4-KR=1KR4/&gt;RT%I?4%IR_=IRT''?R$)J?4)JR/=JR$+?R4-K?4-KR?=KR4/?SD1L?41LSO=LSD3?SD1L?$5MS]1PTEBOTEAPCEUUUPC???&lt;@????@O???05NS$;ZTEAP+6Y&amp;Y%:3,;MA&gt;?/;PO???4C???=@????PO???4C???=@????PO???4C???=@&gt;?/;PO/;&gt;4C7=?]@=?_7P_O3&lt;5:.+*:/Z&amp;)*6%UUUP5NS$8@????@O???9QVU%Z.[F1,PO/;&gt;4C;&gt;?-@=?_7PO_7=4C3&lt;?M@&lt;?O3PN?/;4C/;&gt;=@;&gt;?/PN/+:4C+:&gt;-@9&gt;_''PN_''94C#8&gt;M@8&gt;O#PNO#84C_7==@7=?_+&amp;1,[IQ]WU4@????@O???==[V5-\+:&gt;/PN_''94C#8&gt;M@8&gt;O#PNO#84C_7==@7=?_PM/[64C[6=-@6=/[PM_W54CW5=]@4=OSPMOS44CO3&lt;=@3&lt;?OPL?O34CK2&lt;-@2&lt;/KWI:^''-="X&amp;H@????@O????=!XVEA4MCPPMOS44CO3&lt;=@3&lt;?OPL?O34CK2&lt;-@2&lt;/KPL_G14CG1&lt;]@0&lt;OCPLOC04CC0&lt;M@/;&gt;?PK&gt;?/4B;.;-@.;.;PK^7-4B7-;]@-;^7P[F1,_=''Y6\@????@O????=''Y6]@/;&gt;?PK&gt;?/4B;.;-@.;.;PK.;.4B7-;]@-;^7PKN3,4B3,;M@+:&gt;/PJ&gt;/+4B/+:=@*:.+PJ.+*4B''):]@):^''PJN#(4B#(:M@(:N#PI&gt;_''?=.[&amp;8@????@O????=.[&amp;9@*:.+PJ.+*4B''):]@):^''Z[&amp;9.]"7-&lt;#&gt;1LSE?&lt;OC0??B0,K?0LC@?;&gt;?/?&gt;&gt;/+;?/K2&lt;?+*:.="+*;1)*J"(PH&gt;O#4BO#8=@#8&gt;OPH.K"?=4]GP@????@O????=4]GQ@%9^WPI^W%4BS$9M@$9NS8)&gt;_+/=GQ=/?@0O=?0@@??&lt;@@O??@@C??0@@??&lt;@@O??@@C??0LC?_=AP]W"#8&gt;_PG1&lt;_DA&lt;_G1@_G1&lt;PG!8^O=:^''(@????@O????=:^'')@ 8NCPHNC 4B@ HA@ HB@8(RD$?&lt;:N,;?@0O=?0@@??&lt;@@O??@@C??0@@??&lt;@@O??@@C??0LC?_&lt;5M\''"]WVDPF!(ZDA(ZF!@YFQ$PFQ$YO&gt;A XD@????@O????&gt;A XE@\GA0PGA0\DA,[F1@[F1,ZV-+Z=!''Y7_&gt;Z6-,?6-+Z?=)ZV''?ZF!(?6Y&amp;Y/=%YVW?YFQ$?&amp;E!X-!ZV&amp;-)WE1\PEQTUDATUEQ@UEQTPEAPTO&gt;G!8\@????@O????&gt;G!8]@WE1\PE1\WDAXVE!@VE!XPEQTUDATUEQ@UEQTPEAPTDAPTEA@SD1LPD1LSDAHRD!@RD!HPD!HRDADQDQ@QDQDPDA@PDA@PDA@OC0&lt;PC0&lt;OO&gt;N#(8@????@O????&gt;M#X5AQ4]GPD!HRDADQDQ@QDQDPDA@PDA@PDA@OC0&lt;PC0&lt;OD@&lt;OC1@NC 8PC 8ND@4MCQ@MCP4PCP4MD@0LCA@LC@0PB0,KD@,KB1@JB (PR,+J?&gt;T%IP@????@O???=&gt;R$)I\V5-[PCP4MD@0LCA@LC@0PB0,KD@,KB1@JB (PB (JD@(JB!@IBP$PBP$ID@ HBA@HB@ PA0\GD@\GA1@GA0\PA XFD@XFA!@EAPTWD-KR=&gt;X&amp;I @????@O???9RY&amp;Y&amp;."(*JPA0\GD@\GA1@GA0\PA XFD@XFA!@EAPTPAPTED@TEAQ@DA@PPA@PDD@LC@1@C@0LP@ HBD@HB@!@B@ HP@PDAD@DA@Q@@@@@+(*J")R_''9&lt;@????@O???06]''Y7Z''9&gt;_+82L#E9IRT%AC@0LP@PDAD@DA@Q@@@@@P@@@@D@@@@A@@@@@P@@@@D@@@@A@@@@@P@@@@D@@@@A@@@@@PPPDAE9GQ4^/#8&gt;O6*V%)P61,[D@????@O???0C???&lt;L****#:Z&amp;)-2&amp;)*[&gt;*J"(?:"(*O&gt;)*Z''?*Z&amp;)?:&amp;)*_&gt;***+?****?:***/&gt;***+?*:.+?:.+*?&gt;+*:/?+J2,?*2,+M2)*Z&amp;O*:.+CJ*** C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????')))] once</body><body package="Browser-BrowserUI" selector="undo">undo	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'undo.png'&gt;	&lt;md5sum: #[203 254 87 112 85 151 244 52 174 155 121 153 28 144 192 106]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???1HN 20@@@@@@@@@@@@@@@@@@@@@@@@@@FDJ "V0DX0,0QVRL\DS$3GAC9D,\02JJAPH[!8A@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???&lt;0N!28UBV ]@0@@@@@@@@AQB(@%8A&amp;NMO&lt;,(D#?K:!N?2^,R_&lt;"+D_?HJ=E?1*,O/@R''CEWCHT''A@@@@@D@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O????&lt;O"2?RFIH2F !ZF)DP"2/?IY]A?3V(T?&lt;"*$[?HJ9F?2R2R_&lt;",$_?HKAF?2B0Q_&lt;!,$#?E:X9V *CI@T@@@@A@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O????&lt;O"2??PZQY&lt;QZ]M_&lt;.)T/?LJ-R?16+P?&lt;,,$??H*-D9AR\M\ P%CCVDYL/?1"_N/&lt;!+T[?H;MH&lt;QN MA8DSAPD@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O????&lt;O"2??MJUQ?4B1WO&lt;3,EO?GZ1D?262TOD\)C:DB8D(H@@@@A,@@@@Y@@@@T0)%H_DS#3K?H:1G?1:-P''@M R J@@@@@P@@@@@@@@@@????@O???0C???&lt;@????@O????&lt;O"2??H*IC?2^-R/&lt;^+DS?J[EO?1.)O$4IXQ&lt;\@@@@D @@@@(@@@@H@@@@BP@@@E0K[2W?FIX9?2N/R+$R%CLQ@@@@A@@@@@@@@@@@????@O???0C???&lt;@????@O????&lt;O"2??H*IE?12+QO&lt;_+$_?J[MM9AF^L24CM &lt;Q@@@@AP@@@@D@@@@@@@@@@P@@@@T@@@CRC(L,?2B)Q&lt; Q&amp;CLU@@@@A @@@@@@@@@@????@O???0C???&lt;@????@O????&lt;O"2??I:UH?2F/Q?&lt; +4#?GKIF?1&amp;2PMTM&amp;3D]A%DZ@0@@@@@@@@@@@@@@@@@@@@D@@@BDCW4+?2B#Q-TS&amp;3\X@@@@A0@@@@@@@@@@????@O???0C???&lt;@????@O????&lt;N"B;?DI\3?1F_M/&lt;Q''3[?DY&lt;6?1F_M/&lt;Q''#WTCID/B0@@@@H@@@@@@@@@@@@@@@@@@@ASC70.?1:ZP,\U%3$X@@@@A0@@@@@@@@@@????@O???0C???&lt;@????@O???0\@@@@U@@@@G@@@@A0@@@@\@@@@G@@@@A0@@@@X@@@@C0@@@@P@@@@@@@@@@@@@@@@@@@ABDW81?1:YP+ U%S$X@@@@A0@@@@@@@@@@????@O???0C???&lt;@????@O???0H@@@@G@@@@B @@@@(@@@@J@@@@B @@@@(@@@@I@@@@A @@@@H@@@@@@@@@@@@@@@@@@@A2EHL6?1:YPWDR #LU@@@@A @@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B@E8X:5Q2UO2\HMQXP@@@@A@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BSFX &gt;YQ^ANQP@@@@I@@@@@P@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@[!4E2FX\&gt;E $3E04@@@@D@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B0X!C4XEV02BP@@@@X@@@@A@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\U\SLC@@@@A@@@@@D@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@P@@@@@@@@@@@@@@@@@@@@@@@@@@????@O???0C???&lt;@????@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????')))] once</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>registered properties</category><body package="Browser-BrowserUI" selector="miscProperties">miscProperties	&lt;property: 200&gt;	^CodeComponentInspectPropertiesTool new codeModel: codeModel</body><body package="Browser-BrowserUI" selector="postLoadActionProperty">postLoadActionProperty	&lt;property: 80&gt;	^CodeComponentBlockTool postLoadBlock codeModel: codeModel</body><body package="Browser-BrowserUI" selector="postUnloadActionProperty">postUnloadActionProperty	&lt;property: 100&gt;	^CodeComponentBlockTool postUnload codeModel: codeModel</body><body package="Browser-BrowserUI" selector="preLoadActionProperty">preLoadActionProperty	&lt;property: 70&gt;	^CodeComponentBlockTool preLoad codeModel: codeModel</body><body package="Browser-BrowserUI" selector="preReadActionProperty">preReadActionProperty	&lt;property: 60&gt;	^CodeComponentBlockTool preRead codeModel: codeModel</body><body package="Browser-BrowserUI" selector="prerequisiteVersionSelectionActionProperty">prerequisiteVersionSelectionActionProperty	&lt;property: 50&gt;	^CodeComponentBlockTool prerequisiteVersionSelection codeModel: codeModel</body><body package="Browser-BrowserUI" selector="preSaveActionProperty">preSaveActionProperty	&lt;property: 110&gt;	^CodeComponentBlockTool preSave codeModel: codeModel</body><body package="Browser-BrowserUI" selector="preUnloadActionProperty">preUnloadActionProperty	&lt;property: 90&gt;	^CodeComponentBlockTool preUnload codeModel: codeModel</body><body package="Browser-BrowserUI" selector="summaryProperty">summaryProperty		&lt;property: 10&gt;	^CodeComponentSummaryTool codeModel: codeModel</body><body package="Browser-BrowserUI" selector="warningSuppressionActionProperty">warningSuppressionActionProperty	&lt;property: 40&gt;	^CodeComponentBlockTool warningSuppression codeModel: codeModel</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 640 512 840 712 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.25 0 1 ) 					#name: #propertiesList 					#model: #propertiesList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelection 						#requestValueChangeSelector: 						#validatePropertySelectionChange: ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.25 0 0 2 0.25 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'propertiesList' 					#belowWidgets: 'propertyPort' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.25 0 0 0 1 0 1 ) 					#name: #propertyPort 					#flags: 0 					#component: #propertyPort ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool class</class-id> <category>method tags</category><body package="Browser-BrowserUI" selector="propertyTags">propertyTags	&lt;pragmas: #instance&gt;	^#(#property:)</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="classMenu">classMenu	"MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #A_dd #defaultString: 'A&amp;dd' #catalogID: #browser) 				#nameKey: #'Check Class' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_move #defaultString: 'Re&amp;move' #catalogID: #browser) 				#nameKey: #'Uncheck Class' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_AddAll #defaultString: '&amp;Add All...' #catalogID: #browser) 				#nameKey: #'Check All Classes' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveAll #defaultString: '&amp;Remove All...' #catalogID: #browser) 				#nameKey: #'Uncheck All Classes' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #AddSuperclasses #defaultString: 'Add Superclasses' #catalogID: #browser) 				#nameKey: #'Check All Superclasses' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveSuperclasses #defaultString: 'Remove Superclasses' #catalogID: #browser) 				#nameKey: #'Uncheck All Superclasses' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #AddSubclasses #defaultString: 'Add Subclasses' #catalogID: #browser) 				#nameKey: #'Check All Subclasses' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveSubclasses #defaultString: 'Remove Subclasses' #catalogID: #browser) 				#nameKey: #'Uncheck All Subclasses' 				#value: 				#action: ) ) #(2 2 2 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="protocolMenu">protocolMenu	"MenuEditor new openOnClass: self andSelector: #protocolMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #A_dd #defaultString: 'A&amp;dd' #catalogID: #browser) 				#nameKey: #'Check Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_move #defaultString: 'Re&amp;move' #catalogID: #browser) 				#nameKey: #'Uncheck Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_AddAll #defaultString: '&amp;Add All...' #catalogID: #browser) 				#nameKey: #'Check All Protocols' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveAll #defaultString: '&amp;Remove All...' #catalogID: #browser) 				#nameKey: #'Uncheck All Protocols' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_FindMethodDot #defaultString: '&amp;Find Method...' #catalogID: #browser) 				#nameKey: #'Find Method' 				#value: 				#action: ) ) #(2 2 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="selectorMenu">selectorMenu	"MenuEditor new openOnClass: self andSelector: #selectorMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #A_dd #defaultString: 'A&amp;dd' #catalogID: #browser) 				#nameKey: #'Check Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_move #defaultString: 'Re&amp;move' #catalogID: #browser) 				#nameKey: #'Uncheck Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_AddAll #defaultString: '&amp;Add All...' #catalogID: #browser) 				#nameKey: #'Check All Methods' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveAll #defaultString: '&amp;Remove All...' #catalogID: #browser) 				#nameKey: #'Uncheck All Methods' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #AddAllImplementors #defaultString: 'Add All Implementors' #catalogID: #browser) 				#nameKey: #'Check All Implementors' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveAllImplementors #defaultString: 'Remove All Implementors' #catalogID: #browser) 				#nameKey: #'Uncheck All Implementors' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #AddAllSenders #defaultString: 'Add All Senders' #catalogID: #browser) 				#nameKey: #'Check All Senders' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveAllSenders #defaultString: 'Remove All Senders' #catalogID: #browser) 				#nameKey: #'Uncheck All Senders' 				#value: 				#action: ) ) #(2 2 2 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="classWindowSpec">classWindowSpec	"UIPainter new openOnClass: self andSelector: #classWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1289 877 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #categoryList 					#flags: 0 					#majorKey: #{Refactory.Browser.CategoryNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #CategoryNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #classList 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #ClassNavigatorPart ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'categoryList' 					#belowWidgets: 'classList' ) ) ) )</body><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1289 877 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 -2 0.5 ) 					#name: #categoryList 					#flags: 0 					#majorKey: #{Refactory.Browser.CategoryNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #CategoryNavigatorPart ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 -2 0.5 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'categoryList' 					#belowWidgets: 'classList' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.5 0 1 2 0.5 ) 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'categoryList classList meta' 					#belowWidgets: 'protocolList selectorList meta' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 2 0.5 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'protocolList' 					#belowWidgets: 'selectorList' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 -26 0.5 0 1 -2 0.5 ) 					#name: #meta 					#flags: 0 					#majorKey: #{Refactory.Browser.MetaNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #MetaNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 -27 0.5 ) 					#name: #classList 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #ClassNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.5 -2 0.5 0 1 ) 					#name: #protocolList 					#flags: 0 					#majorKey: #{Refactory.Browser.SelectorProtocolNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #SelectorProtocolNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 2 0.5 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{Refactory.Browser.SelectorNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #SelectorNavigatorPart ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window: #(#{UI.WindowSpec}			#label: #(#{UserMessage}				#key: #MultiDifferator				#catalogID: #browser				#defaultString: 'Multi Differator')			#min: #(#{Core.Point} 20 20)			#bounds: #(#{Graphics.Rectangle} 512 384 965 696))		#component: #(#{UI.SpecCollection}			#collection: #(#(#{UI.ResizingSplitterSpec}				#layout: #(#{Graphics.LayoutFrame} -1 0.5 0 0 1 0.5 0 1)				#name: #ResizingSplitter1				#horizontal: false				#minAboveSize: 30				#minBelowSize: 30				#aboveWidgets: 'leftPane'				#belowWidgets: 'rightPane') #(#{UI.CompositeSpecCollection}				#collection: #(#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1.0 0 1.0)					#name: #TextEditor1					#model: #text1					#tabRequiresControl: true) #(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 23 0)					#name: #ComboBox1					#model: #definition1					#type: #object					#comboList: #list1					#readSelector: #definitionFromString:					#printSelector: #definitionToString:))				#compositeSpec: #(#{UI.CompositeSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -1 0.5 0 1)					#name: #leftPane)) #(#{UI.CompositeSpecCollection}				#collection: #(#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1 0 1)					#name: #TextEditor2					#model: #text2					#tabRequiresControl: true) #(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 23 0)					#name: #ComboBox2					#model: #definition2					#type: #object					#comboList: #list2					#readSelector: #definitionFromString:					#printSelector: #definitionToString:))				#compositeSpec: #(#{UI.CompositeSpec}					#layout: #(#{Graphics.LayoutFrame} 1 0.5 0 0 0 1 0 1)					#name: #rightPane)))))</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 329 272 695 497 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #textEditor 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="menuPrefixForMenuBar">menuPrefixForMenuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrefixForMenuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Undo 					#defaultString: '&amp;Undo' 					#catalogID: #browser ) 				#nameKey: #'Undo Typing' 				#value: 				#action: 				#shortcutKeyCharacter: $Z 				#shortcutModifiers: 2 ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="renameInstanceVariableMenuItem">renameInstanceVariableMenuItem	&lt;itemInMenu: #(#mainMenu #refactorMenu) position: 1&gt;	^(MenuItem labeled: #Re_nameAsDots &lt;&lt; #IDE &gt;&gt; 'Re&amp;name As...')		value: #renameInstanceVariable;		enablement: #hasInstanceVariableSelected;		shortcutKeyCharacter: $N;		shortcutModifiers: 3;		yourself</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $s 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseRe_ferencesDots 					#defaultString: 'Browse Re&amp;ferences...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable References' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseRea_dersDots 					#defaultString: 'Browse Rea&amp;ders...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Readers' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse_WritersDots 					#defaultString: '&amp;Browse Writers...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Writers' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_AddVariableDots 					#defaultString: '&amp;Add Variable...' 					#catalogID: #browser ) 				#nameKey: #'Add Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveVariableDots 					#defaultString: '&amp;Remove Variable...' 					#catalogID: #browser ) 				#nameKey: #'Remove Selected Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#nameKey: #refactorMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_Up 								#defaultString: 'Push &amp;Up' 								#catalogID: #browser ) 							#nameKey: #'Push Up Selected Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_Down 								#defaultString: 'Push &amp;Down' 								#catalogID: #browser ) 							#nameKey: #'Push Down Selected Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CreateAccessors 								#defaultString: 'Create Accessors' 								#catalogID: #browser ) 							#nameKey: #'Create Selected Instance Variable Accessors' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #A_bstract 								#defaultString: 'A&amp;bstract' 								#catalogID: #browser ) 							#nameKey: #'Abstract Selected Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Protect 								#defaultString: '&amp;Protect' 								#catalogID: #browser ) 							#nameKey: #'Protect Selected Instance Variable' 							#value: 							#action: ) ) #(2 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Explain 					#defaultString: 'Explain' 					#catalogID: #browser ) 				#nameKey: #'Explain Code' 				#value: 				#action: 				#shortcutKeyCharacter: $E 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editPaste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $F 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(1 3 3 4 1 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1347 741 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.583333 0 0 0 1 0 1 ) 					#name: #inspector 					#flags: 0 ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.583333 0 1 ) 					#name: #textEditor 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.583333 0 0 2 0.583333 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'textEditor' 					#belowWidgets: 'inspector' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="findWindowSpec">findWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #findWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 719 449 1009 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 33 0 25 0 1 1 ) 					#name: #findLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #FindC 						#defaultString: 'Find:' 						#catalogID: #browser ) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 35 0 0 0 0 1 25 0 ) 					#name: #find 					#model: #findHolder 					#tabable: true 					#isReadOnly: false 					#comboList: #findList ) ) ) )</body><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: #(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #lastSavedSize #positionType #lastSavedPosition #openType #advanced #sizeAutoSave true #positionAutoSave true) 			#label: '' 			#min: #(#{Core.Point} 472 312) 			#max: #(#{Core.Point} 0 0) 			#bounds: #(#{Graphics.Rectangle} 20 40 820 640) 			#flags: 4 			#menu: #menuBar 			#toolBar: #toolbarMenuHolder) 		#component: #(#{UI.SpecCollection} 			#collection: #(#(#{UI.SubCanvasSpec} 				#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.333333) 				#name: #navigator 				#flags: 0 				#majorKey: #NavigatorTool 				#minorKey: #windowSpec 				#clientKey: #navigator) #(#{UI.SubCanvasSpec} 				#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.333333 0 1 0 1) 				#name: #codeTool 				#flags: 0 				#majorKey: #CodeModelSubcanvas 				#minorKey: #windowSpec 				#clientKey: #codeTool) #(#{UI.ResizingSplitterSpec} 				#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.333333 0 1 2 0.333333) 				#name: #splitter 				#horizontal: true 				#minAboveSize: 50 				#minBelowSize: 30 				#aboveWidgets: 'navigator' 				#belowWidgets: 'codeTool'))))</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 531 301 1149 749 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 0 1 ) 					#name: #viewPort 					#flags: 0 					#component: #viewPort ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 30 0 0 0 -15 0.5 30 0 ) 					#name: #multipleOverrideNameCombo 					#model: #selectedOverrideNamePlug 					#tabable: false 					#alignment: #center 					#type: #text 					#comboList: #overrideListNames ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 30 0 0 0 -15 0.5 30 0 ) 					#name: #singleOverrideNameField 					#flags: 0 					#model: #selectedOverrideNamePlug 					#tabable: false 					#alignment: #center 					#isReadOnly: true 					#type: #text ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0.5 0 0 -30 1 30 0 ) 					#name: #currentPackageNameField 					#flags: 0 					#model: #currentPackageNameHolder 					#tabable: false 					#alignment: #center 					#isReadOnly: true 					#type: #text ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 30 30 ) 					#name: #removeOriginalButton 					#flags: 0 					#component: #removeOriginalButton ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} -15 0.5 0 0 15 0.5 30 0 ) 					#name: #adoptOverrideButton 					#flags: 0 					#component: #adoptOverrideButton ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} -30 1 0 0 0 1 30 0 ) 					#name: #removeOverrideButton 					#flags: 0 					#component: #removeOverrideButton ) ) ) )</body></methods><methods><class-id>Refactory.Browser.MenuViewer class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 512 370 994 729 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -75 0.5 10 0 75 0.5 40 0 ) 					#name: #menu 					#label: #(#{Kernel.UserMessage} #key: #Menu #defaultString: 'Menu' #catalogID: #browser) 					#menu: #menuResource ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 65 0 -10 1 90 0 ) 					#name: #selection 					#flags: 0 					#model: #selection 					#alignment: #center 					#type: #object ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 10 83 40 ) 					#name: #edit 					#model: #editSpec 					#label: #(#{Kernel.UserMessage} #key: #Edit #defaultString: 'Edit' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.AbstractBrowserNavigator class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="classWindowSpec">classWindowSpec	"UIPainter new openOnClass: self andSelector: #classWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{NameSpaceItemTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #NameSpaceItemTabNavigatorPart ) ) ) )</body><body package="Browser-BrowserUI" selector="codeComponentWindowSpec">codeComponentWindowSpec	"UIPainter new openOnClass: self andSelector: #codeComponentWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.333333 0 0 2 0.333333 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'classList' 					#belowWidgets: 'selectorList' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.333333 0 1 ) 					#name: #classList 					#flags: 0 					#majorKey: #{ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #ClassNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.333333 0 0 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{NameSpaceItemTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #NameSpaceItemTabNavigatorPart ) ) ) )</body><body package="Browser-BrowserUI" selector="methodWindowSpec">methodWindowSpec	"UIPainter new openOnClass: self andSelector: #methodWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #methodPart 					#flags: 0 					#majorKey: #{ClassAndMethodTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #ClassAndMethodTabNavigatorPart ) ) ) )</body><body package="Browser-BrowserUI" selector="protocolWindowSpec">protocolWindowSpec	"UIPainter new openOnClass: self andSelector: #protocolWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #methodPart 					#flags: 0 					#majorKey: #{MethodNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #MethodNavigatorPart ) ) ) )</body><body package="Browser-BrowserUI" selector="systemWindowSpec">systemWindowSpec	"UIPainter new openOnClass: self andSelector: #systemWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'classList' 					#belowWidgets: 'selectorList' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #classList 					#flags: 0 					#majorKey: #{CodeComponentTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #CodeComponentTabNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{NameSpaceItemTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #NameSpaceItemTabNavigatorPart ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="choosePackageScopeItem">choosePackageScopeItem	&lt;itemInMenu: #(#pundleMenu) position: 40.025&gt;	| item |	item := MenuItem		labeled: #DefaultNamespaceDot &gt;&gt; 'Default Namespace...' &lt;&lt; #browser.	item enabled: [self isPackageSelected].	item value: [self choosePackageScope].	^item</body><body package="Browser-BrowserUI" selector="fileOutDifferencesItem">fileOutDifferencesItem	&lt;itemInMenu: #(#pundleMenu #'File Out') position: 10.10&gt;	| item |	item := MenuItem labeled: #DifferencesDots &gt;&gt; 'Differences...' &lt;&lt; #IDE.	item enabled: [self isPundleSelected].	item visible: [self isStoreLoaded].	item value: #storeFileoutPundleDifferences.	^item</body><body package="Browser-BrowserUI" selector="packageListShowBundleContentsInLoadOrderMenuItem">packageListShowBundleContentsInLoadOrderMenuItem	&lt;itemInMenu: #(#pundleMenu #sortSubmenu) position: 10.6&gt;	^(MenuItem		labeled: #Sort_BundleContentsByLoadOrder &gt;&gt; 'Bundle Contents in Load Order'				&lt;&lt; #IDE)		indication: [state showBundleContentsInLoadOrder];		value: 				[:value |				state					showBundleContentsInLoadOrder: state showBundleContentsInLoadOrder not.				self refreshLists];		yourself</body><body package="Browser-BrowserUI" selector="packageListSortBundlesToTopMenuItem">packageListSortBundlesToTopMenuItem	&lt;itemInMenu: #(#pundleMenu #sortSubmenu) position: 10.4&gt;	^(MenuItem labeled: #Sort_BundlesToTop &gt;&gt; 'Bundles to Top' &lt;&lt; #IDE)		indication: [state sortBundlesToTop];		value: 				[state sortBundlesToTop: state sortBundlesToTop not.				self refreshLists];		yourself</body><body package="Browser-BrowserUI" selector="packageListSortSubmenuItem">packageListSortSubmenuItem	&lt;itemInMenu: #(#pundleMenu) position: 60.9&gt;	^(MenuItem labeled: #Sort &gt;&gt; 'Sort' &lt;&lt; #IDE)		nameKey: #sortSubmenu;		submenu: Menu new;		yourself</body><body package="Browser-BrowserUI" selector="spawnCincomCodeComponents">spawnCincomCodeComponents	&lt;itemInMenu: #(#pundleMenu #spawnMenu) position: 6.5&gt;	| cincomComponentsFunction label |	cincomComponentsFunction :=			[| result |			result := IdentitySet new.			self environment bundlesAndPackagesDo: 					[:each |					each copyrightNotice						ifNotNil: 							[:copyright |							('Copyright © * Cincom Systems, Inc.  All Rights Reserved.'								match: copyright) ifTrue: [result add: each]]].			result].	label := #SpawnCincomCopyrightedCode &gt;&gt; 'Cincom Copyrighted Code' &lt;&lt; #IDE.	^(MenuItem labeled: label)		value: 				[(self environment forCodeComponents: cincomComponentsFunction value)					label: label;					openEditor];		enabled: [cincomComponentsFunction value notEmpty];		yourself</body><body package="Browser-BrowserUI" selector="spawnDependentCodeComponents">spawnDependentCodeComponents	&lt;itemInMenu: #(#pundleMenu #spawnMenu) position: 3.2&gt;	| leachesFunction |	leachesFunction :=			[Store.Registry allPundles select: 					[:package |					package prerequisiteDescriptions						anySatisfy: [:prereq | prereq loadedCodeComponent = self pundle]]].	^(MenuItem labeled: #SpawnDependents &gt;&gt; 'Dependents' &lt;&lt; #IDE)		enabled: [leachesFunction value isEmpty not];		value: 				[(self environment forCodeComponents: leachesFunction value) openEditor]</body><body package="Browser-BrowserUI" selector="spawnNonCincomCodeComponents">spawnNonCincomCodeComponents	&lt;itemInMenu: #(#pundleMenu #spawnMenu) position: 6.6&gt;	| nonCincomComponentsFunction label |	nonCincomComponentsFunction :=			[| result |			result := IdentitySet new.			self environment bundlesAndPackagesDo: 					[:each |					(each copyrightNotice						ifNil: [true]						ifNotNil: 							[:copyright |							('Copyright © * Cincom Systems, Inc.  All Rights Reserved.'								match: copyright) not])							ifTrue: [result add: each]].			result].	label := #SpawnNonCincomCode &gt;&gt; 'Non Cincom Code' &lt;&lt; #IDE.	^(MenuItem labeled: label)		value: 				[(self environment forCodeComponents: nonCincomComponentsFunction value)					label: label;					openEditor];		enabled: [nonCincomComponentsFunction value notEmpty];		yourself</body><body package="Browser-BrowserUI" selector="spawnPackagesSubmenu">spawnPackagesSubmenu	&lt;itemInMenu: #(#pundleMenu) position: 25.45&gt;	^(MenuItem labeled: #Spawn &gt;&gt; 'Spawn' &lt;&lt; #IDE)		nameKey: #spawnMenu;		submenu: self packageListSpawnSubmenu;		yourself</body><body package="Browser-BrowserUI" selector="spawnSelectedCodeComponents">spawnSelectedCodeComponents	&lt;itemInMenu: #(#pundleMenu) position: 25.4&gt;	^(MenuItem labeled: #SpawnSelected &gt;&gt; 'Spawn Selected' &lt;&lt; #IDE)		enabled: [self codeComponents notEmpty];		value: [(self environment forCodeComponents: self codeComponents) openEditor]</body><body package="Browser-BrowserUI" selector="spawnSelectedCodeComponentsWithPrerequisites">spawnSelectedCodeComponentsWithPrerequisites	&lt;itemInMenu: #(#pundleMenu #spawnMenu) position: 3.40&gt;	| all |	^(MenuItem		labeled: #SpawnSelectionsWithPrerequisites				&gt;&gt; 'Selections with Prerequisites' &lt;&lt; #IDE)		enabled: [self codeComponents notEmpty];		value: 				[all := IdentitySet new.				self codeComponents do: 						[:each |						all							addAll: each allLoadedPrerequisiteComponents;							add: each].				(self environment forCodeComponents: all) openEditor]</body><body package="Browser-BrowserUI" selector="spawnUnpublishedPackages">spawnUnpublishedPackages	&lt;itemInMenu: #(#pundleMenu #spawnMenu) position: 2.5&gt;	| label dirtyFunction |	label := #SpawnUnpublishedPackages &gt;&gt; 'Unpublished Packages' &lt;&lt; #IDE.	dirtyFunction :=			[| dirty |			dirty := IdentitySet new.			self environment packagesDo: 					[:each |					(each isInCurrentDatabase and: [each hasBeenModified])						ifTrue: [dirty add: each]].			dirty].	^(MenuItem labeled: label)		value: 				[(self environment forCodeComponents: dirtyFunction value)					label: label;					openEditor];		enabled: [dirtyFunction value notEmpty];		yourself</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-class instance variables</category><body package="Browser-BrowserUI" selector="renameClassInstanceVariableMenuItem">renameClassInstanceVariableMenuItem	&lt;itemInMenu: #(#classMenu #'Class Instance Variables') position: 20.01&gt;	^(MenuItem labeled: #Re_nameDots &lt;&lt; #browser &gt;&gt; 'Re&amp;name...')		value: #renameClassInstanceVariable;		enablement: #isClassSelected</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-instance variables</category><body package="Browser-BrowserUI" selector="renameInstanceVariableMenuItem">renameInstanceVariableMenuItem	&lt;itemInMenu: #(#classMenu #'Instance Variables') position: 20.01&gt;	&lt;itemInMenu: #(#instanceVariableMenu) position: 20.01&gt;	^(MenuItem labeled: #Re_nameDots &lt;&lt; #IDE &gt;&gt; 'Re&amp;name...')		value: #renameInstanceVariable;		enablement: #isClassSelected</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>removal-methods</category><body package="Browser-BrowserUI" selector="removeMethodsMenuItem">removeMethodsMenuItem	&lt;itemInMenu: #(#selectorMenu) position: 39.2&gt;	^(MenuItem labeled: #Remove &lt;&lt; #browser &gt;&gt; 'Remove')		value: #removeMethods;		enablement: #isSelectorSelected;		hidden: [state isData]</body><body package="Browser-BrowserUI" selector="renameMethodMenuItem">renameMethodMenuItem	&lt;itemInMenu: #(#selectorMenu) position: 39.1&gt;	^(MenuItem labeled: #Re_nameDots &lt;&lt; #browser &gt;&gt; 'Re&amp;name...')		value: #renameMethod;		enablement: #isSelectorSelected;		hidden: [state isData]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>removal-shares</category><body package="Browser-BrowserUI" selector="removeSharedVariablesMenuItem">removeSharedVariablesMenuItem	&lt;itemInMenu: #(#selectorMenu) position: 39.2&gt;	^(MenuItem labeled: #Remove &lt;&lt; #browser &gt;&gt; 'Remove')		value: #removeSharedVariables;		enablement: #isSharedVariableSelected;		visible: [self isData]</body><body package="Browser-BrowserUI" selector="renameSharedVariableMenuItem">renameSharedVariableMenuItem	&lt;itemInMenu: #(#selectorMenu) position: 39.1&gt;	^(MenuItem labeled: #Re_nameDots &lt;&lt; #browser &gt;&gt; 'Re&amp;name...')		value: #renameSharedVariable;		enablement: #isSharedVariableSelected;		visible: [self isData]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>removal-scopes</category><body package="Browser-BrowserUI" selector="removeObjectsMenuItem">removeObjectsMenuItem		&lt;itemInMenu: #(#classMenu) position: 30.025&gt;	^(MenuItem labeled: #Remove &lt;&lt; #browser &gt;&gt; 'Remove')		value: #removeObjects;		enablement: #isBindingSelected</body><body package="Browser-BrowserUI" selector="renameObjectMenuItem">renameObjectMenuItem		&lt;itemInMenu: #(#classMenu) position: 30.02&gt;	^(MenuItem labeled: #Re_nameDots &lt;&lt; #browser &gt;&gt; 'Re&amp;name...')		value: #renameObject;		enablement: #isBindingSelected</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="classMenu">classMenu	"Tools.MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New_ClassDots 					#defaultString: 'New &amp;Class...' 					#catalogID: #browser ) 				#nameKey: #'New Class' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #addClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New 					#defaultString: 'New' 					#catalogID: #browser ) 				#nameKey: #New 				#value: #rbItem 				#enablementSelector: #canAddObjectsToEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ClassExtensionDots 								#defaultString: 'Class Extension...' 								#catalogID: #browser ) 							#nameKey: #'Store New Class Extension' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #NamespaceDots 								#defaultString: 'Namespace...' 								#catalogID: #browser ) 							#nameKey: #'New Name Space' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #SharedVariableDots 								#defaultString: 'Shared Variable...' 								#catalogID: #browser ) 							#nameKey: #'New Shared Variable' 							#value: 							#action: ) ) #(1 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_ferences 					#defaultString: 'Re&amp;ferences' 					#catalogID: #browser ) 				#nameKey: #'Global Class References' 				#value: 				#action: 				#enablementSelector: #isGlobalEnvironment 				#shortcutKeyCharacter: #F8 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #referenceClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_ferences 					#defaultString: 'Re&amp;ferences' 					#catalogID: #browser ) 				#nameKey: #References 				#value: #rbItem 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Global 								#defaultString: '&amp;Global' 								#catalogID: #browser ) 							#nameKey: #'Global Class References' 							#value: 							#action: 							#shortcutKeyCharacter: #F8 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #referenceClass ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Local 								#defaultString: '&amp;Local' 								#catalogID: #browser ) 							#nameKey: #'Local Class References' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Initialize 					#defaultString: 'Initialize' 					#catalogID: #browser ) 				#nameKey: #'Reinitialize Bindings' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #E_xtendInPackageDots 					#defaultString: 'E&amp;xtend in Package...' 					#catalogID: #browser ) 				#nameKey: #'Store Extend Class in Package' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Move 					#defaultString: 'Move' 					#catalogID: #browser ) 				#nameKey: #Move 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toNamespaceDots 								#defaultString: 'to Namespace...' 								#catalogID: #browser ) 							#nameKey: #'Move Object to Name Space' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #DefinitionToPackage 								#defaultString: 'Definition to Package' 								#catalogID: #browser ) 							#nameKey: #'Move Object Definition to Package' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #SelectedToPackageDots 								#defaultString: 'Selected to Package...' 								#catalogID: #browser ) 							#nameKey: #'Move Object to Package' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AllToPackageDots 								#defaultString: 'All to Package...' 								#catalogID: #browser ) 							#nameKey: #'Move Complete Object to Package' 							#value: 							#action: ) ) #(1 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Override 					#defaultString: 'Override' 					#catalogID: #browser ) 				#nameKey: #Override 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #inPackageDots 								#defaultString: 'in Package...' 								#catalogID: #browser ) 							#nameKey: #'Store Override Object' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RevertToOriginalDots 								#defaultString: 'Revert to Original...' 								#catalogID: #IDE ) 							#nameKey: #'Restore Override Object' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #DiscardOriginalDots 								#defaultString: 'Discard Original...' 								#catalogID: #IDE ) 							#nameKey: #'Remove Override Object' 							#value: 							#action: ) ) #(1 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Create_SubclassDots 								#defaultString: 'Create &amp;Subclass...' 								#catalogID: #browser ) 							#nameKey: #'Create Subclass' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ConvertToSiblingDots 								#defaultString: '&amp;Convert to Sibling...' 								#catalogID: #browser ) 							#nameKey: #'Convert to Sibling' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Store 					#defaultString: 'Store' 					#catalogID: #browser ) 				#nameKey: #Store 				#value: #rbItem 				#enablementSelector: #isStoreLoaded 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseVersions 								#defaultString: 'Browse Versions' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Class Versions' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseRemovedMethods 								#defaultString: 'Browse Removed Methods' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Removed Methods' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithDots 								#defaultString: 'Compare With...' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Class Version' 							#value: 							#action: ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Query 					#defaultString: '&amp;Query' 					#catalogID: #browser ) 				#nameKey: #Other 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_InspectAllInstances 								#defaultString: '&amp;Inspect All Instances' 								#catalogID: #browser ) 							#nameKey: #'Inspect All Instances' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseMethodsWithSourceMatchingDots 								#defaultString: 'Browse Methods with Source Matching...' 								#catalogID: #browser ) 							#nameKey: #'Browse Class Methods Matching String' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InstanceVariables 					#defaultString: '&amp;Instance Variables' 					#catalogID: #browser ) 				#nameKey: #'Instance Variables' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ReferencesDots 								#defaultString: '&amp;References...' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable References' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_References 								#defaultString: '&amp;References' 								#catalogID: #browser ) 							#nameKey: #References 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Instance Variable References' 										#value: 										#action: 										#shortcutKeyCharacter: #F5 										#shortcutModifiers: 2 ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Instance Variable References' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ReadersDots 								#defaultString: '&amp;Readers...' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable Readers' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Readers 								#defaultString: '&amp;Readers' 								#catalogID: #browser ) 							#nameKey: #Readers 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Instance Variable Readers' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Instance Variable Readers' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_WritersDots 								#defaultString: '&amp;Writers...' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable Writers' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Writers 								#defaultString: '&amp;Writers' 								#catalogID: #browser ) 							#nameKey: #Writers 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Instance Variable Writers' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Instance Variable Writers' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_AddDots 								#defaultString: '&amp;Add...' 								#catalogID: #browser ) 							#nameKey: #'Add Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RemoveDots 								#defaultString: '&amp;Remove...' 								#catalogID: #browser ) 							#nameKey: #'Remove Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_UpDots 								#defaultString: 'Push &amp;Up...' 								#catalogID: #browser ) 							#nameKey: #'Push Up Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_DownDots 								#defaultString: 'Push &amp;Down...' 								#catalogID: #browser ) 							#nameKey: #'Push Down Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_CreateAccessorsDots 								#defaultString: '&amp;Create Accessors...' 								#catalogID: #browser ) 							#nameKey: #'Create Instance Variable Accessors' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #A_bstractDots 								#defaultString: 'A&amp;bstract...' 								#catalogID: #browser ) 							#nameKey: #'Abstract Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ProtectDots 								#defaultString: '&amp;Protect...' 								#catalogID: #browser ) 							#nameKey: #'Protect Instance Variable' 							#value: 							#action: ) ) #(6 2 2 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ClassInstanceVariables 					#defaultString: 'Class Instance Variables' 					#catalogID: #browser ) 				#nameKey: #'Class Instance Variables' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ReferencesDots 								#defaultString: '&amp;References...' 								#catalogID: #browser ) 							#nameKey: #'Global Class Instance Variable References' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_References 								#defaultString: '&amp;References' 								#catalogID: #browser ) 							#nameKey: #References 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Class Instance Variable References' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Class Instance Variable References' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ReadersDots 								#defaultString: '&amp;Readers...' 								#catalogID: #browser ) 							#nameKey: #'Global Class Instance Variable Readers' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Readers 								#defaultString: '&amp;Readers' 								#catalogID: #browser ) 							#nameKey: #Readers 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Class Instance Variable Readers' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Class Instance Variable Readers' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_WritersDots 								#defaultString: '&amp;Writers...' 								#catalogID: #browser ) 							#nameKey: #'Global Class Instance Variable Writers' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Writers 								#defaultString: '&amp;Writers' 								#catalogID: #browser ) 							#nameKey: #Writers 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Class Instance Variable Writers' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Class Instance Variable Writers' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_AddDots 								#defaultString: '&amp;Add...' 								#catalogID: #browser ) 							#nameKey: #'Add Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RemoveDots 								#defaultString: '&amp;Remove...' 								#catalogID: #browser ) 							#nameKey: #'Remove Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_UpDots 								#defaultString: 'Push &amp;Up...' 								#catalogID: #browser ) 							#nameKey: #'Push Up Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_DownDots 								#defaultString: 'Push &amp;Down...' 								#catalogID: #browser ) 							#nameKey: #'Push Down Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_CreateAccessorsDots 								#defaultString: '&amp;Create Accessors...' 								#catalogID: #browser ) 							#nameKey: #'Create Class Instance Variable Accessors' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #A_bstractDots 								#defaultString: 'A&amp;bstract...' 								#catalogID: #browser ) 							#nameKey: #'Abstract Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ProtectDots 								#defaultString: '&amp;Protect...' 								#catalogID: #browser ) 							#nameKey: #'Protect Class Instance Variable' 							#value: 							#action: ) ) #(6 2 2 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn 					#defaultString: 'Spawn' 					#catalogID: #browser ) 				#nameKey: #'Spawn Class' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn_Hierarchy 					#defaultString: 'Spawn &amp;Hierarchy' 					#catalogID: #browser ) 				#nameKey: #'Spawn Class Hierarchy' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FileOutAsDots 					#defaultString: 'File Out As...' 					#catalogID: #browser ) 				#nameKey: #'File Out Global' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Hardcopy 					#defaultString: 'Hardcopy' 					#catalogID: #browser ) 				#nameKey: #'Hardcopy Class' 				#value: 				#action: ) ) #(2 2 2 3 2 2 4 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="instanceVariableMenu">instanceVariableMenu	"Tools.MenuEditor new openOnClass: self andSelector: #instanceVariableMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_References 					#defaultString: '&amp;References' 					#catalogID: #browser ) 				#nameKey: #'Global Instance Variable References' 				#value: 				#action: 				#enablementSelector: #isGlobalEnvironment 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_References 					#defaultString: '&amp;References' 					#catalogID: #browser ) 				#nameKey: #References 				#value: #rbItem 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Global 								#defaultString: '&amp;Global' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable References' 							#value: 							#action: 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Local 								#defaultString: '&amp;Local' 								#catalogID: #browser ) 							#nameKey: #'Local Instance Variable References' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Readers 					#defaultString: '&amp;Readers' 					#catalogID: #browser ) 				#nameKey: #'Global Instance Variable Readers' 				#value: 				#action: 				#enablementSelector: #isGlobalEnvironment ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Readers 					#defaultString: '&amp;Readers' 					#catalogID: #browser ) 				#nameKey: #Readers 				#value: #rbItem 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Global 								#defaultString: '&amp;Global' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable Readers' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Local 								#defaultString: '&amp;Local' 								#catalogID: #browser ) 							#nameKey: #'Local Instance Variable Readers' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Writers 					#defaultString: '&amp;Writers' 					#catalogID: #browser ) 				#nameKey: #'Global Instance Variable Writers' 				#value: 				#action: 				#enablementSelector: #isGlobalEnvironment ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Writers 					#defaultString: '&amp;Writers' 					#catalogID: #browser ) 				#nameKey: #Writers 				#value: #rbItem 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Global 								#defaultString: '&amp;Global' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable Writers' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Local 								#defaultString: '&amp;Local' 								#catalogID: #browser ) 							#nameKey: #'Local Instance Variable Writers' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_AddDots 					#defaultString: '&amp;Add...' 					#catalogID: #browser ) 				#nameKey: #'Add Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveDots 					#defaultString: '&amp;Remove...' 					#catalogID: #browser ) 				#nameKey: #'Remove Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Push_UpDots 					#defaultString: 'Push &amp;Up...' 					#catalogID: #browser ) 				#nameKey: #'Push Up Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Push_DownDots 					#defaultString: 'Push &amp;Down...' 					#catalogID: #browser ) 				#nameKey: #'Push Down Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_CreateAccessorsDots 					#defaultString: '&amp;Create Accessors...' 					#catalogID: #browser ) 				#nameKey: #'Create Instance Variable Accessors' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #A_bstractDots 					#defaultString: 'A&amp;bstract...' 					#catalogID: #browser ) 				#nameKey: #'Abstract Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ProtectDots 					#defaultString: '&amp;Protect...' 					#catalogID: #browser ) 				#nameKey: #'Protect Instance Variable' 				#value: 				#action: ) ) #(6 2 2 3 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="protocolMenu">protocolMenu	"Tools.MenuEditor new openOnClass: self andSelector: #protocolMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Ne_wDot 					#defaultString: 'Ne&amp;w...' 					#catalogID: #browser ) 				#nameKey: #'Add Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Move 					#defaultString: '&amp;Move' 					#catalogID: #browser ) 				#nameKey: #Move 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toPackageDots 								#defaultString: 'to Package...' 								#catalogID: #browser ) 							#nameKey: #'Move Protocol to Package' 							#value: 							#action: ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_nameDots 					#defaultString: 'Re&amp;name...' 					#catalogID: #browser ) 				#nameKey: #'Rename Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveDots 					#defaultString: '&amp;Remove...' 					#catalogID: #browser ) 				#nameKey: #'Remove Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindMethodDot 					#defaultString: '&amp;Find Method...' 					#catalogID: #browser ) 				#nameKey: #'Find Method' 				#value: 				#action: 				#shortcutKeyCharacter: $m 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #findMethod ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn 					#defaultString: 'Spawn' 					#catalogID: #browser ) 				#nameKey: #'Spawn Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #File_OutAsDots 					#defaultString: 'File &amp;Out As...' 					#catalogID: #browser ) 				#nameKey: #'File Out Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Hardcopy 					#defaultString: 'Hardcopy' 					#catalogID: #browser ) 				#nameKey: #'Hardcopy Protocol' 				#value: 				#action: ) ) #(4 1 3 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="pundleMenu">pundleMenu	"Tools.MenuEditor new openOnClass: self andSelector: #pundleMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New_PackageDots 					#defaultString: 'New &amp;Package...' 					#catalogID: #browser ) 				#nameKey: #'Store Add Package' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New_BundleDots 					#defaultString: 'New &amp;Bundle...' 					#catalogID: #browser ) 				#nameKey: #'Store Add Bundle' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #LoadVersionDots 					#defaultString: 'Load Version' 					#catalogID: #browser ) 				#nameKey: #'Store Load Pundle' 				#value: 				#action: 				#enablementSelector: #isStoreLoaded ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RemoveParenUnload 					#defaultString: 'Remove (Unload)' 					#catalogID: #browser ) 				#nameKey: #'Store Unload Pundle' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #PublishDots 					#defaultString: 'Publish...' 					#catalogID: #browser ) 				#nameKey: #'Store Publish' 				#value: 				#action: 				#enablementSelector: #isStoreLoaded ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #PublishAsParcelDots 					#defaultString: 'Publish as Parcel...' 					#catalogID: #browser ) 				#nameKey: #'Store Publish Parcel' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RenameDots 					#defaultString: 'Rename...' 					#catalogID: #browser ) 				#nameKey: #'Store Rename Pundle' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SetAsCurrent 					#defaultString: 'Set as Current' 					#catalogID: #browser ) 				#nameKey: #'Store Make Current' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Store 					#defaultString: 'Store' 					#catalogID: #browser ) 				#nameKey: #Versions 				#enablementSelector: #isStoreLoaded 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseVersions 								#defaultString: 'Browse Versions' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Pundle Versions' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithParent 								#defaultString: 'Compare with Parent' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Pundle with Parent' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithDots 								#defaultString: 'Compare With...' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Pundle Versions' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ReconcileWithDatabase 								#defaultString: 'Reconcile with Database' 								#catalogID: #browser ) 							#nameKey: #'Store Reconcile Pundle' 							#value: 							#action: ) ) #(4 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse 					#defaultString: 'Browse' 					#catalogID: #browser ) 				#nameKey: #Browse 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangedMethodsDots 								#defaultString: 'Changed Methods...' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Method Changes' 							#value: 							#action: 							#enablementSelector: #hasSingleDatabase ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangedMethods 								#defaultString: 'Changed Methods' 								#catalogID: #browser ) 							#nameKey: #'Changed Methods' 							#value: #rbItem 							#enablementSelector: #hasMultipleDatabases 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #StoreAllDatabasesBrowseChangesDesc 											#defaultString: 'Dynamic Database Changed Methods' 											#catalogID: #browser ) 										#nameKey: #'Store All Databases Browse Changes' 										#value: #dynamicMenu ) ) #(1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangeListOnChangesDots 								#defaultString: 'Change List on Changes...' 								#catalogID: #browser ) 							#nameKey: #'Store Change List on Changes' 							#value: 							#action: 							#enablementSelector: #hasSingleDatabaseAndStoreIsLoaded ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangeListOnChanges 								#defaultString: 'Change List on Changes' 								#catalogID: #browser ) 							#nameKey: #'Change List on Changes' 							#value: #rbItem 							#enablementSelector: #hasMultipleDatabases 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #StoreAllDatabasesChangeListDesc											#defaultString: 'Dynamic Change List' 											#catalogID: #browser ) 										#nameKey: #'Store All Databases Change List' 										#value: #dynamicMenu ) ) #(1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangeSetDots 								#defaultString: 'Change Set...' 								#catalogID: #browser ) 							#nameKey: #'Store Inspect Change Set' 							#value: 							#action: 							#enablementSelector: #hasSingleDatabase ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangeSet 								#defaultString: 'Change Set' 								#catalogID: #browser ) 							#nameKey: #'Change Set' 							#value: #rbItem 							#enablementSelector: #hasMultipleDatabases 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #StoreAllDatabasesInspectChangesDesc 											#defaultString: 'Dynamic Change Set' 											#catalogID: #browser ) 										#nameKey: #'Store All Databases Inspect Changes' 										#value: #dynamicMenu ) ) #(1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #OverridesOfOthersDots 								#defaultString: 'Overrides of others...' 								#catalogID: #browser ) 							#nameKey: #'Browse Overrides' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #OverriddenByOthersDots 								#defaultString: 'Overridden by others...' 								#catalogID: #browser ) 							#nameKey: #'Browse Overridden' 							#value: 							#action: ) ) #(8 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindPackageDots 					#defaultString: 'Find Package...' 					#catalogID: #browser ) 				#nameKey: #'Find Package' 				#value: 				#action: 				#shortcutKeyCharacter: $P 				#shortcutModifiers: 3 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindNamespaceDots 					#defaultString: 'Find Namespace...' 					#catalogID: #browser ) 				#nameKey: #'Find Name Space' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindClassDots 					#defaultString: '&amp;Find Class...' 					#catalogID: #browser ) 				#nameKey: #'Find Class' 				#value: 				#action: 				#shortcutKeyCharacter: $l 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindSharedVariableDots 					#defaultString: 'Find Shared Variable...' 					#catalogID: #browser ) 				#nameKey: #'Find Shared Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FileIntoDots 					#defaultString: 'File Into...' 					#catalogID: #browser ) 				#nameKey: #'File Into Package' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FileOut 					#defaultString: 'File Out' 					#catalogID: #browser ) 				#nameKey: #'File Out' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #PackageDots 								#defaultString: 'Package...' 								#catalogID: #browser ) 							#nameKey: #'File Out Package' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangesDots 								#defaultString: 'Changes...' 								#catalogID: #browser ) 							#nameKey: #'File Out Package Changes' 							#value: 							#action: 							#enablementSelector: #hasSingleDatabase ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Changes 								#defaultString: 'Changes' 								#catalogID: #browser ) 							#nameKey: #Changes 							#value: #rbItem 							#enablementSelector: #hasMultipleDatabases 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #StoreAllDatabasesFileoutChangesDesc 											#defaultString: 'Dynamic Fileout Changes' 											#catalogID: #browser ) 										#nameKey: #'Store All Databases Fileout Changes' 										#value: #dynamicMenu ) ) #(1 ) nil ) ) ) #(3 ) nil ) ) ) #(2 2 2 2 2 4 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="selectorMenu">selectorMenu	"Tools.MenuEditor new openOnClass: self andSelector: #selectorMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Senders 					#defaultString: '&amp;Senders' 					#catalogID: #browser ) 				#nameKey: #'Global Senders' 				#value: 				#action: 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Senders 								#defaultString: 'Senders' 								#catalogID: #browser ) 							#nameKey: #'Global Senders' 							#value: 							#action:methodName: 							#shortcutKeyCharacter: #F6 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #referenceMethod ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GlobalSenders 								#defaultString: 'Global Senders' 								#catalogID: #browser ) 							#nameKey: #'Global Senders Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Implementors 					#defaultString: '&amp;Implementors' 					#catalogID: #browser ) 				#nameKey: #'Global Implementors' 				#value: 				#action: 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Implementors 								#defaultString: 'Implementors' 								#catalogID: #browser ) 							#nameKey: #'Global Implementors' 							#value: 							#action:methodName: 							#shortcutKeyCharacter: #F7 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #definitionsMethod ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GlobalImplementors 								#defaultString: 'Global Implementors' 								#catalogID: #browser ) 							#nameKey: #'Global Implementors Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #HierarchySenders 					#defaultString: 'Hierarchy Senders' 					#catalogID: #browser ) 				#nameKey: #'Hierarchy Senders' 				#value: 				#action: 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Senders 								#defaultString: 'Senders' 								#catalogID: #browser ) 							#nameKey: #'Hierarchy Senders' 							#value: 							#action:methodName: 							#shortcutKeyCharacter: #F6 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #HierarchySenders 								#defaultString: 'Hierarchy Senders' 								#catalogID: #browser ) 							#nameKey: #'Hierarchy Senders Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #HierarchyImplementors 					#defaultString: 'Hierarchy Implementors' 					#catalogID: #browser ) 				#nameKey: #'Hierarchy Implementors' 				#value: 				#action: 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Implementors 								#defaultString: 'Implementors' 								#catalogID: #browser ) 							#nameKey: #'Hierarchy Implementors' 							#value: 							#action:methodName: 							#shortcutKeyCharacter: #F7 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GlobalImplementors 								#defaultString: 'Global Implementors' 								#catalogID: #browser ) 							#nameKey: #'Hierarchy Implementors Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #LocalSenders 					#defaultString: 'Local Senders' 					#catalogID: #browser ) 				#nameKey: #'Local Senders' 				#value: 				#action: 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #LocalSenders 								#defaultString: 'Local Senders' 								#catalogID: #browser ) 							#nameKey: #'Local Senders' 							#value: 							#action:methodName: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #LocalSenders 								#defaultString: 'Local Senders' 								#catalogID: #browser ) 							#nameKey: #'Local Senders Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #LocalImplementors 					#defaultString: 'Local Implementors' 					#catalogID: #browser ) 				#nameKey: #'Local Implementors' 				#value: 				#action: 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Implementors 								#defaultString: 'Implementors' 								#catalogID: #browser ) 							#nameKey: #'Local Implementors' 							#value: 							#action:methodName: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #LocalImplementors 								#defaultString: 'Local Implementors' 								#catalogID: #browser ) 							#nameKey: #'Local Implementors Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Move 					#defaultString: '&amp;Move' 					#catalogID: #browser ) 				#nameKey: #Move 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #to_ProtocolDots 								#defaultString: 'to &amp;Protocol...' 								#catalogID: #browser ) 							#nameKey: #'Move Method to Protocol' 							#value: 							#action: 							#enablementSelector: #isMethod ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #to_ProtocolDots 								#defaultString: 'to &amp;Protocol...' 								#catalogID: #browser ) 							#nameKey: #'Move Shared Variable to Protocol' 							#value: 							#action: 							#enablementSelector: #isData ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toPackageDots 								#defaultString: 'to Package...' 								#catalogID: #browser ) 							#nameKey: #'Move Method to Package' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #to_ComponentDots 								#defaultString: 'to &amp;Component...' 								#catalogID: #browser ) 							#nameKey: #'Move Method to Component' 							#value: 							#action: ) ) #(4 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Override 					#defaultString: 'Override' 					#catalogID: #browser ) 				#nameKey: #Override 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #inPackageDots 								#defaultString: 'in Package...' 								#catalogID: #browser ) 							#nameKey: #'Store Override Method' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RevertToOriginalDots 								#defaultString: 'Revert to Original...' 								#catalogID: #IDE ) 							#nameKey: #'Restore Override Method' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #DiscardOriginalDots 								#defaultString: 'Discard Original...' 								#catalogID: #IDE ) 							#nameKey: #'Remove Override Method' 							#value: 							#action: ) ) #(1 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#nameKey: #Refactoring 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_AddParameterDots 								#defaultString: '&amp;Add Parameter...' 								#catalogID: #browser ) 							#nameKey: #'Add Parameter' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RemoveParameterDots 								#defaultString: 'Remove Parameter...' 								#catalogID: #browser ) 							#nameKey: #'Navigator Remove Paramter' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_InlineAllSelfSends 								#defaultString: '&amp;Inline All Self Sends' 								#catalogID: #browser ) 							#nameKey: #'Inline All Self Sends' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_Up 								#defaultString: 'Push &amp;Up' 								#catalogID: #browser ) 							#nameKey: #'Push Up Method' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_Down 								#defaultString: 'Push &amp;Down' 								#catalogID: #browser ) 							#nameKey: #'Push Down Method' 							#value: 							#action: ) ) #(3 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseMethodChanges 					#defaultString: 'Browse Method Changes' 					#catalogID: #browser ) 				#nameKey: #'Browse Change Set Method Versions' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Store 					#defaultString: 'Store' 					#catalogID: #browser ) 				#nameKey: #Store 				#value: #rbItem 				#enablementSelector: #isStoreLoaded 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseVersions 								#defaultString: 'Browse Versions' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Method Versions' 							#value: 							#action: 							#enablementSelector: #isMethod ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseVersions 								#defaultString: 'Browse Versions' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Shared Variable Versions' 							#value: 							#action: 							#enablementSelector: #isData ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithDots 								#defaultString: 'Compare With...' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Method Versions' 							#value: 							#action: 							#enablementSelector: #isMethod ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithDots 								#defaultString: 'Compare With...' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Shared Variable Versions' 							#value: 							#action: 							#enablementSelector: #isData ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RevertDots 								#defaultString: 'Revert...' 								#catalogID: #browser ) 							#nameKey: #'Store Revert Method' 							#value: 							#action: 							#enablementSelector: #isMethod ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RevertDots 								#defaultString: 'Revert...' 								#catalogID: #browser ) 							#nameKey: #'Store Revert Shared Variable' 							#value: 							#action: 							#enablementSelector: #isData ) ) #(6 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Visibility 					#defaultString: 'Visibility' 					#catalogID: #browser ) 				#nameKey: #Visibility 				#value: #rbItem 				#enablementSelector: #canShowMultipleClasses 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ShowOnlyFiltered 								#defaultString: 'Show Only Filtered' 								#catalogID: #browser ) 							#nameKey: #'Show Only Filtered' 							#value: #dynamicMenu ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Hierarchy 								#defaultString: 'Hierarchy' 								#catalogID: #browser ) 							#nameKey: #'Inherited Classes Specifications' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SharedVariable 					#defaultString: 'Shared Variable' 					#catalogID: #browser ) 				#nameKey: #'Shared Variable' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #References 								#defaultString: 'References' 								#catalogID: #browser ) 							#nameKey: #'Global Shared Variable References' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GlobalReferences 								#defaultString: 'Global References' 								#catalogID: #browser ) 							#nameKey: #'Global Shared Variable References' 							#value: 							#action: 							#enablementSelector: #isLocalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #LocalReferences 								#defaultString: 'Local References' 								#catalogID: #browser ) 							#nameKey: #'Local Shared Variable References' 							#value: 							#action: 							#enablementSelector: #isLocalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Initialize 								#defaultString: 'Initialize' 								#catalogID: #browser ) 							#nameKey: #'Initialize Shared Variable' 							#value: 							#action: ) ) #(3 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RemoveFromList 					#defaultString: 'Remove From List' 					#catalogID: #browser ) 				#nameKey: #'Remove Method From List' 				#value: 				#action: 				#enablementSelector: #isSelectorEnvironment ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn 					#defaultString: 'Spawn' 					#catalogID: #browser ) 				#nameKey: #'Spawn Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #File_OutAsDots 					#defaultString: 'File &amp;Out As...' 					#catalogID: #browser ) 				#nameKey: #'File Out Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Hardcopy 					#defaultString: 'Hardcopy' 					#catalogID: #browser ) 				#nameKey: #'Hardcopy Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Inspect 					#defaultString: 'Inspect' 					#catalogID: #browser ) 				#nameKey: #'Inspect Method' 				#value: 				#action: ) ) #(2 2 2 3 3 1 1 4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.VariableNavigator class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="variableMenu">variableMenu	"MenuEditor new openOnClass: self andSelector: #variableMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Pull_Up #defaultString: 'Pull &amp;Up' #catalogID: #browser) 				#nameKey: #'Variable Navigator Pull Up Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Remove #defaultString: '&amp;Remove' #catalogID: #browser) 				#nameKey: #'Variable Navigator Remove Variable' 				#value: 				#action: ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.VariableNavigator class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="HorizontalWindowSpec">HorizontalWindowSpec	"UIPainter new openOnClass: self andSelector: #HorizontalWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #Navigator #defaultString: 'Navigator' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 506 525 1094 676 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.25 0 1 ) 					#name: #variableClassList 					#model: #variableClassList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedVariableClass 						#requestValueChangeSelector: #changeRequest ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.25 0 0 -2 0.5 0 1 ) 					#name: #instanceVariableList 					#model: #instanceVariableList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedInstanceVariable 						#requestValueChangeSelector: #changeRequest ) 					#menu: #instanceVariableMenuHolder 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #navigator 					#flags: 0 					#minorKey: #navigatorSpec ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.25 0 0 2 0.25 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'variableClassList' 					#belowWidgets: 'instanceVariableList' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'instanceVariableList' 					#belowWidgets: 'navigator' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="addUndefinedMethodItem">addUndefinedMethodItem		&lt;itemInMenu: #(#mainMenu) position: 20.01&gt;	^(MenuItem labeled: #AddMethod &gt;&gt; 'Add Method' &lt;&lt; #browser)		value: [self addUndefinedMethod];		visible: [self findPotentialMNU notNil]</body><body package="Browser-BrowserUI" selector="renameInstanceVariableMenuItem">renameInstanceVariableMenuItem	&lt;itemInMenu: #(#mainMenu #refactorMenu) position: 10&gt;	^(MenuItem		labeled: #Re_nameVariableAsDots &lt;&lt; #IDE &gt;&gt; 'Re&amp;name Variable As...')		visible: [self hasInstanceVariableSelected];		value: #renameInstanceVariable;		enablement: #hasInstanceVariableSelected;		shortcutKeyCharacter: $N;		shortcutModifiers: 3;		yourself</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $S 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #F_ormat 					#defaultString: 'F&amp;ormat' 					#catalogID: #browser ) 				#nameKey: #'Format Code' 				#value: 				#action: 				#shortcutKeyCharacter: $O 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GoToClass 					#defaultString: 'Go to Class' 					#catalogID: #browser ) 				#nameKey: #'Navigate to Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseClassInNewWindow 					#defaultString: 'Browse Class in New Window' 					#catalogID: #browser ) 				#nameKey: #'Open Browser on Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected 				#shortcutKeyCharacter: #F12 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseReferencesToClass 					#defaultString: 'Browse References to Class' 					#catalogID: #browser ) 				#nameKey: #'Browse References to Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariableRe_ferencesDots 					#defaultString: 'Browse Variable Re&amp;ferences...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable References' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariableRea_dersDots 					#defaultString: 'Browse Variable Rea&amp;ders...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Readers' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariable_WritersDots 					#defaultString: 'Browse Variable &amp;Writers...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Writers' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse_SendersOfSelector 					#defaultString: 'Browse &amp;Senders of Selector' 					#catalogID: #browser ) 				#nameKey: #'Selected Message References' 				#value: 				#action: 				#enablementSelector: #hasMessageNodeSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse_ImplementorsOfSelector 					#defaultString: 'Browse &amp;Implementors of Selector' 					#catalogID: #browser ) 				#nameKey: #'Selected Message Implementors' 				#value: 				#action: 				#enablementSelector: #hasMessageNodeSelected 				#shortcutKeyCharacter: #F12 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#nameKey: #refactorMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractValueToTemporary 								#defaultString: '&amp;Extract Value to Temporary' 								#catalogID: #browser ) 							#nameKey: #'Extract to Temporary' 							#value: 							#action: 							#enablementSelector: #hasValueNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_nameVariableAsDots 								#defaultString: 'Re&amp;name Variable As...' 								#catalogID: #browser ) 							#nameKey: #'Rename Selected Temporary Variable' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 3 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #MoveToInner_Scope 								#defaultString: 'Move to Inner &amp;Scope' 								#catalogID: #browser ) 							#nameKey: #'Move Selected Temporary to Innermost Scope' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Con_vertToInstanceVariable 								#defaultString: 'Con&amp;vert to Instance Variable' 								#catalogID: #browser ) 							#nameKey: #'Convert Temporary Variable to Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RemoveParameter 								#defaultString: '&amp;Remove Parameter' 								#catalogID: #browser ) 							#nameKey: #'Remove Selected Parameter' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #In_lineParameter 								#defaultString: 'In&amp;line Parameter' 								#catalogID: #browser ) 							#nameKey: #'Inline Selected Parameter' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #In_lineMethod 								#defaultString: 'In&amp;line Method' 								#catalogID: #browser ) 							#nameKey: #'Inline Method' 							#value: 							#action: 							#enablementSelector: #hasMessageNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractToTemporary 								#defaultString: '&amp;Extract to Temporary' 								#catalogID: #browser ) 							#nameKey: #'Extract to Temporary' 							#value: 							#action: 							#enablementSelector: #hasMessageNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_InlineAssignedTemporary 								#defaultString: '&amp;Inline Assigned Temporary' 								#catalogID: #browser ) 							#nameKey: #'Inline Temporary' 							#value: 							#action: 							#enablementSelector: #hasAssignmentSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #PushVariable_Up 								#defaultString: 'Push Variable &amp;Up' 								#catalogID: #browser ) 							#nameKey: #'Push Up Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CreateAccessors 								#defaultString: 'Create Accessors' 								#catalogID: #browser ) 							#nameKey: #'Create Selected Instance Variable Accessors' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #MakeVariableA_bstract 								#defaultString: 'Make Variable A&amp;bstract' 								#catalogID: #browser ) 							#nameKey: #'Abstract Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ProtectVariable 								#defaultString: '&amp;Protect Variable' 								#catalogID: #browser ) 							#nameKey: #'Protect Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractMethod 								#defaultString: '&amp;Extract Method' 								#catalogID: #browser ) 							#nameKey: #'Extract Method' 							#value: 							#action: 							#labelImage: #(#{UI.ResourceRetriever} #{Refactory.Browser.BrowserIcons} #extractMethod ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ExtractMethodToComponent 								#defaultString: 'Extract Method to Component' 								#catalogID: #browser ) 							#nameKey: #'Extract Method to Component' 							#value: 							#action: ) ) #(13 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Explain 					#defaultString: 'Explain' 					#catalogID: #browser ) 				#nameKey: #'Explain Code' 				#value: 				#action: 				#shortcutKeyCharacter: $E 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editPaste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $F 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(2 9 4 1 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.CopyrightNoticeTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $S 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editPaste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $F 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(1 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $F 				#shortcutModifiers: 2 ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1086 675 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -42 1 ) 					#name: #textEditor 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -308 1 -32 1 -208 1 -4 1 ) 					#name: #okButton 					#model: #acceptText 					#label: 					#(#{Kernel.UserMessage} 						#key: #Apply 						#defaultString: 'Apply' 						#catalogID: #browser ) 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 1 -32 1 -105 1 -4 1 ) 					#name: #cancelButton 					#model: #cancelText 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -102 1 -32 1 -2 1 -4 1 ) 					#name: #restoreButton 					#model: #restore 					#label: 					#(#{Kernel.UserMessage} 						#key: #RestoreDefault 						#defaultString: 'Restore Default' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 -38 1 -3 1 -34 1 ) 					#name: #Divider2 ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $s 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editPaste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $F 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(1 4 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.IconViewer class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 512 376 953 768 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 0 27 ) 					#name: #icon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 2 82 25 ) 					#name: #edit 					#model: #editSpec 					#label: #(#{Kernel.UserMessage} #key: #Edit #defaultString: 'Edit' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CanvasViewer class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="errorMessageSpec">errorMessageSpec	"Tools.UIPainter new openOnClass: self andSelector: #errorMessageSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 512 384 900 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 0 0.5 0.5 0.5 ) 					#name: #messageLabel 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #ErrorDisplayingTheCanvasPainterNeeded 						#defaultString: 'Error displaying the canvas, UIPainter may need to be loaded' 						#catalogID: #browser ) ) ) ) )</body><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1203 972 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 27 0 0 1 0 1 ) 					#name: #subcanvas 					#flags: 43 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 2 82 25 ) 					#name: #edit 					#model: #editSpec 					#label: #(#{Kernel.UserMessage} #key: #Edit #defaultString: 'Edit' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 2 165 25 ) 					#name: #open 					#model: #openSpec 					#label: #(#{Kernel.UserMessage} #key: #Open #defaultString: 'Open' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="statusBarToggleItem">statusBarToggleItem	&lt;itemInMenu: #(#toolsMenu) position: 30.20&gt;	^(MenuItem labeled: #toggleStatusBar &lt;&lt; #browser &gt;&gt; 'Status Bar')		value: [self codeModel toggleStatusBar];		indication: [self codeModel isStatusBarEnabled]</body><body package="Browser-BrowserUI" selector="toolBarToggleItem">toolBarToggleItem	&lt;itemInMenu: #(#toolsMenu) position: 30.10&gt;	^(MenuItem labeled: #Toolbar &lt;&lt; #browser &gt;&gt; 'Toolbar')		indication: [self showToolbar];		value: [self toggleToolbar]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="browserMenu">browserMenu	"Tools.MenuEditor new openOnClass: self andSelector: #browserMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Open_NewBrowser 					#defaultString: 'Open &amp;New Browser' 					#catalogID: #browser ) 				#nameKey: #'Spawn Browser' 				#value: 				#action: 				#shortcutKeyCharacter: $N 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Undo 					#defaultString: '&amp;Undo' 					#catalogID: #browser ) 				#nameKey: #Undo 				#value: 				#action:undoLabel: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #undo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Redo 					#defaultString: '&amp;Redo' 					#catalogID: #browser ) 				#nameKey: #Redo 				#value: 				#action:redoLabel: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #redo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Refresh 					#defaultString: '&amp;Refresh' 					#catalogID: #browser ) 				#nameKey: #'Update Navigator' 				#value: 				#action: 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 0 ) ) #(1 2 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="findMenu">findMenu	"Tools.MenuEditor new openOnClass: self andSelector: #findMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_PackageDots 					#defaultString: '&amp;Package...' 					#catalogID: #browser ) 				#nameKey: #'Find Package' 				#value: 				#action: 				#shortcutKeyCharacter: $P 				#shortcutModifiers: 3 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ClassVariableNamespaceDots 					#defaultString: '&amp;Class/Variable/Name Space...' 					#catalogID: #browser ) 				#nameKey: #'Find Global Name' 				#value: 				#action: 				#shortcutKeyCharacter: $l 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_MethodDots 					#defaultString: '&amp;Method...' 					#catalogID: #browser ) 				#nameKey: #'Find Method' 				#value: 				#action: 				#shortcutKeyCharacter: $m 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #findMethod ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ReferencesToSymbolDots 					#defaultString: 'References to Symbol...' 					#catalogID: #browser ) 				#nameKey: #'References to Symbol' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #referenceMethod ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ClassesDefiningVariableDots 					#defaultString: 'Classes Defining Variable...' 					#catalogID: #browser ) 				#nameKey: #'Classes Defining Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ImplementorsMatchingDots 					#defaultString: 'Implementors Matching...' 					#catalogID: #browser ) 				#nameKey: #'Implementors Matching' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #MethodsWithStringsMatchingDots 					#defaultString: 'Methods with Strings Matching...' 					#catalogID: #browser ) 				#nameKey: #'Methods with Strings Matching' 				#value: 				#action: ) ) #(3 1 2 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="helpMenu">helpMenu	"Tools.MenuEditor new openOnClass: self andSelector: #helpMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Help 					#defaultString: 'Help' 					#catalogID: #browser ) 				#nameKey: #'Context Help' 				#value: 				#action: 				#shortcutKeyCharacter: #F1 				#shortcutModifiers: 0 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #help ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Topics 					#defaultString: '&amp;Topics' 					#catalogID: #browser ) 				#nameKey: #'Refactoring Browser Help' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #IconsReference 					#defaultString: 'Icons Reference' 					#catalogID: #browser ) 				#nameKey: #'Icon Help' 				#value: 				#action: ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="toolbarMenu">toolbarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolbarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #CreateBuffer 					#defaultString: 'Create Buffer' 					#catalogID: #browser ) 				#nameKey: #'Create Buffer' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #newView ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindClassVariableNameSpace 					#defaultString: 'Find Class/Variable/Name Space' 					#catalogID: #browser ) 				#nameKey: #'Find Global Name' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ClassReferences 					#defaultString: 'Class References' 					#catalogID: #browser ) 				#nameKey: #'Global Class References' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #referenceClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #createClass 					#defaultString: 'Create Class' 					#catalogID: #browser ) 				#nameKey: #'New Class' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #addClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindMethod 					#defaultString: 'Find Method' 					#catalogID: #browser ) 				#nameKey: #'Find Method' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #findMethod ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Senders 					#defaultString: 'Senders' 					#catalogID: #browser ) 				#nameKey: #'Global Senders' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #referenceMethod ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Implementors 					#defaultString: 'Implementors' 					#catalogID: #browser ) 				#nameKey: #'Global Implementors' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #definitionsMethod ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ExtractMethod 					#defaultString: 'Extract Method' 					#catalogID: #browser ) 				#nameKey: #'Extract Method' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #extractMethod ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Undo 					#defaultString: 'Undo' 					#catalogID: #browser ) 				#nameKey: #Undo 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #undo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Redo 					#defaultString: 'Redo' 					#catalogID: #browser ) 				#nameKey: #Redo 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #redo ) ) ) #(1 3 3 1 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="toolsMenu">toolsMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolsMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #CodeModelToolsMenu 					#defaultString: 'Code Model Tools Menu' 					#catalogID: #browser ) 				#nameKey: #'Code Model Tools Menu' 				#value: #dynamicMenu ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SetDefaultNameSpace 					#defaultString: 'Set Default Name Space' 					#catalogID: #browser ) 				#nameKey: #'Set Default Name Space' 				#value: 				#action: ) ) #(1 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="viewMenu">viewMenu	"Tools.MenuEditor new openOnClass: self andSelector: #viewMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Zoom 					#defaultString: '&amp;Zoom' 					#catalogID: #browser ) 				#nameKey: #'Zoom Specifications' 				#value: #dynamicMenu 				#shortcutKeyCharacter: $Z 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_NewView 					#defaultString: '&amp;New View' 					#catalogID: #browser ) 				#nameKey: #'Create Buffer' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{BrowserIcons} #newView ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveCurrentView 					#defaultString: '&amp;Remove Current View' 					#catalogID: #browser ) 				#nameKey: #'Remove Buffer' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Buffers 					#defaultString: 'Buffers' 					#catalogID: #browser ) 				#nameKey: #Buffers 				#value: #dynamicMenu ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_MoreBuffers 					#defaultString: '&amp;More Buffers' 					#catalogID: #browser ) 				#nameKey: #'More Buffers' 				#value: 				#action: 				#enablementSelector: #has10orMoreCodeTools ) ) #(1 2 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 720 450 920 650 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #inspectorCanvas 					#majorKey: #{Tools.Trippy.InspectorHolder} 					#minorKey: #windowSpec 					#clientKey: #inspector ) ) ) )</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel class</class-id> <category>tool registration</category><body package="Browser-BrowserUI" selector="toolTags">toolTags	&lt;pragmas: #class&gt;	^#(#tool: #tool)</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel class</class-id> <category>status registration</category><body package="Browser-BrowserUI" selector="statusTags">statusTags	&lt;pragmas: #class&gt;	^#(#status: #status)</body></methods><methods><class-id>Refactory.Browser.AbstractCodeModel class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec."	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: #(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} 				#key: #CodeTool 				#defaultString: 'Code Tool' 				#catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 720 450 1253 852)) 		#component: #(#{UI.SpecCollection} 			#collection: #(#(#{UI.ArbitraryComponentSpec} 				#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1) 				#name: #mainView 				#flags: 0 				#component: #mainView))))</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="Browser-BrowserUI" selector="bundleStructureToolClass">bundleStructureToolClass	&lt;tool: 36&gt;	^BundleStructureTool</body><body package="Browser-BrowserUI" selector="canvasViewerToolClass">canvasViewerToolClass	&lt;tool: 10.1&gt;	^CanvasViewer</body><body package="Browser-BrowserUI" selector="codeComponentToolClass">codeComponentToolClass	&lt;tool: 35&gt;	^CodeComponentPropertiesTool</body><body package="Browser-BrowserUI" selector="commentToolClass">commentToolClass	&lt;tool: 30&gt;	^BrowserCommentTool</body><body package="Browser-BrowserUI" selector="compareSourceToolClass">compareSourceToolClass	&lt;tool: 22&gt;	^CompareCodeTool</body><body package="Browser-BrowserUI" selector="copyrightToolClass">copyrightToolClass	&lt;tool: 36&gt;	^CopyrightNoticeTool</body><body package="Browser-BrowserUI" selector="definitionToolClass">definitionToolClass	&lt;tool: 40&gt;	^BrowserDefinitionTool</body><body package="Browser-BrowserUI" selector="iconViewerToolClass">iconViewerToolClass	&lt;tool: 10.2&gt;	^IconViewer</body><body package="Browser-BrowserUI" selector="menuViewerToolClass">menuViewerToolClass	&lt;tool: 10.3&gt;	^MenuViewer</body><body package="Browser-BrowserUI" selector="overrideToolClass">overrideToolClass	&lt;tool: 45&gt;	^OverrideCodeTool</body><body package="Browser-BrowserUI" selector="overviewToolClass">overviewToolClass	&lt;tool: 1000&gt;	^BrowserOverviewTool</body><body package="Browser-BrowserUI" selector="rewriteToolClass">rewriteToolClass	&lt;tool: 900&gt;	^RewriteCodeTool</body><body package="Browser-BrowserUI" selector="sharedVariableToolClass">sharedVariableToolClass	&lt;tool: 10&gt;	^SharedVariableCodeTool</body><body package="Browser-BrowserUI" selector="smalllintToolClass">smalllintToolClass	&lt;tool: 950&gt;	^SmalllintCodeTool</body><body package="Browser-BrowserUI" selector="sourceToolClass">sourceToolClass	&lt;tool: 20&gt;	^BrowserCodeTool</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>status registration</category><body package="Browser-BrowserUI" selector="basicInfoStatusClass">basicInfoStatusClass	&lt;status: 10&gt;	^SelectionInfoStatus</body><body package="Browser-BrowserUI" selector="packageStatusClass">packageStatusClass	&lt;status: 20&gt;	^SelectionPackageStatus</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1086 675 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #textEditor 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#tabable: false 					#isReadOnly: true 					#tabRequiresControl: false ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $S 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_GenerateDefaultComment 					#defaultString: '&amp;Generate Default Comment' 					#catalogID: #browser ) 				#nameKey: #'Generate Default Class Comment' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editPaste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $F 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(1 1 4 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool class</class-id> <category>comment section headings</category><body package="Browser-BrowserUI" selector="sectionHeadingTags">sectionHeadingTags		&lt;pragmas: #class&gt;	^#(#commentSectionHeadings)</body><body package="Browser-BrowserUI" selector="standardSectionHeadings">standardSectionHeadings		&lt;commentSectionHeadings&gt;	^#('Overview' 'Instance Variables' 'Usage' 'Subclass Responsibility' 'Implementation' 'Limitations' 'Class Variables' 'Object Reference' 'Class Instance Variables' 'Shared Variables' 'Instance Method Tags' 'Class Method Tags')</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="formatterSettings16x16">formatterSettings16x16	"UIMaskEditor new openOnClass: self andSelector: #formatterSettings16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 2055 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 2087 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 2955 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 6424 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 6070 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8062 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 8062 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 3597 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 5107 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 2087 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 4175 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7773 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7773 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 7934 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 4400 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 7773 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2087 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 5300 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 7355 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 5685 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 5492 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 5492 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1477 4175 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 7195 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 6424 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 2537 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 6424 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 2537 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 2537 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 3276 5492)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'B2$)JR$)JR$)JR$)JP,XF@,)@R$)@R$)@R$)@R$KFA KB0DKB0DKB0DKB0DKB1 CFA XFA FJ1&lt;LFA XFA R@Q XFA XI0@@BA XFA RD LXFA XFA,.AB&lt;XFA RD!HCFA XF@(ZBR0VEA RD!HA@Q XFA (E!\YARHUD!HRD LXFA \CP@@@@@-EQHCD!HCFA XGQ8 A08#@BDCFAHA@Q XFBP%CA UJ!(OFA RD LXFA BI! RD!TSDADXD!HCFA XFA RD!HCFA XFAHA@Q XFA RD!HRD!HRD!HRD LXFA RD!HAD!HAD!HAD!HCFA C@PLC@PLC@PLC@PLC@0@a')))</body><body package="Browser-BrowserUI" selector="formatterSettings16x16mask">formatterSettings16x16mask	"UIMaskEditor new openOnClass: self andSelector: #formatterSettings16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 252 0 0 255 252 0 0 255 253 0 0 7 131 0 0 7 135 0 0 7 143 0 0 15 223 0 0 15 255 0 0 31 255 0 0 31 247 0 0 29 231 0 0 27 247 0 0 7 135 0 0 15 255 0 0 31 255 0 0 63 255 0 0])</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="extractMethod20x20">extractMethod20x20	"UIMaskEditor new openOnClass: self andSelector: #extractMethod20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 4 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); yourself)) usingBits: #[85 85 85 85 85 0 0 0 85 85 85 85 85 0 0 0 85 85 85 85 85 0 0 0 87 255 255 253 85 0 0 0 85 85 85 85 85 0 0 0 87 255 255 253 85 0 0 0 85 85 85 85 85 0 0 0 87 255 213 85 85 0 0 0 85 85 86 152 85 0 0 0 87 253 86 146 85 0 0 0 85 85 106 136 5 0 0 0 87 253 106 32 5 0 0 0 85 85 84 144 85 0 0 0 87 253 98 0 5 0 0 0 85 85 72 0 5 0 0 0 85 85 84 16 85 0 0 0 85 85 84 16 85 0 0 0 85 85 85 85 85 0 0 0 85 85 85 85 85 0 0 0 85 85 85 85 85 0 0 0])</body><body package="Browser-BrowserUI" selector="extractMethod20x20mask">extractMethod20x20mask	"UIMaskEditor new openOnClass: self andSelector: #extractMethod20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 31 254 0 0 0 0 0 0 31 254 0 0 0 0 0 0 31 128 0 0 0 27 0 0 30 27 0 0 0 127 192 0 30 127 192 0 0 27 0 0 30 127 192 0 0 127 192 0 0 27 0 0 0 27 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BrowserUI" selector="rbNewBuffer20x20">rbNewBuffer20x20	"UIMaskEditor new openOnClass: self andSelector: #rbNewBuffer20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 40) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 792); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 1321); at: 6 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 4227 scaledBlue: 5548); at: 7 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 6605 scaledBlue: 5548); at: 8 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1056 scaledBlue: 1321); at: 9 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 1056 scaledBlue: 2113); at: 10 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 4756 scaledBlue: 4491); at: 11 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 528 scaledBlue: 2113); at: 12 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 3434); at: 13 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7662); at: 14 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 264); at: 15 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 1849); at: 16 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 1849); at: 17 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 2642); at: 18 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1321 scaledBlue: 1321); at: 19 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1585 scaledBlue: 1585); at: 20 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); at: 21 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 3963 scaledBlue: 4227); at: 22 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 23 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 1849 scaledBlue: 2113); at: 24 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 1321 scaledBlue: 2113); at: 25 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 7134 scaledBlue: 7926); at: 26 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 7134); at: 27 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 2378 scaledBlue: 5548); at: 28 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 29 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 0); at: 30 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 1321); at: 31 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 792 scaledBlue: 0); at: 32 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1585 scaledBlue: 528); at: 33 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 1056 scaledBlue: 2113); at: 34 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1056 scaledBlue: 1849); at: 35 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3963 scaledBlue: 3963); at: 36 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1585 scaledBlue: 1849); at: 37 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 1849 scaledBlue: 1056); at: 38 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 792 scaledBlue: 1056); at: 39 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2378 scaledBlue: 4491); at: 40 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 3434 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: '@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LCEQLSD1LSD1LSD1LSD1LSD0LC@0LU@1LSD1LSD1LSD1LS@0LS@0LC@1TSD1LSD1LSD1LSD1LSD1LC@0LCEPLC@0LC@0LC@0LC@0LC@@LC@0LU@1TCGPLCGPLU@0LC@0L@@0LC@1TCE!PAH2@!I@LCEPLC@0@C@0LCEP4BC (DD@,OGQTC@1TU@@LC@@@GF1,E@2THI!,WG!TC@0L@@0LCEPLX@2X&amp;G0$&amp;F1,\D!TC@0@C@0LC@@LCF"X''I"XC@2HQF0LC@@LC@0@UC@LCI"X&amp;@0LFH!,C@0L@@0LC@1TUF1$C@0LCF0@C@0LC@0@C@0LCEPL@F1T[@A,C@0LC@0LC@@LC@0LU@0LC@0LC@0LC@0LC@0L@@0LC@0@@@@@@@@@@@@@@@@@@@@@C@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0@a'))</body><body package="Browser-BrowserUI" selector="rbNewBuffer20x20bw">rbNewBuffer20x20bw	"UIMaskEditor new openOnClass: self andSelector: #rbNewBuffer20x20bw"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 31 255 224 0 23 255 32 0 31 255 224 0 16 0 32 0 21 40 32 0 23 242 32 0 31 252 224 0 126 254 32 0 35 247 32 0 19 230 32 0 57 204 32 0 30 24 32 0 23 224 32 0 16 0 32 0 31 255 224 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BrowserUI" selector="rbNewBuffer20x20mask">rbNewBuffer20x20mask	"UIMaskEditor new openOnClass: self andSelector: #rbNewBuffer20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 127 255 224 0 63 255 224 0 31 255 224 0 63 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-browser</category><body package="Browser-BrowserUI" selector="browser11MethodCategorization">browser11MethodCategorization		&lt;setting: #(#tools #browser #methodCategorization)&gt;	| typeDescription |	typeDescription := EnumerationSetting		keys: #(#always #onlyNewMethods)		choices: #(true false)		labels:			(Array				with: #Always &lt;&lt; #labels &gt;&gt; 'Always'				with: #OnlyNewMethods &lt;&lt; #labels &gt;&gt; 'Only New Methods').	^(typeDescription on: Refactory.Browser.AddMethodChange aspect:			#eagerAutoCategorization)		label: #EagerAutoCategorization &lt;&lt; #labels &gt;&gt; 'Auto Categorize Methods:';		helpText:				#EagerAutoCategorizationHelpText &lt;&lt; #dialogs &gt;&gt;							'This setting determines in what scenarios the category of a superclass implementation of a method is used as the category of a method addition/change.'</body><body package="Browser-BrowserUI" selector="browser15SortBundlesAtTop">browser15SortBundlesAtTop	&lt;setting: #(#tools #browser #sortBundlesToTop)&gt;	^(BooleanSetting on: #{Refactory.Browser.PackageListRoot.SortBundlesToTop})		default: true;		label: #SortBundlesToTop &lt;&lt; #IDE &gt;&gt; 'Group bundles at top';		helpText: #SortBundlesToTopHelpText &lt;&lt; #IDE					&gt;&gt; 'Should the top-level list of bundles and packages be shown as an alphabetic list of bundles followed by an alphabetic list of packages, or as an alphabetic list of intermingled bundles and packages (also applies to the contents of bundles unless load-order is chosen for them)?'</body><body package="Browser-BrowserUI" selector="browser16ShowBundleContentsInLoadOrder">browser16ShowBundleContentsInLoadOrder	&lt;setting: #(#tools #browser #showBundleContentsInLoadOrder)&gt;	^(BooleanSetting		on: #{Refactory.Browser.PackageListRoot.ShowBundleContentsInLoadOrder})		default: false;		label: #ShowBundleContentsInLoadOrder &lt;&lt; #IDE					&gt;&gt; 'Show bundle contents in load order';		helpText: #ShowBundleContentsInLoadOrderHelpText &lt;&lt; #IDE					&gt;&gt; 'Should the contents of a bundle be shown in load order instead of in the alphabetic order (i.e. either alphabetic bundles then alphabetic packages, or pure alphabetic) that applies to the top-level display?'</body><body package="Browser-BrowserUI" selector="browser20ShowAllWhenNothingIsSelected">browser20ShowAllWhenNothingIsSelected	&lt;setting: #(tools browser showAllWhenNothingIsSelected)&gt;	^(BooleanSetting 			on: Refactory.Browser.ProtocolItemNavigatorPart 			aspect: #showAllItemsWhenNothingSelected)		default: true;		label: #ShowAllWhenNothingIsSelected &lt;&lt; #labels &gt;&gt; 'Show all methods when no protocols are selected';		helpText: #ShowAllWhenNothingIsSelectedHelpText &lt;&lt; #dialogs &gt;&gt; 'Should the method list show all methods/shared variables when nothing is selected? When turned off, no methods or shared variables are displayed until you select a protocol.'</body><body package="Browser-BrowserUI" selector="browser21ShowRefactoringChanges">browser21ShowRefactoringChanges	&lt;setting: #(tools browser showRefactoringChanges)&gt;	^(BooleanSetting on: Refactory.Browser.Refactoring aspect: #promptOnRefactoring)		default: false;		label: #ShowRefactoringChanges &lt;&lt; #labels &gt;&gt; 'Show refactoring changes';		helpText: (#ShowRefactoringChangesHelpText &lt;&lt; #dialogs &gt;&gt; 'Should a dialog of potential changes be displayed when a refactoring is performed? Without the dialog, the refactoring will perform all the changes without any further user action. From the dialog, you can:&lt;n&gt;&lt;t&gt;remove changes that you do not wish to have performed,&lt;n&gt;&lt;t&gt;edit a change, then accept or cancel your edit,&lt;n&gt;&lt;t&gt;execute a specific change,&lt;n&gt;&lt;t&gt;execute all changes,&lt;n&gt;&lt;t&gt;abort all changes.&lt;n&gt;If you do anything other than just executing or aborting all changes as presented, then the alteration is not guaranteed to be a pure refactoring;  that is up to you.') expandMacros</body><body package="Browser-BrowserUI" selector="browser22ShowOnlyFiltered">browser22ShowOnlyFiltered	&lt;setting: #(tools browser showOnlyFiltered)&gt;	^(BooleanSetting on: Refactory.Browser.Navigator aspect: #showOnlyFiltered)		default: true;		label: #ShowOnlyFiltered &lt;&lt; #labels &gt;&gt; 'Only show methods in selected packages/parcels';		helpText: #ShowOnlyFilteredHelpText &lt;&lt; #dialogs &gt;&gt; 'Should only methods from the selected packages or parcels be shown in the method list, or should all methods be displayed? This is the default setting that is used when opening the browser. After the browser is opened, you can change this setting on a browser by browser basis.'</body><body package="Browser-BrowserUI" selector="browser24ShowHorizontalScrollbars">browser24ShowHorizontalScrollbars	&lt;setting: #(tools browser showHorizontalScrollbars)&gt;	^(BooleanSetting on: Refactory.Browser.ListNavigatorPart aspect: #showHorizontalScrollbar)		default: false;		label: #ShowHorizontalScrollbar &lt;&lt; #labels &gt;&gt; 'Show horizontal scrollbars';		helpText: #ShowHorizontalScrollbarHelpText &lt;&lt; #dialogs &gt;&gt; 'Should the lists at the top of the browser have horizontal scrollbars?'</body><body package="Browser-BrowserUI" selector="browser26ShowToolbar">browser26ShowToolbar	&lt;setting: #(tools browser showToolbar)&gt;	^(BooleanSetting on: Refactory.Browser.RefactoringBrowser showToolbarHolder)		default: true;		label: #ShowToolbar &lt;&lt; #labels &gt;&gt; 'Show toolbar';		helpText: #ShowToolbarHelpText &lt;&lt; #dialogs &gt;&gt; 'Should the toolbar be displayed?'</body><body package="Browser-BrowserUI" selector="browser28ShowStatusBar">browser28ShowStatusBar	&lt;setting: #(#tools #browser #showStatusBar)&gt;	^(BooleanSetting on: Refactory.Browser.StatusPanel aspect: #lastEnablement)		default: true;		label: #ShowStatusBar &lt;&lt; #labels &gt;&gt; 'Show status bar';		helpText:				#ShowStatusBarHelpText &lt;&lt; #dialogs &gt;&gt;							'Is the status bar displayed? The status bar is the line at the bottom of the browser that display parcel and package information.'</body><body package="Browser-BrowserUI" selector="browser30DefaultNameSpace">browser30DefaultNameSpace	&lt;setting: #(tools browser defaultNameSpace)&gt;	^(StringSetting on: Refactory.Browser.Navigator aspect: #defaultNameSpaceString)		default: 'Smalltalk';		label: #DefaultNamespace &lt;&lt; #labels &gt;&gt; 'Default namespace';		helpText: #DefaultNamespaceHelpText &lt;&lt; #dialogs &gt;&gt; 'This is the name space that category browsers open on. Also, this is the name space used for new class/name space templates.'</body><body package="Browser-BrowserUI" selector="browser50ProtocolOrdering">browser50ProtocolOrdering	&lt;setting: #(tools browser protocolOrdering)&gt;	| choices type |	choices := Refactory.Browser.SelectorProtocolNavigatorPart protocolOrderChoices.	type := EnumerationSetting		keys: (choices collect: [:each | each displayString asSymbol])		choices: choices.	^(type on: Refactory.Browser.SelectorProtocolNavigatorPart aspect: #protocolOrder)		default: #Traditional;		label: #SelectorProtocolOrder &lt;&lt; #labels &gt;&gt; 'Selector protocol order';		helpText: #SelectorProtocolOrderHelpText &lt;&lt; #dialogs &gt;&gt; 'The browser can either sort selector protocols alphabetically, or group them according to the Smalltalk-80 traditional order: initialization protocols first, private protocols last. Initialization protocols are assumed to be those that contain a string "initial" in their name.  Private protocols are those that start with the word "private" or "pvt".  Within the groups, protocols are sorted alphabetically.'</body><body package="Browser-BrowserUI" selector="browser60UndoCount">browser60UndoCount	&lt;setting: #(tools browser undoCount)&gt;	^((IntegerSetting min: 1 max: 100)			on: Refactory.Browser.RefactoryChangeManager aspect: #undoSize)		default: 5;		label: #UndoCount &lt;&lt; #labels &gt;&gt; 'Undo count';		helpText: #UndoCountHelpText &lt;&lt; #dialogs &gt;&gt; 'Specifies the size of the undo buffer. The undo buffer contains source code accepts, not individual text changes. For example, accepting a method is saved in the undo buffer.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-formatter</category><body package="Browser-BrowserUI" selector="formatter10FormatOnBrowse">formatter10FormatOnBrowse	&lt;setting: #(#tools #formatter #saveAutoFormat)&gt;	^(BooleanSetting on: Refactory.Browser.BrowserCodeTool		aspect: #browseAutoFormat)		default: true;		label: #BrowseAutoFormatLabel &lt;&lt; #browser &gt;&gt; 'Browse Auto Formats?';		helpText: #BrowseAutoFormatHelp &lt;&lt; #browser					&gt;&gt; 'Automatically format code when browsing (viewing).'</body><body package="Browser-BrowserUI" selector="formatter20FormatOnSave">formatter20FormatOnSave	&lt;setting: #(#tools #formatter #showToolbarBelowContexts)&gt;	^(BooleanSetting on: Refactory.Browser.BrowserCodeTool		aspect: #saveAutoFormat)		default: false;		label: #SaveAutoFormatLabel &lt;&lt; #browser &gt;&gt; 'Save Auto Formats?';		helpText: #SaveAutoFormatHelp &lt;&lt; #browser					&gt;&gt; 'Automatically format code when saving (accepting).'</body><body package="Browser-BrowserUI" selector="formatter30HorizontalSpacing">formatter30HorizontalSpacing	&lt;setting: #(#tools #formatter #horizontalSpacing)&gt;	| formatter |	formatter := Refactory.Browser.RBFormatter new.	^((EnumerationSetting		keys: #(#low #medium #high)		choices: (Array				with: formatter lowHorizontalSpacing				with: formatter mediumHorizontalSpacing				with: formatter highHorizontalSpacing)		labels: (Array				with: #Compact &lt;&lt; #IDE &gt;&gt; 'Compact'				with: #Moderate &lt;&lt; #IDE &gt;&gt; 'Moderate'				with: #Expansive &lt;&lt; #IDE &gt;&gt; 'Expansive'))			on: Refactory.Browser.RBFormatter			aspect: #currentHorizontalSpacingLevel)		default: #low;		label: #HorizontalSpacing &lt;&lt; #IDE &gt;&gt; 'Horizontal Spacing';		helpText: #FormatterHorizontalSpacingHelpText &lt;&lt; #IDE					&gt;&gt; 'Allows you to choose the degree to which the formatter inserts whitespace characters.'</body><body package="Browser-BrowserUI" selector="formatter40VerticalSpacing">formatter40VerticalSpacing	&lt;setting: #(#tools #formatter #verticalSpacing)&gt;	| formatter |	formatter := Refactory.Browser.RBFormatter new.	^((EnumerationSetting		keys: #(#low #medium #high)		choices: (Array				with: formatter lowVerticalSpacing				with: formatter mediumVerticalSpacing				with: formatter highVerticalSpacing)		labels: (Array				with: #Compact &lt;&lt; #IDE &gt;&gt; 'Compact'				with: #Moderate &lt;&lt; #IDE &gt;&gt; 'Moderate'				with: #Expansive &lt;&lt; #IDE &gt;&gt; 'Expansive'))			on: Refactory.Browser.RBFormatter			aspect: #currentVerticalSpacingLevel)		default: #medium;		label: #VerticalSpacing &lt;&lt; #IDE &gt;&gt; 'Vertical Spacing';		helpText: #FormatterVerticalSpacingHelpText &lt;&lt; #IDE					&gt;&gt; 'Allows you to choose the degree to which the formatter inserts blank lines.'</body><body package="Browser-BrowserUI" selector="formatter50TerminatorFrequency">formatter50TerminatorFrequency	&lt;setting: #(#tools #formatter #terminatorFrequency)&gt;	| formatter |	formatter := Refactory.Browser.RBFormatter new.	^((EnumerationSetting		keys: #(#low #medium #high)		choices: (Array				with: formatter lowTerminatorFrequency				with: formatter mediumTerminatorFrequency				with: formatter highTerminatorFrequency)		labels: (Array				with: #OnlyWhenNecessary &lt;&lt; #IDE &gt;&gt; 'Only when Necessary'				with: #EndOfMethod &lt;&lt; #IDE &gt;&gt; 'End of Method'				with: #EachStatement &lt;&lt; #IDE &gt;&gt; 'Each Statement'))			on: Refactory.Browser.RBFormatter			aspect: #currentTerminatorLevel)		default: #low;		label: #TerminatorFrequency &lt;&lt; #IDE &gt;&gt; 'Terminator Frequency';		helpText: #FormatterTerminatorFrequencyHelpText &lt;&lt; #IDE					&gt;&gt; 'Allows you to choose the degree to which the formatter inserts end of statement periods.'</body><body package="Browser-BrowserUI" selector="formatterPage">formatterPage	"Why doesn't the useRadioButtons thing work?"	&lt;settingsPage: #(#tools #formatter)&gt;	^(ModularSettingsPage new)		label: #Formatter &lt;&lt; #IDE &gt;&gt; 'Formatter';		icon: (ListIconLibrary visualFor: #formatterSettings);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(#tools #formatter)).</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-browser</category><body package="Browser-BrowserUI" selector="warnings10ShowWarningsForUncommentedObjects">warnings10ShowWarningsForUncommentedObjects	&lt;setting: #(tools warnings showWarningsForUncommentedObjects)&gt;	^(BooleanSetting on: #{Refactory.Browser.ClassNavigatorPart.ShowWarningsForUncommentedObjects})		default: true;		label: #WarnAboutUncommentedObjects &lt;&lt; #labels &gt;&gt; 'Mark classes and namespaces without comments';		helpText: #WarnAboutUncommentedObjectsHelpText &lt;&lt; #dialogs &gt;&gt; 'When set, classes and namespaces without comments are marked with a warning icon in the browser class list.'</body><body package="Browser-BrowserUI" selector="warnings20ShowWarningsForUncommentedComponents">warnings20ShowWarningsForUncommentedComponents	&lt;setting: #(tools warnings showWarningsForUncommentedComponents)&gt;	^(BooleanSetting on: #{Refactory.Browser.PackageListElement.ShowWarningsForUncommentedComponents})		default: true;		label: #WarnAboutUncommentedPundles &lt;&lt; #labels &gt;&gt; 'Mark packages and bundles without comments';		helpText: #WarnAboutUncommentedPundlesHelpText &lt;&lt; #dialogs &gt;&gt; 'When set, packages and bundles without comments are marked with a warning icon in the browser package list.'</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>DatabaseConnectionInformation</name><environment>Store</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pundle dbIdentifier dbTrace dbTimestamp changeSet versionString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>AbstractBrowserEnvironment</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label searchStrings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-Environments</package></attributes></class><class><name>BrowserEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>ClassEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instanceBehaviorNames classBehaviorNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>BrowserApplicationModel</name><environment>Refactory.Browser</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>Parcel</name><environment>Kernel</environment><super>Kernel.CodeComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definedObjects definedClasses definedBindings classSelectors namedObjects dirty loaded </inst-vars><class-inst-vars>parcels classParcelMap parcelFileInfoCache parcelFileDirectoryCache dependents </class-inst-vars><imports></imports><category>System-Code Components</category><attributes><package>System-Code Components</package></attributes></class><class><name>RBProgramNode</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent comments </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parser</category><attributes><package>Browser-Parser</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>ProtocolItemNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>protocolHolder listSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>VisualPart</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container eventHandlers properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>Text</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars>string runs </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Panel</name><environment>UI</environment><super>Graphics.CompositePart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layoutAlgorithm isInUpdate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>ProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>SelectorNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>TextStream</name><environment>Core</environment><super>Core.WriteStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lengths emphases currentEmphasis runStartPosition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Streams</category><attributes><package>Collections-Streams</package></attributes></class><class><name>ProtocolEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetClass protocols </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>AlphaBlendedIcons</name><environment>Smalltalk</environment><super>Core.Assets</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Resources</package></attributes></class><class><name>RBActionDispatcher</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Commands</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>SelectorProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>VariableEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instanceVariables instanceVariableReaders instanceVariableWriters selectorCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>Part</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>Window</name><environment>Graphics</environment><super>Graphics.DisplaySurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputOrigin creationOrigin sensor iconic windowType effectiveWindowType statusLineHeight allowsStatusLine mapped eventHandlers windowManager </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>RBMessageNode</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBValueNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>receiver selector selectorParts arguments </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parser</category><attributes><package>Browser-Parser</package></attributes></class><class><name>Navigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environment state dispatcher parts partsDictionary menus showOnlyFiltered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>PartListAbstractInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>driver segmentListHolder fieldListHolder textHolder dragController undoHistory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>XChangeSet</name><environment>Store</environment><super>Core.IdentityDictionary</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>other properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>MethodNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>HierarchyPundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definingPackage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>PundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.HierarchyPundleNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>ClassNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>PundleEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bundleNames packageNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>SelectorEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classSelectors metaClassSelectors initializers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>SharedVariableProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>SharedVariableNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>TextAttribute</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label text textBlock definition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class></st-source>