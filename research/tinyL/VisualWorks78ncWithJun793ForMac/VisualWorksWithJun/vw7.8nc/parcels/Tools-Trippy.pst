<?xml version="1.0"?><st-source><!-- Name: Tools-TrippyNotice: Copyright © 2010-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: Tools-Trippy provides a greatly enhanced inspector/object-exploration tool, called Trippy. In addition to the traditional inspector functionality, Trippy includes the following features.- Presents an inspected object from multiple perspectives, such as the "logical" view of an OrderedCollection as a sequence of elements, versus the "physical" view of it as a Smalltalk object with all its named and indexed variables;- Provides a view showing all of the object's methods, with selective inclusion of inherited methods. This allows to easily see all messages an object understands. In this view you can also edit and add methods, much like in any browser.- Navigation through the "neighborhood" of an object being inspected, such as other elements of a collection containing the object, or the hierarchy of visual components including the object.- Navigation paths through objects are remembered. "Next" and "previous" web browser-like buttons and a hierarchical visit history are available to quickly travel to any of the already visited objects.- Drag-and-drop copying and moving, to copy objects between variables, add objects to collections, rearrange elements in collections, and add objects to workspaces as local variables.- Most objects manipulations are undoable, with a multi-level undo.- The inspector includes a separate evaluation pane, the content of which is independent of the selection in the inspector and can be shared by all inspectors.- Multiple selection is available to easily view or change many fields or elements of an object at once.You can learn by exploring the inspector options, or read the Trippy Walkthrough on the Cincom Smalltalk Wiki. The original Inspector remains in the image. If, for some reason, you want to revert to using it as the default inspector, evaluate the expression:	Tools.Trippy.Inspector useSimpleInspector: trueDbIdentifier: bear73DbTrace: 311724PackageName: Tools-TrippyParcel: #('Tools-Trippy')ParcelName: Tools-TrippyPrintStringCache: (7.8 - 1003,smichael)Version: 7.8 - 1003Date: 9:15:09 AM March 11, 2011 --><time-stamp>From VisualWorks®, 7.8 of March 4, 2011 on March 11, 2011 at 9:15:09 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Trippy</name><environment>Tools</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></name-space><class><name>Inspector</name><environment>Tools.Trippy</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object container </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.Inspector</class-id><body>This is an abstract superclass of inspectors. An inspector is a module that plugs into a Navigator to present a view of a single object.  The navigator creates it and tells what object to inspect.Inspector class also provides a set of methods for safely interrogating the state of objects. This is an important service to provide for Inspector components, so that we do the "right" thing with regard to proxies and other objects which are sensitive to what API's they expose. See the class side protocols: 'utilities-printing' and 'utilities-object queries'.Subclasses must implement the following messages:	actions		copyStateTo:	private		refreshInstance Variables:	container	&lt;InspectorHolder | InspectorShell&gt;	the object that provides navigation services for the inspector	object	&lt;Object&gt;  The object being inspected.Shared Variables:	CanonicalBasicSizeMethod 	&lt;CompiledMethod&gt; We keep our own compiled version of the primitive method for determining an object size. We can then invoke this method on an inspected object without regards to whether it actually supports the API itself or not.	CanonicalClassMethod 		&lt;CompiledMethod&gt; We keep our own compiled version of the primitive method for determining the class of an object.	CanonicalInstVarAtMethod 	&lt;CompiledMethod&gt; We keep our own compiled version of the primitive method for fetching an inst var by index.	CanonicalIsImmutableMethod 	&lt;CompiledMethod&gt; We keep our own compiled version of the primitive method for determining an objects imutability.</body></comment><class><name>PartListAbstractInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>driver segmentListHolder fieldListHolder textHolder dragController undoHistory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.PartListAbstractInspector</class-id><body>A part list inspector presents an object as a collection of parts, one or more of them selectable at a time. As the number of parts can be very large, an inspector can support two interface styles. One has a single list of parts, the other uses two lists to break parts into smaller selectable segments. The behavior that depends on the type of the currently attached interface is outsourced to a separate object called a 'driver'. The driver for a single-list interface is an instance of PageDriver; the driver for a two-list interface is a SegmentedPageDriver. A driver may register itself as a dependent of some aspects of its inspector.This is an abstract class that implements some behavior reusable by subclasses and leaves parts of it up to subclasses to implement.  An object is treated as a sequence of parts.  A part is an instance of a subclass of Part. An inspector is responsible for generating the list of parts of the object it is open on. Becase the list can potentially be very long, the protocol for decomposing the object includes three messages that together don't require the complete list to be built.  The methods are in the 'decomposing' protocol:	partCount	partAt: anInteger	partsAtAll: integerCollectionIndividual parts are responsible for retrieving their values from the object, formatting values for display, etc.The following messages are used to determined whether and what parts are currently selected in the part list.	hasSingleSelection -- True if exactly one part is selected.	hasMultiSelection -- True if more than one part is selected.	hasSelection -- True if at least one part is selected = hasSingleSelection OR hasMultiSelection.	selections -- Answer a sequence of selected parts, potentially empty.	selection -- If a single part is selected, answer it. Fail otherwise.These messages are used to change the selection:	select: aPart	selectAll: partCollection</body></comment><class><name>DictionaryInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>linearizedParts valueOrKeyHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.DictionaryInspector</class-id><body>An inspector for objects that support the following interface:	size -- Answering the number of elements the object contains.	keys -- Answering a collection of &lt;size&gt; elements.	at: -- Taking one of the elements of &lt;keys&gt; collection and returning an object.	at:put: -- Taking one of the elements of &lt;keys&gt; collection and any object.Typical clients are Dictionaries and KeyedCollections.Instance Variables:	linearizedParts	&lt;Array of: KeyedElement&gt;	Parts representing the key-value pairs of the object, arranged in the keys' displayString lexicographic order.	valueOrKeyHolder	&lt;ValueHolder with: &lt;#key | #value&gt;&gt;	Whether the inspector should display the value or the key of the selected element.</body></comment><class><name>PoolDictionaryInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.DictionaryInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.PoolDictionaryInspector</class-id><body>This is essentially a dictionary inspector with NameSpace-specific menu actions like 'browse references'.</body></comment><class><name>Navigator</name><environment>Tools.Trippy</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visit shell inspector inspectorClasses inspectorCache inspectorHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.Navigator</class-id><body>A navigator is a container interface for an inspector. An inspector displays an individual object, while a navigator provides a wider context of objects to be displayed, as well as manages the choice of inspectors that can display a given object. For example, a hierarchy navigator displays a hierarchy of objects. When a hierarchy element is selected, the navigator determines what inspectors can be used to display it, updates the view selection tabs accordingly, and installs one of those inspectors to actually display the object.Instance Variables:	visit	&lt;Visit&gt;	The current object's visit. As the user changes objects within the navigator, visits are updated to reflect the travel.	shell	&lt;InspectorShell&gt;	The parent inspector shell.	inspector	&lt;Inspector&gt;	The currently installed inspector.	inspectorClasses	&lt;Array of: Class&gt;	Classes of inspectors that can present the current object.	inspectorHolder	&lt;SelectionInList&gt;	The model of the view selection tab control.</body></comment><class><name>OwnerNavigator</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ownerInspector fieldListHolder vicinity </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.OwnerNavigator</class-id><body>This one's navigation context is the owner object, that is parts of the object we were inspecting before diving into the current object.  This navigator is what takes care of Explore&gt;Forward and Explore&gt;Backward menu settings.Instance Variables:	ownerInspector	&lt;PartListAbstractInspector&gt;	The owner inspector (see above) that supplies us with the list of parts of the owner object. These parts are the context for navigation.	fieldListHolder	&lt;SelectionInList&gt;	The model of the field list.	vicinity	&lt;#owner | #self&gt;	#owner if this navigator does "Explore&gt;Backward", or #self if it does "Explore&gt;Forward". This affects the menu check marks, and also what happens when we zoom into a part.</body></comment><class><name>InspectorIcons</name><environment>Tools.Trippy</environment><super>AlphaBlendedIcons</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.InspectorIcons</class-id><body></body></comment><class><name>PageDriver</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>page </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.PageDriver</class-id><body>Instances of this class are plug-ins that work in concert with LinearInspectorPages to support two apperances of those pages: unsegemented and segmented. A driver encapsulates the differences that exist between those appearance modes.This class provides the behaviour of unsegmented pages, i.e. those that present all keys in a single list, assuming there are not too many of them.Instance Variables:	page	&lt;LinearInspectorPage&gt;  The page we are helping.</body></comment><class><name>SegmentedPageDriver</name><environment>Tools.Trippy</environment><super>Tools.Trippy.PageDriver</super><private>false</private><indexed-type>none</indexed-type><inst-vars>segmentSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.SegmentedPageDriver</class-id><body>This is a page driver (see explanation in the superclass) that provides the behaviour of segmented pages, i.e. those that break keys into segments, or pages, and only show the keys of the currently selected page(s).Instance Variables:	segmentSize	&lt;Integer&gt;  The number of keys per segment. Last segment typically contains fewer keys, of course.</body></comment><class><name>Part</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.Part</class-id><body>Instances of Part are used by PartListAbstractInspector and subclasses to represent elements of the left hand side list in the inspector. A part knows its object and is responsible for obtaining its value (if it has a value as some parts don't), setting it (if the part is not read-only), supplying the text to be displayed in the inspector's right hand side pane.Instance Variables:	object	&lt;Object&gt;	The Whole.</body></comment><class><name>TextAttribute</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label text textBlock definition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.TextAttribute</class-id><body>This is a part that does not have a value that can be copied or set. It only provides a text that can be displayed in the inspector's right hand side pane, but cannot be dove into.Instance Variables:	label	&lt;String | UserMessage&gt;	The text used to identify the part in the UI.	text	&lt;Text | nil&gt;	The part text, unless generated dynamically.	textBlock	&lt;BlockClosure | nil&gt;	The block that generates the part text. If nil, the text is static and is stored in the 'text' instance variable.	definition &lt;MethodDefinition&gt; the method definition from whence this attribute came from</body></comment><class><name>Collaborator</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label object objectBlock varName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.Collaborator</class-id><body>A sequence of Collaborators can be returned by any object in response to the #inspectorCollaborators message. It lists objects that are likely to be interesting to the user inspecting the receiver.  For example, a View might return its Model and Controller as collaborators. Collaborators are added to the "Go" menu of the inspector.Instance Variables:	label	&lt;String | UserMessage&gt;	Description of the collaborator, used in the UI--for example, as a menu item label.	object	&lt;Object | nil&gt;	The collaborator object, if not determined dynamically by 'objectBlock'.	objectBlock	&lt;BlockClosure | nil&gt;	The block returning the collaborator object when evaluated. If nil, the collaborator is assigned statically and stored in the 'object' variable.	varName	&lt;String | nil&gt;	If the collaborator is stored in one of the instance variables of the receiver, this holds the name of the variable to help the inspector better keep track of where we are.</body></comment><class><name>UndoAction</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>savedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.UndoAction</class-id><body>This is an abstract superclass of a group of subclasses representing undo editing actions in inspector pages. Whenever a change is done on a page, the page creates an undo action and sticks it in the undo history of that page.  This is how undo works.Subclasses must implement the following messages:	accessing		explanation		undoIn:Instance Variables:	savedValues	&lt;ExportBundle&gt;  The page typically has to save information about objects removed from the page, or values replaced in the page.  The information is saved as an ExportBundle for now.  When we roll OrderedDictionaries in, we can fix everything to use OrderedDictionary instead.</body></comment><class><name>InsertionUndo</name><environment>Tools.Trippy</environment><super>Tools.Trippy.UndoAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newKeys </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.InsertionUndo</class-id><body>InsertionUndo saves the information necessary to undo insertion of new elements into an object.Instance Variables:	newKeys	&lt;Collection of: Object&gt;	A collection of objects identifying the inserted parts. The kind of the keys depends on the inspector that creates the undo, since it is the inspector that will later execute the undo is necessary. The receiver is only responsible to preserving the collection, which is treated as an opaque handle.</body></comment><class><name>NewDerivedFieldDialog</name><environment>Tools.Trippy</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classHolder nameHolder packageHolder classes expression illegalNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.NewDerivedFieldDialog</class-id><body>I prompt the user for information needed to define a new DervidAttribute object.Instance Variables:	classes	&lt;Sequence of: Class&gt;	orginal target class and all its superclasses	classHolder	&lt;ValueModel&gt;	which class to place method on	expression &lt;String&gt; the body of code to use as the DerivedAttribute valueBlock	illegalNames &lt;Collection: String&gt; names already taken in the inspector and therefore redundant	nameHolder	&lt;ValueModel with: String&gt;	name of derived attribute (logic included in dialog to avoid ill formed names)	packageHolder	&lt;ValueModel with: PackageModel&gt;	which pacakge to place method in	</body></comment><class><name>SequenceInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.SequenceInspector</class-id><body>An inspector for collections that support the resizeable sequence interface:	size -- Answers the number of element in the sequence. The order of elements is preserved.	at: -- Takes an Integer in the 1..&lt;size&gt; range and answers an element at that position.	at:put: -- Takes an Integer in the 1..&lt;size&gt; range and an object and places the object at that position.	add: -- Appends the argument object at the end, increasing the size by one.	add:beforeIndex: -- Inserts the argument object at the specified position so that all other objects are "pushed back" in the collection.	removeAtIndex: -- Removes the element at the specified index, reducing the collection size by one.</body></comment><class><name>ArrayInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.SequenceInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.ArrayInspector</class-id><body>An inspector for unresizeable sequences, that is collections that allow all messages listed in the SequenceInspector's comment except:	add:	add:beforeIndex:	removeAtIndex:The inspector "cheats" to make these unresizeable sequences appear resizeable.</body></comment><class><name>UndoActionGroup</name><environment>Tools.Trippy</environment><super>Tools.Trippy.UndoAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.UndoActionGroup</class-id><body>A sequence of other UndoActions that will all be applied on order if this action is applied.Instance Variables:	actions	&lt;SequenceableCollection of: UndoAction&gt;	Grouped actions.</body></comment><class><name>SetInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>linearized </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.SetInspector</class-id><body>An inspector for objects supporting the set interface, that is messages	size	collect:	remove:	add:Instance Variables:	linearized	&lt;Array of: SetElements&gt;	Elements of the set, arranged in their displayStrings' increasing lexicographic order.</body></comment><class><name>ObjectSegment</name><environment>Tools.Trippy</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstIndex lastIndex firstPart lastPart </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.ObjectSegment</class-id><body>When an object is broken into groups of parts to keep the list of parts of a reasonable size, instances of this class represent those groups.Instance Variables:	firstIndex	&lt;Integer&gt; Index of the first element of this segment within the page's sequence of keys.	lastIndex	&lt;Integer&gt;  Ditto of the last element.	firstKey	&lt;Integer&gt; Key of the first element, cached here to allow printing.	lastKey	&lt;Integer&gt;  Ditto of the last element.</body></comment><class><name>DragController</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>page view viewState </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.DragController</class-id><body>Drag controllers are things attached to inspector pages to take care of drag-and-drop related operations. This way drag and drop behaviour is pluggable and is not tied to the page inheritance hierarchy structure. This is an abstract superclass of a group of actual drag controllers.In the idea world this things would not be necessary and list views and other widgets could control drag and drop in a flexibly enough way.Subclasses must implement the following messages:	private		doDrop:		showDropFeedbackFor:Instance Variables:	page	&lt;InspectorPage&gt;  The page for which drag and drop is controlled.	view	&lt;SelectionView&gt;  The list view on the page where the drag/drop is happening.	viewState	&lt;Object&gt;  Just anything a controller needs to store to save the state of the view before we started providing visual drag-and-drop feedback in it.</body></comment><class><name>ReplaceOnlyDragController</name><environment>Tools.Trippy</environment><super>Tools.Trippy.DragController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.ReplaceOnlyDragController</class-id><body>This is a drag-and-drop controller for inspectors that support dropping things on top of part but not inserting new things between parts. For example, a basic inspector.</body></comment><class><name>NamedVariable</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name class index protected </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.NamedVariable</class-id><body>This part represents a named instance variable of an object.Instance Variables:	name	&lt;String&gt;	The name of the variable	class	&lt;ClassDescription&gt;	The class where the variable is defined (or a subclass of one)	index	&lt;Integer&gt;	The index of the variable in the index (future argument to #instVarAt:)	protected &lt;Boolean&gt; Does this variable require warnings and confirmations before allowing changes to it (also indicates a change in the icon to show the shield</body></comment><class><name>TextEditorInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.TextEditorInspector</class-id><body>The inspector for Text and String subclasses, with a single text editor window. Accepted text is coerced to the original class of the inspected object and then becomes the inspected object.Instance Variables:	textHolder	&lt;ValueHolder with: String&gt;	The model for the text editor</body></comment><class><name>HierarchyNavigator</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hierarchy originalVisit hierarchyHolder root </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.HierarchyNavigator</class-id><body>This navigator displays a hierarchy of objects, such as a hierarchy of visual components or a class hierarchy. One of the objects is the "original"; that is the one that was the entry point into the hierarchy.  For example, you find a CompositePart and select "Explore&gt;Component Hierarchy". The hierarchy will include the full component tree with the root in the ScheduledWindow, but the CompositePart is the entry point. The inspector area always shows the currently selected hierarchy member, and the visit tree is updated as selections are made.  New visits into the hierarchy members are registered as children of the original element's visit.Instance Variables:	hierarchy	&lt;Hierarchy&gt;	The Hierarchy (see the class) representing the hierarchy we navigate.	originalVisit	&lt;Visit&gt;	Visit of the object which was the entry point of the hierarchy (see above).	hierarchyHolder	&lt;IndentedTreeSelectionInList&gt;	The model of the hierarchy view.	root	&lt;Object&gt;	The root object of the hierarchy.</body></comment><class><name>VisitTreeNavigator</name><environment>Tools.Trippy</environment><super>Tools.Trippy.HierarchyNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>startingVisit </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.VisitTreeNavigator</class-id><body>The visit tree navigator displays the tree of Visits of the container inspector shell, thus showing all objects visited in this inspector session.  While this is essentially a hierarchy navigator, there are two important differences between it and the stock hierarchy navigator:1. The objects displayed in the hierarchy list are Visits, yet objects inspected are objects of those Visits rather than Visits themselves.2. Selecting a hierarchy element does not change the Visit tree, since navigation through the visit tree is "meta-navigation" we don't want to keep track of.3. (so it's three important differences) Zooming in (double-clicking) on a hierarchy element does not change the visit tree but changes the trail of objects used by the shell for backward/forward movement.Instance Variables:	startingVisit	&lt;Visit&gt;	The visit and originalVisit inherited from the parent are ignored and are dummy objects not hooked up to the actual visit tree of the inspector shell. This variable keeps onto the visit of the object we started to review the history from, so that we can still make the right initial selection when first opening the navigator.</body></comment><class><name>Visit</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object owner children </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.Visit</class-id><body>This is a record of visiting an object. Typically when we visit an object, we get there from some other object--that is, some other visit.  This is the owner visit.  The owner visit may be nil in some cases--for example, when the current visit is the root of the visit hierarchy, that is, the object we originally opened the inspector on. Starting from an object, we may go visit some other related objects.  Those would be child visits.Instance Variables:	object	&lt;Object&gt;	The object we are visiting.	owner	&lt;Visit | nil&gt;	The owner visit or nil.	children	&lt;OrderedCollection of: Visit&gt;	Visits that this object is the owner of.</body></comment><class><name>Clipboard</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parts values zeroStandIn </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.Clipboard</class-id><body>Clipboard implements a clipboard that can hold collections of objects copied from inspector pages. Objects are associated with their keys so they can be properly inserted when pasted as a group into another object. The clipboard normally holds onto the objects weakly so they can "fall off" the clipboard if nothing else holds onto them. However, it is possible to "lock" the clipboard so it creates an additional set of strong links to its contents.Instance Variables:	parts	&lt;OrderedCollection of: Part&gt;  Collection of the most recently pasted parts.	values	&lt;WeakArray of: Object&gt;  Values of the most recently pasted parts (since parts normally fetch values from their objects, captured values have to be stored separately).	zeroStandIn	&lt;Object&gt;  A unique object that replaces zeros when they are pasted , to distinguish "real" pasted zeros from those that result from objects getting GCed.Shared Variables:	Default	&lt;Clipboard&gt;  The clipboard instance shared by all inspectors.</body></comment><class><name>PartVisit</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Visit</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ownerInspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.PartVisit</class-id><body>This is a special (and the most common) case of visiting an object, when the object we visit is a part (an instance variable or a collection element) of some other object. In this case, what we remember as the 'object' is really the part of the owner we are visiting rather than the object itself.  The object is supplied by the part on demand, thus avoiding any unwanted caching. This is important since the value of a part may change behind the scenes at any time.To allow inspecting siblings, we also need to remember the owner inspector, that is the inspector which was displaying the part we are visiting.  It can supply us with the full list that the currently visited part was a member of.Instance Variables:	ownerInspector	&lt;Inspector&gt;</body></comment><class><name>InspectorShell</name><environment>Tools.Trippy</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>origin trail current installedNavigator menuBarHolder evaluationPaneVisible textHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.InspectorShell</class-id><body>This is the top-level window of the inspector. Beneath the surface, an inspector is composed of three collaborating applications: 1) A Shell, an instance of InspectorShell, provides the top-level interface elements such as the menu bar and the tool bar, and also represents the object exploration session by keeping track of the history of object visits. 2) A Navigator is a subapplication of the shell which defines the current navigation context--that is, objects we can easily choose for inspection.  It also manages the possible inspectors that can be used for a given object 3) An Inspector is a subapplication of Navigator which takes care of showing the details of a particular *single* object, in a particular way.For example, imagine we looks at a hierarchy of visual parts making up a window.  In this case, the top-level InspectorShell contains a HierarchyNavigator that shows all the members of a hierarchy. When a member is selected, the navigator updates the tab control to list all the inspectors (subclasses of Inspector, to be precise) that can be used to display the selected member. When an inspector class is selected, the navigators creates an instance of the selected class and installs it as the current Inspector.Instance Variables:	origin	&lt;Visit&gt;	The root of the object visit tree for this inspector session. In other words, this is the visit of the object this inspector has been opened on first.	trail		&lt;OrderedCollection of: Navigator&gt;	The navigators we go through with Back/Forward buttons.	current	&lt;Integer&gt; The index of the current visit of the trail.	installedNavigator	&lt;Navigator&gt; The navigator currently used.	menuBarHolder	&lt;ValueHolder with: Menu&gt;  The model of the menu bar of the inspector window.	evaluationPaneVisible	&lt;Boolean&gt;  Whether the evaluation pane is currently visible; affects widget layout.	textHolder	&lt;ValueHolder with: Text&gt;  Evaluation pane's modelShared Variables:	SharedTextHolder	&lt;ValueHolder with: Text&gt;  The holder on text that all evaluation panes share as their model so the code may be persistent within the image.</body></comment><class><name>DerivedAttribute</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label value valueBlock definition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.DerivedAttribute</class-id><body>An instance can be returned by any object as an element of a collection of extra attributes (see #inspectorExtraAttributes message). It identifies a part of the object which is not a physical attribute (not a named or indexed variable) but can be calculated and is important enough to show it together with "real" attributes.Instance Variables:	label	&lt;String | UserMessage&gt;	The text used by the UI to identify this attribute.	value	&lt;Object | nil&gt;	The value of the attribute if not calculated dynamically.	valueBlock	&lt;BlockClosure | nil&gt;	The block to calculate the value of the attribute. If nil, the value is static and is stored in the 'value' instance variable.	definition &lt;MethodDefinition&gt; the method definition from whence this attribute came from</body></comment><class><name>VisualComponentProxy</name><environment>Tools.Trippy</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actualComponent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.VisualComponentProxy</class-id><body>This is a helper class for the VisualComponentInspectorPage. It allows displaying a preview of any visual component without ripping it out of the hierarchy it normally belongs to, by pretending to be a visual component itself and delegating the important messages to the real visual component.Instance Variables:	actualComponent	&lt;VisualComponent&gt;  The VisualComponent being previewed.</body></comment><class><name>IndexedVariable</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>index </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.IndexedVariable</class-id><body>This part represents a part of an object that can be accessed by sending the object #basicAt: and #basicAt:put: messages.Instance Variables:	index	&lt;Integer&gt;	The part index</body></comment><class><name>RemovalUndo</name><environment>Tools.Trippy</environment><super>Tools.Trippy.UndoAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.RemovalUndo</class-id><body>This action undoes removal of object parts. It remembers the removed parts and inserts them back if applied.</body></comment><class><name>InstVarRemovalUndo</name><environment>Tools.Trippy</environment><super>Tools.Trippy.RemovalUndo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definingClasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.InstVarRemovalUndo</class-id><body>This removal undo action remember defining classes of instance variables removed from an instance, so they can be put back into the right places.Instance Variables:	definingClasses	&lt;Array of: Class&gt;	An array "parallel" to the part collection stored by the superclass, remembering the defining class of a respective part in the part array.</body></comment><class><name>BasicInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fixedFields sortSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.BasicInspector</class-id><body>An inspector showing an object's instance variables, named and indexed. An object can add "extra attributes" to the list, such as 'source' and 'bytecode' of CompiledCode or 'comment' of a class.Instance Variables:	fixedFields	&lt;Array of: Part&gt;	Parts representing extra attributes and named instance variables. Parts for indexed variables are cheap to create and therefore created on demand.	sortSelector &lt;Symbol&gt; 	Used to sort the list of named instance variables, either by index (#lessByIndexThan:) or by name (#lessByNameThan:)</body></comment><class><name>PreviewingInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.BasicInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.PreviewingInspector</class-id><body>This inspector page can present any object that understands #displayOn: and #preferredBounds messages. The inspector page includes a preview area showing the object.</body></comment><class><name>OverriddenMethodDefinition</name><environment>Tools.Trippy</environment><super>Tools.MethodDefinition</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.OverriddenMethodDefinition</class-id><body>These method definitions represent superclass methods in a method list of a behavior inspector that have been overriden by other methods deeper down the inheritance chain of the class we are looking at.</body></comment><class><name>SetElement</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.SetElement</class-id><body>This part represents an element of a set, or some other unkeyed collection where the only thing that is known is whether an object is in the collection or not.Instance Variables:	element	&lt;Object&gt;</body></comment><class><name>BehaviorInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textHolder sideHolder protocolListHolder methodListHolder inheritanceStop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.BehaviorInspector</class-id><body>This is an unusual inspector, which is actually a browser on the class of the inspected object. It is here both as an example of a custom Inspector pluggable into the framework, and as a stand-in for an embedded browser until we have a browser that can actually be reused inside other interfaces.There is an important difference between how this inspector treats classes vs other objects.  For non-class objects, the inspector shows instance-side and class-side methods. Instance methods are initially displayed, and "self" is bound to the inspected object if the instance/class switch is on the instance side, and to the class of the inspected object if the switch is on the class side.For class objects, the inspector preserves the typical browser perspective.  That is, the straighforward approach would place methods for messages that can be sent to the inspected object (a class) on the instance side, and methods for messages that can be sent to the class of the object (a metaclass) on the class side. This would be confusing because methods visible in that case on the instance side would be the methods we see in regular browsers on the class side.  For example, if we inspected "Model", the inspector would show methods of the Model class on the instance side and instance methods of Metaclass on the class side.  Instead, the inspector retains the browser perspective and shows instance and class methods of the Model class, with class side pre-selected. "self" in that case is bound to the inspected object (a class) if the class swith is selected, and to nil if the instance side is selected.</body></comment><class><name>NullNavigator</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.NullNavigator</class-id><body>This is a navigator focused on a single object and not actually providing any navigation options. It does take care of view switches. Or in other words, it as a couch potato with a remote control.  This is what sits between an inspector shell and an inspector when the "Explore" menu is set to "Off".</body></comment><class><name>Hierarchy</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id label root parentBlock childrenBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.Hierarchy</class-id><body>Instances of this class can be returned by any object from the #inspectorHierarchies message to identify hierarchies the object is a member of.Instance Variables:	id	&lt;Symbol&gt;	Identifier of a hierarchy, used internally by the inspector to tell hierarchies apart. The only requirement is that hierarchies returned together by a single object all have different ids.	label	&lt;String | UserMessage&gt;	The text used by the UI to describe this hierarchy, such as 'Component'.	root	&lt;Object | nil&gt;	The root of the hierarchy. If the root is nil, the inspector will try to discover the root by chasing parent pointers from the initial object.	parentBlock	&lt;BlockClosure&gt;	A block which, given an object, returns a parent of that object in the hierarchy, or nil if the object has no parent or the parent could not be determined.	childrenBlock	&lt;BlockClosure&gt;	A block which, given an object, returns a collection of children of that object in the hierarchy. If the object has no children, either an empty collection or a nil are acceptable.</body></comment><class><name>InsertReplaceDragController</name><environment>Tools.Trippy</environment><super>Tools.Trippy.DragController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.InsertReplaceDragController</class-id><body>InsertReplaceDragController implements drag policy for the lists where it makes sense to both drop objects on top of elements and between elements.</body></comment><class><name>ReplacementUndo</name><environment>Tools.Trippy</environment><super>Tools.Trippy.UndoAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.ReplacementUndo</class-id><body>This action undoes assignment of new values to parts. It remembers the parts assigned to and their old values and restores them if applied.</body></comment><class><name>PartSnapshot</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>part value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.PartSnapshot</class-id><body>This is a snapshot of a part state. A regular part does not store its current value and instead gets it from the object each time it is needed. A snapshot is there for cases when it is necessary to remember the current part value because it may change in future.Instance Variables:	part	&lt;Part&gt;	The original part.	value	&lt;Object&gt;	The remembered part value.</body></comment><class><name>KeyedElement</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.KeyedElement</class-id><body>A part of an object accessible by sending messages #at: and #at:put:. Elements of both Dictionaries and Arrays are keyed elements.Instance Variables:	key	&lt;Object&gt;	The #at: argument used to retrieve the part value.</body></comment><class><name>Action</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label actionBlock enablementBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.Action</class-id><body>A sequence of Actions can be returned by any object in response to the #inspectorActions message. Each Action represents a user-level action this object can perform, and is presented by the inspector as menu choices.Instance Variables:	label	&lt;String | UserMessage&gt;	Used by the UI to describe this action.	actionBlock	&lt;BlockClosure&gt;	A 0-argument block evaluated when the user invokes the action.	enablementBlock	&lt;BlockClosure&gt;	A 0-argument block evaluated by the inspector to determine if the action is available.</body></comment><class><name>InspectorHolder</name><environment>Tools.Trippy</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.InspectorHolder</class-id><body>InspectorHolder is used when a single inspector has to be embedded within another interface, without any fancy things like diving or navigation. In that case, InspectorHolder is embedded, and the inspector is placed inside the holder. The holder provides the interface an inspector expects from its container application, thus not requiring anything special from the actual application that embeds the inspection.Instance Variables:	inspector	&lt;Inspector&gt;</body></comment><class><name>SelfPart</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><comment><class-id>Tools.Trippy.SelfPart</class-id><body>My purposed is to simply display the object itself and provide the stylized 'self' label and appropriate icons.</body></comment><shared-variable><name>SharedTextHolder</name><environment>Tools.Trippy.InspectorShell</environment><private>false</private><constant>false</constant><category>evaluation</category><initializer>String new asValue</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>EvaluationPaneWasLastShown</name><environment>Tools.Trippy.InspectorShell</environment><private>false</private><constant>false</constant><category>evaluation</category><initializer>false</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>Default</name><environment>Tools.Trippy.Clipboard</environment><private>false</private><constant>false</constant><category>singleton</category><initializer>nil</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>PageSize</name><environment>Tools.Trippy</environment><private>false</private><constant>false</constant><category>Defaults</category><initializer>200</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>UseSimpleInspector</name><environment>Tools.Trippy.Inspector</environment><private>false</private><constant>false</constant><category>preferences</category><initializer>false</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>CanonicalBasicSizeMethod</name><environment>Tools.Trippy.Inspector</environment><private>false</private><constant>false</constant><category>CanonicalMethodImplementations</category><initializer>(CompiledMethod		withPrimitive: 162		numArgs: 1		ifFail: [:error | 0]) mclass: nil; yourself</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>CanonicalIsImmutableMethod</name><environment>Tools.Trippy.Inspector</environment><private>false</private><constant>false</constant><category>CanonicalMethodImplementations</category><initializer>(CompiledMethod		withPrimitive: 1063		numArgs: 0		ifFail: [:error | false]) mclass: nil; yourself</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>CanonicalInstVarAtMethod</name><environment>Tools.Trippy.Inspector</environment><private>false</private><constant>false</constant><category>CanonicalMethodImplementations</category><initializer>(CompiledMethod		withPrimitive: 173		numArgs: 2		ifFail: [:error | nil]) mclass: nil; yourself</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>CanonicalClassMethod</name><environment>Tools.Trippy.Inspector</environment><private>false</private><constant>false</constant><category>CanonicalMethodImplementations</category><initializer>(CompiledMethod		withPrimitive: 111		numArgs: 0		ifFail: [:error | Core.Error raiseErrorString: (#errPrimitiveFailed &lt;&lt; #dialogs &gt;&gt; 'a primitive has failed') asString]) mclass: nil; yourself</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>MaxMenuEntryWidth</name><environment>Tools.Trippy.BehaviorInspector</environment><private>false</private><constant>false</constant><category>Menus</category><initializer>60</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>MaxSelectorSubMenuEntries</name><environment>Tools.Trippy.BehaviorInspector</environment><private>false</private><constant>false</constant><category>Menus</category><initializer>20</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><shared-variable><name>PrefersNullPackage</name><environment>Tools.Trippy.NewDerivedFieldDialog</environment><private>false</private><constant>false</constant><category>settings</category><initializer>true</initializer><attributes><package>Tools-Trippy</package></attributes></shared-variable><methods><class-id>Tools.Trippy.Inspector</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="container:">container: anApplication	container := anApplication</body><body package="Tools-Trippy" selector="copyStateFromBehavior:">copyStateFromBehavior: anInspector	"An inspector receives this just after it becomes the current, with the one that used	to be the current passed as the argument. This is the chance to copy appropriate	selections, etc. from the old inspector."</body><body package="Tools-Trippy" selector="copyStateFromPartList:">copyStateFromPartList: anInspector	"An inspector receives this just after it becomes the current, with the one that used	to be the current passed as the argument. This is the chance to copy appropriate	selections, etc. from the old inspector."</body><body package="Tools-Trippy" selector="initialize:">initialize: anObject		object := anObject.	self refresh</body><body package="Tools-Trippy" selector="initialize:container:">initialize: anObject container: anApplication		container := anApplication.	self initialize: anObject</body><body package="Tools-Trippy" selector="installedWith:">installedWith: aBuilder	"Sent by the container after installation of the inspector interface is finished. 	This gives a chance to perform actions that depend on bounds of components	being available, most notably #makeVisible:. It is also a very good idea to remember the	builder because in the inspector framework models outlive interfaces and builders	come and go."	self builder: aBuilder</body></methods><methods><class-id>Tools.Trippy.Inspector</class-id> <category>accessing</category><body package="Tools-Trippy" selector="object">object	"Answer the object being inspected."	^object</body><body package="Tools-Trippy" selector="selectedObjectOrInspectedObject">selectedObjectOrInspectedObject	^self object</body><body package="Tools-Trippy" selector="undoExplanation">undoExplanation	"Answer a string with an explanation of the possible undo action,	or an empty string if no explanation is available."	^''</body></methods><methods><class-id>Tools.Trippy.Inspector</class-id> <category>properties</category><body package="Tools-Trippy" selector="specName">specName	"Answer the name of the interface spec to use; some pages select the	interface at runtime based on the properties of the object they inspect."	^#windowSpec</body></methods><methods><class-id>Tools.Trippy.Inspector</class-id> <category>testing</category><body package="Tools-Trippy" selector="canDive">canDive	"A generic page has no idea of a selection that we can dive into."	^false</body><body package="Tools-Trippy" selector="canUndo">canUndo	"Answer whether the current inspector can undo the previous editing action.	A generic page keeps no undo history and cannot undo anything."	^false</body><body package="Tools-Trippy" selector="isPartList">isPartList	"Answer true if the inspector presents a logical view on an object	as a collection of selectable parts. In general, this is not true."	^false</body></methods><methods><class-id>Tools.Trippy.Inspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="browseClass">browseClass	"Open a browser on the inspector object."	self selectedObjectOrInspectedObject browse</body><body package="Tools-Trippy" selector="changeRequest">changeRequest	"Sent by the container application, just before destroying this inspector	(by switching to another object, closing the window, etc).	Answer a boolean indicating whether it is OK to do so.  Do something	to preserve unsaved changes if there are any."	^true</body><body package="Tools-Trippy" selector="copyStateTo:">copyStateTo: anInspector	"A subclass should implement this by sending an appropriate	#copyStateFrom...: message to the argument inspector."	self subclassResponsibility</body><body package="Tools-Trippy" selector="inspectOwners">inspectOwners	| owners |	owners := self selectedObjectOrInspectedObject allOwnersWeakly: true.	self nukeBogusReferencesIn: owners referentContext: thisContext.	ObjectMemory globalGarbageCollect.	(owners reject: [:each | owners tombstone == each]) inspect</body><body package="Tools-Trippy" selector="inspectReferencePath">inspectReferencePath	"Inspect the shortest path."		#{ReferencePathCollector} ifDefinedDo:		[:collectorClass |		Cursor execute showWhile:			[| collector allPaths |			ObjectMemory globalGarbageCollect.			collector := collectorClass new.			self doWithOwnersToIgnore:				[:junkReference | collector ignore: junkReference].			allPaths := collector allReferencePathsTo: self selectedObjectOrInspectedObject.			allPaths inspect]]</body><body package="Tools-Trippy" selector="selectAllFields">selectAllFields	"Subclasses usually do more"</body><body package="Tools-Trippy" selector="spawn">spawn	"Spawn another top-level inspector window."	self selectedObjectOrInspectedObject inspect</body></methods><methods><class-id>Tools.Trippy.Inspector</class-id> <category>private</category><body package="Tools-Trippy" selector="container">container	"Answer the higher-level application I belong to. It is typically either	a Navigator if I am part of a full-blown inspector, or an InspectorHolder	if I am an inspector embedded inside some other application and focused	on a specific object, with no view switches or navigation possibilities."	^container isNil		ifTrue: [builder window model]		ifFalse: [container]</body><body package="Tools-Trippy" selector="defaultFocusWidget">defaultFocusWidget	^nil</body><body package="Tools-Trippy" selector="doWithOwnersToIgnore:">doWithOwnersToIgnore: aBlock	"This is the entry point of the mechanism that allows filtering unnecessary objects	for operations like inspecting all owners or finding a reference path. This message	bubbles up to the top component of the inspector--either an InspectorShell or an	InspectorHolder; possible by way of a Navigator. From there, the message	#enumerateOwnersToIgnore: is downcast to all parts of the inspector. That message	is what really does enumerate the junk owners."	self container doWithOwnersToIgnore: aBlock</body><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	aBlock value: self</body><body package="Tools-Trippy" selector="makeSelfPerformerOf:">makeSelfPerformerOf: aMenu	"The current menu implementation routes messages generated by	a menu item to the menu item's menu bar performer. It is a complete	brain damage. This utility method hacks the menu so the messages are	routed to this page instead. Ugly but less so than the alternatives."	aMenu menuItems do:		[:each | | itemValue |		itemValue := each value.		itemValue isSymbol ifTrue:			[each value: [self perform: itemValue]]]</body><body package="Tools-Trippy" selector="nukeBogusReferencesIn:referentContext:">nukeBogusReferencesIn: aWeakArray referentContext: aContext	| ignoreThese |	ignoreThese := IdentitySet new: 10.	self doWithOwnersToIgnore: [:each | ignoreThese add: each].	1 to: aWeakArray size do:		[:index | | element |		element := aWeakArray at: index.		((ignoreThese includes: element) or: [element == aContext])			ifTrue: [aWeakArray at: index put: aWeakArray tombstone]]</body><body package="Tools-Trippy" selector="refresh">refresh	"Sent by self after the 'object' instance variable has been changed.	Implementations should update all secondary data structures and	widgets as needed."	self subclassResponsibility</body></methods><methods><class-id>Tools.Trippy.Inspector</class-id> <category>menu management</category><body package="Tools-Trippy" selector="addObject:actionsTo:">addObject: anObject actionsTo: aMenu	"Object actions are actions published by the object using #inspectorActions method."		| annotatedMethods executedSelectors groups itsClass |	itsClass := self class classOfObject: anObject.	annotatedMethods := Pragma		allNamed: #inspectorActions		from: itsClass		to: itsClass withAllSuperclasses last.	groups := OrderedCollection new.	executedSelectors := Set new.	(annotatedMethods sort: [:a :b | a selector &lt; b selector])		do:			[:each | 			(executedSelectors includes: each selector)				ifFalse:					[executedSelectors add: each selector.					groups add: (anObject perform: each selector)]].	"next statement does old API"	((executedSelectors includes: #inspectorActions) not		and: [itsClass canUnderstand: #inspectorActions])		ifTrue: [groups add: anObject inspectorActions].	groups isEmpty ifTrue: [^self].	groups		do:			[:eachGroup | 			aMenu addLine.			eachGroup				do:					[:eachAction | 					| item |					item := MenuItem labeled: eachAction label.					item enablement: eachAction enablement.					item value: [eachAction perform].					aMenu addItem: item]]</body><body package="Tools-Trippy" selector="addObjectActionsTo:">addObjectActionsTo: aMenu	"Object actions are actions published by the object using #inspectorActions method."	self addObject: self object actionsTo: aMenu</body><body package="Tools-Trippy" selector="addObjectSubmenuTo:">addObjectSubmenuTo: aMenu 	| objectItem objectSubmenu |	objectItem := MenuItem labeled: (#_Object &lt;&lt; #dialogs &gt;&gt; '&amp;Object').	objectItem nameKey: #objectMenu.	objectSubmenu := self class baseObjectSubmenu.	self		makeSelfPerformerOf: objectSubmenu;		addObjectActionsTo: objectSubmenu.	objectItem submenu: objectSubmenu.	aMenu addItem: objectItem atPosition: 10.001.	(aMenu atNameKey: #objectReferencePath) 		enabled: [#{ReferencePathCollector} isDefined]</body><body package="Tools-Trippy" selector="augmentMenuBar:">augmentMenuBar: aMenu 	"The containter gives us a chance to add things to the	main window menu bar."	self addObjectSubmenuTo: aMenu</body></methods><methods><class-id>Tools.Trippy.Inspector class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="on:">on: anObject	^self new initialize: anObject</body><body package="Tools-Trippy" selector="on:in:">on: anObject in: anApplication	^self new initialize: anObject container: anApplication</body></methods><methods><class-id>Tools.Trippy.Inspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	"Answer a String to use as a tab label of a page containing this inspector."	self subclassResponsibility</body><body package="Tools-Trippy" selector="useSimpleInspector">useSimpleInspector	^UseSimpleInspector</body><body package="Tools-Trippy" selector="useSimpleInspector:">useSimpleInspector: aBoolean	"When set to true, Object&gt;&gt;inspect opens the old (classic) inspector.	The default value is false, to open Trippy."	"self useSimpleInspector: true"	"self useSimpleInspector: false"	UseSimpleInspector := aBoolean</body></methods><methods><class-id>Tools.Trippy.Inspector class</class-id> <category>utilities</category><body package="Tools-Trippy" selector="forEmbeddingOn:">forEmbeddingOn: anObject	"Create and answer a subapplication inspecting the argument as	a standalone (i.e. old-style non-diving or navigating) inspector."	^InspectorHolder withInspectorOn: anObject</body><body package="Tools-Trippy" selector="openOn:">openOn: anObject	"Open a new top-level window to inspect the argument."	^InspectorShell openOn: anObject</body></methods><methods><class-id>Tools.Trippy.Inspector class</class-id> <category>utilities-printing</category><body package="Tools-Trippy" selector="basicObjectPrintString:">basicObjectPrintString: anObject	"Answer a basic print string of anObject without sending any messages to it."	 | aStream class |	aStream := WriteStream on: (String new: 16).	class := self classOfObject: anObject.	aStream		nextPutAll: (class name first isVowel ifTrue: ['an '] ifFalse: ['a ']);		print: class.	^aStream contents</body><body package="Tools-Trippy" selector="bulletproofLabelStringOf:">bulletproofLabelStringOf: anObject	"Time limit the safeLabelStringOf:. Additionally protect against	halts in the print logic. This method should be used sparingly, in sutuations when	we absolutely must avoid bringing up the debugger--mainly, inside the	debugger itself."	^[1 seconds toFinish: [self safeLabelStringOf: anObject]		orElse: [self safeBasicPrintStringOf: anObject]]		on: HaltInterrupt		do: [:ex |			[self safeBasicPrintStringOf: anObject] on: HaltInterrupt				do: [:ex2 | #ErrorPrintingTheObject &lt;&lt; #labels &gt;&gt; 'Error printing the object']]</body><body package="Tools-Trippy" selector="safeBasicPrint:on:">safeBasicPrint: anObject on: aStream	| objectClass title |	^[objectClass := self classOfObject: anObject.	title := objectClass name.	aStream nextPut: $a.	(title at: 1) isVowel ifTrue: [aStream nextPut: $n].	aStream nextPut: $ .	aStream print: objectClass]		on: Error		do:			[:ex | 			aStream				nextPutAll:					(#ErrorPrintingObject &lt;&lt; #dialogs &gt;&gt; '[Error printing the object: &lt;1s&gt;]'						expandMacrosWith: ex description).			ex return]</body><body package="Tools-Trippy" selector="safeBasicPrintStringOf:">safeBasicPrintStringOf: anObject	^[self basicObjectPrintString: anObject]		on: self safePrintingErrors		do: [:ex | ex return: ((#ErrorPrintingObject &lt;&lt; #dialogs &gt;&gt; '[Error printing the object: &lt;1s&gt;]')			expandMacrosWith: ex description)]</body><body package="Tools-Trippy" selector="safeDisplayStringOf:">safeDisplayStringOf: anObject	^[anObject displayString] toolSafeIn: 100 milliseconds		else: 			[:ex |			ex				return: (#ErrorPrintingObject &lt;&lt; #dialogs						&gt;&gt; '[Error printing the object: &lt;1s&gt;]' expandMacrosWith: ex description)]</body><body package="Tools-Trippy" selector="safeLabelStringOf:">safeLabelStringOf: anObject	"Answer a string representation of anObject short enough and line break-free,	for use in contexts such as a list view. Unlike safeDisplayString, favor the	programmer perspective (that is, printString) and try hard to give a useful	answer by falling back to basic print string if printString fails."	^[ | string |	string := anObject printString.	(string size &gt; 40 or: [string trimBlanks isEmpty or: [(string includes: Character cr) or: [string includes: Character lf]]])		ifTrue: [anObject basicPrintString]		ifFalse: [string]	]		on: Error, BreakInterrupt		do: [:ex | ex return: (self safeBasicPrintStringOf: anObject)]</body><body package="Tools-Trippy" selector="safePrint:on:">safePrint: anObject on: aStream	^[anObject printOn: aStream]		on: self safePrintingErrors		do:			[:ex | 			aStream				nextPutAll:					(#ErrorPrintingObject &lt;&lt; #dialogs &gt;&gt; '[Error printing the object: &lt;1s&gt;]'						expandMacrosWith: ex description).			ex return]</body><body package="Tools-Trippy" selector="safePrintingErrors">safePrintingErrors	^Error , BreakInterrupt, HaltInterrupt</body><body package="Tools-Trippy" selector="safePrintStringOf:">safePrintStringOf: anObject	^[anObject printString]		on: self safePrintingErrors		do:			[:ex | 			ex				return:					(#ErrorPrintingObject &lt;&lt; #dialogs &gt;&gt; '[Error printing the object: &lt;1s&gt;]'						expandMacrosWith: ex description)]</body></methods><methods><class-id>Tools.Trippy.Inspector class</class-id> <category>utilities-object queries</category><body package="Tools-Trippy" selector="basicSizeOfObject:">basicSizeOfObject: anObject	"Fetch the inst var of anObject without depending on anObject's implementation."	^CanonicalBasicSizeMethod valueWithReceiver: nil arguments: (Array with: anObject)</body><body package="Tools-Trippy" selector="cautiousInspectorClassesFor:">cautiousInspectorClassesFor: anObject	| inspectors |	inspectors := self		cautiousSend: #inspectorClasses		to: anObject		else: [Array with: BasicInspector].	^inspectors copyWith: BehaviorInspector</body><body package="Tools-Trippy" selector="cautiousSend:to:else:">cautiousSend: aUnarySelector to: anObject else: aBlock	| objectClass |	objectClass := self classOfObject: anObject.	^(objectClass canUnderstand: aUnarySelector)		ifTrue: [anObject perform: aUnarySelector]		ifFalse: [aBlock value]</body><body package="Tools-Trippy" selector="classOfObject:">classOfObject: anObject	"Determine the class of anObject without sending it's normal class method."	^CanonicalClassMethod valueWithReceiver: anObject arguments: #()</body><body package="Tools-Trippy" selector="instVarOfObject:at:">instVarOfObject: anObject at: anIndex	"Fetch the inst var of anObject without depending on anObject's implementation."		^CanonicalInstVarAtMethod		valueWithReceiver: nil		arguments: (Array with: anObject with: anIndex)</body><body package="Tools-Trippy" selector="isImmutableObject:">isImmutableObject: anObject	"Determine whether anObject is immutable, without using the object directly."	^CanonicalIsImmutableMethod valueWithReceiver: anObject arguments: #()</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>properties</category><body package="Tools-Trippy" selector="dragControllerClass">dragControllerClass	self subclassResponsibility</body><body package="Tools-Trippy" selector="driverClass">driverClass	^self isSegmented		ifTrue: [SegmentedPageDriver]		ifFalse: [PageDriver]</body><body package="Tools-Trippy" selector="isSegmented">isSegmented	^self partCount &gt; self class pageSizeLimit</body><body package="Tools-Trippy" selector="specName">specName	^self isSegmented		ifTrue: [#segmentedSpec]		ifFalse: [#unsegmentedSpec]</body><body package="Tools-Trippy" selector="undoLimit">undoLimit	"How many undo levels a page allows."	^10</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="augmentTextFieldController:">augmentTextFieldController: aController	"Provide additional tuning of the text controller used in the '#text' widget (the widget where we display the selected object's printStrings)."		| menu item |	aController		initializeMenuForCode;		autoAccept: false.	menu := aController menu copy.	item := MenuItem labeled: #AddField &lt;&lt; #inspector &gt;&gt; 'Add Field'.	item value: [self addDerivedField].	menu addItem: item atPosition: 10.2.	aController menuHolder value: menu</body><body package="Tools-Trippy" selector="checkProtectionOf:ifCancelled:">checkProtectionOf: partCollection ifCancelled: aBlock	| protected |	protected := partCollection select: [:each | each isProtected].	protected isEmpty not ifTrue:		[(Dialog confirm: (#ConfirmSaveIntoProtectedSlot &lt;&lt; #dialogs &gt;&gt; 'Changing the value of a protected part may have catastrophic consequences.Are you sure you want to continue?'))			ifFalse: [^aBlock value]].</body><body package="Tools-Trippy" selector="computeMultiSelectionText">computeMultiSelectionText	| stream |	stream := TextStream on: (String new: 200).	self selections do:		[:each |		stream			nextPutAllText: each displayString copy asText allBold;			nextPutAll: ':  ';			nextPutAll: each text.		stream cr].	^stream contents</body><body package="Tools-Trippy" selector="computeNoSelectionText">computeNoSelectionText	^String new</body><body package="Tools-Trippy" selector="computeSingleSelectionText">computeSingleSelectionText	^self selection text</body><body package="Tools-Trippy" selector="computeText">computeText	self hasMultiSelection		ifTrue: [^self computeMultiSelectionText].	self hasSingleSelection		ifTrue: [^self computeSingleSelectionText].	^self computeNoSelectionText</body><body package="Tools-Trippy" selector="createInsertionUndo:before:">createInsertionUndo: partCollection before: anIndex	self subclassResponsibility</body><body package="Tools-Trippy" selector="createRemovalUndo">createRemovalUndo	^RemovalUndo new savedValues: self selections</body><body package="Tools-Trippy" selector="createReplacementUndo:">createReplacementUndo: partCollection	^ReplacementUndo new savedValues: partCollection</body><body package="Tools-Trippy" selector="createReplacementUndoOf:">createReplacementUndoOf: aPart	^ReplacementUndo new savedValues: (Array with: aPart)</body><body package="Tools-Trippy" selector="defaultFocusWidget">defaultFocusWidget	^self widgetAt: #fieldList</body><body package="Tools-Trippy" selector="doItContext">doItContext	"Answer the context in which a text selection can be evaluated."	^nil</body><body package="Tools-Trippy" selector="doItReceiver">doItReceiver	"Answer the object that should be informed of the result of evaluating a	text selection."	^object</body><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	super enumerateOwnersToIgnore: aBlock.	fieldListHolder list do: aBlock</body><body package="Tools-Trippy" selector="evaluateText:from:ifFail:">evaluateText: aText from: aController ifFail: failBlock	"The user wishes to evaluate expressions in the value part of an inspector.	Do so in the context of the inspector's variables.  Evaluate failBlock	if the evaluation does not work."		^Cursor execute showWhile:		[self doItReceiver class evaluatorClass new			evaluate: aText			in: nil			allowReceiver: true			receiver: self doItReceiver			environment: self doItReceiver class environment			notifying: aController			ifFail: failBlock]</body><body package="Tools-Trippy" selector="pickSingleObjectIn:ifCancelled:">pickSingleObjectIn: partCollection ifCancelled: aBlock	| labels objects objectsCopy |	partCollection size = 1 ifTrue: [^partCollection first value].	labels := OrderedCollection new.	objects := OrderedCollection new.	partCollection do:		[:part |		labels add: ('&lt;1s&gt;: &lt;2s&gt;'			expandMacrosWith: part displayString			with: part value displayString).		objects add: part value].	objectsCopy := objects copy.	labels add: ((#All1pAsAnArray &lt;&lt; #dialogs &gt;&gt; 'All &lt;1p&gt; as an Array') expandMacrosWith: partCollection size).	objects add: objectsCopy asArray.	labels add: ((#All1pAsAnOC &lt;&lt; #dialogs &gt;&gt; 'All &lt;1p&gt; as an OrderedCollection') expandMacrosWith: partCollection size).	objects add: objectsCopy asOrderedCollection.	labels add: ((#All1pAsASet &lt;&lt; #dialogs &gt;&gt; 'All &lt;1p&gt; as a Set') expandMacrosWith: partCollection size).	objects add: objectsCopy asSet.	^Dialog		choose: (#UseWhichOfTheseObjectsQ &lt;&lt; #dialogs &gt;&gt; 'Use which of these objects?')		fromList: labels		values: objects		lines: 8		cancel: aBlock</body><body package="Tools-Trippy" selector="refresh">refresh	| originalSelections |	originalSelections := self selections.	driver := self driverClass for: self.	driver refresh.	self selectAll: originalSelections</body><body package="Tools-Trippy" selector="rememberUndo:">rememberUndo: anUndoAction	undoHistory addLast: anUndoAction.	undoHistory size &gt; self undoLimit ifTrue:		[undoHistory removeFirst]</body><body package="Tools-Trippy" selector="replaceSelectionsWith:">replaceSelectionsWith: newValue	| selections |	selections := self selections reject: [:some | some isReadOnly].	selections isEmpty ifTrue: [^self].	self		checkProtectionOf: selections		ifCancelled: [^self].	self rememberUndo: (self createReplacementUndo: selections).	selections		do:			[:each | 			each value: newValue.			self container partValueChanged: each].	(self widgetAt: #fieldList) invalidate.	self textHolder value: self computeText</body><body package="Tools-Trippy" selector="textAcceptAllowed:">textAcceptAllowed: aController	(self hasSelection and: [(self selections contains: [:some | some isReadOnly]) not]) ifFalse:		[aController view flash.		^false].	self checkProtectionOf: self selections ifCancelled:		[aController view flash.		^false].	^true</body><body package="Tools-Trippy" selector="textAccepted:">textAccepted: aController	| newValue |	newValue := self		evaluateText: aController text		from: aController		ifFail: [^false].	self replaceSelectionsWith: newValue.	^true</body><body package="Tools-Trippy" selector="textEditor">textEditor		^(builder componentAt: #text) widget controller</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>aspects</category><body package="Tools-Trippy" selector="fieldListHolder">fieldListHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^fieldListHolder isNil		ifTrue:			[fieldListHolder := MultiSelectionInList new]		ifFalse:			[fieldListHolder]</body><body package="Tools-Trippy" selector="fields">fields		^fieldListHolder list</body><body package="Tools-Trippy" selector="segmentListHolder">segmentListHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^segmentListHolder isNil		ifTrue:			[segmentListHolder := MultiSelectionInList new]		ifFalse:			[segmentListHolder]</body><body package="Tools-Trippy" selector="textHolder">textHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textHolder isNil		ifTrue:			[textHolder := String new asValue]		ifFalse:			[textHolder]</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>actions-editing</category><body package="Tools-Trippy" selector="addDerivedField">addDerivedField	"Verify that the code is a valid doIt. Build a new #inspectorField around it."		| expression dialog |	"We have to inline the doIt code from ParagraphEditor so we can bail on CompilationErrors."	[self textEditor maybeSelectCurrentLine.	self textEditor hasRangeSelection		ifTrue:			[[self textEditor evaluateSelection]				on: CompilationError				do: [^self]]]		on: Error		do:			[^Dialog				warn:					#invalidDerivedFieldCode &lt;&lt; #dialogs &gt;&gt;							'The expression does not evaluate cleanly. Use "Do it" to determine the nature of the error.'].	expression := self textEditor selectionAsStream contents.	dialog := NewDerivedFieldDialog new.	dialog expression: expression.	dialog illegalNames: (self fields collect: [:each | each partName]).	dialog targetClass: (self class classOfObject: object).	dialog open ifFalse: [^self].	dialog define.	self refresh</body><body package="Tools-Trippy" selector="copySelection">copySelection	Clipboard default put: self selections</body><body package="Tools-Trippy" selector="paste">paste	| parts |	parts := Clipboard default get.	parts isEmpty ifFalse:		[self hasSelection			ifTrue: [self pasteIntoSelected: parts]			ifFalse: [self pasteIntoSelf: parts]].</body><body package="Tools-Trippy" selector="pasteIntoSelected:">pasteIntoSelected: partCollection	| value |	value := self pickSingleObjectIn: partCollection ifCancelled: [^self].	self replaceSelectionsWith: value</body><body package="Tools-Trippy" selector="pasteIntoSelf:">pasteIntoSelf: aBundle	Dialog warn: (#CannotAddElementsToObject &lt;&lt; #dialogs &gt;&gt; 'Cannot add elements to this object.')</body><body package="Tools-Trippy" selector="undo">undo	| undo |	undoHistory notEmpty ifTrue:		[undo := undoHistory removeLast.		undo undoIn: self]</body><body package="Tools-Trippy" selector="undoReplacement:">undoReplacement: aReplacementUndo	aReplacementUndo savedValues do:		[:each | each restore].	self refresh; selectAll: aReplacementUndo parts</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>accessing</category><body package="Tools-Trippy" selector="copyStateTo:">copyStateTo: aPage	aPage notNil ifTrue: [aPage copyStateFromPartList: self]</body><body package="Tools-Trippy" selector="select:">select: aPart	^self fieldListHolder selections: (Set with: aPart)</body><body package="Tools-Trippy" selector="selectAll:">selectAll: partCollection	^self fieldListHolder selections: partCollection asSet</body><body package="Tools-Trippy" selector="selectAllFields">selectAllFields		^self fieldListHolder selectAll</body><body package="Tools-Trippy" selector="selectedObjectOrInspectedObject">selectedObjectOrInspectedObject	| selection |	^self hasSingleSelection		ifTrue: 			[selection := self selection.			selection hasValue ifTrue: [selection value] ifFalse: [self object]]		ifFalse: [self object]</body><body package="Tools-Trippy" selector="selection">selection	self hasSingleSelection ifFalse:		[self error: (#errSingleSelectionRequired &lt;&lt; #dialogs &gt;&gt; 'single selection required')].	^self fieldListHolder selections asArray first</body><body package="Tools-Trippy" selector="selections">selections	"Simply '^self fieldListHolder selections' will not do because we want a	sequence of selections with their order preserved, not a Set.	This is actually MultiSelectionInList brain damage but oh well."	| indices list |	indices := self fieldListHolder selectionIndexes asSortedCollection.	list := self fieldListHolder list.	^(indices collect: [:each | list at: each]) asArray</body><body package="Tools-Trippy" selector="undoExplanation">undoExplanation	"Answer a string with an explanation of the possible undo action, or an empty string."	^self canUndo		ifTrue: [undoHistory last explanation]		ifFalse: [String new]</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>testing</category><body package="Tools-Trippy" selector="canAddPart">canAddPart	^true</body><body package="Tools-Trippy" selector="canCopy">canCopy	"Copy is only meaningful if at least one of the selected parts has value."	^self selections contains: [:some | some hasValue]</body><body package="Tools-Trippy" selector="canDive">canDive	^self hasSingleSelection and: [self selection hasValue]</body><body package="Tools-Trippy" selector="canRemoveParts">canRemoveParts	^self hasSelection</body><body package="Tools-Trippy" selector="canUndo">canUndo	^undoHistory notEmpty</body><body package="Tools-Trippy" selector="hasMultiSelection">hasMultiSelection	^self fieldListHolder selectionIndexes size &gt; 1</body><body package="Tools-Trippy" selector="hasSelection">hasSelection	"Answer whether at least one field is selected."	^self fieldListHolder selectionIndexes size &gt; 0</body><body package="Tools-Trippy" selector="hasSingleSelection">hasSingleSelection	"Answer whether these is exactly one field selected on the list."	^self fieldListHolder selectionIndexes size = 1</body><body package="Tools-Trippy" selector="isInsertableBefore:">isInsertableBefore: aPartOrNil	"Answer whether it is possible to insert elements before the given part	(or at the end of part list if the argument is nil).	Most pages allow insertions. Those that don't, such as the basic page,	should redefine this."	^true</body><body package="Tools-Trippy" selector="isPartList">isPartList	^true</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>decomposing</category><body package="Tools-Trippy" selector="partAt:">partAt: anInteger	"Answer the part of an object at the given index. The index must be	in the 1..partCount range."	self subclassResponsibility</body><body package="Tools-Trippy" selector="partCount">partCount	"Answer the number of parts of the object inspected by the receiver."	self subclassResponsibility</body><body package="Tools-Trippy" selector="partsAtAll:">partsAtAll: aCollection	"Subclasses are encouraged to override this to recognize the special	case of the full range of indices (1..partCount) being requested if there	is performance gain in building the complete list all at once."	^aCollection collect: [:eachIndex | self partAt: eachIndex]</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>actions-drag/drop</category><body package="Tools-Trippy" selector="doDrag:">doDrag: aController	| data selections |	(data := DragDropData new)		contextWindow: builder window;		contextWidget: aController;		contextApplication: self.	selections := self selections select: [:part | part hasValue].	selections isEmpty ifTrue: [^self].	data		key: #inspectorObject;		clientData: selections.	(DragDropManager		withDropSource: DropSource new		withData: data)			doDragDrop</body><body package="Tools-Trippy" selector="dragEntry:">dragEntry: aDragContext	dragController := self dragControllerClass		for: self		view: (self builder componentAt: #fieldList) widget.	^dragController dragEntry: aDragContext</body><body package="Tools-Trippy" selector="dragExit:">dragExit: aDragContext	| result |	result := dragController notNil		ifTrue: [dragController dragExit: aDragContext]		ifFalse: [#dropEffectNone].	dragController := nil.	^result</body><body package="Tools-Trippy" selector="dragOver:">dragOver: aDragContext	^dragController notNil		ifTrue: [dragController dragOver: aDragContext]		ifFalse: [#dropEffectNone]</body><body package="Tools-Trippy" selector="drop:">drop: aDragContext	| result |	result := dragController notNil		ifTrue: [dragController drop: aDragContext]		ifFalse: [#dropEffectNone].	dragController := nil.	^result</body><body package="Tools-Trippy" selector="drop:at:">drop: partCollection at: aPart	self checkProtectionOf: (Array with: aPart) ifCancelled: [^self].	self rememberUndo: (self createReplacementUndoOf: aPart).	aPart value: (self pickSingleObjectIn: partCollection ifCancelled: [^self]).	self select: aPart</body><body package="Tools-Trippy" selector="drop:before:">drop: partCollection before: aPart	"Inserting a bunch of objects between elements does not do anything by default."</body><body package="Tools-Trippy" selector="dropFromSame:at:">dropFromSame: partCollection at: aPart	"By default, there is no difference between dropping elements from	the same object or from a different one."	self drop: partCollection at: aPart</body><body package="Tools-Trippy" selector="dropFromSame:before:">dropFromSame: partCollection before: aPart	"By default, there is no difference between dropping elements from	the same object or from a different one."	self drop: partCollection before: aPart</body><body package="Tools-Trippy" selector="wantToDrag:">wantToDrag: aController	^true</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>menu management</category><body package="Tools-Trippy" selector="addAddAndRemoveItemsTo:">addAddAndRemoveItemsTo: aMenu	"Add appropriate things to the Edit dropdown menu	of the shell inspector menu bar. "	aMenu		addItem: ((MenuItem labeled: (#AddDot &lt;&lt; #menus &gt;&gt; '&amp;Add...'))			nameKey: #editAdd;			value: [self add];			enabled: [self canAddPart]);		addItem: ((MenuItem labeled: (#_Remove &lt;&lt; #menus &gt;&gt; '&amp;Remove'))			nameKey: #editRemove;			value: [self removeSelected];			enabled: [self canRemoveParts])</body><body package="Tools-Trippy" selector="addSelectionActionsToFieldMenu:">addSelectionActionsToFieldMenu: aMenu	"We take some care here to deal with cases, such as bad DerivedFields where, so that we don't fail to construct the menu."		| value |	[value := self selection value]		on: Error		do: [^self].	self addObject: value actionsTo: aMenu</body><body package="Tools-Trippy" selector="adjustMenuBarEnablement:">adjustMenuBarEnablement: aMenu	"Now that this class has introduced the concept of selection,	some menu items need adjustment to take selection into account."	#(objectBrowse objectSpawn objectInspectOwners) do:		[:each |		(aMenu atNameKey: each)			enabled: [self hasSelection not or: [self canDive]]]</body><body package="Tools-Trippy" selector="augmentEditMenu:">augmentEditMenu: aMenu	"Subclasses may redefine this to have extra items on the edit menu."</body><body package="Tools-Trippy" selector="augmentMenuBar:">augmentMenuBar: aMenu	"The top-level window gives us a chance to modify its menu bar."	| editItem editMenu |	super augmentMenuBar: aMenu.	self adjustMenuBarEnablement: aMenu.	editItem := MenuItem labeled: #_Edit &lt;&lt; #menus &gt;&gt; '&amp;Edit'.	editItem nameKey: #editMenu.	editMenu := self class baseEditSubmenu.	(editMenu atNameKey: #editUndo) enabled: [self canUndo].	(editMenu atNameKey: #editFlushUndoHistory) enabled: [self canUndo].	(editMenu atNameKey: #editCopy) enabled: [self canCopy].	self		makeSelfPerformerOf: editMenu;		augmentEditMenu: editMenu.	editItem submenu: editMenu.	aMenu addItem: editItem atPosition: 10.002</body><body package="Tools-Trippy" selector="buildFieldListMenu">buildFieldListMenu	"Build the popup menu for the field list. Besides the usual things,	it should include items for actions published by the currently selected	object, if there is one."		| menu |	menu := self class fieldListMenu.	(menu atNameKey: #dive) enabled: [self canDive].	(menu atNameKey: #spawn) enabled: [self canDive].	(menu atNameKey: #paste) enabled: [Clipboard default notEmpty].	(menu atNameKey: #back) enabled: [self container canGoBack].	(self hasSingleSelection and: [self selection hasValue])		ifTrue: [self addSelectionActionsToFieldMenu: menu].	menu		augmentFrom: self class		to: PartListAbstractInspector		menuName: #fieldList		for: self.	^menu</body><body package="Tools-Trippy" selector="fieldListMenu">fieldListMenu	^[self buildFieldListMenu]</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="back">back	self container back</body><body package="Tools-Trippy" selector="changeRequest">changeRequest	| textEditor choice |	textEditor := (builder componentAt: #text) widget controller.	(textEditor accepted or: [self hasSelection not]) ifTrue: [^true].	choice := Dialog 		choose: (#AcceptUnsavedChanges &lt;&lt; #dialogs &gt;&gt; 'Accept unsaved changes?')		labels: (Array with: (#Yes &lt;&lt; #dialogs &gt;&gt; 'Yes') with: (#No &lt;&lt; #dialogs &gt;&gt; 'No') with: (#Cancel &lt;&lt; #dialogs &gt;&gt; 'Cancel'))		values: #(yes no cancel)		default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [textEditor accept].	^true</body><body package="Tools-Trippy" selector="dive">dive	(self hasSingleSelection and: [self selection hasValue])		ifTrue: [self container diveInto: self selection]</body><body package="Tools-Trippy" selector="flushUndoHistory">flushUndoHistory	undoHistory := OrderedCollection new</body><body package="Tools-Trippy" selector="spawn">spawn	self hasSingleSelection		ifTrue: [self selection value inspect]		ifFalse: [self hasMultiSelection			ifTrue: [(self selections collect: [:each | each value]) inspect]			ifFalse: [self object inspect]]</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="copyStateFromPartList:">copyStateFromPartList: anInspector	self selectAll: anInspector selections</body><body package="Tools-Trippy" selector="initialize:">initialize: anObject	undoHistory := OrderedCollection new.	super initialize: anObject.	self selections isEmpty		and: [self partCount &gt; 0 ifTrue: [self select: (self partAt: 1)]]</body><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder		self		augmentTextFieldController:			(aBuilder componentAt: #text) widget controller</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="pageSizeLimit">pageSizeLimit	"The maximum number of fields an inspector shows in an unsegmented view. If the number of fields is equal to or exceeds the value returned by this method, the segmented view is used."	^200</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="augmentEditMenu:">augmentEditMenu: aMenu	"Add appropriate things to the Edit dropdown menu of the shell inspector menu bar. "	aMenu addLine.	self addAddAndRemoveItemsTo: aMenu</body><body package="Tools-Trippy" selector="buildFieldListMenu">buildFieldListMenu	| menu |	menu := super buildFieldListMenu.	menu addLine.	self addAddAndRemoveItemsTo: menu.	^menu</body><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	super enumerateOwnersToIgnore: aBlock.	linearizedParts do: aBlock</body><body package="Tools-Trippy" selector="partWithKey:">partWithKey: anObject	^linearizedParts detect: [:some | some key == anObject]</body><body package="Tools-Trippy" selector="refresh">refresh	"Keys in a dictionary are unordered, but for presentation arrange them	in the increasing order of their displayStrings. Do not use #collect: to collect	pairs, because #collect: coalesces equal elements, which we need to avoid."	| pairs |	pairs := OrderedCollection new: object size.	object keys do: 		[:each | pairs add: (Inspector safeDisplayStringOf: each) -&gt; each].	pairs := pairs asSortedCollection: [:a :b | a key &lt;= b key].	linearizedParts := pairs collect: [:each | KeyedElement of: object at: each value].	super refresh</body><body package="Tools-Trippy" selector="requestNewKey">requestNewKey	"Answer a new key to add to the dictionary.  nil is	a 'no answer' value since it is not a valid dictionary key."	| expression |	expression := Dialog request: (#AddNewKeyC &lt;&lt; #dialogs &gt;&gt; 'Add new key:') .	expression isEmpty ifTrue: [^nil].	^Compiler evaluate: expression</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize">initialize	super initialize.	self valueOrKeyHolder		value: #value;		onChangeSend: #valueOrKeySelectionChanged to: self</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector</class-id> <category>aspects</category><body package="Tools-Trippy" selector="valueOrKeyHolder">valueOrKeyHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^valueOrKeyHolder isNil		ifTrue:			[valueOrKeyHolder := nil asValue]		ifFalse:			[valueOrKeyHolder]</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector</class-id> <category>properties</category><body package="Tools-Trippy" selector="dragControllerClass">dragControllerClass	^InsertReplaceDragController</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="add">add	| newKey newPart |	newKey := self requestNewKey.	newKey isNil ifTrue: [^self].	object at: newKey put: nil.	self refresh.	newPart := self partWithKey: newKey.	self 		rememberUndo: (InsertionUndo new savedValues: (Array with: newPart));		select: newPart</body><body package="Tools-Trippy" selector="dive">dive	self container diveInto: self selection</body><body package="Tools-Trippy" selector="drop:before:">drop: partCollection before: aPart	self pasteIntoSelf: partCollection</body><body package="Tools-Trippy" selector="dropFromSame:before:">dropFromSame: aBundle before: keyObject	"Moving items within a dictionary does not mean much so we ignore it."</body><body package="Tools-Trippy" selector="pasteIntoSelf:">pasteIntoSelf: partCollection	| additions |	additions := OrderedCollection new.	partCollection do: 		[:each | 		object at: each key put: each value.		additions add: (KeyedElement of: object at: each key)].	self rememberUndo: (InsertionUndo new savedValues: additions).	self		refresh;		selectAll: additions</body><body package="Tools-Trippy" selector="removeSelected">removeSelected	"Remove the selected elements."	self rememberUndo: self createRemovalUndo.	self selections do: [:each | object removeKey: each key].	self refresh</body><body package="Tools-Trippy" selector="undoInsertion:">undoInsertion: anInsertionUndo	anInsertionUndo savedValues do:		[:each | object removeKey: each key ifAbsent: []].	self refresh</body><body package="Tools-Trippy" selector="undoRemoval:">undoRemoval: aRemovalUndo	aRemovalUndo savedValues do:		[:each | object at: each part key put: each value].	self 		refresh; 		selectAll: aRemovalUndo parts</body><body package="Tools-Trippy" selector="valueOrKeySelectionChanged">valueOrKeySelectionChanged	self textHolder value: self computeText</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector</class-id> <category>decomposing</category><body package="Tools-Trippy" selector="partAt:">partAt: anIndex	^linearizedParts at: anIndex</body><body package="Tools-Trippy" selector="partCount">partCount	^linearizedParts size</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector</class-id> <category>accessing</category><body package="Tools-Trippy" selector="selection">selection	| selection |	selection := super selection.	^self valueOrKeyHolder value = #value		ifTrue: [selection]		ifFalse: [DerivedAttribute 			label: ((#key1s &lt;&lt; #dialogs &gt;&gt; 'key &lt;1s&gt;')			expandMacrosWith: selection key displayString)			value: selection key]</body><body package="Tools-Trippy" selector="selections">selections	| selections |	selections := super selections.	^self valueOrKeyHolder value = #value		ifTrue: [selections]		ifFalse: [selections collect:			[:each |			DerivedAttribute 				label: ((#key1s &lt;&lt; #dialogs &gt;&gt; 'key &lt;1s&gt;')					expandMacrosWith: each key displayString)				value: each key]]</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	^(#_Elements &lt;&lt; #dialogs &gt;&gt; '&amp;Elements')</body></methods><methods><class-id>Tools.Trippy.PoolDictionaryInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="addPoolItemsTo:">addPoolItemsTo: aMenu	aMenu addItem: 		((MenuItem labeled: (#References &lt;&lt; #menus &gt;&gt; 'Re&amp;ferences'))			nameKey: #poolReferences;			value: [self browseReferences];			enabled: [self hasSingleSelection]).	object == Undeclared ifTrue:		[aMenu addItem: 			((MenuItem labeled: (#PurgeUnusedBindings &lt;&lt; #menus &gt;&gt; 'Purge &amp;Unused Bindings'))				nameKey: #poolPurgeUnused;				value: [self purgeUnusedBindings])]</body><body package="Tools-Trippy" selector="augmentEditMenu:">augmentEditMenu: aMenu	aMenu addLine.	self addPoolItemsTo: aMenu</body><body package="Tools-Trippy" selector="buildFieldListMenu">buildFieldListMenu	| menu |	menu := super buildFieldListMenu.	menu addLine.	self addPoolItemsTo: menu.	^menu</body><body package="Tools-Trippy" selector="requestNewKey">requestNewKey	"Answer a new key to add to the dictionary.  nil is	a 'no answer' value since it is not a valid dictionary key.	Keys of pools should be valid variable names. "	| newKey |	newKey := Dialog request: (#AddNewVariableColon &lt;&lt; #dialogs &gt;&gt; 'Add new variable:') .	newKey isEmpty ifTrue: [^nil].	^SystemUtils validateName: newKey</body></methods><methods><class-id>Tools.Trippy.PoolDictionaryInspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="browseReferences">browseReferences	"Browse references to the selected binding. If the 	 inspected object is Undeclared then restrict the set 	 to just references to the binding, excluding 	 references to the binding's key, etc."	| mc binding list |	mc := MethodCollector new.	binding := object bindingFor: self selection key.	list := mc referencesTo: binding.	object == Undeclared ifTrue:		[list := list &amp; (mc methodsSelect:				[:cm | | found |				found := false.				[:exit|				cm withAllBlockMethodsDo:					[:m|					(m literals anySatisfy:							[:ea |							(ea isVariableBinding and: [ea binding == binding])							or: [ea isBindingReference and: [ea bindingOrNil == binding]]])						ifTrue: [found := true. exit value]]] valueWithExit.				found])].	mc browseSelect: list</body><body package="Tools-Trippy" selector="pasteIntoSelf:">pasteIntoSelf: partCollection	"Unlike the superclass, I cannot use just anything as the variable name."	| additions |	additions := OrderedCollection new.	partCollection do: 		[:each | | name |		name := each asVariableName asSymbol.		object at: name put: each value.		additions add: (KeyedElement of: object at: name)].	self rememberUndo: (InsertionUndo new savedValues: additions).	self		refresh;		selectAll: additions</body><body package="Tools-Trippy" selector="purgeUnusedBindings">purgeUnusedBindings	Cursor execute showWhile: [object purgeUnusedBindings].	self refresh</body></methods><methods><class-id>Tools.Trippy.PoolDictionaryInspector</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize">initialize	super initialize.	#{Kernel.Parcel} ifDefinedDo: [:class | class cleanseParcelSystem].</body><body package="Tools-Trippy" selector="initialize:">initialize: anObject	super initialize: anObject.	#{Kernel.Parcel} ifDefinedDo: [:class | class cleanseParcelSystem].</body></methods><methods><class-id>Tools.Trippy.Navigator</class-id> <category>accessing</category><body package="Tools-Trippy" selector="inspector">inspector	^inspector</body><body package="Tools-Trippy" selector="inspector:">inspector: anInspector	inspector := anInspector</body><body package="Tools-Trippy" selector="object">object	^visit object</body><body package="Tools-Trippy" selector="vicinity">vicinity	"Identify the group of objects the navigator presents.	This is used by things like the menu code to indicate the current vicinity."	self subclassResponsibility</body><body package="Tools-Trippy" selector="visit">visit	^visit</body></methods><methods><class-id>Tools.Trippy.Navigator</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:shell:inspector:">initialize: aVisit shell: aShell inspector: anInspector	visit := aVisit.	shell := aShell.	inspector := anInspector.	inspector container: self.	self inspectorHolder selectionIndexHolder		onChangeSend: #inspectorSelectionChanged		to: self.	self refreshInspectorClasses</body><body package="Tools-Trippy" selector="installedWith:">installedWith: aBuilder</body></methods><methods><class-id>Tools.Trippy.Navigator</class-id> <category>aspects</category><body package="Tools-Trippy" selector="inspectorHolder">inspectorHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^inspectorHolder isNil		ifTrue:			[inspectorHolder := SelectionInList new]		ifFalse:			[inspectorHolder]</body></methods><methods><class-id>Tools.Trippy.Navigator</class-id> <category>private</category><body package="Tools-Trippy" selector="ignoringInspectorSelectionChange:">ignoringInspectorSelectionChange: aBlock	| channel |	channel := self inspectorHolder selectionIndexHolder.	channel retractInterestsFor: self.	aBlock ensure: 		[channel onChangeSend: #inspectorSelectionChanged to: self]</body><body package="Tools-Trippy" selector="objectInspectorClasses">objectInspectorClasses	^Inspector cautiousInspectorClassesFor: self object</body><body package="Tools-Trippy" selector="refreshInspectorClasses">refreshInspectorClasses	| selectionIndex |	self ignoringInspectorSelectionChange:		[inspectorClasses := self objectInspectorClasses.		self inspectorHolder list: 			(inspectorClasses collect: [:each | each tabLabel asString copyWithout: $&amp;]) asList.		selectionIndex := inspectorClasses indexOf: inspector class.		self inspectorHolder selectionIndex: selectionIndex.		inspectorCache := Array new: inspectorClasses size.		inspectorCache at: selectionIndex put: inspector]</body><body package="Tools-Trippy" selector="reinstallInspector">reinstallInspector	| newBuilder tabControl |	inspector builder: nil.	tabControl := (builder componentAt: #inspector) widget.	tabControl		client: inspector		spec: inspector specName		builder: (newBuilder := builder newSubBuilder).	inspector installedWith: newBuilder</body><body package="Tools-Trippy" selector="replaceInspectorWithOneOn:">replaceInspectorWithOneOn: anObject	| newClass newInspector index |	inspectorClasses := self objectInspectorClasses.	newClass := (inspectorClasses includes: inspector class)		ifTrue: [inspector class]		ifFalse: [inspectorClasses first].	newInspector := newClass on: anObject.	inspector copyStateTo: newInspector.	inspector := newInspector.	builder notNil ifTrue: [self reinstallInspector].	shell focusObjectChanged.	self ignoringInspectorSelectionChange:		[self inspectorHolder list: 			(inspectorClasses collect: [:each | each tabLabel asString copyWithout: $&amp;]).		inspectorCache := Array new: inspectorClasses size.		index := inspectorClasses indexOf: inspector class.		self inspectorHolder selectionIndex: index.		inspectorCache at: index put: inspector]</body></methods><methods><class-id>Tools.Trippy.Navigator</class-id> <category>inspector container</category><body package="Tools-Trippy" selector="back">back	"Sent by the contained inspector to go back in the visit trail."	^shell back</body><body package="Tools-Trippy" selector="canGoBack">canGoBack	"Sent by the contained inspector to see if it's possible to go back in the visit trail."	^shell canGoBack</body><body package="Tools-Trippy" selector="diveInto:">diveInto: aPart	"Sent by the contained inspector to dive into its part."	^shell diveInto: aPart</body><body package="Tools-Trippy" selector="partValueChanged:">partValueChanged: aPart	^shell partValueChanged: aPart</body></methods><methods><class-id>Tools.Trippy.Navigator</class-id> <category>notifications</category><body package="Tools-Trippy" selector="changeRequest">changeRequest	^self inspector changeRequest</body><body package="Tools-Trippy" selector="inspectorSelectionChanged">inspectorSelectionChanged	| index newBuilder |	index := self inspectorHolder selectionIndex.	inspector := (inspectorCache at: index) isNil		ifTrue: 			[inspectorCache				at: index				put: ((inspectorClasses at: index) on: self object)]		ifFalse: 			[inspectorCache at: index].	inspector builder: nil.	(builder componentAt: #inspector) widget		client: inspector		spec: inspector specName		builder: (newBuilder := builder newSubBuilder).	inspector installedWith: newBuilder.	shell focusObjectChanged "it didn't but the UI update may be needed anyway"</body></methods><methods><class-id>Tools.Trippy.Navigator</class-id> <category>privileged</category><body package="Tools-Trippy" selector="doWithOwnersToIgnore:">doWithOwnersToIgnore: aBlock	"See the comment to Inspector&gt;&gt;doWithOwnersToIgnore: for a detailed explanation.	Passing the buck to the real top component."	shell doWithOwnersToIgnore: aBlock</body><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	aBlock value: self.	aBlock value: visit.	inspector enumerateOwnersToIgnore: aBlock</body></methods><methods><class-id>Tools.Trippy.Navigator class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="visit:shell:">visit: aVisit shell: aShell	^self new		initialize: aVisit		shell: aShell		inspector:			((Inspector cautiousInspectorClassesFor: aVisit object) first on: aVisit object)</body><body package="Tools-Trippy" selector="visit:shell:inspector:">visit: aVisit shell: aShell inspector: anInspector	^self new initialize: aVisit shell: aShell inspector: anInspector</body></methods><methods><class-id>Tools.Trippy.OwnerNavigator</class-id> <category>aspects</category><body package="Tools-Trippy" selector="fieldListHolder">fieldListHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^fieldListHolder isNil		ifTrue:			[fieldListHolder := SelectionInList new]		ifFalse:			[fieldListHolder]</body></methods><methods><class-id>Tools.Trippy.OwnerNavigator</class-id> <category>accessing</category><body package="Tools-Trippy" selector="vicinity">vicinity	^vicinity</body></methods><methods><class-id>Tools.Trippy.OwnerNavigator</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="bePartsNavigator">bePartsNavigator	vicinity := #self</body><body package="Tools-Trippy" selector="initialize:shell:inspector:">initialize: aVisit shell: aShell inspector: anInspector	super initialize: aVisit shell: aShell inspector: anInspector.	vicinity := #owner.	ownerInspector := aVisit ownerInspector.	self fieldListHolder list: ownerInspector fieldListHolder list.	self fieldListHolder selectionIndexHolder		onChangeSend: #fieldSelected		to: self.	self fieldListHolder selection: aVisit ownerPart</body><body package="Tools-Trippy" selector="installedWith:">installedWith: aBuilder	(aBuilder componentAt: #fieldList) widget		makeVisible: self fieldListHolder selectionIndex</body><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder	self reinstallInspector</body></methods><methods><class-id>Tools.Trippy.OwnerNavigator</class-id> <category>notification</category><body package="Tools-Trippy" selector="fieldDoubleClicked">fieldDoubleClicked	shell exploreFocus</body><body package="Tools-Trippy" selector="fieldSelected">fieldSelected	| selection newObject |	selection := self fieldListHolder selection.	(selection isNil or: [selection hasValue not]) ifTrue: [^self].	newObject := selection value.	visit := visit owner 		visitOfPart: selection		ifNone: [PartVisit part: selection owner: visit owner inspector: ownerInspector].	self replaceInspectorWithOneOn: newObject.	self refreshInspectorClasses</body></methods><methods><class-id>Tools.Trippy.PageDriver</class-id> <category>notifications</category><body package="Tools-Trippy" selector="fieldSelectionChanged">fieldSelectionChanged	page textHolder value: page computeText</body></methods><methods><class-id>Tools.Trippy.PageDriver</class-id> <category>private</category><body package="Tools-Trippy" selector="hookup">hookup	page fieldListHolder selectionIndexHolder		onChangeSend: #fieldSelectionChanged to: self</body></methods><methods><class-id>Tools.Trippy.PageDriver</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initializePage:">initializePage: anInspectorPage	page := anInspectorPage.	self hookup</body></methods><methods><class-id>Tools.Trippy.PageDriver</class-id> <category>accessing</category><body package="Tools-Trippy" selector="refresh">refresh	page fieldListHolder		list: (page partsAtAll: (1 to: page partCount)) asList</body></methods><methods><class-id>Tools.Trippy.PageDriver class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="for:">for: anInspectorPage	^self new initializePage: anInspectorPage</body></methods><methods><class-id>Tools.Trippy.SegmentedPageDriver</class-id> <category>private</category><body package="Tools-Trippy" selector="computeFieldList">computeFieldList	| segments fields |	segments := page segmentListHolder selections sorted.	fields := List new: segmentSize * segments size.	segments do: 			[:eachSegment |			eachSegment range				do: [:eachIndex | fields addLast: (page partAt: eachIndex)]].	^fields</body><body package="Tools-Trippy" selector="computeSegmentList">computeSegmentList	"Answer a sequence consisting of everything to show in the segement list."	| segments totalSize |	segments := OrderedCollection new.	totalSize := page partCount.	1 to: totalSize by: segmentSize do:		[:base |		| end |		end := base + segmentSize - 1 min: totalSize.		segments add: (ObjectSegment new			from: base			part: (page partAt: base)			to: end			part: (page partAt: end))].	^segments</body><body package="Tools-Trippy" selector="hookup">hookup	super hookup.	page segmentListHolder selectionIndexHolder		onChangeSend: #segmentSelectionChanged to: self</body></methods><methods><class-id>Tools.Trippy.SegmentedPageDriver</class-id> <category>accessing</category><body package="Tools-Trippy" selector="refresh">refresh	page segmentListHolder		list: self computeSegmentList;		selectionIndexes: (Set with: 1)</body></methods><methods><class-id>Tools.Trippy.SegmentedPageDriver</class-id> <category>notifications</category><body package="Tools-Trippy" selector="segmentSelectionChanged">segmentSelectionChanged	page fieldListHolder list: self computeFieldList</body></methods><methods><class-id>Tools.Trippy.SegmentedPageDriver</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initializePage:">initializePage: anInspectorPage	"Pick a reasonable segment size. The reasonable size is typically the default page limit size. However, for a very large object this may lead to the list of segments that is too long. In that case, we pick something that will lead lists of about the same length."	| defaultSize |	defaultSize := PartListAbstractInspector pageSizeLimit.	segmentSize := anInspectorPage partCount // defaultSize &gt; defaultSize		ifTrue: [anInspectorPage partCount sqrtRounded // defaultSize * defaultSize]		ifFalse: [defaultSize].	super initializePage: anInspectorPage</body></methods><methods><class-id>Tools.Trippy.Part</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="object:">object: anObject	object := anObject</body></methods><methods><class-id>Tools.Trippy.Part</class-id> <category>accessing</category><body package="Tools-Trippy" selector="asVariableName">asVariableName	"Answer a string that can be used as a variable name of this part when it is	copied to a context where a variable name is needed; for example,	dropped into a workspace to become a workspace local. By default, the	name is based on the class of the value, for example aString."	| className |	className := self value class name copyWithout: Character space.	^(className first isVowel ifTrue: ['an'] ifFalse: ['a']), className</body><body package="Tools-Trippy" selector="browseDefinition">browseDefinition		^(Refactory.Browser.MethodDefinitionEnvironment onMethods: (Array with: self definition)) openEditor</body><body package="Tools-Trippy" selector="definition">definition	"Subclasses may return a method definition associated with this field."		^nil</body><body package="Tools-Trippy" selector="definition:">definition: aMethodDefinition	"Some subclasses like to be handed their originating method definition."</body><body package="Tools-Trippy" selector="displayIcon">displayIcon	| objectClass currentValue icon |	[currentValue := self value] toolSafeIn: 100 milliseconds		else: [^GeneralIcons inaccessibleToolIcon].	objectClass := Inspector classOfObject: currentValue.	icon := (objectClass canUnderstand: #toolListIcon)				ifTrue: 					[[currentValue toolListIcon] toolSafeIn: 100 milliseconds						else: [GeneralIcons inaccessibleToolIcon]]				ifFalse: 					[[objectClass toolListIcon] toolSafeIn: 100 milliseconds						else: [GeneralIcons inaccessibleToolIcon]].	^icon ifNil: [GeneralIcons inaccessibleToolIcon]</body><body package="Tools-Trippy" selector="displayText">displayText	^self displayString asText</body><body package="Tools-Trippy" selector="key">key	self subclassResponsibility</body><body package="Tools-Trippy" selector="partName">partName	"Answer a string that identifies the current part in the owner. For example,	for a named variable this would be its name, for an indexed variable its index."	self subclassResponsibility</body><body package="Tools-Trippy" selector="text">text	^[self value printString] toolSafeIn: 2 seconds		else: 			[:ex |			#ErrorPrintingObject &lt;&lt; #dialogs &gt;&gt; '[Error printing the object: &lt;1s&gt;]'				expandMacrosWith: ex description]</body><body package="Tools-Trippy" selector="value">value	self subclassResponsibility</body></methods><methods><class-id>Tools.Trippy.Part</class-id> <category>testing</category><body package="Tools-Trippy" selector="hasValue">hasValue	"Answer whether this part can meaningfully respond to the #value message	answering an object which is the part's value.  Some parts do not have to	have value and only have #text that they show in the inspector's text view.	For example, a bytecode disassembly of a compiled method is a TextAttribute	that has no value that could be meaningfully copied elsewhere."	^true</body><body package="Tools-Trippy" selector="isNamedVariable">isNamedVariable	^false</body><body package="Tools-Trippy" selector="isProtected">isProtected	"Protected parts are parts assignment to which, even if physically possible	(as reported by #isReadOnly) is potentially dangerous and should be done 	with extreme caution, after explicitly warning the user."	^false</body><body package="Tools-Trippy" selector="isReadOnly">isReadOnly	"Answer whether it is legal to send the #value: message to this part.	Sending #value: to a read-only part may result in an exception."	^false</body><body package="Tools-Trippy" selector="isRemovable">isRemovable	^true</body></methods><methods><class-id>Tools.Trippy.Part</class-id> <category>comparing</category><body package="Tools-Trippy" selector="=">= aPart 	^self class == aPart class and: [self sameTypeEquals: aPart]</body><body package="Tools-Trippy" selector="hash">hash	^self class hash bitXor: self specificHash</body><body package="Tools-Trippy" selector="sameTypeEquals:">sameTypeEquals: aPart 	"Each subclass should compare itself to aPart exploiting the fact that they types are known to the be same."	^self subclassResponsibility</body><body package="Tools-Trippy" selector="specificHash">specificHash	"Each subclass should return a hash value for its elements, but need not worry about including the class's hash value."	^self subclassResponsibility</body></methods><methods><class-id>Tools.Trippy.Part</class-id> <category>printing</category><body package="Tools-Trippy" selector="displayLabel">displayLabel	^(LabelAndIcon new)		text: self displayText;		icon: self displayIcon</body></methods><methods><class-id>Tools.Trippy.TextAttribute</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="label:text:">label: aString text: aText	label := aString.	text := aText</body><body package="Tools-Trippy" selector="label:textBlock:">label: aString textBlock: aBlock	label := aString.	textBlock := aBlock</body></methods><methods><class-id>Tools.Trippy.TextAttribute</class-id> <category>accessing</category><body package="Tools-Trippy" selector="asVariableName">asVariableName	^label asString</body><body package="Tools-Trippy" selector="definition">definition	^definition</body><body package="Tools-Trippy" selector="definition:">definition: anObject	definition := anObject</body><body package="Tools-Trippy" selector="displayIcon">displayIcon	^GeneralIcons gear</body><body package="Tools-Trippy" selector="displayString">displayString	^label asString</body><body package="Tools-Trippy" selector="displayText">displayText	^super displayText emphasizeAllWith: #italic</body><body package="Tools-Trippy" selector="key">key	^label</body><body package="Tools-Trippy" selector="label">label	^label</body><body package="Tools-Trippy" selector="partName">partName	^label asString</body><body package="Tools-Trippy" selector="text">text	^textBlock isNil		ifTrue: [text]		ifFalse: 			[[textBlock value]				on: Error				do: [:ex | ((#ErrorRetrievingTextC1s &lt;&lt; #dialogs &gt;&gt; '[Error retrieving text: &lt;1s&gt;]')					expandMacrosWith: ex description)]]</body><body package="Tools-Trippy" selector="value">value	^self text</body></methods><methods><class-id>Tools.Trippy.TextAttribute</class-id> <category>testing</category><body package="Tools-Trippy" selector="hasValue">hasValue	^true</body><body package="Tools-Trippy" selector="isReadOnly">isReadOnly	^true</body><body package="Tools-Trippy" selector="isRemovable">isRemovable	^false</body></methods><methods><class-id>Tools.Trippy.TextAttribute</class-id> <category>comparing</category><body package="Tools-Trippy" selector="sameTypeEquals:">sameTypeEquals: aPart 	^label = aPart label</body><body package="Tools-Trippy" selector="specificHash">specificHash	^label hash</body></methods><methods><class-id>Tools.Trippy.TextAttribute class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="label:text:">label: aString text: aText	^self new label: aString text: aText</body><body package="Tools-Trippy" selector="label:textBlock:">label: aString textBlock: aBlock	^self new label: aString textBlock: aBlock</body></methods><methods><class-id>Tools.Trippy.Collaborator</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:object:">initialize: aString object: anObject	label := aString.	object := anObject</body><body package="Tools-Trippy" selector="initialize:objectBlock:">initialize: aString objectBlock: aBlock	label := aString.	objectBlock := aBlock</body><body package="Tools-Trippy" selector="variableName:">variableName: aString	varName := aString</body></methods><methods><class-id>Tools.Trippy.Collaborator</class-id> <category>accessing</category><body package="Tools-Trippy" selector="asPartOf:">asPartOf: anObject	^self isVariable		ifTrue: [NamedVariable of: anObject named: self variableName]		ifFalse: [DerivedAttribute label: self label value: self object]</body><body package="Tools-Trippy" selector="label">label	^label</body><body package="Tools-Trippy" selector="object">object	^objectBlock isNil		ifTrue: [object]		ifFalse: [objectBlock value]</body><body package="Tools-Trippy" selector="variableName">variableName	^varName</body></methods><methods><class-id>Tools.Trippy.Collaborator</class-id> <category>testing</category><body package="Tools-Trippy" selector="isVariable">isVariable	"True if collaborator is one of the object's instance variables; false otherwise."	^varName notNil</body></methods><methods><class-id>Tools.Trippy.Collaborator class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="label:block:">label: aString block: aBlock	^self new initialize: aString objectBlock: aBlock</body><body package="Tools-Trippy" selector="label:object:">label: aString object: anObject	^self new initialize: aString object: anObject</body><body package="Tools-Trippy" selector="label:variable:object:">label: aString variable: aString2 object: anObject	^(self new initialize: aString object: anObject)		variableName: aString2</body></methods><methods><class-id>Tools.Trippy.UndoAction</class-id> <category>accessing</category><body package="Tools-Trippy" selector="explanation">explanation	"Answer a string that will be appended to 'Undo' to form a nicer undo menu item label."	self subclassResponsibility</body><body package="Tools-Trippy" selector="parts">parts	^savedValues collect: [:each | each part]</body><body package="Tools-Trippy" selector="savedValues">savedValues	^savedValues</body><body package="Tools-Trippy" selector="undoIn:">undoIn: aPage	self subclassResponsibility</body><body package="Tools-Trippy" selector="values">values	^savedValues collect: [:each | each value]</body></methods><methods><class-id>Tools.Trippy.UndoAction</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="savedValues:">savedValues: partCollection	savedValues := partCollection collect: [:each | PartSnapshot on: each]</body></methods><methods><class-id>Tools.Trippy.InsertionUndo</class-id> <category>accessing</category><body package="Tools-Trippy" selector="explanation">explanation	^(#Addition &lt;&lt; #dialogs &gt;&gt; 'Addition')</body><body package="Tools-Trippy" selector="newKeys">newKeys	^newKeys</body><body package="Tools-Trippy" selector="undoIn:">undoIn: aPage	aPage undoInsertion: self</body></methods><methods><class-id>Tools.Trippy.InsertionUndo</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="newKeys:">newKeys: aCollection	newKeys := aCollection</body></methods><methods><class-id>Tools.Trippy.NewDerivedFieldDialog</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initClassHolder">initClassHolder		classHolder := nil asValue.	classHolder onChangeSend: #updateSelectedPackage to: self</body><body package="Tools-Trippy" selector="initialize">initialize		super initialize.	self initNameHolder.	self initClassHolder.	self initPackageHolder</body><body package="Tools-Trippy" selector="initNameHolder">initNameHolder		nameHolder := '' asValue.	nameHolder onChangeSend: #updateAcceptStatus to: self</body><body package="Tools-Trippy" selector="initPackageHolder">initPackageHolder		packageHolder := nil asValue</body></methods><methods><class-id>Tools.Trippy.NewDerivedFieldDialog</class-id> <category>accessing</category><body package="Tools-Trippy" selector="define">define		PrefersNullPackage := self targetPackage == Store.Registry nullPackage.	Store.Policies packagePolicy		forcePackage: self targetPackage		while:			[self targetClass				compile: self methodSource				classified: 'inspector fields']</body><body package="Tools-Trippy" selector="name">name		^nameHolder value</body><body package="Tools-Trippy" selector="nameTooltip">nameTooltip		self okToAccept ifTrue: [^nil].	(illegalNames includes: self name trimBlanks)		ifTrue: [^'&lt;1s&gt; is already used' expandMacrosWith: self name trimBlanks].	^'Name must contain non separator charactes'</body><body package="Tools-Trippy" selector="targetClass">targetClass		^classHolder value</body><body package="Tools-Trippy" selector="targetPackage">targetPackage		^packageHolder value</body><body package="Tools-Trippy" selector="targetSelector">targetSelector		^'inspector&lt;1s&gt;Field'		expandMacrosWith: self sanitizedNameForMethodSignature</body></methods><methods><class-id>Tools.Trippy.NewDerivedFieldDialog</class-id> <category>aspects</category><body package="Tools-Trippy" selector="classHolder">classHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^classHolder</body><body package="Tools-Trippy" selector="classMenu">classMenu		| menu |	menu := Menu new.	classes		do:			[:each | 			| item |			item := MenuItem labeled: each toolListDisplayString.			item				labelImage: each safeToolListIcon;				value: each.			menu addItem: item].	^menu</body><body package="Tools-Trippy" selector="computePackageMenu">computePackageMenu		| menu |	menu := Menu new.	((Store.Registry packagesContaining: classHolder value)		sort: [:a :b | a name &lt; b name])		do:			[:each | 			each ~~ Store.Registry nullPackage				ifTrue:					[menu						addItemLabel: each name						value: each]].	menu addLine.	menu		addItemLabel: Store.Registry nullPackage name		value: Store.Registry nullPackage.	^menu</body><body package="Tools-Trippy" selector="nameHolder">nameHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^nameHolder</body><body package="Tools-Trippy" selector="packageHolder">packageHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^packageHolder</body><body package="Tools-Trippy" selector="packageMenu">packageMenu		^[self computePackageMenu]</body></methods><methods><class-id>Tools.Trippy.NewDerivedFieldDialog</class-id> <category>private</category><body package="Tools-Trippy" selector="addButton">addButton	^self widgetAt: #addButton</body><body package="Tools-Trippy" selector="guessName">guessName		| words guess |	words := expression runsSatisfying: [:each | each isLetter].	words isEmpty ifTrue: [^self].	guess := words size &gt; 1		ifTrue: [words at: 2]		ifFalse: [words first].	nameHolder value: (guess first: 1) asUppercase , (guess allButFirst: 1)</body><body package="Tools-Trippy" selector="methodSource">methodSource		^'inspector&lt;1s&gt;Field	%&lt;inspectorFields&gt;	^Array with: (Tools.Trippy.DerivedAttribute				label: &lt;2p&gt;				valueBlock: [&lt;3s&gt;])'		expandMacrosWith: self sanitizedNameForMethodSignature		with: self name		with: expression</body><body package="Tools-Trippy" selector="nameLabel">nameLabel		^self widgetAt: #nameLabel</body><body package="Tools-Trippy" selector="okToAccept">okToAccept		self name trimBlanks isEmpty ifTrue: [^false].	(illegalNames includes: self name trimBlanks) ifTrue: [^false].	^true</body><body package="Tools-Trippy" selector="sanitizedNameForMethodSignature">sanitizedNameForMethodSignature	"Turn the name into something we can use as part of a Smalltalk method name."		| words |	words := self name runsFailing: [:each | each isSeparator].	words := words		collect:			[:eachWord | 			| ws |			ws := String new writeStream.			eachWord				do:					[:char | 					(char isAlphaNumeric or: [char = $_])						ifTrue: [ws nextPut: char]						ifFalse:							[ws nextPutAll: '0x'.							char asInteger printDigitsOn: ws base: 16]].			ws contents].	words := words		collect: [:each | (each first: 1) asUppercase , (each allButFirst: 1)].	^words fold: [:a :b | a , b]</body><body package="Tools-Trippy" selector="updateAcceptStatus">updateAcceptStatus		| label |	builder window ifNil: [^self].	label := self okToAccept		ifTrue: [Label with: #NameC &lt;&lt; #labels &gt;&gt; 'Name:']		ifFalse:			[(LabelAndIcon with: #NameC &lt;&lt; #labels &gt;&gt; 'Name:')				icon: GeneralIcons warning].	self nameLabel label: label.	self addButton isEnabled: self okToAccept</body><body package="Tools-Trippy" selector="updateSelectedPackage">updateSelectedPackage		(self targetPackage notNil		and:			[(Store.Registry packagesContaining: self targetClass)				includes: self targetPackage]) ifTrue: [^self].	self targetPackage == Store.Registry nullPackage ifTrue: [^self].	(self targetPackage isNil and: [PrefersNullPackage])		ifTrue: [^packageHolder value: Store.Registry nullPackage].	packageHolder value: (Store.Registry packageForClass: self targetClass)</body></methods><methods><class-id>Tools.Trippy.NewDerivedFieldDialog</class-id> <category>configuring</category><body package="Tools-Trippy" selector="expression:">expression: aCodeFragment		expression := aCodeFragment.	self guessName</body><body package="Tools-Trippy" selector="illegalNames:">illegalNames: aCollection		illegalNames := aCollection</body><body package="Tools-Trippy" selector="targetClass:">targetClass: aTargetClass		classes := aTargetClass instanceBehavior withAllSuperclasses.	classHolder value: aTargetClass instanceBehavior</body></methods><methods><class-id>Tools.Trippy.NewDerivedFieldDialog</class-id> <category>interface opening</category><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder		| nameField |	super postBuildWith: aBuilder.	nameField := (aBuilder componentAt: #nameField) widget.	nameField tooltip: [self nameTooltip].	nameField controller continuousAccept: true</body><body package="Tools-Trippy" selector="postOpenWith:">postOpenWith: aBuilder		super postOpenWith: aBuilder.	self updateAcceptStatus</body></methods><methods><class-id>Tools.Trippy.SequenceInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="augmentEditMenu:">augmentEditMenu: aMenu	"Add appropriate things to the Edit dropdown menu of the shell inspector menu bar. "	aMenu addLine.	self addAddAndRemoveItemsTo: aMenu</body><body package="Tools-Trippy" selector="buildFieldListMenu">buildFieldListMenu	| menu |	menu := super buildFieldListMenu.	menu addLine.	self addAddAndRemoveItemsTo: menu.	^menu</body><body package="Tools-Trippy" selector="createAppendInsertionUndo">createAppendInsertionUndo	"Create an undo object that undoes appening of one element at the end."	^InsertionUndo new		newKeys: (object size + 1 to: object size + 1)</body><body package="Tools-Trippy" selector="createInsertionUndo:before:">createInsertionUndo: indexCollection before: aPartOrNil	^InsertionUndo new newKeys: indexCollection</body><body package="Tools-Trippy" selector="keyAtIndex:">keyAtIndex: anIndex	^anIndex</body><body package="Tools-Trippy" selector="partWithKey:">partWithKey: anInteger	^KeyedElement new key: anInteger</body><body package="Tools-Trippy" selector="privateAdd:">privateAdd: anObject	"Add the argument to the object being inspected. Subclasses may override this if the notion of adding they support is different. For example, an Array inspector page would have to mutate the array to increase its size. Answer an index (key, in page terminology) of object just added. That index is used for selecting it."	object addLast: anObject.	^object size</body><body package="Tools-Trippy" selector="privateInsertAll:beforeIndex:">privateInsertAll: aCollection beforeIndex: anIndex	"Insert elements of the argument collection into the object being inspected. Subclasses may override this if the notion of insertion they support is different. Answer indices (keys, in page terminology) of objects just added."	aCollection reverseDo:		[:each | object add: each beforeIndex: anIndex].	^anIndex to: anIndex + aCollection size - 1</body><body package="Tools-Trippy" selector="privateMoveAllAtIndices:beforeIndex:">privateMoveAllAtIndices: aCollection beforeIndex: anIndex	"Reposition elements at indices listed in aCollection so that they are all located at indices {anIndex, anIndex+1, ...}. The size of the resulting collection is the same as that of the original."	| scratch mobile insertionPoint |	scratch := object copy.	aCollection asSortedCollection reverseDo: [:each | scratch removeAtIndex: each].	mobile := aCollection collect: [:each | object at: each].	insertionPoint := aCollection		inject: anIndex		into: [:result :index | index &lt; anIndex ifTrue: [result - 1] ifFalse: [result]].	mobile reverseDo:		[:each | scratch add: each beforeIndex: insertionPoint].	object replaceFrom: 1 to: object size with: scratch startingAt: 1.	^insertionPoint to: insertionPoint + aCollection size - 1</body><body package="Tools-Trippy" selector="privateRemoveAtIndices:">privateRemoveAtIndices: anIntegerCollection	"Remove elements of the object being inspected with indices listed in the argument array."	anIntegerCollection asSortedCollection reverseDo:		[:anIndex | object removeAtIndex: anIndex]</body><body package="Tools-Trippy" selector="selectIndices:">selectIndices: indexCollection	self selectAll: (indexCollection collect: [:each | KeyedElement of: object at: each])</body></methods><methods><class-id>Tools.Trippy.SequenceInspector</class-id> <category>properties</category><body package="Tools-Trippy" selector="dragControllerClass">dragControllerClass	^InsertReplaceDragController</body></methods><methods><class-id>Tools.Trippy.SequenceInspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="add">add	| expression newValue newKey |	expression := Dialog request: (#AddNewElementColon &lt;&lt; #dialogs &gt;&gt; 'Add new element:').	expression isEmpty ifTrue: [^self].	newValue := Compiler evaluate: expression.	self rememberUndo: self createAppendInsertionUndo.	newKey := self privateAdd: newValue.	self		refresh;		select: (self partWithKey: newKey)</body><body package="Tools-Trippy" selector="drop:before:">drop: partCollection before: aPart	"Parts dropped from another object should be inserted."	| toInsert newIndices insertionIndex |	toInsert := partCollection collect: [:each | each value].	insertionIndex := aPart isNil		ifTrue: [self partCount + 1]		ifFalse: [aPart key].	newIndices := self		privateInsertAll: toInsert		beforeIndex: insertionIndex.	self rememberUndo: (self createInsertionUndo: newIndices before: aPart).	self		refresh;		selectIndices: newIndices</body><body package="Tools-Trippy" selector="dropFromSame:before:">dropFromSame: partCollection before: aPart	"A drop from same object reorders the collection."	| toMove newRange |	"won't handle undo for now"	toMove := partCollection collect: [:each | each key].	newRange := self 		privateMoveAllAtIndices: toMove 		beforeIndex: (aPart isNil 			ifTrue: [self partCount + 1] 			ifFalse: [aPart key]).	self		refresh;		selectIndices: newRange</body><body package="Tools-Trippy" selector="pasteIntoSelf:">pasteIntoSelf: partCollection	"A paste with no target selected ('self') means append."	| toInsert inserted |	toInsert := partCollection collect: [:each | each value].	inserted := self privateInsertAll: toInsert beforeIndex: self partCount + 1.	self rememberUndo:		(self createInsertionUndo: inserted before: nil).	self		refresh;		selectIndices: inserted</body><body package="Tools-Trippy" selector="removeSelected">removeSelected	"Remove the selected elements."	self rememberUndo: self createRemovalUndo.	self privateRemoveAtIndices: (self selections collect: [:each | each key]).	self refresh</body><body package="Tools-Trippy" selector="replaceWith:">replaceWith: newValue	| selections |	selections := self selections.	selections isEmpty ifTrue: [^self].	self rememberUndo: self createReplacementUndo.	selections do: [:each | each value: newValue].	self		refresh;		selectAll: selections</body><body package="Tools-Trippy" selector="undoInsertion:">undoInsertion: anInsertionUndo	self privateRemoveAtIndices: anInsertionUndo newKeys.	self refresh</body><body package="Tools-Trippy" selector="undoRemoval:">undoRemoval: aRemovalUndo	aRemovalUndo savedValues do:		[:each |		self			privateInsertAll: (Array with: each value)			beforeIndex: each part key].	self 		refresh; 		selectAll: aRemovalUndo parts</body></methods><methods><class-id>Tools.Trippy.SequenceInspector</class-id> <category>decomposing</category><body package="Tools-Trippy" selector="partAt:">partAt: anIndex	^KeyedElement of: object at: anIndex</body><body package="Tools-Trippy" selector="partCount">partCount	^object size</body></methods><methods><class-id>Tools.Trippy.SequenceInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	^(#_Elements &lt;&lt; #dialogs &gt;&gt; '&amp;Elements')</body></methods><methods><class-id>Tools.Trippy.ArrayInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="privateAdd:">privateAdd: anObject	"Yes we can resize arrays in the inspector. It can be handy so why not?"	| newObject |	newObject := object copyWith: anObject.	newObject become: object.	^object size</body><body package="Tools-Trippy" selector="privateInsertAll:beforeIndex:">privateInsertAll: aCollection beforeIndex: anIndex	"Insert elements of the argument collection into the array being inspected."	| newObject |	newObject := object class new: object size + aCollection size.	newObject		replaceFrom: 1 to: anIndex - 1 with: object startingAt: 1;		replaceFrom: anIndex to: anIndex + aCollection size - 1 with: aCollection startingAt: 1;		replaceFrom: anIndex + aCollection size to: newObject size with: object startingAt: anIndex.	newObject become: object.	^anIndex to: anIndex + aCollection size - 1</body><body package="Tools-Trippy" selector="privateMoveAllAtIndices:beforeIndex:">privateMoveAllAtIndices: aCollection beforeIndex: anIndex	"Reposition elements at indices listed in aCollection so that they are all 	located at indices {anIndex, anIndex+1, ...}. The size of the resulting collection 	is the same as that of the original."	| static mobile insertionPoint newObject |	static := object copy asOrderedCollection.	aCollection asSortedCollection reverseDo: [:each | static removeAtIndex: each].	mobile := aCollection collect: [:each | object at: each].	insertionPoint := aCollection		inject: anIndex		into: [:result :index | index &lt; anIndex ifTrue: [result - 1] ifFalse: [result]].	newObject := object class new: object size.	newObject		replaceFrom: 1 to: insertionPoint - 1 with: static startingAt: 1;		replaceFrom: insertionPoint to: insertionPoint + mobile size - 1 with: mobile startingAt: 1;		replaceFrom: insertionPoint + mobile size to: newObject size with: static startingAt: insertionPoint.	newObject become: object.	^insertionPoint to: insertionPoint + aCollection size - 1</body><body package="Tools-Trippy" selector="privateRemoveAtIndices:">privateRemoveAtIndices: anIntegerCollection	"Remove elements of the object being inspected with indices	listed in the argument array."	| newObject toRemove targetIndex |	toRemove := anIntegerCollection asSet.	newObject := object class new: object size - toRemove size.	targetIndex := 1.	1 to: object size do:		[:sourceIndex |		(toRemove includes: sourceIndex) ifFalse:			[newObject at: targetIndex put: (object at: sourceIndex).			targetIndex := targetIndex + 1]].	newObject become: object</body></methods><methods><class-id>Tools.Trippy.ArrayInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	^(#_Elements &lt;&lt; #dialogs &gt;&gt; '&amp;Elements')</body></methods><methods><class-id>Tools.Trippy.UndoActionGroup</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:">initialize: actionCollection	actions := actionCollection</body></methods><methods><class-id>Tools.Trippy.UndoActionGroup</class-id> <category>accessing</category><body package="Tools-Trippy" selector="undoIn:">undoIn: anInspector	actions do: [:each | each undoIn: anInspector]</body></methods><methods><class-id>Tools.Trippy.UndoActionGroup class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="with:with:">with: action1 with: action2	^self new initialize:		(Array with: action1 with: action2)</body><body package="Tools-Trippy" selector="with:with:with:">with: action1 with: action2 with: action3	^self new initialize:		(Array with: action1 with: action2 with: action3)</body></methods><methods><class-id>Tools.Trippy.SetInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="augmentEditMenu:">augmentEditMenu: aMenu	"Add appropriate things to the Edit dropdown menu of the shell inspector menu bar. "	aMenu addLine.	self addAddAndRemoveItemsTo: aMenu</body><body package="Tools-Trippy" selector="buildFieldListMenu">buildFieldListMenu	| menu |	menu := super buildFieldListMenu.	menu addLine.	self addAddAndRemoveItemsTo: menu.	^menu</body><body package="Tools-Trippy" selector="createInsertionUndo:before:">createInsertionUndo: aCollection before: ignoredPart	| actuallyAdded |	actuallyAdded := OrderedCollection new.	aCollection do:		[:value |		(object includes: value) ifFalse: [actuallyAdded add: value]].	^InsertionUndo new		newKeys: actuallyAdded</body><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	super enumerateOwnersToIgnore: aBlock.	linearized do: aBlock</body><body package="Tools-Trippy" selector="refresh">refresh	"Arrange the elements in the increasing order of their displayStrings.	Cannot use #collect: to create the pairs collections because #collect:	coalesces equal identity set elements."	| pairs |	pairs := OrderedCollection new: object size.	object do: [:each | pairs add: (Inspector safeDisplayStringOf: each) -&gt; each].	pairs := pairs asSortedCollection: [:a :b | a key &lt;= b key].	linearized := pairs collect: [:each | SetElement of: object element: each value].	super refresh</body><body package="Tools-Trippy" selector="replaceAllSelections:with:">replaceAllSelections: partCollection with: newValue	| newPart |	(Dialog confirm: (#ReplaceAllSelectedWithNewValue &lt;&lt; #dialogs &gt;&gt; 'Remove all these set elementsreplacing them with the single new value?'))		ifFalse: [^self].	newPart := SetElement of: object element: newValue.	self rememberUndo: 		(UndoActionGroup			with: (InsertionUndo new newKeys: (Array with: newValue))			with: self createRemovalUndo).	partCollection do: [:each | object remove: each element].	object add: newValue.	self		refresh;		select: newPart</body><body package="Tools-Trippy" selector="replaceSelectionsWith:">replaceSelectionsWith: newValue	| selections |	selections := self selections.	selections := selections reject: [:some | some isReadOnly].	selections isEmpty ifTrue: [^self].	selections size = 1		ifTrue: [self replaceSingleSelection: selections first with: newValue]		ifFalse: [self replaceAllSelections: selections with: newValue]</body><body package="Tools-Trippy" selector="replaceSingleSelection:with:">replaceSingleSelection: aPart with: newValue	self rememberUndo: (self createReplacementUndo: (Array with: aPart)).	aPart value: newValue.	self refresh; select: aPart</body></methods><methods><class-id>Tools.Trippy.SetInspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="add">add	| expression newValue |	expression := Dialog request: (#AddNewElementColon &lt;&lt; #dialogs &gt;&gt; 'Add new element:').	expression isEmpty ifTrue: [^self].	newValue := Compiler evaluate: expression.	(object includes: newValue) ifFalse:		[self rememberUndo:			(InsertionUndo new newKeys: (Array with: newValue))].	object add: newValue.	self		refresh;		select: (SetElement new element: newValue)</body><body package="Tools-Trippy" selector="drop:at:">drop: partCollection at: aPart	"Dropping onto an element removes that element and replaces it with the one dropped."	| replacement |	replacement := self		pickSingleObjectIn: partCollection		ifCancelled: [^self].	self rememberUndo: 		(ReplacementUndo new savedValues: (Array with: aPart)).	object		remove: aPart element;		add: replacement.	aPart element: replacement.	self		refresh;		select: aPart</body><body package="Tools-Trippy" selector="drop:before:">drop: partCollection before: aPart	"Dropping things adds to a set; where the objects were dropped does not matter."	| added |	added := OrderedCollection new: partCollection size.	partCollection do: 		[:each | | element |		element := each value.		object add: element.		added add: (SetElement of: object element: element)].	self		refresh;		selectAll: added</body><body package="Tools-Trippy" selector="dropFromSame:at:">dropFromSame: aBundle at: anIndex	"Dropping an element onto another element within a set does not mean anything."</body><body package="Tools-Trippy" selector="dropFromSame:before:">dropFromSame: aBundle before: anIndex	"Dragging an element of a set to another location does not mean anything."</body><body package="Tools-Trippy" selector="pasteIntoSelf:">pasteIntoSelf: snapCollection	| added |	added := snapCollection collect: [:each | each value].	self rememberUndo: (self createInsertionUndo: added before: 0).	object addAll: added.	self		refresh;		selectAll: (snapCollection collect: [:each | each part])</body><body package="Tools-Trippy" selector="removeSelected">removeSelected	self rememberUndo: self createRemovalUndo.	object removeAll: (self selections collect: [:each | each element]).	self refresh</body><body package="Tools-Trippy" selector="undoInsertion:">undoInsertion: anInsertionUndo	object removeAll: anInsertionUndo newKeys.	self refresh</body><body package="Tools-Trippy" selector="undoRemoval:">undoRemoval: aRemovalUndo	aRemovalUndo savedValues do:		[:each | object add: each value].	self 		refresh; 		selectAll: aRemovalUndo parts</body><body package="Tools-Trippy" selector="undoReplacement:">undoReplacement: aReplacementUndo	| reinstated |	reinstated := OrderedCollection new.	aReplacementUndo savedValues do:		[:each | | oldElement |		object remove: each part value.		object add: (oldElement := each value).		reinstated add: (SetElement of: object element: oldElement)].	self 		refresh;		selectAll: reinstated</body></methods><methods><class-id>Tools.Trippy.SetInspector</class-id> <category>properties</category><body package="Tools-Trippy" selector="dragControllerClass">dragControllerClass	^InsertReplaceDragController</body></methods><methods><class-id>Tools.Trippy.SetInspector</class-id> <category>accessing</category><body package="Tools-Trippy" selector="partAt:">partAt: anInteger	^linearized at: anInteger</body><body package="Tools-Trippy" selector="partCount">partCount	^linearized size</body></methods><methods><class-id>Tools.Trippy.SetInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	^(#_Elements &lt;&lt; #dialogs &gt;&gt; '&amp;Elements')</body></methods><methods><class-id>Tools.Trippy.ObjectSegment</class-id> <category>comparing</category><body package="Tools-Trippy" selector="&lt;">&lt; another	^firstIndex &lt; another firstIndex</body><body package="Tools-Trippy" selector="=">= another	^firstIndex = another firstIndex</body><body package="Tools-Trippy" selector="hash">hash	^firstIndex hash</body></methods><methods><class-id>Tools.Trippy.ObjectSegment</class-id> <category>accessing</category><body package="Tools-Trippy" selector="firstIndex">firstIndex	^firstIndex</body><body package="Tools-Trippy" selector="lastIndex">lastIndex	^lastIndex</body><body package="Tools-Trippy" selector="range">range	^self firstIndex to: self lastIndex</body></methods><methods><class-id>Tools.Trippy.ObjectSegment</class-id> <category>displaying</category><body package="Tools-Trippy" selector="displayString">displayString	^(Inspector safeDisplayStringOf: firstPart)		, ' ... '		, (Inspector safeDisplayStringOf: lastPart)</body></methods><methods><class-id>Tools.Trippy.ObjectSegment</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="from:part:to:part:">from: anInteger part: aPart to: anotherInteger part: anotherPart	firstIndex := anInteger.	firstPart := aPart.	lastIndex := anotherInteger.	lastPart := anotherPart</body></methods><methods><class-id>Tools.Trippy.DragController</class-id> <category>private</category><body package="Tools-Trippy" selector="currentViewIndex">currentViewIndex	"The answered index may lie outside the valid range of view items."	^view elementIndexFor: view controller sensor cursorPoint</body><body package="Tools-Trippy" selector="doDrop:">doDrop: aDragContext	self subclassResponsibility</body><body package="Tools-Trippy" selector="dropEffect:">dropEffect: aDragContext	"This is a hack to make the cursor give a hint of whether multiple 	objects are copied or not. We always copy the dragged objects."	^(self isMultiObjectDrag: aDragContext)		ifTrue: [#dropEffectCopy]		ifFalse: [#dropEffectMove]</body><body package="Tools-Trippy" selector="isMultiObjectDrag:">isMultiObjectDrag: aDragContext	^aDragContext data clientData size &gt; 1</body><body package="Tools-Trippy" selector="isObjectDrag:">isObjectDrag: aDragContext	^aDragContext key == #inspectorObject</body><body package="Tools-Trippy" selector="restoreViewState">restoreViewState	viewState notNil ifTrue:		[view			targetIndex: (viewState at: 1);			hasFocus: (viewState at: 2)]</body><body package="Tools-Trippy" selector="saveViewState">saveViewState	viewState := Array		with: view targetIndex		with: view hasFocus</body><body package="Tools-Trippy" selector="showDropFeedbackFor:">showDropFeedbackFor: aDragContext	self subclassResponsibility.</body></methods><methods><class-id>Tools.Trippy.DragController</class-id> <category>tracking</category><body package="Tools-Trippy" selector="dragEntry:">dragEntry: aDragContext	^(self isObjectDrag: aDragContext)		ifTrue:			[self saveViewState.			view hasFocus: true.			self dropEffect: aDragContext]		ifFalse:			[#dropEffectNone]</body><body package="Tools-Trippy" selector="dragExit:">dragExit: aDragContext	(self isObjectDrag: aDragContext)		ifTrue: [self restoreViewState].	^#dropEffectNone</body><body package="Tools-Trippy" selector="dragOver:">dragOver: aDragContext	(self isObjectDrag: aDragContext) ifTrue:		[^self showDropFeedbackFor: aDragContext].	^#dropEffectNone</body><body package="Tools-Trippy" selector="drop:">drop: aDragContext	(self isObjectDrag: aDragContext) ifTrue:		[self			restoreViewState;			doDrop: aDragContext.		^#dropEffectCopy].	^#dropEffectNone</body></methods><methods><class-id>Tools.Trippy.DragController</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initializePage:view:">initializePage: anInspectorPage view: aView	page := anInspectorPage.	view := aView</body></methods><methods><class-id>Tools.Trippy.DragController class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="for:view:">for: aPage view: aView	^self new initializePage: aPage view: aView</body></methods><methods><class-id>Tools.Trippy.ReplaceOnlyDragController</class-id> <category>private</category><body package="Tools-Trippy" selector="currentPart">currentPart	^page fieldListHolder list at: 		(1 max: (view replacementIndexFor: view controller sensor cursorPoint))</body><body package="Tools-Trippy" selector="doDrop:">doDrop: aDragContext	| parts thisPart |	parts := aDragContext data clientData.	thisPart := self currentPart.	thisPart isReadOnly ifTrue: [^self].	aDragContext sourceData contextApplication == page		ifTrue:			[page dropFromSame: parts at: thisPart]		ifFalse:			[page drop: parts at: thisPart]</body><body package="Tools-Trippy" selector="showDropFeedbackFor:">showDropFeedbackFor: aDragContext	view showReplaceDropFeedbackIn: aDragContext allowScrolling: true.	^self currentPart isReadOnly		ifTrue: [#dropEffectNone]		ifFalse: [self dropEffect: aDragContext]</body></methods><methods><class-id>Tools.Trippy.NamedVariable</class-id> <category>accessing</category><body package="Tools-Trippy" selector="asVariableName">asVariableName	^name</body><body package="Tools-Trippy" selector="displayIcon">displayIcon		self isProtected ifFalse: [^super displayIcon].	^VisualStack		with: super displayIcon		with: GeneralIcons protectedSubscript</body><body package="Tools-Trippy" selector="displayString">displayString	^name asString</body><body package="Tools-Trippy" selector="displayText">displayText		| text targetClass |	text := super displayText.	targetClass := Inspector classOfObject: object.	^index &gt; targetClass superclass instSize ifTrue: [text allBold] ifFalse: [text]</body><body package="Tools-Trippy" selector="index">index		^index</body><body package="Tools-Trippy" selector="key">key	^name</body><body package="Tools-Trippy" selector="name">name	^name</body><body package="Tools-Trippy" selector="partName">partName	^name</body><body package="Tools-Trippy" selector="value">value	^Inspector instVarOfObject: object at: index</body><body package="Tools-Trippy" selector="value:">value: anObject	^object instVarAt: index put: anObject</body></methods><methods><class-id>Tools.Trippy.NamedVariable</class-id> <category>testing</category><body package="Tools-Trippy" selector="isNamedVariable">isNamedVariable	^true</body><body package="Tools-Trippy" selector="isProtected">isProtected	^protected</body></methods><methods><class-id>Tools.Trippy.NamedVariable</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="beProtected">beProtected	protected := true</body><body package="Tools-Trippy" selector="index:class:">index: anInteger class: aClass	(anInteger between: 1 and: aClass instSize) ifFalse:		[self error: (#instVarIdexNotInTheClass &lt;&lt; #dialogs &gt;&gt; 'instance variable index not in the class')].	index := anInteger.	name := aClass instVarNameForIndex: index.	class := aClass.	protected := false.</body><body package="Tools-Trippy" selector="name:class:">name: aString class: aClass	name := aString.	class := aClass.	protected := false.	index := aClass instVarIndexFor: name.	index isZero ifTrue: [self error: (#variableNotInTheClass &lt;&lt; #dialogs &gt;&gt; 'variable not in the class')]</body><body package="Tools-Trippy" selector="refreshIndex">refreshIndex	index := class instVarIndexFor: name.	index isZero ifTrue: [self error: (#variableNotInTheClass &lt;&lt; #dialogs &gt;&gt; 'variable not in the class')]</body></methods><methods><class-id>Tools.Trippy.NamedVariable</class-id> <category>comparing</category><body package="Tools-Trippy" selector="lessByIndexThan:">lessByIndexThan: aNamedVariable		^self index &lt; aNamedVariable index</body><body package="Tools-Trippy" selector="lessByNameThan:">lessByNameThan: aNamedVariable		^self name &lt; aNamedVariable name</body><body package="Tools-Trippy" selector="sameTypeEquals:">sameTypeEquals: aPart 	^name = aPart name</body><body package="Tools-Trippy" selector="specificHash">specificHash	^name hash</body></methods><methods><class-id>Tools.Trippy.NamedVariable class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="of:index:">of: anObject index: anInteger	^(self new)		object: anObject;		index: anInteger			class: (Inspector classOfObject: anObject)</body><body package="Tools-Trippy" selector="of:named:">of: anObject named: aString	^(self new)		object: anObject;		name: aString			class: (Inspector classOfObject: anObject)</body></methods><methods><class-id>Tools.Trippy.TextEditorInspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="changeRequest">changeRequest	| choice textEditor |	textEditor := (self builder componentAt: #text) widget controller.	textEditor accepted ifTrue: [^true].	choice := Dialog 		choose: (#AcceptUnsavedChanges &lt;&lt; #dialogs &gt;&gt; 'Accept unsaved changes?')		labels: (Array with: (#Yes &lt;&lt; #dialogs &gt;&gt; 'Yes') with: (#No &lt;&lt; #dialogs &gt;&gt; 'No') with: (#Cancel &lt;&lt; #dialogs &gt;&gt; 'Cancel'))		values: #(yes no cancel)		default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [textEditor accept].	^true</body><body package="Tools-Trippy" selector="copyStateTo:">copyStateTo: anInspector	"There is no state to talk of."</body><body package="Tools-Trippy" selector="refresh">refresh	self textHolder value: self object</body><body package="Tools-Trippy" selector="textAccepted:">textAccepted: aController	| newObject |	newObject := self coerceText: aController text.	newObject become: self object.	self refresh</body></methods><methods><class-id>Tools.Trippy.TextEditorInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="coerceText:">coerceText: aTextOrString	"Answer the argument as a new instance of a class compatible with that	of the current object. We currently assume that can only be one of String	subclasses or Text."	^(self object isKindOf: Text)		ifTrue: [aTextOrString asText copy]		ifFalse: [self object class fromString: aTextOrString asString]</body><body package="Tools-Trippy" selector="defaultFocusWidget">defaultFocusWidget	^self widgetAt: #text</body><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	super enumerateOwnersToIgnore: aBlock.	aBlock value: textHolder</body><body package="Tools-Trippy" selector="nukeBogusReferencesIn:referentContext:">nukeBogusReferencesIn: aWeakArray referentContext: aContext	super nukeBogusReferencesIn: aWeakArray referentContext: aContext.	[(aWeakArray 		indexOf: self textHolder 		replaceWith: aWeakArray tombstone 		startingAt: 1 		stoppingAt: aWeakArray size) = 0] whileFalse</body></methods><methods><class-id>Tools.Trippy.TextEditorInspector</class-id> <category>aspects</category><body package="Tools-Trippy" selector="textHolder">textHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textHolder isNil		ifTrue:			[textHolder := String new asValue]		ifFalse:			[textHolder]</body></methods><methods><class-id>Tools.Trippy.TextEditorInspector</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(aBuilder componentAt: #text) widget controller		autoAccept: false</body></methods><methods><class-id>Tools.Trippy.TextEditorInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	^(#Text &lt;&lt; #labels &gt;&gt; 'Text')</body></methods><methods><class-id>Tools.Trippy.HierarchyNavigator</class-id> <category>aspects</category><body package="Tools-Trippy" selector="hierarchyHolder">hierarchyHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^hierarchyHolder isNil		ifTrue:			[hierarchyHolder := IndentedTreeSelectionInList new]		ifFalse:			[hierarchyHolder]</body></methods><methods><class-id>Tools.Trippy.HierarchyNavigator</class-id> <category>accessing</category><body package="Tools-Trippy" selector="contractAll">contractAll	self hierarchyHolder		selectionIndex: 1;		deepCloseCurrent;		deepOpenCurrentTo: 1</body><body package="Tools-Trippy" selector="contractBranch">contractBranch	self hierarchyHolder deepCloseCurrent</body><body package="Tools-Trippy" selector="expandAll">expandAll	self hierarchyHolder		selectionIndex: 1;		deepOpenCurrent</body><body package="Tools-Trippy" selector="expandBranch">expandBranch	self hierarchyHolder deepOpenCurrent</body><body package="Tools-Trippy" selector="vicinity">vicinity	^hierarchy id</body></methods><methods><class-id>Tools.Trippy.HierarchyNavigator</class-id> <category>private</category><body package="Tools-Trippy" selector="expandToObject">expandToObject	| path this parent |	path := OrderedCollection new.	this := self object.	[path add: this.	(parent := hierarchy parentOf: this) notNil] 		whileTrue: [this := parent].	path reverse do: [:nextObject | hierarchyHolder open: nextObject]</body><body package="Tools-Trippy" selector="initialHierarchySelection">initialHierarchySelection	^self object</body><body package="Tools-Trippy" selector="nameOf:">nameOf: anObject	| string |	string := Inspector safeDisplayStringOf: anObject.	^anObject == self object		ifTrue: [string asText allBold]		ifFalse: [string]</body></methods><methods><class-id>Tools.Trippy.HierarchyNavigator</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:hierarchy:shell:inspector:">initialize: aVisit hierarchy: aHierarchy shell: aShell inspector: anInspector	super initialize: aVisit shell: aShell inspector: anInspector.	originalVisit := aVisit.	hierarchy := aHierarchy.	root := aHierarchy rootOf: self object.	hierarchyHolder := IndentedTreeSelectionInList		listObjectHierarchy: #root		childBlock: [:thing | #root == thing			ifTrue: [Array with: root]			ifFalse: [hierarchy childrenOf: thing]]		childNameBlock: [:thing | self nameOf: thing].	hierarchyHolder expandedEmphasis: #().	self expandToObject</body><body package="Tools-Trippy" selector="installedWith:">installedWith: aBuilder	(aBuilder componentAt: #hierarchyList) widget		makeVisible: self hierarchyHolder selectionIndex</body><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder	"Some ugliness was needed to work around a problem with subcanvases being built	inside other subcanvases on postBuildWith: event."	self reinstallInspector.	self hierarchyHolder selection: self initialHierarchySelection.	hierarchyHolder selectionIndexHolder		onChangeSend: #hierarchyElementSelected to: self</body></methods><methods><class-id>Tools.Trippy.HierarchyNavigator</class-id> <category>notification</category><body package="Tools-Trippy" selector="hierarchyDoubleClicked">hierarchyDoubleClicked	shell exploreFocus</body><body package="Tools-Trippy" selector="hierarchyElementSelected">hierarchyElementSelected	"A new member of the hierarchy is selected. Update the subordinate	page to display the newly selected object, if there is indeed an object selected."	| selection |	selection := self hierarchyHolder selection.	selection isNil ifTrue: [^self].	inspector object == selection ifTrue: [^self].	visit := originalVisit object == selection		ifTrue: [originalVisit]		ifFalse: [originalVisit visitOf: selection ifNone:			[Visit object: selection owner: originalVisit]].	self replaceInspectorWithOneOn: self object</body></methods><methods><class-id>Tools.Trippy.HierarchyNavigator class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="visit:hierarchy:shell:inspector:">visit: aVisit hierarchy: aHierarchy shell: aShell inspector: anInspector	^self new		initialize: aVisit		hierarchy: aHierarchy		shell: aShell		inspector: anInspector</body></methods><methods><class-id>Tools.Trippy.VisitTreeNavigator</class-id> <category>accessing</category><body package="Tools-Trippy" selector="object">object	^self visit object</body><body package="Tools-Trippy" selector="vicinity">vicinity	^#visited</body><body package="Tools-Trippy" selector="visit">visit	^self hierarchyHolder selection</body></methods><methods><class-id>Tools.Trippy.VisitTreeNavigator</class-id> <category>notification</category><body package="Tools-Trippy" selector="hierarchyDoubleClicked">hierarchyDoubleClicked	shell revisit: self hierarchyHolder selection</body></methods><methods><class-id>Tools.Trippy.VisitTreeNavigator</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:shell:initialVisit:inspector:">initialize: aVisit shell: anInspectorShell initialVisit: aVisit2 inspector: anInspector	root := aVisit.	visit := originalVisit := Visit object: aVisit object.	shell := anInspectorShell.	inspector := anInspector.	startingVisit := aVisit2.	hierarchyHolder := IndentedTreeSelectionInList		listObjectHierarchy: #root		childBlock: [:thing | #root == thing			ifTrue: [Array with: root]			ifFalse: [thing children]]		childNameBlock: [:thing | thing displayString].	hierarchyHolder 		expandedEmphasis: #();		selection: startingVisit.	self refreshInspectorClasses</body><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder	self hierarchyHolder		selectionIndex: 1;		deepOpenCurrent.	super postBuildWith: aBuilder.</body></methods><methods><class-id>Tools.Trippy.VisitTreeNavigator</class-id> <category>private</category><body package="Tools-Trippy" selector="initialHierarchySelection">initialHierarchySelection	^startingVisit</body></methods><methods><class-id>Tools.Trippy.Visit</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize">initialize	children := OrderedCollection new</body><body package="Tools-Trippy" selector="object:owner:">object: anObject owner: aVisitOrNil	object := anObject.	owner := aVisitOrNil.	owner notNil ifTrue: [owner addChild: self]</body></methods><methods><class-id>Tools.Trippy.Visit</class-id> <category>testing</category><body package="Tools-Trippy" selector="hasOwner">hasOwner	^owner notNil</body></methods><methods><class-id>Tools.Trippy.Visit</class-id> <category>accessing</category><body package="Tools-Trippy" selector="addChild:">addChild: aVisit	children add: aVisit</body><body package="Tools-Trippy" selector="children">children	^children</body><body package="Tools-Trippy" selector="forgetVisitOf:">forgetVisitOf: anObject	children remove: (self visitOf: anObject ifNone: [^self])</body><body package="Tools-Trippy" selector="forgetVisitOfPart:">forgetVisitOfPart: aPart	children remove: (self visitOfPart: aPart ifNone: [^self])</body><body package="Tools-Trippy" selector="object">object	^object</body><body package="Tools-Trippy" selector="owner">owner	^owner</body><body package="Tools-Trippy" selector="visitOf:ifNone:">visitOf: anObject ifNone: aBlock	^children detect: [:some | some object == anObject] ifNone: aBlock</body><body package="Tools-Trippy" selector="visitOfPart:ifNone:">visitOfPart: aPart ifNone: aBlock	^children 		detect: [:some | (some respondsTo: #ownerPart) and: [some ownerPart = aPart]] 		ifNone: aBlock</body></methods><methods><class-id>Tools.Trippy.Visit</class-id> <category>printing</category><body package="Tools-Trippy" selector="displayString">displayString	| printString |	printString := Inspector safeBasicPrintStringOf: self object.	^(Inspector isImmutableObject: self object)		ifTrue:			[printString , ' (' , (#immutable &lt;&lt; #dialogs &gt;&gt; 'immutable') asString ,					')']		ifFalse: [printString]</body><body package="Tools-Trippy" selector="printOn:">printOn: aStream	aStream 		nextPut: $&lt;;		print: self class;		nextPutAll: ' object: ';		print: self object;		nextPut: $&gt;</body></methods><methods><class-id>Tools.Trippy.Visit</class-id> <category>privileged</category><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	aBlock value: self.	children do: [:each | each enumerateOwnersToIgnore: aBlock]</body></methods><methods><class-id>Tools.Trippy.Visit class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="new">new	^super new initialize</body><body package="Tools-Trippy" selector="object:">object: anObject	^self new object: anObject owner: nil</body><body package="Tools-Trippy" selector="object:owner:">object: anObject owner: aVisit	^self new		object: anObject owner: aVisit</body></methods><methods><class-id>Tools.Trippy.Clipboard</class-id> <category>private</category><body package="Tools-Trippy" selector="fromLocal:">fromLocal: anObject	^anObject == zeroStandIn		ifTrue: [0]		ifFalse: [anObject]</body><body package="Tools-Trippy" selector="toLocal:">toLocal: anObject	"If a 0 is stored on the clipboard, it has to be replaced with a different	object to distinguish it from dead values."	^0 == anObject		ifTrue: [zeroStandIn]		ifFalse: [anObject]</body></methods><methods><class-id>Tools.Trippy.Clipboard</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize">initialize	zeroStandIn := '0' copy. "unique object to stand in for 0 value"	self empty</body></methods><methods><class-id>Tools.Trippy.Clipboard</class-id> <category>testing</category><body package="Tools-Trippy" selector="isEmpty">isEmpty	^values size = 0 or:		[values detect: [:some | some ~~ 0] ifNone: [^true].		^false]</body><body package="Tools-Trippy" selector="notEmpty">notEmpty	^self isEmpty not</body></methods><methods><class-id>Tools.Trippy.Clipboard</class-id> <category>accessing</category><body package="Tools-Trippy" selector="empty">empty	parts := Array new.	values := Array new</body><body package="Tools-Trippy" selector="get">get	"Answer PartSnapshots of parts with not yet dead values."	| result |	result := OrderedCollection new: parts size.	parts with: values do:		[:part :value |		0 ~~ value ifTrue:			[result add: (PartSnapshot new part: part value: (self fromLocal: value))]].	^result</body><body package="Tools-Trippy" selector="put:">put: aPartCollection	parts := aPartCollection select: [:each | each hasValue].	values := WeakArray new: parts size.	parts keysAndValuesDo:		[:index :part |		values at: index put: (self toLocal: part value)]</body></methods><methods><class-id>Tools.Trippy.Clipboard class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="default">default	Default isNil ifTrue:		[Default := self new].	^Default</body></methods><methods><class-id>Tools.Trippy.Clipboard class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="new">new	^super new initialize</body></methods><methods><class-id>Tools.Trippy.PartVisit</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="part:inspector:">part: aPart inspector: anInspector	object := aPart.	ownerInspector := anInspector</body></methods><methods><class-id>Tools.Trippy.PartVisit</class-id> <category>accessing</category><body package="Tools-Trippy" selector="object">object	^object value</body><body package="Tools-Trippy" selector="ownerInspector">ownerInspector	^ownerInspector</body><body package="Tools-Trippy" selector="ownerPart">ownerPart	^object</body></methods><methods><class-id>Tools.Trippy.PartVisit</class-id> <category>printing</category><body package="Tools-Trippy" selector="displayString">displayString	| result |	result := WriteStream on: (String new: 20).	self ownerPart notNil ifTrue:		[result nextPutAll: self ownerPart partName.		result nextPutAll: ': '].	Inspector safeBasicPrint: self object on: result.	^result contents</body><body package="Tools-Trippy" selector="printOn:">printOn: aStream	aStream 		nextPut: $&lt;;		print: self class;		nextPutAll: ' object: ';		print: self object;		nextPutAll: ' part: ';		print: self ownerPart;		nextPut: $&gt;</body></methods><methods><class-id>Tools.Trippy.PartVisit</class-id> <category>privileged</category><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	super enumerateOwnersToIgnore: aBlock.	ownerInspector enumerateOwnersToIgnore: aBlock</body></methods><methods><class-id>Tools.Trippy.PartVisit class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="part:owner:inspector:">part: aPart owner: aVisit inspector: anInspector	^self new 		object: nil owner: aVisit;		part: aPart inspector: anInspector;		yourself</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>testing</category><body package="Tools-Trippy" selector="canDive">canDive	^self hasCurrentInspector and: [self inspector canDive]</body><body package="Tools-Trippy" selector="canExploreParts">canExploreParts	^installedNavigator vicinity ~~ #parts		and: [self inspector isPartList]</body><body package="Tools-Trippy" selector="canExploreSiblings">canExploreSiblings	^self visit hasOwner and: [installedNavigator vicinity ~~ #owner]</body><body package="Tools-Trippy" selector="canFocus">canFocus	^installedNavigator vicinity ~~ #none</body><body package="Tools-Trippy" selector="canGoBack">canGoBack	^current &gt; 1</body><body package="Tools-Trippy" selector="canGoForward">canGoForward	^current &lt; trail size</body><body package="Tools-Trippy" selector="clipboardNotEmpty">clipboardNotEmpty	^Clipboard default notEmpty</body><body package="Tools-Trippy" selector="hasCurrentInspector">hasCurrentInspector	^current &gt; 0</body><body package="Tools-Trippy" selector="notExploringVisited">notExploringVisited	^installedNavigator vicinity ~~ #visited</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>private-evaluation</category><body package="Tools-Trippy" selector="doItContext">doItContext	"Answer the context in which a text selection can be evaluated."	^nil</body><body package="Tools-Trippy" selector="doItReceiver">doItReceiver	"Answer the object in which context the text selection is evaluated."	^self object</body><body package="Tools-Trippy" selector="evaluatorEditor">evaluatorEditor	^(builder componentAt: #evaluator) widget controller</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>aspects</category><body package="Tools-Trippy" selector="menuBarHolder">menuBarHolder	^menuBarHolder</body><body package="Tools-Trippy" selector="textHolder">textHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textHolder isNil		ifTrue:			[textHolder := String new asValue]		ifFalse:			[textHolder]</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>actions</category><body package="Tools-Trippy" selector="back">back	"Go back to the previously visited page, if any."	self inspector changeRequest ifFalse: [^self].	current := 1 max: current - 1.	self refresh</body><body package="Tools-Trippy" selector="compareObjectToClipboard">compareObjectToClipboard	| clipboardObjects report |	clipboardObjects := Clipboard default get.	clipboardObjects isEmpty ifTrue:		[^Dialog warn: (#TheClipboardIsEmpty &lt;&lt; #dialogs &gt;&gt; 'The clipboard is empty.')].	report := clipboardObjects size = 1		ifTrue: [self compareObjectToOne: clipboardObjects first]		ifFalse: [self compareObjectToMany: clipboardObjects ifCancelled: [^self]].	Dialog warn: report</body><body package="Tools-Trippy" selector="dive">dive	"The inspector should take care of diving since it	knows what it wants to dive into."	self inspector dive</body><body package="Tools-Trippy" selector="diveIntoClass">diveIntoClass	"Dive into the class of the current object."	self diveInto: (DerivedAttribute label: 'class' value: self object class)</body><body package="Tools-Trippy" selector="emptyClipboard">emptyClipboard	Clipboard default empty</body><body package="Tools-Trippy" selector="forward">forward	"Go forward to the following visited page, if any."	self inspector changeRequest ifFalse: [^self].	current := trail size min: current + 1.	self refresh</body><body package="Tools-Trippy" selector="goTo:">goTo: anIndex	"Switch to the page at the specific index on the visit history list."	current := 1 max: (anIndex min: trail size).	self refresh</body><body package="Tools-Trippy" selector="helpAbout">helpAbout	AboutVisualWorksDialog open</body><body package="Tools-Trippy" selector="helpInspectingObjects">helpInspectingObjects	SmalltalkWorkbench		openHelpBook: 'Development with VisualWorks' 		topic: 'Inspecting Objects'</body><body package="Tools-Trippy" selector="helpInspector">helpInspector	SmalltalkWorkbench		openHelpBook: 'VisualWorks Tools' 		topic: 'Inspector'</body><body package="Tools-Trippy" selector="inspectClipboard">inspectClipboard	| parts object |	parts := Clipboard default get.	parts size = 0  ifTrue:		[^Dialog warn: (#TheClipboardIsEmpty &lt;&lt; #dialogs &gt;&gt; 'The clipboard is empty.')].	object := parts size = 1		ifTrue: [parts first value]		ifFalse: [parts collect: [:each | each value]].	object inspect</body><body package="Tools-Trippy" selector="selectAllFields">selectAllFields		self inspector selectAllFields</body><body package="Tools-Trippy" selector="toggleEvaluationPane">toggleEvaluationPane 	evaluationPaneVisible := evaluationPaneVisible not.	EvaluationPaneWasLastShown := evaluationPaneVisible.	self setEvaluatorLayout.	builder window refresh.	evaluationPaneVisible ifTrue:		[(builder componentAt: #evaluator) takeKeyboardFocus]</body><body package="Tools-Trippy" selector="toggleToolbar">toggleToolbar	self builder window toolbarVisible:		self builder window toolbarVisible not</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>private</category><body package="Tools-Trippy" selector="addToTrail:">addToTrail: aNavigator	trail := trail copyFrom: 1 to: current.	trail addLast: aNavigator.	current := current + 1</body><body package="Tools-Trippy" selector="compareObjectToMany:ifCancelled:">compareObjectToMany: partCollection ifCancelled: aBlock	| part |	part := Dialog		choose: (#InspectorClipboardHasMultipleObjects &lt;&lt; #dialogs &gt;&gt; 'The clipboard contains multiple objects. Select one:')		fromList: (partCollection collect: [:each | each value displayString])		values: partCollection		lines: 10		cancel: aBlock		for: self builder window.	^self compareObjectToOne: part</body><body package="Tools-Trippy" selector="compareObjectToOne:">compareObjectToOne: partSnapshot	| thisObject clipboardObject report |	thisObject := self inspector selectedObjectOrInspectedObject.	clipboardObject := partSnapshot value.	report := TextStream on: (String new: 100).	report		nextPutAllText: 'Comparing object: ';		nextPutAllText: thisObject basicPrintString asText allBold; cr;		nextPutAllText: ' to clipboardObject: ';		nextPutAllText: clipboardObject basicPrintString asText allBold; cr; cr;		nextPutAllText: 'object == clipboardObject: ';		nextPutAllText: (self formattedResultOf: [thisObject == clipboardObject]); cr;		nextPutAllText: 'object = clipboardObject: ';		nextPutAllText: (self formattedResultOf: [thisObject = clipboardObject]); cr;		nextPutAllText: 'clipboardObject = object: ';		nextPutAllText: (self formattedResultOf: [clipboardObject = thisObject]).	^report contents</body><body package="Tools-Trippy" selector="diveIntoCollaborator:">diveIntoCollaborator: aCollaborator	self diveInto: (aCollaborator asPartOf: self object)</body><body package="Tools-Trippy" selector="dividerFraction">dividerFraction	^evaluationPaneVisible		ifTrue: [0.6]		ifFalse: [1]</body><body package="Tools-Trippy" selector="dividerOffset">dividerOffset	^evaluationPaneVisible		ifTrue: [-2]		ifFalse: [0]</body><body package="Tools-Trippy" selector="formattedResultOf:">formattedResultOf: aBlock	| result |	result := aBlock		on: Error		do: [:ex | ^(#errorC1s &lt;&lt; #dialogs &gt;&gt; '[error: &lt;1s&gt;]') expandMacrosWith: ex description].	^result printString asText allBold</body><body package="Tools-Trippy" selector="install:">install: aNavigator	| subBuilder |	aNavigator builder: nil.	installedNavigator := aNavigator.	(self builder componentAt: #navigator) widget		client: aNavigator		spec: #windowSpec		builder: (subBuilder := builder newSubBuilder).	aNavigator installedWith: subBuilder.	self focusDefaultWidget</body><body package="Tools-Trippy" selector="privateChangeRequest">privateChangeRequest	| choice |	self inspector changeRequest ifFalse: [^false].	self evaluatorEditor accepted ifTrue: [^true].	choice := Dialog 		choose: (#CodeHasBeenChanged &lt;&lt; #dialogs &gt;&gt; 'The code in the evaluation pane has been changed.Remember it for future use?') 		labels: (Array with: (#Yes &lt;&lt; #dialogs &gt;&gt; 'Yes') with: (#No &lt;&lt; #dialogs &gt;&gt; 'No') with: (#Cancel &lt;&lt; #dialogs &gt;&gt; 'Cancel')) 		values: #(yes no cancel) 		default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [self evaluatorEditor accept].	^true</body><body package="Tools-Trippy" selector="refresh">refresh	"Completely rebuild the UI."	self		install: (trail at: current);		refreshMenuBar;		refreshToolbar;		refreshWindowLabel</body><body package="Tools-Trippy" selector="refreshToolbar">refreshToolbar	| toolbar |	toolbar := builder componentAt: #toolbar.	(toolbar componentAt: #back) isEnabled: self canGoBack.	(toolbar componentAt: #forward) isEnabled: self canGoForward.	(toolbar componentAt: #focus) isEnabled: self canFocus.	(toolbar componentAt: #exploreSiblings) isEnabled: self canExploreSiblings.	(toolbar componentAt: #exploreVisited) isEnabled: self notExploringVisited</body><body package="Tools-Trippy" selector="refreshWindowLabel">refreshWindowLabel	builder window label: self visit displayString</body><body package="Tools-Trippy" selector="resetTrailFor:">resetTrailFor: aVisit	| result thisVisit |	(trail includes: [:some | some visit == aVisit]) ifTrue:		[^self].	result := OrderedCollection new.	thisVisit := aVisit.	[thisVisit notNil] whileTrue:		[result add: (NullNavigator visit: thisVisit shell: self).		thisVisit := thisVisit owner].	trail := result reverse.	current := trail size</body><body package="Tools-Trippy" selector="resetTrailForNew:">resetTrailForNew: aVisit	| result thisVisit |	trail last visit = aVisit owner ifTrue: [^self].	result := OrderedCollection new.	thisVisit := aVisit owner.	[thisVisit notNil] whileTrue:		[result add: (NullNavigator visit: thisVisit shell: self).		thisVisit := thisVisit owner].	trail := result reverse.	current := trail size</body><body package="Tools-Trippy" selector="setEvaluatorLayout">setEvaluatorLayout	| fraction offset |	fraction := self dividerFraction.	offset := self dividerOffset.	(builder componentAt: #navigator) component layout		bottomFraction: fraction;		bottomOffset: offset.	(builder componentAt: #splitter) component layout		topFraction: fraction;		topOffset: offset;		bottomFraction: fraction;		bottomOffset: offset negated.	(builder componentAt: #evaluatorPane) component layout		topFraction: fraction;		topOffset: offset negated</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>privileged</category><body package="Tools-Trippy" selector="diveInto:">diveInto: aPart	"Sent by the current inspector to dive into the part of the	currently selected object. Because this affects the navigation environment,	it is the shell's responsibility."	| visit navigator |	visit := self visit 		visitOfPart: aPart		ifNone: [PartVisit part: aPart owner: self visit inspector: self inspector].	navigator := NullNavigator visit: visit shell: self.	self resetTrailForNew: visit.	self addToTrail: navigator.	self refresh</body><body package="Tools-Trippy" selector="doWithOwnersToIgnore:">doWithOwnersToIgnore: aBlock	"See the comment to Inspector&gt;&gt;doWithOwnersToIgnore: for a detailed explanation.	This class is the top component, therefore here we start trickling down enumerating	junk owners on our way."	self enumerateOwnersToIgnore: aBlock</body><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	aBlock 		value: self;		value: builder window;		value: builder window component;		value: (self widgetAt: #evaluator).	origin enumerateOwnersToIgnore: aBlock.	trail do: [:each | each enumerateOwnersToIgnore: aBlock]</body><body package="Tools-Trippy" selector="focusDefaultWidget">focusDefaultWidget	self inspector defaultFocusWidget		ifNotNil: [:widget | builder window keyboardProcessor focusedView: widget]</body><body package="Tools-Trippy" selector="focusObjectChanged">focusObjectChanged	"Some pages may replace the object they have been initially opened	on with another object. A hierarchy page does that when a new element	of a hierarchy is selected. This message is then sent to the shell to notify	it of the change."	self		refreshMenuBar;		refreshToolbar;		refreshWindowLabel;		focusDefaultWidget</body><body package="Tools-Trippy" selector="partValueChanged:">partValueChanged: aPart	self visit forgetVisitOfPart: aPart</body><body package="Tools-Trippy" selector="revisit:">revisit: aVisit	self resetTrailFor: aVisit.	self refresh</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize">initialize	super initialize.	current := 0.	evaluationPaneVisible := false.	textHolder := SharedTextHolder.	menuBarHolder := ValueHolder with: nil</body><body package="Tools-Trippy" selector="inspect:">inspect: anObject	| navigator |	origin := Visit object: anObject.	navigator := NullNavigator visit: origin shell: self.	trail := OrderedCollection with: navigator.	current := 1.	self refresh</body><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	evaluationPaneVisible := EvaluationPaneWasLastShown.	self setEvaluatorLayout.	(self evaluatorEditor)		initializeMenuForCode;		autoAccept: false</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>private-page switches</category><body package="Tools-Trippy" selector="exploreFocus">exploreFocus	| navigator |	navigator := NullNavigator visit: self visit shell: self inspector: self inspector.	trail at: current put: navigator.	self refresh</body><body package="Tools-Trippy" selector="exploreHierarchy:">exploreHierarchy: aHierarchy	| navigator |	navigator := HierarchyNavigator		visit: self visit		hierarchy: aHierarchy		shell: self		inspector: self inspector.	self addToTrail: navigator.	self refresh</body><body package="Tools-Trippy" selector="exploreParts">exploreParts	| selection visit navigator |	self inspector isPartList ifFalse: [^self].	self inspector hasSingleSelection ifFalse:		[self inspector select: (self inspector partAt: 1)].	selection := self inspector selection.	selection hasValue ifFalse:		[self inspector select: (self inspector partAt: 1).		selection := self inspector selection].	visit := self visit 		visitOfPart: selection		ifNone: [PartVisit part: selection owner: self visit inspector: self inspector].	navigator := OwnerNavigator visit: visit shell: self.	navigator bePartsNavigator.	self addToTrail: navigator.	self refresh</body><body package="Tools-Trippy" selector="exploreSiblings">exploreSiblings	| navigator |	navigator := OwnerNavigator 		visit: self visit 		shell: self		inspector: self inspector.	trail at: current put: navigator.	self refresh</body><body package="Tools-Trippy" selector="exploreVisited">exploreVisited	| navigator |	navigator := VisitTreeNavigator new		initialize: origin		shell: self		initialVisit: self visit		inspector: self inspector.	self 		install: navigator;		refreshMenuBar;		refreshToolbar;		refreshWindowLabel</body><body package="Tools-Trippy" selector="showVicinity:">showVicinity: aSelector	| navigator |	navigator := self object perform: aSelector.	navigator 		initialize: self visit 		shell: self 		inspector: self inspector.	self addToTrail: navigator.	self refresh</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>accessing</category><body package="Tools-Trippy" selector="changeRequest">changeRequest	^[self privateChangeRequest]		on: Error		do: [:ex | ex return: true]</body><body package="Tools-Trippy" selector="inspector">inspector	^self navigator inspector</body><body package="Tools-Trippy" selector="navigator">navigator	^installedNavigator</body><body package="Tools-Trippy" selector="object">object	^self inspector object</body><body package="Tools-Trippy" selector="visit">visit	^self navigator visit</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>private-menus</category><body package="Tools-Trippy" selector="addCollaboratorItemsTo:">addCollaboratorItemsTo: aMenu	| collaborators item |	collaborators := Inspector		cautiousSend: #inspectorCollaborators		to: self object		else: [^self].	collaborators		do:			[:each | 			item := MenuItem				labeled:					(#ToCollaborator &lt;&lt; #menus &gt;&gt; 'To &lt;1s&gt;' expandMacrosWith: each label).			item value: [self diveIntoCollaborator: each].			aMenu addItem: item]</body><body package="Tools-Trippy" selector="addExploreItemsTo:">addExploreItemsTo: aMenu	| hierarchies |	hierarchies := Inspector		cautiousSend: #inspectorHierarchies		to: self object		else: [^self].	hierarchies isEmpty		ifFalse:			[aMenu addLine.			hierarchies				do:					[:each | 					| item |					item := MenuItem labeled: each label.					item value: [self exploreHierarchy: each].					self navigator vicinity = each id ifTrue: [item beOn].					aMenu addItem: item]]</body><body package="Tools-Trippy" selector="buildExploreSubmenu">buildExploreSubmenu	| aSubmenu |	aSubmenu := self class baseExploreMenu.	installedNavigator vicinity == #none ifTrue:		[(aSubmenu atNameKey: #exploreFocus) beOn].	installedNavigator vicinity == #owner ifTrue:		[(aSubmenu atNameKey: #exploreSiblings) beOn].	self visit hasOwner ifFalse:		[(aSubmenu atNameKey: #exploreSiblings) disable].	installedNavigator vicinity == #self ifTrue:		[(aSubmenu atNameKey: #exploreParts) beOn].	self inspector isPartList ifFalse:		[(aSubmenu atNameKey: #exploreParts) disable].	installedNavigator vicinity == #visited ifTrue:		[(aSubmenu atNameKey: #exploreVisited) beOn].	self addExploreItemsTo: aSubmenu.	^aSubmenu</body><body package="Tools-Trippy" selector="buildGoSubmenu">buildGoSubmenu	| menu |	menu := self class baseGoSubmenu.	(menu atNameKey: #goDive) enabled: [self canDive].	(menu atNameKey: #goBack) enabled: [self canGoBack].	(menu atNameKey: #goForward) enabled: [self canGoForward].	self addCollaboratorItemsTo: menu.	^menu</body><body package="Tools-Trippy" selector="buildHistorySubmenu">buildHistorySubmenu	| menu item |	menu := Menu new.	trail keysAndValuesDo:		[:index :navigator | | label |		label := index &lt; 10			ifTrue: ['&amp;', index printString, '. ', navigator visit displayString]			ifFalse: [navigator visit displayString].		item := MenuItem labeled: label.		item value: [self goTo: index].		index = current ifTrue: [item beOn].		menu addItem: item].	^menu</body><body package="Tools-Trippy" selector="buildMenuBar">buildMenuBar	| menu |	menu := self class menuBar.	self hasCurrentInspector ifTrue:		[self inspector augmentMenuBar: menu].	(menu atNameKey: #go) submenu: self buildGoSubmenu.	(menu atNameKey: #history) submenu: self buildHistorySubmenu.	(menu atNameKey: #explore) submenu: self buildExploreSubmenu.	(menu atNameKey: #toggleToolbar) indication: [self builder window toolbarVisible].	(menu atNameKey: #toggleEvaluationPane) indication: [evaluationPaneVisible].	[menu		augmentFrom: self class		to: InspectorShell		menuName: #menuBar		for: self]			on: MenuAugmentationError			do: [:ex | ex isResumable ifTrue: [ex resume]].	^menu</body><body package="Tools-Trippy" selector="refreshMenuBar">refreshMenuBar	menuBarHolder value: self buildMenuBar</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorCollaborators">inspectorCollaborators	^Array		with: (Collaborator label: (#Navigator &lt;&lt; #labels &gt;&gt; 'Navigator') block: [self navigator])		with: (Collaborator label: (#Inspector &lt;&lt; #labels &gt;&gt; 'Inspector') block: [self inspector])</body></methods><methods><class-id>Tools.Trippy.InspectorShell class</class-id> <category>generated resources</category><body package="Tools-Trippy" selector="buildImageWithEnablement:">buildImageWithEnablement: baseString	^OpaqueImageWithEnablement		figure: (ToolbarIconLibrary perform: (baseString, '20x20') asSymbol)		shape: (ToolbarIconLibrary perform: (baseString, '20x20mask') asSymbol)		inactiveMask: (ToolbarIconLibrary perform: (baseString, '20x20bw') asSymbol)</body><body package="Tools-Trippy" selector="exploreParts">exploreParts	"Cannot share these because enablement status is set in the images."	^self buildImageWithEnablement: 'exploreParts'</body><body package="Tools-Trippy" selector="exploreSiblings">exploreSiblings	"Cannot share these because enablement status is set in the images."	^self buildImageWithEnablement: 'exploreSiblings'</body><body package="Tools-Trippy" selector="exploreVisited">exploreVisited	"Cannot share these because enablement status is set in the images."	^self buildImageWithEnablement: 'exploreVisited'</body><body package="Tools-Trippy" selector="focus">focus	"Cannot share these because enablement status is set in the images."	^self buildImageWithEnablement: 'exploreOff'</body><body package="Tools-Trippy" selector="next">next	"Cannot share these because enablement status is set in the images."	^self buildImageWithEnablement: 'next'</body><body package="Tools-Trippy" selector="previous">previous	"Cannot share these because enablement status is set in the images."	^self buildImageWithEnablement: 'previous'</body></methods><methods><class-id>Tools.Trippy.InspectorShell class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="openOn:">openOn: anObject	self new open; inspect: anObject</body></methods><methods><class-id>Tools.Trippy.InspectorShell class</class-id> <category>notifications</category><body package="Tools-Trippy" selector="instanceMethodsChanged">instanceMethodsChanged	Screen default allScheduledControllersDo: 			[:each | 			(each model isKindOf: self) ifTrue: [each model refreshMenuBar]]</body></methods><methods><class-id>Tools.Trippy.DerivedAttribute</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:value:">initialize: aString value: anObject	label := aString.	value := anObject</body><body package="Tools-Trippy" selector="initialize:valueBlock:">initialize: aString valueBlock: aBlock	label := aString.	valueBlock := aBlock</body></methods><methods><class-id>Tools.Trippy.DerivedAttribute</class-id> <category>accessing</category><body package="Tools-Trippy" selector="asVariableName">asVariableName	^label</body><body package="Tools-Trippy" selector="definition">definition	^definition</body><body package="Tools-Trippy" selector="definition:">definition: anObject	definition := anObject</body><body package="Tools-Trippy" selector="displayIcon">displayIcon		^VisualRow		with: super displayIcon		with: GeneralIcons gear</body><body package="Tools-Trippy" selector="displayString">displayString	^label asString</body><body package="Tools-Trippy" selector="displayText">displayText	^super displayText emphasizeAllWith: #italic</body><body package="Tools-Trippy" selector="key">key	^label</body><body package="Tools-Trippy" selector="label">label	^label</body><body package="Tools-Trippy" selector="partName">partName	^label asString</body><body package="Tools-Trippy" selector="value">value	^self isComputed		ifTrue: [valueBlock value]		ifFalse: [value]</body><body package="Tools-Trippy" selector="valueIn:">valueIn: anObject	^self value</body><body package="Tools-Trippy" selector="valueIn:put:">valueIn: anObject put: anObject2</body></methods><methods><class-id>Tools.Trippy.DerivedAttribute</class-id> <category>testing</category><body package="Tools-Trippy" selector="isComputed">isComputed	^valueBlock notNil</body><body package="Tools-Trippy" selector="isReadOnly">isReadOnly	^true</body><body package="Tools-Trippy" selector="isRemovable">isRemovable	^false</body></methods><methods><class-id>Tools.Trippy.DerivedAttribute</class-id> <category>comparing</category><body package="Tools-Trippy" selector="sameTypeEquals:">sameTypeEquals: aPart 	^label = aPart label</body><body package="Tools-Trippy" selector="specificHash">specificHash	^label hash</body></methods><methods><class-id>Tools.Trippy.DerivedAttribute class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="label:value:">label: aString value: anObject	^self new initialize: aString value: anObject</body><body package="Tools-Trippy" selector="label:valueBlock:">label: aString valueBlock: aBlock	^self new initialize: aString valueBlock: aBlock</body></methods><methods><class-id>Tools.Trippy.VisualComponentProxy</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="actualComponent:">actualComponent: aVisualComponent	actualComponent := aVisualComponent</body></methods><methods><class-id>Tools.Trippy.VisualComponentProxy</class-id> <category>proxying</category><body package="Tools-Trippy" selector="displayOn:">displayOn: aGraphicsContext	^[actualComponent displayOn: aGraphicsContext]		on: Error		do: [:ex |			aGraphicsContext displayString: (#ErrorDisplayingTheObject &lt;&lt; #dialogs &gt;&gt; 'Error displaying the object') asString at: 40@40.			ex return]</body><body package="Tools-Trippy" selector="preferredBounds">preferredBounds	^[actualComponent preferredBounds]		on: Error		do: [:ex | ex return: (0@0 extent: 0@0)]</body></methods><methods><class-id>Tools.Trippy.VisualComponentProxy class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="on:">on: aVisualComponent	^self new actualComponent: aVisualComponent</body></methods><methods><class-id>Tools.Trippy.IndexedVariable</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="index:">index: anIndex	index := anIndex</body></methods><methods><class-id>Tools.Trippy.IndexedVariable</class-id> <category>accessing</category><body package="Tools-Trippy" selector="asVariableName">asVariableName	^'at', index printString</body><body package="Tools-Trippy" selector="displayString">displayString	^Inspector safeDisplayStringOf: index</body><body package="Tools-Trippy" selector="index">index	^index</body><body package="Tools-Trippy" selector="key">key	^index</body><body package="Tools-Trippy" selector="partName">partName	^index printString</body><body package="Tools-Trippy" selector="value">value	^object basicAt: index</body><body package="Tools-Trippy" selector="value:">value: anObject	^object basicAt: index put: anObject</body></methods><methods><class-id>Tools.Trippy.IndexedVariable</class-id> <category>comparing</category><body package="Tools-Trippy" selector="sameTypeEquals:">sameTypeEquals: aPart 	^index = aPart index</body><body package="Tools-Trippy" selector="specificHash">specificHash	^index hash</body></methods><methods><class-id>Tools.Trippy.IndexedVariable class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="of:at:">of: anObject at: anInteger	^self new		object: anObject;		index: anInteger</body></methods><methods><class-id>Tools.Trippy.RemovalUndo</class-id> <category>accessing</category><body package="Tools-Trippy" selector="explanation">explanation	^(#Removal &lt;&lt; #dialogs &gt;&gt; 'Removal')</body><body package="Tools-Trippy" selector="undoIn:">undoIn: aPage	aPage undoRemoval: self</body></methods><methods><class-id>Tools.Trippy.InstVarRemovalUndo</class-id> <category>accessing</category><body package="Tools-Trippy" selector="definingClasses">definingClasses	^definingClasses</body><body package="Tools-Trippy" selector="definingClasses:">definingClasses: aCollection	aCollection size ~= savedValues size		ifTrue: [self error: (#InvalidDefiningClasses &lt;&lt; #dialogs &gt;&gt; 'invalid defining class collection')].	definingClasses := aCollection</body></methods><methods><class-id>Tools.Trippy.BasicInspector</class-id> <category>properties</category><body package="Tools-Trippy" selector="dragControllerClass">dragControllerClass	^ReplaceOnlyDragController</body></methods><methods><class-id>Tools.Trippy.BasicInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="augmentEditMenu:">augmentEditMenu: aMenu	"Add appropriate things to the Edit dropdown menu of the shell inspector menu bar. "	aMenu addLine.	self addAddAndRemoveItemsTo: aMenu</body><body package="Tools-Trippy" selector="buildFieldListMenu">buildFieldListMenu	| menu |	menu := super buildFieldListMenu.	menu addLine.	self addAddAndRemoveItemsTo: menu.	^menu</body><body package="Tools-Trippy" selector="classDefining:for:">classDefining: aString for: aClass	"The instance variable might be defined by either the argument class	or one of its superclasses."	^aClass withAllSuperclasses		detect: [:some | some instVarNames includes: aString]</body><body package="Tools-Trippy" selector="confirmInstVarRemoval:">confirmInstVarRemoval: stringCollection	| message |	message := (String new: 100) writeStream.	stringCollection size = 1 		ifTrue: [message nextPutAll: (#RemoveInstanceVariable &lt;&lt; #dialogs &gt;&gt; 'Remove instance variable ') asString]		ifFalse: [message nextPutAll: (#ConfirmRemoveInstVar &lt;&lt; #dialogs &gt;&gt; 'Remove the following instance variables:') asString; cr].	stringCollection 		do: [:each | message nextPut: $"; nextPutAll: each; nextPut: $"]		separatedBy: [message nextPutAll: ', '].	message nextPutAll: '?'.	^Dialog confirm: message contents</body><body package="Tools-Trippy" selector="createRemovalUndo:">createRemovalUndo: partCollection	| classes |	classes := partCollection collect:		[:each | self classDefining: each name for: self objectClass].	^InstVarRemovalUndo new		savedValues: partCollection;		definingClasses: classes;		yourself</body><body package="Tools-Trippy" selector="derivedFields">derivedFields	"Build up fields by looking for tagged methods that have the #inspectorFields tag and executing them. Do it in such a way that respects class overrides. Support the old API (a hard coded method send) as well."		| annotatedMethods result executedSelectors definition |	annotatedMethods := Pragma		allNamed: #inspectorFields		from: self objectClass		to: self objectClass withAllSuperclasses last.	result := OrderedCollection new.	executedSelectors := Set new.	annotatedMethods		do:			[:each | 			(executedSelectors includes: each selector)				ifFalse:					[executedSelectors add: each selector.					(result addAll: (self object perform: each selector))						do: [:eachField | eachField definition: each methodDefinition]]].		"The following is for the old API"	((executedSelectors includes: #inspectorExtraAttributes) not		and: [self objectClass canUnderstand: #inspectorExtraAttributes])		ifTrue:			[definition := (MethodDefinition				class: self objectClass				selector: #inspectorExtraAttributes) resolve.			(result addAll: self object inspectorExtraAttributes)				do: [:each | each definition: definition]].	^result sort: [:a :b | a partName &lt; b partName]</body><body package="Tools-Trippy" selector="isValidInstVarName:">isValidInstVarName: aString	^aString isEmpty not 		and: [aString first isLetter 			and: [(aString contains: [:some | (some isLetter or: [some isDigit]) not]) not]]</body><body package="Tools-Trippy" selector="namedFields">namedFields		| protected |	protected := self protectedVariableNames.	^((1 to: self objectClass instSize)		collect:			[:i | 			| part |			part := NamedVariable of: object index: i.			(protected includes: part name) ifTrue: [part beProtected].			part]) sorted: [:a :b | a perform: sortSelector with: b]</body><body package="Tools-Trippy" selector="partWithKey:">partWithKey: aString	^fixedFields detect: [:some | some key = aString]</body><body package="Tools-Trippy" selector="promptForValidInstVarName">promptForValidInstVarName	| name |	name := String new.	[name := (Dialog		request:			#AddInstanceVariableNamedC &lt;&lt; #dialogs &gt;&gt; 'Add instance variable named:'		initialAnswer: name) trimBlanks.	name isEmpty ifTrue: [^nil].	(self isValidInstVarName: name)		ifFalse:			[(Dialog				confirm:					#InvalidVariableName &lt;&lt; #dialogs &gt;&gt; 'Invalid variable name. Try again?')				ifFalse: [^nil]]		ifTrue:			[(self objectClass allInstVarNames includes: name)				ifTrue:					[(Dialog						confirm:							#InstVarAlreadyExistsRetry &lt;&lt; #dialogs &gt;&gt;									'An instance variable by this name already exists. Try again?')						ifFalse: [^nil]]				ifFalse: [^name]]] repeat</body><body package="Tools-Trippy" selector="protectedVariableNames">protectedVariableNames	"Answer a collection with names of all variables declared as protected	by the class of the inspected object and its superclasses."	^self objectClass withAllSuperclasses		inject: Set new		into:			[:all :each | 			all				addAll: each protectedInstVarNames;				yourself]</body><body package="Tools-Trippy" selector="refresh">refresh	fixedFields := 		(Array with: self selfAttribute), 		self derivedFields,		self namedFields.	super refresh</body><body package="Tools-Trippy" selector="removeInstVarName:from:">removeInstVarName: aString from: aClass	"The instance variable might be defined by either the argument class	or one of its superclasses."	(self classDefining: aString for: aClass)		removeInstVarName: aString</body><body package="Tools-Trippy" selector="selfAttribute">selfAttribute	^SelfPart object: object</body></methods><methods><class-id>Tools.Trippy.BasicInspector</class-id> <category>testing</category><body package="Tools-Trippy" selector="canDive">canDive	^self hasSingleSelection and: [self selection hasValue]</body><body package="Tools-Trippy" selector="canRemoveParts">canRemoveParts	^(self selections contains: [:some | some isNamedVariable not]) not</body></methods><methods><class-id>Tools.Trippy.BasicInspector</class-id> <category>decomposing</category><body package="Tools-Trippy" selector="partAt:">partAt: anInteger	"The order of the parts is: derived fields, named ivars, indexed ivars."	anInteger &lt;= fixedFields size ifTrue: [^fixedFields at: anInteger].	^IndexedVariable of: object at: anInteger - fixedFields size</body><body package="Tools-Trippy" selector="partCount">partCount	^fixedFields size + (Inspector basicSizeOfObject: object)</body></methods><methods><class-id>Tools.Trippy.BasicInspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="add">add	| name newPart |	name := self promptForValidInstVarName.	name isNil ifTrue: [^self].	(self objectClass allInstVarNames includes: name)		ifTrue:			[Dialog				warn:					#InstVarAlreadyExists &lt;&lt; #dialogs &gt;&gt;							'An instance variable by this name already exists.'.			^self].	self objectClass addInstVarName: name.	self refresh.	newPart := self partWithKey: name.	self		rememberUndo: (InsertionUndo new savedValues: (Array with: newPart));		select: newPart</body><body package="Tools-Trippy" selector="objectClass">objectClass	^Inspector classOfObject: self object</body><body package="Tools-Trippy" selector="removeSelected">removeSelected	| toRemove namesToRemove |	toRemove := self selections select: [:each | each isNamedVariable].	namesToRemove := toRemove collect: [:each | each name].	toRemove isEmpty ifTrue: [^self].	(self confirmInstVarRemoval: namesToRemove)		ifTrue:			[self rememberUndo: (self createRemovalUndo: toRemove).			namesToRemove				do:					[:each | 					self						removeInstVarName: each						from: self objectClass].			self refresh]</body><body package="Tools-Trippy" selector="undoInsertion:">undoInsertion: anInsertionUndo	"Undo adding instance variables."	anInsertionUndo savedValues do:		[:each | self removeInstVarName: each key from: self objectClass].	self refresh</body><body package="Tools-Trippy" selector="undoRemoval:">undoRemoval: aRemovalUndo	"Put instance variables back into their classes and restore their values in this instance.	The tricky parts are:		- instance variables should be restored to the right classes		- parts saved in the undo action should be told to refresh their cached variable 			index because the order of the variables might have changed."	aRemovalUndo definingClasses with: aRemovalUndo savedValues do:		[:class :partSnapshot | class addInstVarName: partSnapshot part name].	aRemovalUndo savedValues do:		[:each |		each part 			refreshIndex;			value: each value].	self 		refresh;		selectAll: aRemovalUndo parts</body></methods><methods><class-id>Tools.Trippy.BasicInspector</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize">initialize	super initialize.	sortSelector := #lessByNameThan:</body></methods><methods><class-id>Tools.Trippy.BasicInspector</class-id> <category>sorting</category><body package="Tools-Trippy" selector="sortChoices">sortChoices		^Array		with: (#sortFieldsByName &lt;&lt; #inspector &gt;&gt; 'Name') -&gt; #lessByNameThan:		with: (#sortFieldsByIndex &lt;&lt; #inspector &gt;&gt; 'Index') -&gt; #lessByIndexThan:</body><body package="Tools-Trippy" selector="sortSelector:">sortSelector: aSymbol	"Set the selector that is used to sort named instance variables, refresh the list."		sortSelector := aSymbol.	self refresh</body><body package="Tools-Trippy" selector="sortTypeSubmenu">sortTypeSubmenu		| menu item |	menu := Menu new.	self sortChoices		do:			[:each | 			item := MenuItem labeled: each key.			item value: [self sortSelector: each value].			item indication: each value == sortSelector.			menu addItem: item].	^menu</body></methods><methods><class-id>Tools.Trippy.BasicInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	"Answer a String to use as the label of the tab of this page."	^(#_Basic &lt;&lt; #dialogs &gt;&gt; '&amp;Basic')</body></methods><methods><class-id>Tools.Trippy.PreviewingInspector</class-id> <category>accessing</category><body package="Tools-Trippy" selector="preview">preview	^VisualComponentProxy on:		((self object isKindOf: ScheduledWindow)			ifTrue: [self object component]			ifFalse: [self object])</body></methods><methods><class-id>Tools.Trippy.PreviewingInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	^(#_Preview &lt;&lt; #dialogs &gt;&gt; '&amp;Preview')</body></methods><methods><class-id>Tools.Trippy.OverriddenMethodDefinition</class-id> <category>printing</category><body package="Tools-Trippy" selector="simpleReverseDisplayString">simpleReverseDisplayString	^super simpleReverseDisplayString asText emphasizeAllWith: #italic</body></methods><methods><class-id>Tools.Trippy.SetElement</class-id> <category>accessing</category><body package="Tools-Trippy" selector="displayString">displayString	^Inspector safeDisplayStringOf: element</body><body package="Tools-Trippy" selector="element">element	^element</body><body package="Tools-Trippy" selector="key">key	^element</body><body package="Tools-Trippy" selector="partName">partName	^(#element &lt;&lt; #dialogs &gt;&gt; 'element') asString</body><body package="Tools-Trippy" selector="value">value	^element</body><body package="Tools-Trippy" selector="value:">value: anObject	object 		remove: element;		add: anObject.	element := anObject</body></methods><methods><class-id>Tools.Trippy.SetElement</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="element:">element: anObject	element := anObject</body></methods><methods><class-id>Tools.Trippy.SetElement</class-id> <category>comparing</category><body package="Tools-Trippy" selector="sameTypeEquals:">sameTypeEquals: aPart 	^element = aPart element</body><body package="Tools-Trippy" selector="specificHash">specificHash	^element hash</body></methods><methods><class-id>Tools.Trippy.SetElement class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="of:element:">of: aSet element: anObject	^self new		object: aSet;		element: anObject</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>testing</category><body package="Tools-Trippy" selector="hasSingleSelection">hasSingleSelection	^self methodListHolder selectionIndexes size = 1</body><body package="Tools-Trippy" selector="isAtInstanceSide">isAtInstanceSide	^self sideHolder value = #instance</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>aspects</category><body package="Tools-Trippy" selector="methodListHolder">methodListHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^methodListHolder isNil		ifTrue:			[methodListHolder := MultiSelectionInList new]		ifFalse:			[methodListHolder]</body><body package="Tools-Trippy" selector="protocolListHolder">protocolListHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^protocolListHolder isNil		ifTrue:			[protocolListHolder := MultiSelectionInList new]		ifFalse:			[protocolListHolder]</body><body package="Tools-Trippy" selector="sideHolder">sideHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^sideHolder isNil		ifTrue:			[sideHolder := nil asValue]		ifFalse:			[sideHolder]</body><body package="Tools-Trippy" selector="textHolder">textHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textHolder isNil		ifTrue:			[textHolder := String new asValue]		ifFalse:			[textHolder]</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>private-updating</category><body package="Tools-Trippy" selector="methodSelectionChanged">methodSelectionChanged	self updateText</body><body package="Tools-Trippy" selector="protocolSelectionChanged">protocolSelectionChanged	self updateMethodList</body><body package="Tools-Trippy" selector="refresh">refresh	| selectedProtocols selectedMethods |	selectedProtocols := self protocolListHolder selections.	selectedMethods := self methodListHolder selections.	self updateProtocolList.	self protocolListHolder selections: selectedProtocols.	self methodListHolder selections: selectedMethods</body><body package="Tools-Trippy" selector="sideSelectionChanged">sideSelectionChanged	inheritanceStop := self isAtInstanceSide		ifTrue: [inheritanceStop soleInstance]		ifFalse: [inheritanceStop class].	self updateProtocolList</body><body package="Tools-Trippy" selector="updateMethodList">updateMethodList	self methodListHolder list: self computeMethodList</body><body package="Tools-Trippy" selector="updateProtocolList">updateProtocolList	self protocolListHolder list: self computeProtocolList</body><body package="Tools-Trippy" selector="updateText">updateText	self textHolder value: self computeText</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="configureCodeViewController:">configureCodeViewController: aController	| menu |	aController		initializeMenuForCode;		autoAccept: false;		doNotHandleLocally: #formatSelection.	"The menu must be copied before chaging items, or else the shared menu in the class would be changed."	menu := aController menu copy.	aController menuHolder value: menu. 	(menu menuItemWithValue: #formatSelection)		label: (#Format &lt;&lt; #menus &gt;&gt; 'Format') asString</body><body package="Tools-Trippy" selector="initialize">initialize	super initialize.	self protocolListHolder selectionIndexHolder		onChangeSend: #protocolSelectionChanged to: self.	self sideHolder		value: #instance;		onChangeSend: #sideSelectionChanged to: self.	self methodListHolder selectionIndexHolder		onChangeSend: #methodSelectionChanged to: self</body><body package="Tools-Trippy" selector="initialize:">initialize: anObject	object := anObject.	inheritanceStop := self noInheritanceInheritanceStop.	self objectIsClass ifTrue: [self sideHolder value: #class].	super initialize: anObject</body><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(aBuilder componentAt: #methodList) widget		displayStringSelector: #simpleReverseDisplayString.	self configureCodeViewController: (aBuilder componentAt: #text) widget controller</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>private</category><body package="Tools-Trippy" selector="changeRequest">changeRequest	^self updateRequest</body><body package="Tools-Trippy" selector="classObject">classObject	"Answer the class object we are to extract methods and other	information from. Behaviors don't need a meta-jump because for them 	we simply flip the instance/class switch, to keeping everything	relative to the non-metaobject base."	^self objectIsClass		ifTrue: [self isAtInstanceSide			ifTrue: [object]			ifFalse: [object class]]		ifFalse:			[self isAtInstanceSide				ifTrue: [object class]				ifFalse: [object class class]]</body><body package="Tools-Trippy" selector="defaultFocusWidget">defaultFocusWidget	^self widgetAt: #protocolList</body><body package="Tools-Trippy" selector="definitionClassOf:from:for:">definitionClassOf: aSelector from: implementingClass for: inheritingClass	"Answer which of the classes for method definitions, regular MethodDefinition	or OverriddenMethodDefinition is correct to represent a method with aSelector	defined in implementingClass when presenting messages understood by	inheritingClass."	| thisClass |	thisClass := inheritingClass.	[thisClass ~~ implementingClass and: [thisClass notNil]] whileTrue:		[(thisClass includesSelector: aSelector)			ifTrue: [^OverriddenMethodDefinition].		thisClass := thisClass superclass].	^MethodDefinition</body><body package="Tools-Trippy" selector="hasUnacceptedChanges">hasUnacceptedChanges	self builder isNil ifTrue: [^false].	^(self controllerAt: #text) textHasChanged</body><body package="Tools-Trippy" selector="inheritanceStop:">inheritanceStop: aClass	"Set the last class up the superclass chain whose methods	are included into what is displayed."	| originalSelections |	inheritanceStop := aClass.	self isAtInstanceSide ifFalse: [inheritanceStop := inheritanceStop class].	originalSelections := self protocolListHolder selections.	self updateProtocolList.	self protocolListHolder selections: originalSelections</body><body package="Tools-Trippy" selector="interestingClasses">interestingClasses	"Answer a collection of classes we are to collect methods from, in the order	from the inspected class towards superclasses. They depend on the inheritance	visibility setting."	| answer this |	answer := OrderedCollection new.	this := self classObject.	[this notNil ifTrue: [answer add: this].	this == inheritanceStop or: [this isNil]]		whileFalse: [this := this superclass].	^answer</body><body package="Tools-Trippy" selector="interestingMethods">interestingMethods	| theClass methods |	theClass := self classObject.	methods := OrderedCollection new: 10.	self interestingClasses do: 		[:eachClass | 		eachClass selectors do:			[:eachSelector | | defClass |			defClass := self definitionClassOf: eachSelector from: eachClass for: theClass.			methods add: (defClass class: theClass implementor: eachClass selector: eachSelector)]].	^methods</body><body package="Tools-Trippy" selector="noInheritanceInheritanceStop">noInheritanceInheritanceStop	^self nonMetaClassObject</body><body package="Tools-Trippy" selector="nonMetaClassObject">nonMetaClassObject	"Answer the object suitable to get things such as the class definition from."	^self classObject instanceBehavior</body><body package="Tools-Trippy" selector="objectIsClass">objectIsClass	^object isBehavior and: [object isMeta not]</body><body package="Tools-Trippy" selector="okToUpdate">okToUpdate	| choice |	choice := Dialog 				choose: (#AcceptUnsavedTextChanges &lt;&lt; #dialogs &gt;&gt; 'Accept unsaved text changes?')				labels: (Array with: (#Yes &lt;&lt; #dialogs &gt;&gt; 'Yes') with: (#No &lt;&lt; #dialogs &gt;&gt; 'No') with: (#Cancel &lt;&lt; #dialogs &gt;&gt; 'Cancel'))				values: #(#yes #no #cancel)				default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [self acceptText].	^true</body><body package="Tools-Trippy" selector="rootMinusOneInheritanceStop">rootMinusOneInheritanceStop	"Answer a class one step before Object in the argument object	class inheritance chain."	| last superclass |	last := self nonMetaClassObject.	[(superclass := last superclass) == Object or: [superclass isNil]]		whileFalse: [last := superclass].	^last</body><body package="Tools-Trippy" selector="updateRequest">updateRequest	^super updateRequest and: 		[self hasUnacceptedChanges not or: [self okToUpdate]]</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>accessing</category><body package="Tools-Trippy" selector="selectedObject">selectedObject	^self methodListHolder selections asArray first</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>actions</category><body package="Tools-Trippy" selector="copyStateFromBehavior:">copyStateFromBehavior: aBehaviorInspector	self sideHolder value ~= aBehaviorInspector sideHolder value		ifTrue: [self sideHolder value: aBehaviorInspector sideHolder value].	self protocolListHolder selections: aBehaviorInspector protocolListHolder selections.	self methodListHolder selections: aBehaviorInspector methodListHolder selections</body><body package="Tools-Trippy" selector="copyStateTo:">copyStateTo: aPage	aPage notNil ifTrue: [aPage copyStateFromBehavior: self]</body><body package="Tools-Trippy" selector="findMethod">findMethod	| selector matchingMethods chosenMethod |	selector := '*'.	[selector := Dialog request: (#FindSelectorC &lt;&lt; #dialogs &gt;&gt; 'Find selector:') initialAnswer: selector.	selector isEmpty ifTrue: [^self].	selector := '*' , selector , '*'.	matchingMethods := (self interestingMethods			select: [:each | selector match: each selector]) asSortedCollection.	matchingMethods isEmpty 		and: [Dialog confirm: (#NoSelectorFound &lt;&lt; #dialogs &gt;&gt; 'No selectors found.&lt;n&gt;Search again?') expandMacros]] 			whileTrue.	matchingMethods isEmpty ifTrue: [^self].	chosenMethod := matchingMethods 		detect: [:each | each selector asString = selector]		ifNone: 			[matchingMethods detect: [:each | each selector asString = selector asLowercase]				ifNone: 					[matchingMethods size == 1 						ifTrue: [matchingMethods first]						ifFalse: 							[Dialog 								choose: (#MatchingMethodsC &lt;&lt; #dialogs &gt;&gt; 'Matching methods:')								fromList: (matchingMethods collect: [:each | each simpleReverseDisplayString])								values: matchingMethods								lines: 20								cancel: [^self]]]].	self		selectProtocol: chosenMethod protocol;		selectMethod: chosenMethod</body><body package="Tools-Trippy" selector="selectAllFields">selectAllFields	self protocolListHolder selectAll</body><body package="Tools-Trippy" selector="selectorDoubleClicked">selectorDoubleClicked	"Not sure yet about the proper action here."</body><body package="Tools-Trippy" selector="sendAndDive">sendAndDive	"Send the message and dive into the result."	| selector result |	selector := self selectedMethod selector.	selector numArgs ~= 0 ifTrue: [^self].	result := self doItReceiver perform: selector.	self container diveInto: 		(DerivedAttribute 			label: ((#x1sCSent2s &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt;: sent &lt;2s&gt;')				expandMacrosWith: Time now printString				with: selector printString)			value: result)</body><body package="Tools-Trippy" selector="sendIt">sendIt	^self doItReceiver perform: self selectedMethod selector</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>private-menus</category><body package="Tools-Trippy" selector="augmentMenu:forMethod:">augmentMenu: aMenu forMethod: aMethodDefinition	| selector selectors |	selector := aMethodDefinition selector.	selectors := aMethodDefinition method allSymbolLiterals.	selectors remove: selector ifAbsent: [].	selectors := selectors asSortedCollection.	#(senders implementors localSenders localImplementors)		with: #(browseAllSenders: browseAllImplementors: 				browseLocalSenders: browseLocalImplementors:)		do: [:menuKey :browseSelector |			(aMenu atNameKey: menuKey) 				submenu: (self 					buildSelectorSubmenuFor: selector 					with: selectors					performing: browseSelector)].	(aMenu atNameKey: #referencedClasses)		submenu: (self buildReferencesSubmenuFor: aMethodDefinition);		value: nil</body><body package="Tools-Trippy" selector="augmentMenuBar:">augmentMenuBar: aMenu	"This is a chance to add our own items to the main window menu bar.	Add the Inheritance dropdown to it."	| visibilitySubmenu |	super augmentMenuBar: aMenu.	visibilitySubmenu := MenuItem labeled: (#Inheritance &lt;&lt; #menus &gt;&gt; '&amp;Inheritance').	visibilitySubmenu submenu: [self buildInheritanceSubmenu].	aMenu addItem: visibilitySubmenu atPosition: 10.005</body><body package="Tools-Trippy" selector="buildInheritanceSubmenu">buildInheritanceSubmenu	| menu nonMetaStop |	menu := Menu new.	nonMetaStop := inheritanceStop instanceBehavior.	self nonMetaClassObject withAllSuperclasses reverseDo:		[:each | | item |		item := MenuItem labeled: each name.		each == nonMetaStop ifTrue: [item beOn].		item value: [self inheritanceStop: each].		menu addItem: item].	^menu</body><body package="Tools-Trippy" selector="buildMethodListMenu">buildMethodListMenu	| menu |	menu := self class methodListMenu.	self singleMethodIsSelected		ifTrue: [self augmentMenu: menu forMethod: self selectedMethod]		ifFalse: [self disableCrossReferenceItemsIn: menu].	menu		augmentFrom: self class		to: BehaviorInspector		menuName: #methodList		for: self.	^menu</body><body package="Tools-Trippy" selector="buildProtocolListMenu">buildProtocolListMenu	| menu |	menu := self class protocolListMenu.	menu		augmentFrom: self class		to: BehaviorInspector		menuName: #protocolList		for: self.	^menu</body><body package="Tools-Trippy" selector="buildReferencesSubmenuFor:">buildReferencesSubmenuFor: aMethodDefinition	| menu item classes |	menu := Menu new.	classes := self classesReferencedFrom: aMethodDefinition.	classes isEmpty ifTrue:		[item := MenuItem labeled: (#none &lt;&lt; #dialogs &gt;&gt; '(none)').		item disable.		menu addItem: item.		^menu].	(classes copyFrom: 1 to: (classes size min: MaxSelectorSubMenuEntries)) do:		[:each |		item := MenuItem labeled: (each name asString contractTo: MaxMenuEntryWidth).		item value: [self browseReferencedClass: each].		menu addItem: item].	classes size &gt; MaxSelectorSubMenuEntries ifTrue:		[item := MenuItem labeled: (#MoreClassesDot &lt;&lt; #menus &gt;&gt; 'more classes...').		item labelText: (Text string: item rawLabel asString emphasis: #(#bold)).		item value: [self browseReferencedClass: nil].		menu addLine; addItem: item].	^menu</body><body package="Tools-Trippy" selector="buildSelectorSubmenuFor:with:performing:">buildSelectorSubmenuFor: aSelector with: selectorCollection performing: browseSelector	| menu item |	menu := Menu new.	item := MenuItem labeled: (aSelector contractTo: MaxMenuEntryWidth).	item value: [self perform: browseSelector with: aSelector].	menu addItem: item; addLine.	selectorCollection isEmpty ifFalse:		[menu addLine.		(selectorCollection copyFrom: 1 to: (selectorCollection size min: MaxSelectorSubMenuEntries)) do: 			[:each | 			item := MenuItem labeled: (each contractTo: MaxMenuEntryWidth).			item value: [self perform: browseSelector with: each].			menu addItem: item].		selectorCollection size &gt; MaxSelectorSubMenuEntries ifTrue:			[item := MenuItem labeled: (#MoreSelectorsDot &lt;&lt; #menus &gt;&gt; 'more selectors...').			item labelText: (Text string: item rawLabel asString emphasis: #(#bold)).			item value: [self perform: browseSelector with: nil].			menu addLine; addItem: item]].	^menu</body><body package="Tools-Trippy" selector="disableCrossReferenceItemsIn:">disableCrossReferenceItemsIn: aMenu	#(senders implementors localSenders localImplementors referencedClasses)		do: [:menuKey | (aMenu atNameKey: menuKey) disable]</body><body package="Tools-Trippy" selector="methodListMenu">methodListMenu	^[self buildMethodListMenu]</body><body package="Tools-Trippy" selector="protocolListMenu">protocolListMenu	^[self buildProtocolListMenu]</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>private-method list</category><body package="Tools-Trippy" selector="browseAllImplementors:">browseAllImplementors: aSymbol	| methodCollector |	methodCollector := MethodCollector new.	methodCollector browseSelect: 		(methodCollector implementorsOf: (self pickOneSelector: aSymbol ifCancelled: [^self]))</body><body package="Tools-Trippy" selector="browseAllSenders:">browseAllSenders: aSymbol	| methodCollector |	methodCollector := MethodCollector new.	methodCollector browseSelect: 		(methodCollector referencesTo: (self pickOneSelector: aSymbol ifCancelled: [^self]))</body><body package="Tools-Trippy" selector="browseLocalImplementors:">browseLocalImplementors: aSymbol	| methodCollector |	methodCollector := MethodCollector new.	methodCollector browseSelect: 		(methodCollector searchClassHierarchy: self classObject)		&amp; (methodCollector implementorsOf: (self pickOneSelector: aSymbol ifCancelled: [^self]))</body><body package="Tools-Trippy" selector="browseLocalSenders:">browseLocalSenders: aSymbol	| methodCollector |	methodCollector := MethodCollector new.	methodCollector browseSelect: 		(methodCollector searchClassHierarchy: self classObject)		&amp; (methodCollector referencesTo: (self pickOneSelector: aSymbol ifCancelled: [^self]))</body><body package="Tools-Trippy" selector="browseReferencedClass:">browseReferencedClass: aClass	| realClass classes |	realClass := aClass notNil		ifTrue: [aClass]		ifFalse: 			[classes := self classesReferencedFrom: self selectedMethod.			Dialog 				choose: (#BrowseWhichClass &lt;&lt; #dialogs &gt;&gt; 'Browse which class?')				fromList: classes				values: classes				lines: 20				cancel: [^self]				for: self mainWindow].	SmalltalkWorkbench browseClass: realClass</body><body package="Tools-Trippy" selector="canRemoveMethods">canRemoveMethods	^self methodListHolder selectionIndexes size &gt; 0</body><body package="Tools-Trippy" selector="chooseSelector:from:">chooseSelector: aSymbol from: aMethodDefinition	| messages |	messages := aMethodDefinition method allSymbolLiterals asSortedCollection.	^Dialog		choose: aSymbol expandMacros		fromList: messages		values: messages		lines: 20		cancel: []</body><body package="Tools-Trippy" selector="classesReferencedFrom:">classesReferencedFrom: aMethodDefinition	| classes |	classes := Set new.	aMethodDefinition method allLiterals do: 		[:each | 		(each isVariableBinding and: [each value isBehavior])			ifTrue: [classes add: each value]].	^classes asSortedCollection: [:a :b | a name &lt; b name]</body><body package="Tools-Trippy" selector="computeMethodList">computeMethodList	| protocols includeUnclassified methods classOrder theClass |	protocols := self protocolListHolder selections.	protocols isEmpty ifTrue: [^self listAllMethods].	(protocols includes: self unclassifiedProtocol)		ifTrue:			[protocols := protocols copyWithout: self unclassifiedProtocol.			includeUnclassified := true]		ifFalse: [includeUnclassified := false].	methods := OrderedCollection new.	classOrder := self interestingClasses asArray.	theClass := self classObject.	self interestingClasses do:		[:eachClass | | selectors |		selectors := eachClass organization listAtCategoriesNamed: protocols.		includeUnclassified ifTrue:			[selectors addAll: (eachClass selectors				reject: [:some | eachClass organization includesElement: some])].		methods addAll: (selectors collect:			[:eachSelector | | defClass |			defClass := self definitionClassOf: eachSelector from: eachClass for: theClass.			defClass class: theClass implementor: eachClass selector: eachSelector])].	methods := methods asSortedCollection:		[:a :b |		a selector = b selector			ifFalse: [a selector &lt;= b selector]			ifTrue:				[(classOrder indexOf: a implementingClass)					&lt;= (classOrder indexOf: b implementingClass)]].	^methods asList</body><body package="Tools-Trippy" selector="listAllMethods">listAllMethods	| methods classOrder theClass |	methods := OrderedCollection new.	classOrder := self interestingClasses asArray.	theClass := self classObject.	self interestingClasses do:		[:eachClass |		methods addAll: (eachClass selectors collect:			[:eachSelector | | defClass |			defClass := self definitionClassOf: eachSelector from: eachClass for: theClass.			defClass class: theClass implementor: eachClass selector: eachSelector])].	methods := methods asSortedCollection:		[:a :b |		a selector = b selector			ifFalse: [a selector &lt;= b selector]			ifTrue:				[(classOrder indexOf: a implementingClass)					&lt;= (classOrder indexOf: b implementingClass)]].	^methods asList</body><body package="Tools-Trippy" selector="makeMethodSelectionVisible">makeMethodSelectionVisible	| selectedIndex |	selectedIndex := self methodListHolder selectionIndexes		detect: [:any | true] ifNone: [^self].	(self widgetAt: #methodList) makeVisible: selectedIndex</body><body package="Tools-Trippy" selector="pickOneSelector:ifCancelled:">pickOneSelector: aSymbolOrNil ifCancelled: aBlock	| selector |	selector := aSymbolOrNil isNil		ifTrue: 			[self 				chooseSelector: (#BrowseAllImplementors &lt;&lt; #dialogs &gt;&gt; 'View all implementors&lt;n&gt;of which selector?') 				from: self selectedMethod]		ifFalse: [aSymbolOrNil].	selector isNil ifTrue: [^aBlock value].	^selector</body><body package="Tools-Trippy" selector="removeMethods">removeMethods	| removableMethods thisClass |	thisClass := self classObject.	removableMethods := self methodListHolder selections select:		[:some | some implementingClass == thisClass].	removableMethods size = 0 ifTrue: [^self].	(Dialog confirm: 		(removableMethods size = 1			ifTrue: [(#ReallyRemoveThisMethod &lt;&lt; #dialogs &gt;&gt; 'Really remove this method?')]			ifFalse: [(#ReallyRemoveTheseMethods &lt;&lt; #dialogs &gt;&gt; 'Really remove these methods?')]))				ifFalse: [^self].	removableMethods do:		[:each | thisClass removeSelector: each selector].	self updateMethodList</body><body package="Tools-Trippy" selector="selectedMethod">selectedMethod	^self methodListHolder selections asArray first</body><body package="Tools-Trippy" selector="selectMethod:">selectMethod: aMethodDefinition	self methodListHolder selections: (Set with: aMethodDefinition).	self makeMethodSelectionVisible</body><body package="Tools-Trippy" selector="selectSelector:">selectSelector: aSymbol	| definition |	definition := self methodListHolder list 		detect: [:some | some selector = aSymbol]		ifNone: [nil].	self methodListHolder selections: (Set with: definition).	self makeMethodSelectionVisible</body><body package="Tools-Trippy" selector="singleMethodIsSelected">singleMethodIsSelected	^self methodListHolder selectionIndexes size = 1</body><body package="Tools-Trippy" selector="singleUnaryMethodIsSelected">singleUnaryMethodIsSelected	^self singleMethodIsSelected and:		[self selectedMethod selector numArgs = 0]</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>private-protocol list</category><body package="Tools-Trippy" selector="addProtocol">addProtocol	| newProtocol selections selection |	self changeRequest ifFalse: [^self].	newProtocol := Dialog request: (#EnterNewProtocolName &lt;&lt; #dialogs &gt;&gt; 'Enter new protocol name') initialAnswer: (#protocolName &lt;&lt; #dialogs &gt;&gt; 'protocol name').	newProtocol isEmpty ifTrue: [^self].	newProtocol := newProtocol asSymbol.	selections := self protocolListHolder selections.	selection := selections size = 1 		ifTrue: [selections asArray first]		ifFalse: [nil].	self classObject organization		addCategory: newProtocol before: selection.	SourceFileManager default logChange:				('&lt;1p&gt; organization addCategory: &lt;2p&gt; before: &lt;3p&gt;'					expandMacrosWith: self classObject					with: newProtocol					with: selection).	self classObject reorganize.	self 		updateProtocolList;		selectProtocol: newProtocol</body><body package="Tools-Trippy" selector="canRemoveProtocol">canRemoveProtocol	^self protocolListHolder selectionIndexes size &gt; 0</body><body package="Tools-Trippy" selector="canRenameProtocol">canRenameProtocol	^self protocolListHolder selectionIndexes size = 1</body><body package="Tools-Trippy" selector="computeProtocolList">computeProtocolList	"Make sure to include a protocol for selectors not included	in any protocols as it may happen occasionally."	| protocols sortedProtocols |	protocols := Set new.	self interestingClasses do: [:each |		protocols addAll: each organization categories.		each organization elements size &lt; each selectors size			ifTrue: [protocols add: self unclassifiedProtocol]].	sortedProtocols := (#{Refactory.Browser.SelectorProtocolNavigatorPart} ifDefinedDo: [:class | class protocolOrder] elseDo: [nil])		ifNil: [protocols asSortedCollection]		ifNotNil: [:order | protocols asSortedCollection: [:a :b | order is: a before: b]].	^sortedProtocols asList</body><body package="Tools-Trippy" selector="makeProtocolSelectionVisible">makeProtocolSelectionVisible	| selectedIndex |	selectedIndex := self protocolListHolder selectionIndexes 		detect: [:any | true] ifNone: [^self].	(self widgetAt: #protocolList) makeVisible: selectedIndex</body><body package="Tools-Trippy" selector="removeProtocol">removeProtocol	| target ownProtocols selectors |	self changeRequest ifFalse: [ ^false ].	target := self classObject.	ownProtocols := Set new.	selectors := Set new.	self protocolListHolder selections do: 		[:protocol |		(target organization categories includes: protocol) ifTrue: 			[ownProtocols add: protocol.			selectors addAll: (target organization listAtCategoryNamed: protocol)]].	ownProtocols isEmpty ifTrue: [^self].	selectors isEmpty ifFalse:		[(Dialog confirm: (#ConfirmRemoveingMethodsInProtocols &lt;&lt; #dialogs &gt;&gt; 'Are you certain that you want to&lt;n&gt;remove all methods in these protocols?')							expandMacros)			ifFalse: [^false]].	selectors do: [:each | target removeSelector: each].	ownProtocols do: 		[ :protocol |		target organization removeCategory: protocol.		SourceFileManager default logChange: 			('&lt;1p&gt; organization removeCategory: &lt;2p&gt;'					expandMacrosWith: target					with: protocol)].	target reorganize.	self updateProtocolList</body><body package="Tools-Trippy" selector="renameProtocol">renameProtocol	| oldName newName target |	self changeRequest ifFalse: [^self].	target := self classObject.	oldName := self protocolListHolder selections asArray first.	newName := Dialog request: (#EnterNewProtocolName &lt;&lt; #dialogs &gt;&gt; 'Enter new protocol name') initialAnswer: oldName.	newName isEmpty ifTrue: [^self].	newName := newName asSymbol.	newName = oldName ifTrue: [^self].	(target renameCategory: oldName to: newName) ifTrue:		[SourceFileManager default logChange:			('&lt;1p&gt; organization renameCategory: &lt;2p&gt; to: &lt;3p&gt;'					expandMacrosWith: target					with: oldName					with: newName).		self 			updateProtocolList;			selectProtocol: newName]</body><body package="Tools-Trippy" selector="selectProtocol:">selectProtocol: aSymbol 	self protocolListHolder selections: (Set with: aSymbol).	self makeProtocolSelectionVisible</body><body package="Tools-Trippy" selector="unclassifiedProtocol">unclassifiedProtocol	"Answer the name of a protocol to use for selectors	not included into other protocols."	^#'as yet unclassified'</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>private-text</category><body package="Tools-Trippy" selector="acceptClassDefinition:from:">acceptClassDefinition: aText from: aController	Compiler new		evaluate: aText string		in: nil		allowReceiver: false		receiver: nil		environment: self classObject environment		notifying: aController		ifFail: [^false].	SourceFileManager default logChange: aText string.	^true</body><body package="Tools-Trippy" selector="acceptMethodDefinition:from:">acceptMethodDefinition: aText from: aController	| protocols protocol selector methods |	protocols := self protocolListHolder selections.	protocols size = 0 ifTrue: 		[methods := self methodListHolder selections.		protocol := methods isEmpty			ifTrue:				[Dialog choose: (#ChooseProtocolForMethod &lt;&lt; #dialogs &gt;&gt; 'Put this method into which protocol?')					fromList: self protocolListHolder list					values: self protocolListHolder list					lines: 10					cancel: [^false]]			ifFalse:				[methods first protocol]].	protocols size = 1 ifTrue: [protocol := protocols asArray first].	protocols size &gt; 1 ifTrue:		[protocol := Dialog choose: (#ChooseProtocolForMethod &lt;&lt; #dialogs &gt;&gt; 'Put this method into which protocol?')			fromList: protocols asSortedCollection			values: protocols asSortedCollection			lines: 10			cancel: [^false]].	selector := self classObject		compile: aText		classified: protocol		notifying: aController.	selector isNil 		ifTrue: [^false]		ifFalse:			[self				updateMethodList;				selectSelector: selector.			^true]</body><body package="Tools-Trippy" selector="acceptText">acceptText	self textAcceptAllowed: (self controllerAt: #text)</body><body package="Tools-Trippy" selector="computeMethodSourceText">computeMethodSourceText	| textStream |	textStream := TextStream on: (String new: 100).	self methodListHolder selections		do: [:each | textStream nextPutAllText: each formattedSourceCode]		separatedBy: [textStream cr; cr].	^textStream contents</body><body package="Tools-Trippy" selector="computeText">computeText	^self methodListHolder selections isEmpty		ifTrue:			[self protocolListHolder selections isEmpty				ifTrue:					[self nonMetaClassObject definition]									ifFalse: 					[self classObject sourceCodeTemplate]]		ifFalse: 			[self computeMethodSourceText]</body><body package="Tools-Trippy" selector="doItReceiver">doItReceiver	^self objectIsClass		ifTrue: 			[self isAtInstanceSide				ifTrue: [nil]				ifFalse: [self object]]		ifFalse:			[self isAtInstanceSide				ifTrue: [self object]				ifFalse: [self object class]]</body><body package="Tools-Trippy" selector="formatSelection">formatSelection	| editor |	editor := self controllerAt: #text.	self textIsClassDefinition		ifTrue: [editor formatAllAsExpression]		ifFalse: [editor formatAllAsMethod]</body><body package="Tools-Trippy" selector="textAcceptAllowed:">textAcceptAllowed: aController	"Compile here rather in #textAccepted: so that errors prevent	the controller text from being stored in the model."	^self textIsClassDefinition		ifTrue: [self acceptClassDefinition: aController text from: aController]		ifFalse: [self acceptMethodDefinition: aController text from: aController]</body><body package="Tools-Trippy" selector="textAccepted:">textAccepted: aController	^self</body><body package="Tools-Trippy" selector="textIsClassDefinition">textIsClassDefinition	^self protocolListHolder selectionIndexes isEmpty and: [self methodListHolder selectionIndexes isEmpty]</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector class</class-id> <category>accessing</category><body package="Tools-Trippy" selector="tabLabel">tabLabel	^(#_Methods &lt;&lt; #dialogs &gt;&gt; '&amp;Methods')</body></methods><methods><class-id>Tools.Trippy.NullNavigator</class-id> <category>accessing</category><body package="Tools-Trippy" selector="vicinity">vicinity	^#none</body></methods><methods><class-id>Tools.Trippy.NullNavigator</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder	self reinstallInspector</body></methods><methods><class-id>Tools.Trippy.Hierarchy</class-id> <category>accessing</category><body package="Tools-Trippy" selector="childrenOf:">childrenOf: anObject	| result |	result := [childrenBlock value: anObject]		on: Error		do: [:ex | ex return].	^result isNil ifTrue: [Array new] ifFalse: [result]</body><body package="Tools-Trippy" selector="id">id	^id</body><body package="Tools-Trippy" selector="label">label	^label</body><body package="Tools-Trippy" selector="parentOf:">parentOf: anObject	^[parentBlock value: anObject]		on: Error		do: [:ex | ex return]</body><body package="Tools-Trippy" selector="root">root	^root</body><body package="Tools-Trippy" selector="rootOf:">rootOf: anObject	| this parent |	self hasRoot ifTrue: [^root].	this := anObject.	[parent := self parentOf: this.	parent notNil] 		whileTrue: [this := parent].	^this</body></methods><methods><class-id>Tools.Trippy.Hierarchy</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:label:parentBlock:childrenBlock:">initialize: aSymbol label: aString parentBlock: aBlock childrenBlock: aBlock2	id := aSymbol.	label := aString.	parentBlock := aBlock.	childrenBlock := aBlock2</body><body package="Tools-Trippy" selector="initialize:label:root:childrenBlock:">initialize: aSymbol label: aString root: anObject childrenBlock: aBlock	id := aSymbol.	label := aString.	root := anObject.	childrenBlock := aBlock</body></methods><methods><class-id>Tools.Trippy.Hierarchy</class-id> <category>testing</category><body package="Tools-Trippy" selector="hasRoot">hasRoot	^parentBlock isNil</body></methods><methods><class-id>Tools.Trippy.Hierarchy class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="id:label:parentBlock:childrenBlock:">id: aSymbol label: aString parentBlock: aBlock childrenBlock: aBlock2	^self new initialize: aSymbol label: aString parentBlock: aBlock childrenBlock: aBlock2</body><body package="Tools-Trippy" selector="id:label:root:childrenBlock:">id: aSymbol label: aString root: anObject childrenBlock: aBlock	^self new initialize: aSymbol label: aString root: anObject childrenBlock: aBlock</body></methods><methods><class-id>Tools.Trippy.InsertReplaceDragController</class-id> <category>private</category><body package="Tools-Trippy" selector="doDrop:">doDrop: aDragContext	| parts |	parts := aDragContext data clientData.	self		insertUsing: [:part |			aDragContext sourceData contextApplication == page				ifTrue: [page dropFromSame: parts before: part]				ifFalse: [page drop: parts before: part]]		orReplaceUsing: [:part |			aDragContext sourceData contextApplication == page				ifTrue: [page dropFromSame: parts at: part]				ifFalse: [page drop: parts at: part]]</body><body package="Tools-Trippy" selector="insertUsing:orReplaceUsing:">insertUsing: insertionBlock orReplaceUsing: replacementBlock	| index part |	index := (view insertionOrReplacementIndexFor: view controller sensor cursorPoint) max: 0.5.	^index isInteger		ifTrue: "over an element"			[part := page fieldListHolder list at: index.			replacementBlock value: part]		ifFalse: "between elements"			[ | listIndex |			listIndex := index ceiling.			part := listIndex &gt; page fieldListHolder list size				ifTrue: [nil]				ifFalse: [page fieldListHolder list at: listIndex].			insertionBlock value: part]</body><body package="Tools-Trippy" selector="showDropFeedbackFor:">showDropFeedbackFor: aDragContext	view showInsertReplaceDropFeedbackIn: aDragContext allowScrolling: true.	^self		insertUsing:			[:part |			(page isInsertableBefore: part)				ifTrue: [self dropEffect: aDragContext]				ifFalse: [#dropEffectNone]]		orReplaceUsing:			[:part |			part isReadOnly				ifFalse: [self dropEffect: aDragContext]				ifTrue: [#dropEffectNone]]</body></methods><methods><class-id>Tools.Trippy.ReplacementUndo</class-id> <category>accessing</category><body package="Tools-Trippy" selector="explanation">explanation	^(savedValues size = 1		ifTrue: [(#AssignmentTo1s &lt;&lt; #dialogs &gt;&gt; 'Assignment to &lt;1s&gt;')			expandMacrosWith: (Inspector				safeDisplayStringOf: savedValues first partName)]		ifFalse: [(#AssignmentTo1sFields &lt;&lt; #dialogs &gt;&gt; 'Assignment to &lt;1p&gt; Fields')			expandMacrosWith: savedValues size])</body><body package="Tools-Trippy" selector="undoIn:">undoIn: aPage	aPage undoReplacement: self</body></methods><methods><class-id>Tools.Trippy.PartSnapshot</class-id> <category>accessing</category><body package="Tools-Trippy" selector="asVariableName">asVariableName	^part asVariableName</body><body package="Tools-Trippy" selector="displayString">displayString	^part displayString</body><body package="Tools-Trippy" selector="key">key	^part key</body><body package="Tools-Trippy" selector="part">part	^part</body><body package="Tools-Trippy" selector="partName">partName	^part partName</body><body package="Tools-Trippy" selector="restore">restore	part value: value</body><body package="Tools-Trippy" selector="text">text	^part text</body><body package="Tools-Trippy" selector="value">value	^value</body></methods><methods><class-id>Tools.Trippy.PartSnapshot</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:">initialize: aPart	part := aPart.	value := aPart value</body><body package="Tools-Trippy" selector="part:value:">part: aPart value: anObject	part := aPart.	value := anObject</body></methods><methods><class-id>Tools.Trippy.PartSnapshot class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="on:">on: aPart	^self new initialize: aPart</body></methods><methods><class-id>Tools.Trippy.KeyedElement</class-id> <category>accessing</category><body package="Tools-Trippy" selector="asVariableName">asVariableName	^key isString		ifTrue: [key]		ifFalse: [key isSymbol			ifTrue: [key asString]			ifFalse: [key isInteger				ifTrue: ['at', key printString]				ifFalse: [(Inspector safeDisplayStringOf: key) copyWithout: Character space]]]</body><body package="Tools-Trippy" selector="displayString">displayString	^Inspector safeDisplayStringOf: key</body><body package="Tools-Trippy" selector="key">key	^key</body><body package="Tools-Trippy" selector="partName">partName	^key printString</body><body package="Tools-Trippy" selector="value">value	^object at: key</body><body package="Tools-Trippy" selector="value:">value: anObject	^object at: key put: anObject</body></methods><methods><class-id>Tools.Trippy.KeyedElement</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="key:">key: anObject	key := anObject</body></methods><methods><class-id>Tools.Trippy.KeyedElement</class-id> <category>comparing</category><body package="Tools-Trippy" selector="sameTypeEquals:">sameTypeEquals: aPart 	^key = aPart key</body><body package="Tools-Trippy" selector="specificHash">specificHash	^key hash</body></methods><methods><class-id>Tools.Trippy.KeyedElement class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="of:at:">of: anObject at: anObject2	^self new		object: anObject;		key: anObject2</body></methods><methods><class-id>Tools.Trippy.Action</class-id> <category>accessing</category><body package="Tools-Trippy" selector="enablement">enablement	^enablementBlock value</body><body package="Tools-Trippy" selector="isEnabled">isEnabled	^enablementBlock value</body><body package="Tools-Trippy" selector="label">label	^label</body><body package="Tools-Trippy" selector="perform">perform	^actionBlock value</body></methods><methods><class-id>Tools.Trippy.Action</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="label:actionBlock:">label: aString actionBlock: aBlock	self label: aString actionBlock: aBlock enablementBlock: [true]</body><body package="Tools-Trippy" selector="label:actionBlock:enablementBlock:">label: aString actionBlock: aBlock enablementBlock: aBlock2	label := aString.	actionBlock := aBlock.	enablementBlock := aBlock2</body></methods><methods><class-id>Tools.Trippy.Action class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="label:block:">label: aString block: aBlock	^self new label: aString actionBlock: aBlock</body><body package="Tools-Trippy" selector="label:block:enablement:">label: aString block: aBlock enablement: aBlock2	^self new label: aString actionBlock: aBlock enablementBlock: aBlock2</body></methods><methods><class-id>Tools.Trippy.InspectorHolder</class-id> <category>inspector container</category><body package="Tools-Trippy" selector="back">back	self shouldNotImplement</body><body package="Tools-Trippy" selector="canGoBack">canGoBack	^false</body><body package="Tools-Trippy" selector="diveInto:">diveInto: aPart	aPart value inspect</body><body package="Tools-Trippy" selector="doWithOwnersToIgnore:">doWithOwnersToIgnore: aBlock	"See the comment to Inspector&gt;&gt;doWithOwnersToIgnore: for a detailed explanation.	This class is the top component, therefore here we start trickling down enumerating	junk owners on our way."	self enumerateOwnersToIgnore: aBlock</body><body package="Tools-Trippy" selector="enumerateOwnersToIgnore:">enumerateOwnersToIgnore: aBlock	aBlock		value: self;		value: builder window;		value: builder window component.	inspector enumerateOwnersToIgnore: aBlock</body><body package="Tools-Trippy" selector="inspector">inspector	^inspector</body><body package="Tools-Trippy" selector="partValueChanged:">partValueChanged: aPart	"We don't keep track of any object visits."</body></methods><methods><class-id>Tools.Trippy.InspectorHolder</class-id> <category>initialize-release</category><body package="Tools-Trippy" selector="initialize:">initialize: anInspector	inspector := anInspector.	inspector container: self</body><body package="Tools-Trippy" selector="postBuildWith:">postBuildWith: aBuilder	| subBuilder |	(aBuilder componentAt: #inspector) widget		client: inspector		spec: inspector specName		builder: (subBuilder := aBuilder newSubBuilder).	inspector installedWith: subBuilder</body></methods><methods><class-id>Tools.Trippy.InspectorHolder class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="with:">with: anInspector	^self new initialize: anInspector</body><body package="Tools-Trippy" selector="withInspectorOn:">withInspectorOn: anObject	| inspector |	inspector := (Inspector cautiousInspectorClassesFor: anObject) first on:			anObject.	^self new initialize: inspector</body></methods><methods><class-id>Tools.Trippy.SelfPart</class-id> <category>accessing</category><body package="Tools-Trippy" selector="displayIcon">displayIcon		(Inspector isImmutableObject: object) ifFalse: [^super displayIcon].	^VisualRow		with: super displayIcon		with: GeneralIcons padlock</body><body package="Tools-Trippy" selector="displayString">displayString	^'self'</body><body package="Tools-Trippy" selector="displayText">displayText		^super displayText allBold</body><body package="Tools-Trippy" selector="key">key	^#self</body><body package="Tools-Trippy" selector="partName">partName	^'self'</body><body package="Tools-Trippy" selector="value">value	^object</body></methods><methods><class-id>Tools.Trippy.SelfPart</class-id> <category>comparing</category><body package="Tools-Trippy" selector="sameTypeEquals:">sameTypeEquals: aPart 	^true</body><body package="Tools-Trippy" selector="specificHash">specificHash	^18</body></methods><methods><class-id>Tools.Trippy.SelfPart</class-id> <category>testing</category><body package="Tools-Trippy" selector="isReadOnly">isReadOnly	^true</body></methods><methods><class-id>Tools.Trippy.SelfPart class</class-id> <category>instance creation</category><body package="Tools-Trippy" selector="object:">object: anObject 	^self new object: anObject</body></methods><methods><class-id>UI.ApplicationStandardSystemController class</class-id> <category>user interface</category><body package="Tools-Trippy" selector="protectedInstVarNames">protectedInstVarNames	^self instVarNames</body></methods><methods><class-id>UI.ScheduledWindow</class-id> <category>user interface</category><body package="Tools-Trippy" selector="componentHierarchyChildren">componentHierarchyChildren	^Array with: component</body><body package="Tools-Trippy" selector="inspectorActions">inspectorActions	^Array 		with: (Tools.Trippy.Action label: (#Raise &lt;&lt; #dialogs &gt;&gt; 'Raise') block: [self raise] enablement: [self isOpen])		with: (Tools.Trippy.Action label: (#Close &lt;&lt; #dialogs &gt;&gt; 'Close') block: [self close] enablement: [self isOpen])</body><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	^Array		with: Tools.Trippy.PreviewingInspector		with: Tools.Trippy.BasicInspector</body><body package="Tools-Trippy" selector="inspectorCollaborators">inspectorCollaborators	^Array 		with: (Tools.Trippy.Collaborator label: (#Model &lt;&lt; #dialogs &gt;&gt; 'Model') variable: 'model' object: model)		with: (Tools.Trippy.Collaborator label: (#Controller &lt;&lt; #dialogs &gt;&gt; 'Controller') variable: 'controller' object: controller)		with: (Tools.Trippy.Collaborator label: (#Component &lt;&lt; #dialogs &gt;&gt; 'Component') variable: 'component' object: component)		with: (Tools.Trippy.Collaborator label: (#Application &lt;&lt; #labels &gt;&gt; 'Application') variable: 'application' object: application)</body><body package="Tools-Trippy" selector="inspectorHierarchies">inspectorHierarchies	^Array with: 		(Tools.Trippy.Hierarchy 			id: #componentHierarchy			label: (#ComponentHierarchy &lt;&lt; #dialogs &gt;&gt; 'Component Hierarchy') 			parentBlock: [:vc | vc componentHierarchyParent]			childrenBlock: [:vc | vc componentHierarchyChildren])</body></methods><methods><class-id>Core.Set</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	^Array		with: Tools.Trippy.SetInspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Core.ClassDescription class</class-id> <category>user interface</category><body package="Tools-Trippy" selector="protectedInstVarNames">protectedInstVarNames	^self instVarNames</body></methods><methods><class-id>Core.Signal</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorHierarchies">inspectorHierarchies	^Array with:		(Tools.Trippy.Hierarchy			id: #exception			label: (#ExceptionHierarchy &lt;&lt; #dialogs &gt;&gt; 'Exception Hierarchy')			parentBlock: [:ex | ex isBehavior 				ifTrue: [ex == GenericException 					ifTrue: [nil]					ifFalse: [ex superclass]]				ifFalse: [ex parent]]			childrenBlock: [:ex | 				(Signal allInstances select: [:some | some parent == self]),					(ex isBehavior ifTrue: [ex subclasses] ifFalse: [#()])])</body></methods><methods><class-id>Core.Object</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	"Answer a sequence of inspector classes that can represent the receiver in an	inspector. The first page in the array is the one used by default in a new inspector."	^Array with: Tools.Trippy.BasicInspector</body><body package="Tools-Trippy" selector="inspectorCollaborators">inspectorCollaborators	"Answer a collection of Collaborator instances listing the important other	objects a person looking at this one might want to see. For example,	collaborators of a view would be its model and the controller.	Collaborators are added to the inspector's Go menu."	^#()</body><body package="Tools-Trippy" selector="inspectorHierarchies">inspectorHierarchies	"Answer a collection of instances of Hierarchy describing the hierarchies	this object is a member of."	^#()</body></methods><methods><class-id>UI.View</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorCollaborators">inspectorCollaborators	^Array 		with: (Tools.Trippy.Collaborator label: (#Model &lt;&lt; #labels &gt;&gt; 'Model') variable: 'model' object: model)		with: (Tools.Trippy.Collaborator label: (#Controller &lt;&lt; #labels &gt;&gt; 'Controller') variable: 'controller' object: controller)</body></methods><methods><class-id>Kernel.GeneralNameSpace</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	^Array		with: Tools.Trippy.PoolDictionaryInspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	^Array		with: Tools.Trippy.TextEditorInspector		with: Tools.Trippy.ArrayInspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Core.KeyedCollection</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	^self size &gt; 10000		ifTrue:			[Array with: Tools.Trippy.BasicInspector]		ifFalse:			[Array				with: Tools.Trippy.DictionaryInspector				with: Tools.Trippy.BasicInspector]</body></methods><methods><class-id>UI.SubCanvasSpec</class-id> <category>user interface</category><body package="Tools-Trippy" selector="specHierarchyChildren">specHierarchyChildren	"Try to get the spec we embed and return it as the children.	This will not work for all possible uses of subcanvases since majorKey	and minorKey are not required to be a class reference and a selector	but it will make life easier at least in some cases."	^[Array with: (self majorKey value interfaceSpecFor: self minorKey)]		on: Error		do: [:ex | ex return: nil]</body></methods><methods><class-id>UI.SpecCollection</class-id> <category>user interface</category><body package="Tools-Trippy" selector="specHierarchyChildren">specHierarchyChildren	^collection</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	^Array		with: Tools.Trippy.SequenceInspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Kernel.CompiledMethod</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorActions">inspectorActions	^Array with: (Tools.Trippy.Action 				label: (#BrowseMethod &lt;&lt; #dialogs &gt;&gt; 'Browse Method')				block: 					[| array md |					array := self who.					md := MethodDefinition class: (array at: 1) selector: (array at: 2).					MethodCollector new 						openListBrowserOn: (Array with: md)						label: (#InspectedMethod &lt;&lt; #dialogs &gt;&gt; 'Inspected Method')						initialSelection: nil]				enablement: [self who notNil])</body></methods><methods><class-id>Graphics.VisualComponent</class-id> <category>user interface</category><body package="Tools-Trippy" selector="componentHierarchyChildren">componentHierarchyChildren	^Array new</body><body package="Tools-Trippy" selector="componentHierarchyParent">componentHierarchyParent	^nil</body><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	"For VisualComponents, the preferred page is not the first one.	 See the redefined #preferredInspectorPageClass."	^Array		with: Tools.Trippy.PreviewingInspector		with: Tools.Trippy.BasicInspector</body><body package="Tools-Trippy" selector="inspectorHierarchies">inspectorHierarchies	^Array with: 		(Tools.Trippy.Hierarchy 			id: #componentHierarchy			label: (#ComponentHierarchy &lt;&lt; #dialogs &gt;&gt; 'Component Hierarchy') 			parentBlock: [:vc | vc componentHierarchyParent]			childrenBlock: [:vc | vc componentHierarchyChildren])</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>converting</category><body package="Tools-Trippy" selector="bitsAsInteger">bitsAsInteger	"Return an integer which is an integer bitVector representive of the reciever."	"We either branch here or have duplicate implementations in Double and SmallDouble"	| bytes |	bytes := UninterpretedBytes new: self class instanceByteSize.	^bytes basicSize = 4		ifTrue: [bytes				floatAt: 1 put: self;				unsignedLongAt: 1]		ifFalse: [bytes				doubleAt: 1 put: self;				unsignedLongLongAt: 1]</body></methods><methods><class-id>UI.ControlManager class</class-id> <category>user interface</category><body package="Tools-Trippy" selector="protectedInstVarNames">protectedInstVarNames	^self instVarNames</body></methods><methods><class-id>Core.Behavior</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorCollaborators">inspectorCollaborators	^Array		with: (Tools.Trippy.Collaborator label: (#AllInstances &lt;&lt; #labels &gt;&gt; 'All Instances') block: [self allInstances])</body><body package="Tools-Trippy" selector="inspectorHierarchies">inspectorHierarchies	^Array with:		(Tools.Trippy.Hierarchy			id: #class			label: (#ClassHierarchy &lt;&lt; #labels &gt;&gt; 'Class Hierarchy')			parentBlock: [:class | class superclass]			childrenBlock: 				[:class | 				class subclasses asSortedCollection: [:a :b | a name &lt;= b name]])</body><body package="Tools-Trippy" selector="protectedInstVarNames">protectedInstVarNames	"Answer a collection of instance variable names that should be treated by	the inspector as protected -- see the explanation in Part&gt;&gt;isProtected.	Note that the inspector sends this message to all classes on the	inheritance chain and collects all answered names.	This method will typically be implemented on the class side, and would	answer either a collection of variable names (strings) or be implemented as		^self instVarNames	or		^self allInstVarNames."	^#()</body></methods><methods><class-id>Core.Integer</class-id> <category>printing</category><body package="Tools-Trippy" selector="asShortSizeInBytes">asShortSizeInBytes	| baseOneKilobyte sizeUnits toGo leadingDigitIndex answer |	sizeUnits := #('' 'B' 'K' 'M' 'G' 'T').	self &lt; 0 ifTrue: [^'-', self negated asShortSizeInBytes].	self = 0 ifTrue: [^self printString, (sizeUnits at: 2)]. 	baseOneKilobyte := Array new: sizeUnits size.	baseOneKilobyte at: 1 put: 0.	toGo := self.	2 to: sizeUnits size do:		[:each |			baseOneKilobyte at: each put: (toGo bitAnd: 1023).			toGo := toGo bitShift: -10		].	toGo &gt; 0 ifTrue: [baseOneKilobyte at: sizeUnits size put: toGo * 1024 + (baseOneKilobyte at: sizeUnits size)].	leadingDigitIndex := baseOneKilobyte findLast: [:one | one &gt; 0].	leadingDigitIndex = 0 ifTrue: [leadingDigitIndex := baseOneKilobyte size].	answer := String new writeStream.	(baseOneKilobyte at: leadingDigitIndex) printOn: answer.	leadingDigitIndex &gt; 2 ifTrue:		[			answer nextPut: $..			((baseOneKilobyte at: leadingDigitIndex - 1) * 100 // 1024)				printOn: answer paddedWith: $0 to: 2 base: 10		].	answer nextPutAll: (sizeUnits at: leadingDigitIndex).	^answer contents</body></methods><methods><class-id>Core.Integer</class-id> <category>user interface</category><body package="Tools-Trippy" selector="paddedBinaryPrintString">paddedBinaryPrintString	"Answer the base two representation of the receiver, with the output	being split into groups of 8 bits each.  Each digit is a byte of the receiver"	| result |	self &lt; 0 ifTrue: [^'-', self negated paddedBinaryPrintString].	result := String new writeStream.	(self digitLength to: 1 by: -1)		do:			[:eachDigitIndex |				(self digitAt: eachDigitIndex)					printOn: result					paddedWith: $0					to: 8					base: 2			]		separatedBy: [result space].	^result contents</body></methods><methods><class-id>Core.Symbol</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	"Removing the superclass' TextEditorInspector--	at least until I think well about what it could do to symbols."	^Array		with: Tools.Trippy.BasicInspector		with: Tools.Trippy.ArrayInspector</body></methods><methods><class-id>Core.GenericException class</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorHierarchies">inspectorHierarchies		^super inspectorHierarchies		copyWith:			(Tools.Trippy.Hierarchy				id: #exception				label: #ExceptionHierarchy &lt;&lt; #dialogs &gt;&gt; 'Exception Hierarchy'				parentBlock:					[:ex | 					ex isBehavior						ifTrue:							[ex == GenericException								ifTrue: [nil]								ifFalse: [ex superclass]]						ifFalse: [ex parent]]				childrenBlock:					[:ex | 					(Signal allInstances select: [:some | some parent == self])						,							(ex isBehavior								ifTrue: [ex subclasses]								ifFalse: [#()])])</body></methods><methods><class-id>UI.FullSpec</class-id> <category>user interface</category><body package="Tools-Trippy" selector="specHierarchyChildren">specHierarchyChildren	^Array with: window with: component</body></methods><methods><class-id>UI.Controller class</class-id> <category>user interface</category><body package="Tools-Trippy" selector="protectedInstVarNames">protectedInstVarNames	^self instVarNames</body></methods><methods><class-id>UI.Controller</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorCollaborators">inspectorCollaborators	^Array 		with: (Tools.Trippy.Collaborator label: (#Model &lt;&lt; #labels &gt;&gt; 'Model') variable: 'model' object: model)		with: (Tools.Trippy.Collaborator label: (#View &lt;&lt; #labels &gt;&gt; 'View') variable: 'view' object: view)</body></methods><methods><class-id>Kernel.ObjectMemory</class-id> <category>utilities</category><body package="Tools-Trippy" selector="print:used:total:threshold:objects:on:">print: name used: used total: total threshold: threshold objects: objects on: aStream	"name:	used / total[ @ threshold][, objs]"	aStream		cr;		nextPutAll: name;		nextPutAll: ':	';		nextPutAll: used asShortSizeInBytes;		nextPutAll: ' / ';		nextPutAll: total asShortSizeInBytes.	threshold		ifNotNil: 			[aStream				nextPutAll: ' @ ';				nextPutAll: threshold asShortSizeInBytes].	objects		ifNotNil: 			[aStream				nextPutAll: ', ';				nextPutAll: objects printString]</body><body package="Tools-Trippy" selector="spaceSummaryOn:">spaceSummaryOn: aStream	aStream cr; nextPutAll: (#SpaceHeader &lt;&lt; #dialogs &gt;&gt; 'SPACE:	used / total[ @ threshold][, objects]') expandMacros; cr.	self		print: 'EDEN' used: edenUsedBytes total: edenBytes threshold: edenUsedBytesScavengeThreshold objects: nil on: aStream;		print: 'SURVIVOR' used: survUsedBytes total: survBytes threshold: survUsedBytesTenuringThreshold objects: nil on: aStream;		print: 'LARGE' used: largeUsedBytes total: largeBytes threshold: largeBytes - largeFreeBytesTenuringThreshold objects: largeUsedObjects on: aStream;		print: 'OLD' used: availableFreeOldSpaceBytes total: oldBytes threshold: oldBytes - availableFreeOldSpaceBytesLimit objects: oldOTEs on: aStream;		print: 'PERM' used: permDataBytes total: permBytes threshold: nil objects: permOTEs on: aStream;		print: 'FIXED' used: fixedUsedBytes total: fixedBytes threshold: nil objects: fixedUsedObjects on: aStream.</body></methods><methods><class-id>Core.ArrayedCollection</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	"For some arrayed collections there is no real difference between the	array and basic views, but for some there is so let's provide both. If this 	proves to be confusing, we can do a finer-grained tuning in individual	subclasses."	^Array		with: Tools.Trippy.ArrayInspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Core.Dictionary</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorClasses">inspectorClasses	^Array		with: Tools.Trippy.DictionaryInspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Core.Metaclass class</class-id> <category>user interface</category><body package="Tools-Trippy" selector="protectedInstVarNames">protectedInstVarNames	^self instVarNames</body></methods><methods><class-id>UI.UISpecification</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorHierarchies">inspectorHierarchies	^Array with: 		(Tools.Trippy.Hierarchy 			id: #specHierarchy			label: (#SpecHierarchy &lt;&lt; #labels &gt;&gt; 'Spec Hierarchy') 			root: self			childrenBlock: [:spec | spec specHierarchyChildren])</body></methods><methods><class-id>Graphics.VisualPart</class-id> <category>user interface</category><body package="Tools-Trippy" selector="componentHierarchyParent">componentHierarchyParent	^container</body><body package="Tools-Trippy" selector="inspectorActions">inspectorActions	^Array 		with: (Tools.Trippy.Action label: (#Flash &lt;&lt; #dialogs &gt;&gt; 'Flash') block: [self flash])</body></methods><methods><class-id>Graphics.CompositePart</class-id> <category>user interface</category><body package="Tools-Trippy" selector="componentHierarchyChildren">componentHierarchyChildren	^components</body></methods><methods><class-id>Core.Class class</class-id> <category>user interface</category><body package="Tools-Trippy" selector="protectedInstVarNames">protectedInstVarNames	^self instVarNames</body></methods><methods><class-id>Core.Class</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorCollaborators">inspectorCollaborators	^super inspectorCollaborators copyWith:		(Tools.Trippy.Collaborator label: (#NewInstance &lt;&lt; #dialogs &gt;&gt; 'New Instance') block: [self new])</body></methods><methods><class-id>Graphics.Wrapper</class-id> <category>user interface</category><body package="Tools-Trippy" selector="componentHierarchyChildren">componentHierarchyChildren	^Array with: component</body></methods><methods><class-id>Tools.Trippy.Inspector class</class-id> <category>resources</category><body package="Tools-Trippy" selector="baseObjectSubmenu">baseObjectSubmenu	"Tools.MenuEditor new openOnClass: self andSelector: #baseObjectSubmenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Refresh 					#defaultString: '&amp;Refresh' 					#catalogID: #menus ) 				#value: #refresh 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Browse 					#defaultString: '&amp;Browse' 					#catalogID: #menus ) 				#nameKey: #objectBrowse 				#value: #browseClass 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 3 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Inspect 					#defaultString: '&amp;Inspect' 					#catalogID: #menus ) 				#nameKey: #objectSpawn 				#value: #spawn ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #InspectOwners 					#defaultString: 'Inspect &amp;Owners' 					#catalogID: #menus ) 				#nameKey: #objectInspectOwners 				#value: #inspectOwners ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #InspectReferencePaths 					#defaultString: 'Inspect Reference &amp;Paths' 					#catalogID: #menus ) 				#nameKey: #objectReferencePath 				#value: #inspectReferencePath ) ) #(1 4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector</class-id> <category>menu management</category><body package="Tools-Trippy" selector="menuItemBrowseFieldDefinition">menuItemBrowseFieldDefinition		&lt;itemInMenu: #(#fieldList) position: 12.1&gt;	^(MenuItem labeled: #Definition &lt;&lt; #inspector &gt;&gt; 'Definition')		visible: [self selections anySatisfy: [:each | each definition notNil]];		value:				[| uniqueDefinitions |					uniqueDefinitions := ((self selections						reject: [:each | each definition isNil])						collect: [:each | each definition]) asSet.					(Refactory.Browser.MethodDefinitionEnvironment onMethods:							uniqueDefinitions) openEditor]</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector class</class-id> <category>resources</category><body package="Tools-Trippy" selector="baseEditSubmenu">baseEditSubmenu	"Tools.MenuEditor new openOnClass: self andSelector: #baseEditSubmenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Undo 					#defaultString: '&amp;Undo' 					#catalogID: #menus ) 				#nameKey: #editUndo 				#value: #undo 				#shortcutKeyCharacter: $Z 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Forget 					#defaultString: '&amp;Forget' 					#catalogID: #menus ) 				#nameKey: #editFlushUndoHistory 				#value: #flushUndoHistory ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Select_All 					#defaultString: 'Select &amp;All' 					#catalogID: #menus ) 				#nameKey: #editSelectAll 				#value: #selectAllFields 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #selectFields ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #menus ) 				#nameKey: #editCopy 				#value: #copySelection 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #menus ) 				#nameKey: #editPaste 				#value: #paste 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editPaste ) ) ) #(2 1 2 ) nil ) decodeAsLiteralArray</body><body package="Tools-Trippy" selector="fieldListMenu">fieldListMenu	"Tools.MenuEditor new openOnClass: self andSelector: #fieldListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Inspect 					#defaultString: '&amp;Inspect' 					#catalogID: #menus ) 				#nameKey: #spawn 				#value: #spawn ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Dive 					#defaultString: '&amp;Dive' 					#catalogID: #menus ) 				#nameKey: #dive 				#value: #dive ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Back 					#defaultString: '&amp;Back' 					#catalogID: #menus ) 				#nameKey: #back 				#value: #back 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #navigatePrevious ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Select_All 					#defaultString: 'Select &amp;All' 					#catalogID: #menus ) 				#nameKey: #editSelectAll 				#value: #selectAllFields 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #selectFields ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #menus ) 				#nameKey: #copy 				#value: #copySelection 				#enablementSelector: #canCopy 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #menus ) 				#nameKey: #paste 				#value: #paste 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editPaste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Refresh 					#defaultString: '&amp;Refresh' 					#catalogID: #menus ) 				#nameKey: #refresh 				#value: #refresh ) ) #(3 1 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.Trippy.PartListAbstractInspector class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="segmentedSpec">segmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #segmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1027 785 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEntry: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 0.4 0 1 ) 					#name: #fieldList 					#flags: 15 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #dive 						#requestValueChangeSelector: #changeRequest ) 					#menu: #fieldListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #normalSelection ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#tabRequiresControl: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 0.4 ) 					#name: #segmentList 					#flags: 15 					#model: #segmentListHolder 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body><body package="Tools-Trippy" selector="unsegmentedSpec">unsegmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #unsegmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1027 785 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEntry: #dropSelector 						#drop: #dragStartSelector 						#doDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 1 ) 					#name: #fieldList 					#flags: 15 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #dive 						#requestValueChangeSelector: #changeRequest ) 					#menu: #fieldListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #normalSelection ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="segmentedSpec">segmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #segmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1027 785 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEntry: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 0.4 0 1 ) 					#name: #fieldList 					#flags: 15 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #dive 						#requestValueChangeSelector: #changeRequest ) 					#menu: #fieldListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #normalSelection ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 -20 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#tabRequiresControl: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 0.4 ) 					#name: #segmentList 					#flags: 15 					#model: #segmentListHolder 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.4 0 1 0 1 ) 					#model: #valueOrKeyHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #ValueAtKey 						#defaultString: 'Value at Key' 						#catalogID: #labels ) 					#select: #value ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0.7 0 1 0 1 ) 					#model: #valueOrKeyHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #Key 						#defaultString: 'Key' 						#catalogID: #labels ) 					#select: #key ) ) ) )</body><body package="Tools-Trippy" selector="unsegmentedSpec">unsegmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #unsegmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1027 785 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEntry: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 1 ) 					#name: #fieldList 					#flags: 15 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #dive 						#requestValueChangeSelector: #changeRequest ) 					#menu: #fieldListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #normalSelection ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 -20 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#tabRequiresControl: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.4 0 1 0 1 ) 					#model: #valueOrKeyHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #ValueAtKey 						#defaultString: 'Value at Key' 						#catalogID: #labels ) 					#select: #value ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0.7 0 1 0 1 ) 					#model: #valueOrKeyHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #Key 						#defaultString: 'Key' 						#catalogID: #labels ) 					#select: #key ) ) ) )</body></methods><methods><class-id>Tools.Trippy.OwnerNavigator class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 412 284 706 525 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.25 0 1 ) 					#name: #fieldList 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #fieldDoubleClicked ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.25 0 0 0 1 0 1 ) 					#name: #inspector 					#model: #inspectorHolder 					#labels: #() ) ) ) )</body></methods><methods><class-id>Tools.Trippy.InspectorIcons class</class-id> <category>png imports</category><body package="Tools-Trippy" selector="modeFocus">modeFocus	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'modeFocus.png'&gt;	&lt;md5sum: #[169 25 167 194 74 78 169 87 138 207 96 108 34 187 253 6]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@Y)U%JHC???&lt;@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@Y)U%JHC???&lt;@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@Y)U%JHC???&lt;@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@W"8.KI82L#C.S$9MP%9^WX96]''WN (JA=)JR$-H16V-?$1)2?/7 X+;55FVB:\!$P.F&lt;Z@@@@@@@@@@@@@@@@@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@''#H2LO9FQ$U*Y&amp;Y%6''):^#ZV%)Y&gt;*****+Z6-39E&gt;ZO?49L''?9LBC?=..YO?L$S__/''\YTLA:E0@@@@@@@@@@@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@;$YFQV9ZV%''6]''Y6[)*Z&amp;-J2,+LV2,+KO-[V59Y"G\??7:-C?;-N ?&gt;7Q''_?*3I_?7[I-?&lt;I?HFB:\Q$@@@@@@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HAP$9NS])*Z&amp;)2#(:N;+J2,4+N3,=&gt;:.++''/[6=&lt;)6M^_?9;M[?&lt;-&amp;-??GX*/?05ZW?:,*P?=JYN_?@^!$ .W@Z@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HA$$9NS#)2\''KR''):_Q,[F19["8.N&gt;&gt;/+;50LC@&gt;)&gt;P_/?:;-/?&lt;-".?&gt;/E!_?%-&amp;K?8Z1N?="^M??I"BB//GPZ@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HA3$)JR''96]''\V''):_ ,[F1&lt;K&amp;9.__@0LC;0\GA?ZFR O?8:-O?:&lt;J@?&gt;*&gt;^_?''.V3?9KM\?=:(Q??Q$23?0G(ZDK!/F B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HA=$IBP*)*Z&amp;,&gt;$)JS''+:&gt;/=[^7-?.=/[7&gt;0LC@?*BR_??79\''?;,*Q?&gt;3E!/?)/''_?9+Y%?&gt;F.T_?V&amp;3W?1XH]PK%1F B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HBA#X6M+9VU%]N^'');**Z&amp;)=;F1,_28.K#?.;.;?92N_O?9:]C?&lt;]F^?&gt;;I#/?*0G7?9;!*?&gt;N0U_?X''#+?18T_PK14FPB@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HB@"H"H+X&gt;O#=FY&amp;Y'')(ZF!=****/21,[G&gt;-+Z6?9"J^_?8:L??&lt;]B[?&gt;7H#_?*0G3?9;!)?&gt;J/U_?W''#''?1(P_PK-3F B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HA8!HRD)X*J",.R$)K$&amp;9.[&lt;:J"(/*)*Z''=+*:.?)JE]O?79L_?;\"M?&gt;3D ??)/GW?9[U#?&gt;B,S??T&amp;CO?078\LK!0F B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HA, XFA%8ZF!+6M#X7Y%IRT:9.[&amp;?R"(*K9)*Z&amp;?H2@[/?58K;?:,A&lt;?&gt;&amp;&lt;]_?&amp;-6''?8;EY?=.$P??N#"''_/'' [@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HAZ_G1&lt; (JB *&amp;G!8_G#(:N7IRT%N&amp;Y&amp;Y''/''Y6]=8U9ZO?37KW?9;!)?&gt;V6X??#,U''?7ZYH?=JUL/?D Q=0.''DZ@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ HAE^''):ZG9&gt;_(6B (J,!8^G1H6M#]RQ$YG]%IRT;W50XO?16J+?8*=U?&gt;B,S??[)DO?4)T2?&lt;^DH+&gt;&lt;]Q(@@@@@@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@0]7]7SG1&lt;_F-?_7&gt;I (JB(X^G!;NJ"(*&gt;#H2L67%+VO?,397?5989?=RXL??N#"''?1HD_/;15F!B8[1(@@@@@@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@^]7]7L''):^$):^'')"_''9&gt;^HFA X&amp;D!HRT!XVE0''!&amp;S??#0(??1(P_?&lt;M&gt;GM&gt;&gt;^A-0.''DZ@@@@@@@@@@@@@@@@@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@Q\GA0GWY6]"57]7\&gt;^7-;S71&lt;_E5&gt;_''9&amp; XFA)'')#QZC28=E@.7LZLK!0F @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@Y)U%JHC???&lt;@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@Y)U%JHC???&lt;@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@@HB@ @B@ H@@ HB@')))] once</body><body package="Tools-Trippy" selector="modeHistory">modeHistory	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'modeHistory.png'&gt;	&lt;md5sum: #[58 212 163 109 254 57 3 158 56 247 176 109 37 12 255 185]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR06ZL0A?,U0@&amp;\2NJY''B_Q,&amp;''3$@@@@@@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR7&gt;-T CL9+103N7K#L3$,52?.FH@CY(3@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0:ZL0BO,U0@+L2NJZ3B_Q,+''3$@@@@@@I''B] CL9+]"3N*;\\3#*T/L2W @L906@@.ZL0A0,U0@!,2NJX[B_Q,"''3$@@@@@@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR8&gt;-T C&amp;9+109.7K#N[$,53X.FH@C)(3@I&amp;-S CL5(8K3NN)R&lt;3 (#3L/6(@I)04@GB-T B39+10,&gt;7K#KO$,52(.FH@B9(3@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR:3B] C&amp;9+]"9.*;\^[#*T/&amp;2W @N)06@BZ_NPB?-E @3L%8@L2?Z A?)DL@@@@@@H[B] B39+]",&gt;*;\[O#*T.32W @KY06@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR:2-S C&amp;5(8K9.N)R&gt;[ (#3&amp;/6(@J904@@@@@@@M&amp;#L@L906@BZ\M@@@@@@@@@@@@HZ-S B35(8K,&gt;N)R;O (#23/6(@H)04@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR2._NPCX-E @9,%8@NZ?Z BO)DL@@@@@@@[(:N!T:N#(!&gt;S$9WW^7-&lt;05=_X@D-KR2J_NPB(-E @,&lt;%8@KN?Z A0)DL@@@@@@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0@@@@@N&amp;#L@N)06@B.\M@@@@@@@I&gt;_''9=K):^''?:^'')?79&gt;_/?]7]7?5MST#\/K3@OE1\XK&amp;#L@KY06@BJ\M@@@@@@@@@@@@@AKR4,@R4-K@D-KR0AKR4,P&amp;#L@'';E\@K?L#"&amp;?0''4[LI&lt;9@@@@@@@I8^G"8^W%9_?''9&gt;_?9&gt;_''?71&lt;__?*:.+?3\7N?&lt;SD1XSC0&lt;P@R4-KB)(3@E&gt;1W@A33H8)\&lt;I=F16_NP@@@@@@@D-KR0AKR4._+UH@?&gt;Z&lt;\O?-283?9KM\;;!"@ABZL0AZ7]7]?=?_8O?"8.K?8.K"?7%9^/?%9^[?1LSE?&lt;OC1N7B0,LC0,KCW:5R@I''&amp;/GBY;\.L&amp;^R3WH&gt;8X @J&amp;#L@@D-KR0AKR4.?0''X@?&gt;Z7X/?*.7G?8:%K?&lt;%8@DB\M BP5]WU?9VU%_?V5-_?5]WV?7E1\/=,[F3?Z6-+?6-+Z??B0,L''0,KC\&lt;I6@I''&amp;-6JY:+-1&amp;^N)R9''I^@@&amp;''CX@@D-KR0AKR4.?+T8@?=ZNB??#*T/?8JH&lt;?;=*@CB\M@BD2,+K?&lt;#H2_?W5=_?1LSE?&lt;OC1O?^7-;?7]7^?=3\7_?\7M4^0\GB\:5N@I''V# .Y8:%K&amp;^B"OI&amp;?Z @]''CP@@D-KR0AKR4,0''3$@;;QX@O?I^@C?/6(@'':QC@@@@@@@91LSE?&lt;OC1O?B0,O?0,KC?&lt;GA0/?@0LG?0LCA?&lt;C@0]K@0LD@R4-KGY&lt;9@H&gt;4V@BY2W @&amp;[=*@E&gt;$P0@@@@@@@D-KR0AKR4,@@@@@DI(3@DB\M @0''CP@@@@@@@@@@@@@R4-K(,KB0??B0,O?0\GB?8ZF!??@0LG?0LCA&gt;\C@0S?@0LD@R4-K@@@@@@*ZL0@&amp;''CX@GY04@@@@@@@@@@@@@D-KR0AKR4,@R4-K@D-KR0JZL0@X,U0@GL2NJQ3B_Q,G''3$@@O???7KA0\K-0LCA?&lt;C@0_?S4=SI0LCAK\C@0P^ZL0AH,U0@U,2NJU[B_Q,V''3$@@@@@@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR1"-T @&amp;9+10I.7K#B[$,50$.FH@@)(3@@AKR4,@R4-KH\C@0P?@0LD@R4-K@D-KR4"-T A39+10\&gt;7K#GO$,51,.FH@A9(3@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR13B] @&amp;9+]"I.*;\R[#*T,&amp;2W @B)06@@VZL0@0,U0@N,2NJS+B_Q,N''3$@@@@@@E[B] A39+]"\&gt;*;\WO#*T-32W @GY06@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR12-S @&amp;5(8KI.N)R2[ (#0&amp;/6(@A904@CB-T AM9+10S^7K#D7$,51H.FH@AY(3@EZ-S A35(8K\&gt;N)R7O (#13/6(@E)04@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0^_NP@$-E @I,%8@BZ?Z @X)DL@@@@@@C+B] AM9+]"S^*;\T7#*T-M2W @D906@AZ_NPA,-E @\&lt;%8@GN?Z AH)DL@@@@@@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0@@@@@B&amp;#L@B)06@@^\M@@@@@@@@@@@@C*-S AM5(8KS^N)R47 (#1M/6(@C)04@@@@@@@G&amp;#L@GY06@AZ\M@@@@@@@@@@@@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0:_NPAH-E @S\%8@D6?Z @0)DL@@@@@@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0@@@@@E&amp;#L@D906@@:\M@@@@@@@@@@@@@AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K@D-KR0AKR4,@R4-K')))] once</body><body package="Tools-Trippy" selector="modeParts">modeParts	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'modeParts.png'&gt;	&lt;md5sum: #[142 74 25 167 101 195 216 200 218 86 226 201 37 47 121 121]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???&lt;@????@O???7L@@@@@????@O???0C???&lt;@XVE!DJ]L@I&gt;;\@.?4)-C/&lt;*MM3B*TP@@@@@@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???&lt;@????@O???7L@@@A3@@@@@O???0C???&lt;@XVE!'';]''@O?)1XG?;=FZ?&gt;^&lt;\N?A]PPP)40@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3@@@@\0@@@GL@@@A3@@@@\0@@@@C???&lt;@XVE!/&lt;*FE/?)0GW?;LNC?&gt;Z3X_?P"QQ@*D8@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3????\????7L@@@A3@@@@\????7O???&lt;@XVE!/;]$@O?[&amp;2''?9+M!?&gt;R-T??G_@,0*D4@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3????@O???7L@@@A3????\????0C???&lt;@XVE!LJ)Q@N&gt;=[@C?4H$T?&lt;]&lt;B9&gt;/V @@@@@@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3????@O???0C???=3????@O???0C???&lt;@XVE!@@@@@AB''S@A@*D8@LJ!M@@@@@@@@@@@@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3????@O???0C???&lt;@????@O???0C???&lt;@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XQ@@IKJ_@C7\/3]/9[&lt;%X.H0@BV4@@@@@@A!XVD@????@O???7L@@@A3????@O???7L@@@@@????@O???0C???&lt;@XVE!DJ]L@I&gt;;\@.?4)-C/&lt;*MM3B*TP@@@@@@@FE!XY&lt;@L=_? JS/?9*7&lt;_=0&amp;N3/@C7\D@@$, A!XVD@????@O???7L@@@A3????@O???7L@@@A3@@@@@O???0C???&lt;@XVE!'';]''@O?)1XG?;=FZ?&gt;^&lt;\N?A]PPP)40@@FE!X[&lt;IS]??]Y/.?8R'';?=!#./?B5C P@@%-@A!XVE3@@@@\0@@@GL@@@A3@@@@\0@@@GL@@@A3@@@@\0@@@@C???&lt;@XVE!/&lt;*FE/?)0GW?;LNC?&gt;Z3X_?P"QQ@*D8@@FE!X[&lt;@KLK?JFW$?6FN:?=S!N''?@DS]L@@%-@A!XVD@????\????7L@@@A3????\????7L@@@A3@@@@\????7O???&lt;@XVE!/;]$@O?[&amp;2''?9+M!?&gt;R-T??G_@,0*D4@@FE!XS@@I[S/@CKS?0-P8O&lt;@QM6_@B3B@@@@@@A!XVD@????@O???7L@@@A3????@O???7L@@@A3????\????0C???&lt;@XVE!LJ)Q@N&gt;=[@C?4H$T?&lt;]&lt;B9&gt;/V @@@@@@@FE!XP@@@@@P@BR2P@@%-C@@I[P@@@@@@@@@@@A!XVD@????@O???7L@@@A3????@O???0C???=3????@O???0C???&lt;@XVE!@@@@@AB''S@A@*D8@LJ!M@@@@@@@@@@@@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3????@O???0C???&lt;@????@O???0C???&lt;@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3????@O???7L@@@@@????@O???0C???&lt;@XVE!DJ]L@I&gt;;\@.?4)-C/&lt;*MM3B*TP@@@@@@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3????@O???7L@@@A3@@@@@O???0C???&lt;@XVE!'';]''@O?)1XG?;=FZ?&gt;^&lt;\N?A]PPP)40@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???7L@@@A3@@@@\0@@@GL@@@A3@@@@\0@@@@C???&lt;@XVE!/&lt;*FE/?)0GW?;LNC?&gt;Z3X_?P"QQ@*D8@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???=3????\????7L@@@A3@@@@\????7O???&lt;@XVE!/;]$@O?[&amp;2''?9+M!?&gt;R-T??G_@,0*D4@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???&lt;@????@O???7L@@@A3????\????0C???&lt;@XVE!LJ)Q@N&gt;=[@C?4H$T?&lt;]&lt;B9&gt;/V @@@@@@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???&lt;@????@O???0C???=3????@O???0C???&lt;@XVE!@@@@@AB''S@A@*D8@LJ!M@@@@@@@@@@@@@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!')))] once</body><body package="Tools-Trippy" selector="modeSiblings">modeSiblings	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'modeSiblings.png'&gt;	&lt;md5sum: #[131 14 175 226 188 116 28 112 111 76 250 125 2 41 206 115]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???=3@@@@@O???0C???&lt;@????@FE!XQB''S@B_.7@K/=J[P;?J#S\0*%D@@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???=3@@@@\0@@@@C???&lt;@????@FE!XY&gt;7Y0C?:\VA?&gt;?Q&amp;/?''/GC/0WTDDJ]L@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\0@@@GL@@@A3@@@@\0@@@GL@@@@@????@FE!X[?J!![?:\A5?&gt;3C ??&amp;,6G?4H$TPJ!N@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????7O???=3@@@@\0@@@GO???=3????@FE!X[&gt;7Y@C?69,)?&gt;Z3X_?$+UO?170KLJ!M@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???=3@@@@\????7O???&lt;@????@FE!XSB*TPC//V0@?=BIEO?G_@._+5(@@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???&lt;@????\????0C???&lt;@????@FE!XP@@@@@P)40@PJ!N@CB(SP@@@@@@@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???&lt;@????@O???0C???&lt;@????@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???&lt;@????@O???0C???&lt;@????@FE!XQ@@IKJ_@C7\/3]/9[&lt;%X.H0@BV4@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???&lt;@????@O???0C???&lt;@????@FE!XY&lt;@L=_? JS/?9*7&lt;_=0&amp;N3/@C7\D@@$, A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\0@@@GL@@@A3@@@@\0@@@GL@@@@@????@FE!X[&lt;IS]??]Y/.?8R'';?=!#./?B5C P@@%-@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????7O???=3????\????7O???=3????@FE!X[&lt;@KLK?JFW$?6FN:?=S!N''?@DS]L@@%-@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???&lt;@????@O???0C???&lt;@????@FE!XS@@I[S/@CKS?0-P8O&lt;@QM6_@B3B@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???&lt;@????@O???0C???&lt;@????@FE!XP@@@@@P@BR2P@@%-C@@I[P@@@@@@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???&lt;@????@O???0C???&lt;@????@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???=3@@@@@O???0C???&lt;@????@FE!XQB''S@B_.7@K/=J[P;?J#S\0*%D@@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\????0C???=3@@@@\0@@@@C???&lt;@????@FE!XY&gt;7Y0C?:\VA?&gt;?Q&amp;/?''/GC/0WTDDJ]L@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVE3@@@@\0@@@GL@@@A3@@@@\0@@@GL@@@@@????@FE!X[?J!![?:\A5?&gt;3C ??&amp;,6G?4H$TPJ!N@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????\????7O???=3@@@@\0@@@GO???=3????@FE!X[&gt;7Y@C?69,)?&gt;Z3X_?$+UO?170KLJ!M@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???=3@@@@\????7O???&lt;@????@FE!XSB*TPC//V0@?=BIEO?G_@._+5(@@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@????@O???0C???&lt;@????\????0C???&lt;@????@FE!XP@@@@@P)40@PJ!N@CB(SP@@@@@@@@@@@@A!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!@FE!XPA!XVD@XVE!')))] once</body><body package="Tools-Trippy" selector="navigateNext">navigateNext	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'navigateNext.png'&gt;	&lt;md5sum: #[189 203 115 187 185 156 213 114 144 76 80 119 115 187 1 54]&gt;	^[AlphaCompositedImage image: ((Image extent: 23@21 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: 'C6A X@C?????^W%9?6Y&amp;Y/=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=''Y6_?Y&amp;Y&amp;?61+[O=,Z63?^W%9@O#8&gt;@C8&gt;O @?????71&lt;_O&gt;+*:/?;&gt;?/??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?0&lt;OC?&lt;OC0??C0&lt;O?0&lt;OC?&lt;OC0??C0&lt;O?1&lt;_G?&lt;_G1??K2&lt;/?0&lt;OC?7]7]?=3\7O&gt;+*:/?_G1&lt;@O#8&gt;O&gt;H"H#?0\GA?????????????????????????????????????????????????????????????/;&gt;??/;&gt;??9&gt;_''?&gt;O#8??''9&gt;_?&lt;?O3??/;&gt;???????A0\G?"H"H?69.[/?8&gt;O#?&gt;O#8??#8&gt;O?8&gt;O#?&gt;O#8??#8&gt;O?8&gt;O#?&gt;O#8??#8&gt;O?8&gt;O#?&gt;O#8??#8&gt;O?8&gt;O#?&gt;O#8??#8&gt;O?8&gt;O#?&gt;O#8??#8&gt;O?8&gt;O#?=?_7?&gt;/+:?=&amp;Y&amp;[?[&amp;9.??S4=O?4=OS?=OS4??S4=O?4=OS?=OS4??S4=O?4=OS?=OS4??S4=O?4=OS?=OS4??_7=??8&gt;O#?&gt;O#8??#8&gt;O?8&gt;O#?&gt;O#8??_7=??+:&gt;/?6-''Y?6Y&amp;Y/=-[V7?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1?&gt;?/;??1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&gt;O#8??#8&gt;O?8&gt;O#?=_W5?=/Z6??O3&lt;??Y&amp;Y&amp;?65-[_?/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??SD1L?:.+*??/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;??8&gt;O#?&gt;O#8??#8&gt;O?+:&gt;/?2&lt;3K?&lt;''H2_=&amp;Y&amp;[?[V5-??C0&lt;O?0&lt;OC?&lt;OC0??C0&lt;O?0&lt;OC?&lt;OC0??C0&lt;O&lt;6M#[?LSD1?4%IR_&gt;3,;O?&lt;OC0??C0&lt;O?0&lt;OC?&lt;OC0??#8&gt;O?8&gt;O#?&lt;OC0?=_V5??M3\3?3L3L?6Y&amp;Y/=-[V7?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1?3,;N?&lt;7M3_?L3L3?24-K_=PTEC?.[&amp;9??C0&lt;O?1&lt;_G?=/[6??O3&lt;??Z6-+?4MCP?&lt;?O3??O3&lt;??Y&amp;Y&amp;?65-[_?/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??OS4=?30&lt;OO&lt;?O3??N#(:?3L3L?&lt;/K2??V5-[?;:&gt;//?%9^W?6-+Z?=GQ4_?P4MC?4]CP?=CP4_=%YVW?[V5-?&gt;7-;_?-;^7?;^7-?&gt;7-;_?-;^7?;^7-?&gt;7-;_&lt;=OS7?OS4=?4MCP?=FQ$[?RT%I?4-KR?=MST7?ST5M?8:N#/?K2&lt;/?4]GQ?=GQ4_?Q4]G?4]GQ?6Q$YO=*Z&amp;+?4-KQ?=KR4_?Q4]G?4]GQ?=GQ4_?Q4]G?4]GQ?30&lt;OO=APTG?TUEQ?55]W_=(ZF#?\GA0?9BP$_&gt;&gt;/[;?4]GQ?=KR4/?Q4-K?4]KR?=KR4_?Q4]G?X&amp;I"?6)*Z/?R4-K?4-KR?=KR4_?R4-K?4-KR?=KR4/?R4-K?P4MC?5MST?=)ZV''?\''I2?9ZV%/?D1LS?4-KR?=KR4/?R4-K?4-GR?=KQ4/?R4]K?4]KR?=KR4/= XFC?Z&amp;)*?&lt;?O3??O3&lt;??4L?O?&lt;?P4O?O4MC?3=CP?&lt;?P4O=QTUG?ZV%)?9*[&amp;??D1\W?3=CP?&lt;?P4O?O3=C?3&lt;?O?=CP3??O4MC?4L?O?=CO3??P3&lt;??4L?O?59^W/=*Z&amp;+?3,;N?&lt;;N3/?N3,??3,?N?&lt;;O3/?N3&lt;;?3,?N?9&amp;X&amp;O?E1\W?3,?N?&lt;;O3/?N3&lt;;?3,?N?&lt;?N3/?N3&lt;??3&lt;?N?&lt;;O3??O3,??3&lt;;O?&lt;;N3??N3&lt;??WE1\?6)*Z/?L3L/?3L3K?&lt;3L2??L3L/?3L3K?&lt;/L2??K2&lt;/?3L/L?&lt;3K3O?L3L/?3L3L?&lt;3L2??K3L/?3L/L?&lt;/L2??K2&lt;3?2&lt;/L?&lt;3K2??L2&lt;/?2&lt;3L?&lt;3L2?=ZV%+?ZV%)?&lt;''H2_?I2L''?2L''H?&lt;''H2O?I2L#?2L#I?&lt;''H2O?I2L#?2\''H?&lt;''H2_?I2L''?2L''H?&lt;#H2_?I2\#?2\#H?&lt;#H2O?I2L#?2\#I?&lt;''H2_?I2L''?2L''I?5!XVO=[V5/?+*:.?&lt;B?0O?@0LC?0K?@?&lt;B?0O&gt;?0K??/;?@?&lt;C@/?&gt;?0K??0LC@?;&gt;?/??@0K??/&lt;B??;&gt;?/??@0LC?/;?@?&lt;B?0O&gt;?0K??/&lt;B??&lt;B?0O&gt;.+*;?V5-[?6%)Z_&gt;F!([?.[&amp;8?;"8.O&gt;9.K''?.K"9?;"8.O&gt;9.K''?.["9?;&amp;9.O&gt;9.K#?.K&amp;9?;"9._&gt;8.[''?.K&amp;9?;"9._&gt;8.[''?.K&amp;9?;"9._&gt;8.K#?.[&amp;8?8ZF!/=)ZV$@@@@@?6I"X/=?_7??(ZF!?;J2,/&gt;2,+K?,+J2?;J2,/&gt;2,+K?,+J2?;J2,/&gt;2,+K?,+J2?;J2,/&gt;2,+K?,+J2?;J2,/&gt;2,+K?,+J2?:F!(_=?_7??X&amp;I"AF]''Y0@@@@@@@@@@?6Q$YO=RT%K?RT%I?4%IR_=IRT''?RT%I?4%IR_=IRT''?RT%I?4%IR_=IRT''?RT%I?4%IR_=IRT''?RT%I?4%IR_=IRT''?T%IR?6Q$Y@QIRT$@@@@@')))] once</body><body package="Tools-Trippy" selector="navigatePrevious">navigatePrevious	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'navigatePrevious.png'&gt;	&lt;md5sum: #[236 162 206 51 76 28 228 236 177 34 163 243 9 199 62 214]&gt;	^[AlphaCompositedImage image: ((Image extent: 23@21 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C?????^G!8?61+[O=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=&amp;Y&amp;[?Y&amp;Y&amp;?6Y&amp;Y/=,Z63?^G!8@O???0C???&lt;@?????75=__&gt;)*Z''?6M#X??S4=O?3&lt;?O?&lt;?O3??O3&lt;??3&lt;?O?&lt;?O3??O3&lt;??3&lt;?O?&lt;?O3??K2&lt;/?2&lt;/K?&lt;/K2??K2&lt;/?2&lt;/K?&lt;/K2?=#X6O&gt;)*Z''?_W5=@O????&gt;F!([?*:.+??_7=?????????????????????????????????????????????????????????????????????????????????????????????_7=?&gt;+*:/?!(ZF?7A0\O?&amp;9^W??O3&lt;??3&lt;?O?&lt;?O3??O3&lt;??3&lt;?O?&lt;?O3??O3&lt;??3&lt;?O?&lt;?O3??O3&lt;??3&lt;?O?&lt;?O3??O3&lt;??3&lt;?O?&lt;?O3??O3&lt;??3&lt;?O?&lt;?O3??O3&lt;?&gt;[%9_=0\GC?Y&amp;Y&amp;??O3&lt;??4=OS?=OS4??S4=O?4=OS?=OS4??S4=O?4=OS?=OS4??S4=O?4=OS?=OS4??S4=O?4=OS?=OS4??S4=O?4=OS?=OS4??S4=O?4=OS?=OS4?69.[/=&amp;Y&amp;[?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;/K2?&gt;?/;??1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?[V5-?6Y&amp;Y/?/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;?&gt;/+*3?TD1H?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;?=-[V7?Y&amp;Y&amp;??C0&lt;O?0&lt;OC?&lt;OC0??C0&lt;O?0&lt;OC?&lt;OC0??C0&lt;O?0&lt;OC?&lt;OC0??C0&lt;O?A0\C?R$%F?2&lt;,I?&lt;?N#W?&lt;OC0??C0&lt;O?0&lt;OC?&lt;OC0??C0&lt;O?0&lt;OC?&lt;OC0?65-[_=&amp;Y&amp;[?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?K2,+?W%1Z?2T#G?&lt;-JRW?OC\1?4)EO/?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?&lt;_G1??G1&lt;_?1&lt;_G?[V5-?6U%Y_?/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;;.;/?T5MO?Y&amp;U#?2T"G/&lt;+JBO?MC@*?307L_=GP#/?TD-D?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;??/;&gt;??;&gt;?/?&gt;?/;?=-[V7?YFQ$?&gt;7-;_?-;^7?;^7-?&gt;7-;_?-;^7?**"(?41HP/&lt;?N#S?PC,4?4@&lt;M_=BOS[?QC&lt;8?4)FO?=PR4S?;^7-?&gt;7-;_?-;^7?;^7-?&gt;7-;_?-;^7?;^7-?65-[_="X&amp;K?:.+*?&gt;+*:/?*:.+?:.+*?&gt;+*:/?W5=_?2,''I?9&amp;W$?=(YE;?XE1V?5]RSO=MRDG?ST%B?4=LQ_?R4]K?4-GR?=KQ4/?R4]K?4-GR?=KQ4/?R4]K?Z&amp;)*?6A XO?(:N#?:N#(?&gt;#(:O?"8.K?6-+Y?=GQ4_?Q4]G?4=OS?&lt;+J2_&gt;Y%9S?X5=Y?5=[U_=YUT??UEAK?=KR4/?R4-K?4-KR?=KR4/?R4-K?4-KR?=KR4/=*Z&amp;+?W%9^?&gt;S$9O?$9NS?9NS$?=KR4_?O3,;?3,7N?=GQ4_?R4-K?3&lt;?N?&lt;;N3_?G1&lt;W?%)RQ?6E]U?=_WE[?3=CO?&lt;?P3??O4L??3=CO?&lt;?P3??O4L??3=CO?6)*Z/=\WE3?8NC ?&gt;C 8O?Y6]''?3\3M?&lt;3K3O?L2&lt;3?3\3M?&lt;?O3/?N3,;?3&lt;?O?&lt;/K2??J2,+?0LB??9.Y%/?O3&lt;??3&lt;?O?&lt;?O3??O3&lt;??3&lt;?O?&lt;?O3??O3&lt;??Z&amp;)*?5)ZV/?[6=/?6=/[?&lt;;M3/?L2&lt;3?3L/L?&lt;3K3O?L3L3?3L/L?&lt;3K2??L3L3?3L3L?&lt;3L3O?J2,+?2,+J?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O=*Z&amp;+?VE!X?=WU5/?P4MC?3L/L?&lt;3K3O?L2&lt;3?2&lt;+K?&lt;#H2O?I2\#?2L#H?&lt;''I2O?I2L''?2\#I?&lt;''H2_?I2L''?2\#I?&lt;''H2_?I2L''?2\#I?&lt;''H2_?I2L''?2\#I?6%)Z_=VU%[?4]GQ?&lt;/J2??K2,/?1&lt;[G?&lt;[E1/?E1\W?1,[G?&lt;_F1/?F1,[?1,[F?&lt;[F1/?F1,[?1,[F?&lt;[F1/?F1,[?1,[F?&lt;[F1/?F1,[?1,[F?&lt;[F1/?F1,[?ZV%)?6%)Z_&gt;F!([?/[6&lt;?&lt;KB0/&gt;;.+/?-;^7?;"7-?&gt;9.K''?.["9?;&amp;9.O&gt;9.K#?.K&amp;9?;"9._&gt;8.[''?.K&amp;9?;"9._&gt;8.[''?.K&amp;9?;"9._&gt;8.K#?.[&amp;8?8ZF!/=)ZV$@@@@@?6I"X/&gt;@ HC?)ZV%?;N3,?&gt;2,+K?,+J2?;J2,/&gt;2,+K?,+J2?;J2,/&gt;2,+K?,+J2?;J2,/&gt;2,+K?,+J2?;J2,/&gt;2,+K?,+J2?:F!(_=?_7??X&amp;I"AF]''Y0@@@@@@3L/L?6Q$YO=TUES?TEAP?5APTO=KR4/?RT%I?4%IR_=IRT''?RT%I?4%IR_=IRT''?RT%I?4%IR_=IRT''?RT%I?4%IR_=IRT''?T%IR?6Q$Y@QIRT$@@@@@')))] once</body><body package="Tools-Trippy" selector="selectFields">selectFields	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'selectFields.png'&gt;	&lt;md5sum: #[203 121 141 165 168 189 68 49 87 178 115 227 86 110 229 1]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????RMG\9T#Q7NUG4]3%Q=G\9T_Q7NUG4]3%Q=G\9T[Q7NUF4]3%Q-G\9T[Q7NUF4]3%Q-G\9TWQ7NUE4]3%Q]G\9PC???&lt;@????@O???0C???&lt;@????@O??????????@@@C?0@@@?????????????????&lt;@@@O?@@@C?0@@@?????????????????&lt;@@@O?@@@C?0@@@?????????????????&lt;@@@O?@@@C@O???0C???&lt;@????@O???????????LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG?@@@C@O???0C???&lt;@????@O????&lt;@@@O?&gt;KA6??"0]/&gt;A[U7?T%IR?7=+V??8,G[?==N6??_S-/?74;[?==N6??_S-/?64+W?=-J5??WQ-O?54[S?=]F4??"0]??8,G_?????@O???0C???&lt;@????@O????&lt;@@@O?=I=[??R_V?=@PDC?O3&lt;??34=O_?4''5/?3&lt;?O?&lt;;N3/?M3\7?3L3L?&lt;/K2??K2&lt;/?2,+J?&lt;''I2_?H2L#?2L#H??R WO?4(E3?????@O???0C???&lt;@????@O????&lt;@@@O?&lt;H=@??BOPO=#RCK?KB0,?6EFLO?0#4G?29)3?&lt;.Z\??J&amp;WK?2)%2?&lt;*Y\/?J&amp;WK?2)%2?&lt;*Y\/?J&amp;WK?2)%2??BOP_?0#4G?????@O???0C???&lt;@????@O??????????;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?@@@C@O???0C???&lt;@????@O???????????LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG?@@@C@O???0C???&lt;@????@O??????????&gt;KA6??"0]/&gt;A[U7?T%IR?7=+V??8,G[?==N6??_S-/?74;[?==N6??_S-/?64+W?=-J5??WQ-O?54[S?=]F4??"0]??8,G_?@@@C@O???0C???&lt;@????@O????&lt;@@@O?=I=[??R_V?=@PDC?O3&lt;??34=O_?4''5/?3&lt;?O?&lt;;N3/?M3\7?3L3L?&lt;/K2??K2&lt;/?2,+J?&lt;''I2_?H2L#?2L#H??R WO?4(E3?????@O???0C???&lt;@????@O????&lt;@@@O?&lt;H=@??BOPO=#RCK?KB0,?6EFLO?0#4G?29)3?&lt;.Z\??J&amp;WK?2)%2?&lt;*Y\/?J&amp;WK?2)%2?&lt;*Y\/?J&amp;WK?2)%2??BOP_?0#4G?????@O???0C???&lt;@????@O????&lt;@@@O?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?????@O???0C???&lt;@????@O???????????LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG??LFQ??3A$_?&lt;0YG?@@@C@O???0C???&lt;@????@O??????????&gt;KA6??"0]/&gt;A[U7?T%IR?7=+V??8,G[?==N6??_S-/?74;[?==N6??_S-/?64+W?=-J5??WQ-O?54[S?=]F4??"0]??8,G_?@@@C@O???0C???&lt;@????@O??????????=I=[??R_V?=@PDC?O3&lt;??34=O_?4''5/?3&lt;?O?&lt;;N3/?M3\7?3L3L?&lt;/K2??K2&lt;/?2,+J?&lt;''I2_?H2L#?2L#H??R WO?4(E3?@@@C@O???0C???&lt;@????@O????&lt;@@@O?&lt;H=@??BOPO=#RCK?KB0,?6EFLO?0#4G?29)3?&lt;.Z\??J&amp;WK?2)%2?&lt;*Y\/?J&amp;WK?2)%2?&lt;*Y\/?J&amp;WK?2)%2??BOP_?0#4G?????@O???0C???&lt;@????@O????&lt;@@@O?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?;G8&amp;?&gt;1&gt;I/?,_"[?????@O???0C???&lt;@????@O????&lt;@@@O?????????????????@@@C?0@@@?&lt;@@@O?????????????????@@@C?0@@@?&lt;@@@O?????????????????@@@C?0@@@?&lt;@@@O?????A@@@@0C???&lt;@????@O???0C???&lt;@?????=G\9_=6^W3?T%IR?7Q7^/?Q7NW?%)2 ?9Z\(O&gt;V''JC?%)2 ?9Z\(O&gt;V''JC?%Y._?9V[''?&gt;U&amp;9??%Y._?=G\9PC????S@@@A/0@@@RL@@@H@????@O???0C???&lt;@?????=G\9_=@PDC?O3&lt;??34=O_?Q7NW?PTEA?4EAP_=@PDC?O3&lt;??3&lt;?O?&lt;&gt;O#;?O#8&gt;?34=O_&lt;=OS7?OC0&lt;?=G\9PC???&gt;,@@@A?0@@@N@@@@EP@@@B@O???0C???&lt;@?????=G\9_=ZWVC?KB0,?5![W/?Q7NW?^8FE?7*@!O=: HS?^(BD?7*@!O=: HS?^(BD?7*@!O=: HS?^(BD?=G\9PC???&gt;E@@@A?0@@@O&lt;@@@C7@@@@@O???0C???&lt;@????9-G\9^SQ7NW#4]3%8]G\9]?Q7NW^4]3%7MG\9]/Q7NWY4]3%6MG\9][Q7NWT4]3%4=G\9]GQ7NWP4]3%3-G\9PC???=]@@@B?0@@@O&lt;@@@B;@@@A@O???0C???&lt;@????#-G\9X7Q7NVK4]3%"]G\9X#Q7NVF4]3%!]G\9XOQ7NVB4]3% MG\9W;Q7NU=4]3%^=G\9W+Q7NU84]3%]-G\9PC???&lt;!@@@B=0@@@](@@@F''@@@A@O???0C???&lt;@????M=G\9SWQ7NT34]3%L-G\9SCQ7NT/4]3%K]G\9R3Q7NT*4]3%JMG\9R_Q7NT%4]3%IMG\9RKQ7NT 4]3%G=G\9PC???&lt;@????00@@@V,@@@K9@@@@')))] once</body><body package="Tools-Trippy" selector="toggleEvaluationPane">toggleEvaluationPane	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'toggleEvaluationPane.png'&gt;	&lt;md5sum: #[67 242 19 140 15 179 243 36 182 64 154 124 241 238 231 27]&gt;	^[AlphaCompositedImage image: ((Image extent: 24@24 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@?????4;T=_=K5OW?R=_5?4''W=_=D5OW?QM_5?4SW=_=@5O[?O]S5?3;V=_&lt;;5OW?O-O5?3/W=_&lt;?5/W?P][5?4OV=_=A5?_?QM_5?4''X=_=K6OW?R=#5?4;T=Z5C6? @@@@@?3G@&lt;O&lt;00OC?LLC0?2&gt;&lt;&lt;_&lt;)/_G?K\K-?2&amp;9&lt;O&lt;(.N??JK#*?2"9&lt;O&lt;&amp;-^??H;[0?2N/&lt;O&lt;%-_C?I+''/?2"6;_&lt;,.N7?K;/0?22?;_&lt;0/OG?KLK0?3GB;Z4V+-\_@@@@?4''S&lt;?=I6OO?R]O3?4''V&lt;?=G5?O?R=#3?4''V&lt;?=L6_O?S][3?4/T&lt;?=M6_O?R=O3?4''Z&lt;?=Q6OO?R=33?43Y&lt;?=I5?O?R=O3?4/V&lt;?=K5?O?R]_3?4''S&lt;:800=4\@@@@?6_&amp;&gt;/='':_+?Y&gt;[:?6_)&gt;/=''9/+?Y&gt;'':?6_&amp;&gt;/='':_+?Y&gt;[:?6_&amp;&gt;/=''9/+?Y&gt;'':?67/&gt;_=-:_''?Y^O9?6_&amp;&gt;_=,:O''?Z.3&lt;?6_*?/='':/;?Y&gt;#9?6_-&gt;:5C3]&lt;\@@@@?5?#&gt;O=^8?#?W&gt;O8?5;#&gt;O=_8?#?W.O8?5?#&gt;O=^8?#?W&gt;O8?5?#&gt;O=_8?#?W&gt;O8?5;#&gt;O=_8?#?W.O8?5;#&gt;O=_8?#?W&gt;O8?5;#&gt;O=^8?#?W.O8?5?#&gt;J0;1=8\@@@@?5#_&gt;O=X7?#?VM?8?3U34?=X7?#?MWOS?3U34?&lt;5\=O?MWOS?3U34?&lt;5\=O?MWOS?3U34?&lt;5\=O?MWOS?3U34?&lt;5\=O?MWOS?5#_&gt;O=X7?#?VM?8?5/ &gt;J&lt;00=4\@@@@?5W[=/=T6?[?U]/6?8#&amp;&gt;_=U6?[?"N[9?8#&amp;&gt;_&gt;H9/''?"N[9?8#&amp;&gt;_&gt;H9/''?"N[9?8#&amp;&gt;_&gt;H9/''?"N[9?8#&amp;&gt;_&gt;H9/''?"N[9?5S[=/=T6?[?UMW6?5S[=*&lt;00M4\@@@@?4;Y=_=N5/O?S-''5?4;V&lt;?=N6_W?S-[3?4;Y=_=N5/O?S-''5?4;Y=_=N6_W?S-''5?4;V&lt;?=N6_W?S-[3?4;V&lt;?=N6_W?S-''5?4;V&lt;?=N5/O?R=[5?5# =[@^.] ]@@@@?4+V=_=H5/W?R-[5?21.4O=J5/W?KF;P?25.4O&lt;,[-C?KV;P?25.4O&lt;-[-C?KV;P?21.4O&lt;-[-C?KF;P?21.4O&lt;-[-C?KV;P?4#V=_=H5/W?Q&lt;?5?5''_&gt;:&lt;@'',0]@@@@?4_P&lt;?=C3_G?Q=C3?73\=_=G4OO?_M35?7?^=?=&lt;7OW?_=;7?7?^=?=?7/_?_=;7?73\=_=?7/_?_M35?73\=_=?7/_?_=;7?4OM&lt;_=C3_G?Q]W3?53$?J4@]*4]@@@@?3?O&lt;/&lt;&gt;3N??O&lt;?2?3;L;?&lt;?3?K?O,3/?3?O&lt;/&lt;&gt;3N??O&lt;?2?3?O&lt;/&lt;?3?K?O&lt;?2?3;L;?&lt;?3?K?O,3/?3;L;?&lt;?3?K?O&lt;?2?3;L;?&lt;&gt;3N??OL_2?5#Y&gt;:4@Z*L\@@@@?33L&lt;/&lt;;1/K?OL32?2Q&amp;3/&lt;&lt;3OK?IF[N?2Q)3/&lt;$Y,;?IF''N?2Q)3/&lt;$Z\;?IF''N?2Q&amp;3/&lt;$Z\;?IF[N?2Q&amp;3/&lt;$Z\;?OL32?3/F&lt;/&lt;;1/K?P=W6?4CR&lt;Z4@X)\\@@@@?3''F&lt;_&lt;61_G?N\[1?7OW=_&lt;91/G?\=_5?7WW=_=35?W?]]_5?7WW=_=55?W?]]_5?7OW=_=55?W?\=_5?7OW=_=55?W?N\[1?3[E&lt;_&lt;95?#?S=7;?1&gt;/6:&lt;@X)4\@@@@?3GC;?&lt;11/G?L\O/?3GF&lt;_&lt;10&gt;??L\[1?3GC;?&lt;11/G?L\O/?3GC;?&lt;10&gt;??L\O/?3GF&lt;_&lt;10&gt;??L\O/?3GF&lt;_&lt;00/G?J['',?2&amp;=;?&lt;&gt;3OK?X&gt;''&lt;?0BK0J0@^*4]@@@@?27@;?&lt;,1.??K\C/?1-&amp;2?&lt;-0N??F6[K?1-#2?&lt;[Y,/?F6OK?1-#2?&lt;[X&lt;/?F6[K?1%_1/&lt;YW&lt;''?J[3*?2&amp;9;?&lt;!/N7?LLW2?4KR&lt;?= &lt;_??P-C*?0BA.Z,@#[$\@@@@?2&amp;=;?&lt;''/^??J[7/?6#Q=O&lt;)/^??ZMG4?6+Q=O=(4_S?Z-G4?6+Q=O=*4_S?ZMG4?6#R=O=(4_S?H+7/?2R&lt;;?&lt;52/O?P=[8?5/%?/=:=/??@I3G?0B\3J8@%[4\@@@@?2R:;?&lt;"..??H++/?2J3;?&lt;".N??H++/?2J:;?&lt;"..??H+7/?2J&lt;;?&lt;$/N??H+3/?1:2;_&lt;!-.7?J[;/?3#P=_=J7O''?X?O??7#8??&lt;93N+?@HV&lt;?1J/6Z4@%;8\@@@@?163;_&lt;Z,&gt;+?F[W,?1&amp;5;O&lt;Z-^''?G[[-?1*2;_&lt;Z-.7?F[C*?1*2;_&lt;],&gt;+?D*''(?1:5:/&lt;-1/O?O=W8?5''/??=3&gt;O??W?K&lt;?0J#3_&lt;@!K3?AJ#P?1Z36Z4@''K&lt;\@@@@?2F&lt;&gt;O&lt;"/OW?H+3:?2[B&gt;O&lt;-0/W?K[78?2^&gt;=_&lt;,0/#?L\K8?2;C&gt;?&lt;''/O''?OMO;?5[*?/=''&lt;?;?]OW??6W2&gt;?&lt;".M3?@H^&lt;?0B[2/&lt;Z.]??J\C"?3CF9KTU.M$\@@@@?@A;//&lt;@ \_?@G?F?0A?1/&lt;@ \+?@G;F?0BA3O&lt;@_,3?@G;O?0A?2/&lt;@_\3?@H#P?0BL3?&lt;@!&lt;3?@G"??0A''-/&lt;@Y[O?@G_@?0BC1?&lt;@ \O?@HWF?PA&gt;/HP@H4 ^@@@@E!$&amp;J$,OE!![C1$[[!T[GW8WF"FGFA4[#A$^GH&lt;UFQ.NEQ U#QLZF88XD1&amp;MDATU"1@NEX4OEQ&amp;OFA@^#A$^F8(XGRBAE1 [\QDXGE4NEAUKCA@TO THB24@@@@S@@@@@O???0P@@@@G@@@@C5UUUQ*@ H@''%)ZVLZ^'')3"-+Z4&gt;.[&amp;9PK.;.4F&lt;/K1A/K2&lt;P[2&lt;/C:9.[$9+*:.L*N#(2*L#H0"\WE1E3\7M1D^G!8J@@@@A @@@@P@@@@@@@@@@O???0C???&lt;@????@O???0D@@@@B@@@@ASL3L0\$IBPINS$9B#L3L0-FQ$XLPDA@B28.K ,.K"8JL3L3BB@ H@X@@@@D@@@@@0@@@@D@@@@@@@@@@@@@@@@@@@@@@@@@')))] once</body></methods><methods><class-id>Tools.Trippy.NewDerivedFieldDialog class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: '' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 400 200 ) 			#bounds: #(#{Graphics.Rectangle} 840 525 1040 725 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0 25 0 0 1 ) 					#name: #nameLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #NameC 						#defaultString: 'Name:' 						#catalogID: #labels ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 25 0 -4 1 50 0 ) 					#name: #nameField 					#model: #nameHolder ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0 75 0 0 1 ) 					#name: #classLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #ClassC 						#defaultString: 'Class:' 						#catalogID: #labels ) ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 75 0 -4 1 100 0 ) 					#name: #classMenuButton 					#model: #classHolder 					#menu: #classMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0 125 0 0 1 ) 					#name: #packageLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #PackageC 						#defaultString: 'Package:' 						#catalogID: #labels ) ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 125 0 -4 1 150 0 ) 					#name: #packageMenuButton 					#model: #packageHolder 					#menu: #packageMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0.5 165 0 -4 1 190 0 ) 					#name: #cancelButton 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #dialogs ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 165 0 -4 0.5 190 0 ) 					#name: #addButton 					#model: #accept 					#label: 					#(#{Kernel.UserMessage} 						#key: #Add 						#defaultString: 'Add' 						#catalogID: #inspector ) 					#isDefault: true 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Tools.Trippy.TextEditorInspector class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Tools.Trippy.HierarchyNavigator class</class-id> <category>resources</category><body package="Tools-Trippy" selector="hierarchyMenu">hierarchyMenu	"MenuEditor new openOnClass: self andSelector: #hierarchyMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #ContractBranch #defaultString: '&amp;Contract Branch' #catalogID: #menus) 				#value: #contractBranch ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #ExpandBranch #defaultString: '&amp;Expand Branch' #catalogID: #menus) 				#value: #expandBranch ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #ContractAll #defaultString: '&amp;Contract All' #catalogID: #menus) 				#value: #contractAll ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #ExpandAll #defaultString: '&amp;Expand All' #catalogID: #menus) 				#value: #expandAll ) ) #(2 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.Trippy.HierarchyNavigator class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 359 217 666 552 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.HierarchicalViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 0.35 ) 					#name: #hierarchyList 					#flags: 15 					#model: #hierarchyHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #hierarchyDoubleClicked ) 					#menu: #hierarchyMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.35 0 1 0 1 ) 					#name: #inspector 					#model: #inspectorHolder 					#labels: #() ) ) ) )</body></methods><methods><class-id>Tools.Trippy.InspectorShell class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="evaluatorSpec">evaluatorSpec	"UIPainter new openOnClass: self andSelector: #evaluatorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 412 284 612 484 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #evaluator 					#model: #textHolder ) ) ) )</body><body package="Tools-Trippy" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #Inspector 				#defaultString: 'Inspector' 				#catalogID: #labels ) 			#min: #(#{Core.Point} 190 162 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1140 912 ) 			#flags: 4 			#menu: #menuBarHolder 			#toolBar: #toolbar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -28 0.6 ) 					#name: #navigator 					#flags: 0 ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -28 0.6 0 1 -25 0.6 ) 					#name: #splitter 					#horizontal: true 					#minAboveSize: 50 					#minBelowSize: 0 					#aboveWidgets: 'navigator' 					#belowWidgets: 'evaluatorPane' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -25 0.6 0 1 0 1 ) 					#name: #evaluatorPane 					#flags: 0 					#minorKey: #evaluatorSpec ) ) ) )</body></methods><methods><class-id>Tools.Trippy.InspectorShell class</class-id> <category>resources</category><body package="Tools-Trippy" selector="baseExploreMenu">baseExploreMenu	"Tools.MenuEditor new openOnClass: self andSelector: #baseExploreMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Focus 					#defaultString: '&amp;Focus' 					#catalogID: #menus ) 				#nameKey: #exploreFocus 				#value: #exploreFocus 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #modeFocus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Siblings 					#defaultString: '&amp;Siblings' 					#catalogID: #menus ) 				#nameKey: #exploreSiblings 				#value: #exploreSiblings 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #modeSiblings ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Parts 					#defaultString: '&amp;Parts' 					#catalogID: #menus ) 				#nameKey: #exploreParts 				#value: #exploreParts 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #modeParts ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Visited 					#defaultString: '&amp;Visited' 					#catalogID: #menus ) 				#nameKey: #exploreVisited 				#value: #exploreVisited 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #modeHistory ) ) ) #(1 3 ) nil ) decodeAsLiteralArray</body><body package="Tools-Trippy" selector="baseGoSubmenu">baseGoSubmenu	"Tools.MenuEditor new openOnClass: self andSelector: #baseGoSubmenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Dive 					#defaultString: '&amp;Dive' 					#catalogID: #menus ) 				#nameKey: #goDive 				#value: #dive ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Back 					#defaultString: '&amp;Back' 					#catalogID: #menus ) 				#nameKey: #goBack 				#value: #back 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #navigatePrevious ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Forward 					#defaultString: '&amp;Forward' 					#catalogID: #menus ) 				#nameKey: #goForward 				#value: #forward 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #navigateNext ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ToClass 					#defaultString: 'To &amp;Class' 					#catalogID: #menus ) 				#nameKey: #goDiveIntoClass 				#value: #diveIntoClass ) ) #(1 2 1 ) nil ) decodeAsLiteralArray</body><body package="Tools-Trippy" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Go 					#defaultString: '&amp;Go' 					#catalogID: #menus ) 				#nameKey: #go ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_History 					#defaultString: '&amp;History' 					#catalogID: #menus ) 				#nameKey: #history ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #E_xplore 					#defaultString: 'E&amp;xplore' 					#catalogID: #menus ) 				#nameKey: #explore ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Tools 					#defaultString: '&amp;Tools' 					#catalogID: #menus ) 				#nameKey: #window 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_CompareToClipboard 								#defaultString: '&amp;Compare to Clipboard...' 								#catalogID: #menus ) 							#nameKey: #compareObjectToClipboard 							#value: #compareObjectToClipboard 							#enablementSelector: #clipboardNotEmpty 							#shortcutKeyCharacter: #F6 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_InspectClipboard 								#defaultString: '&amp;Inspect Clipboard' 								#catalogID: #menus ) 							#nameKey: #inspectClipboard 							#value: #inspectClipboard 							#enablementSelector: #clipboardNotEmpty ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_EmptyClipboard 								#defaultString: '&amp;Empty Clipboard' 								#catalogID: #menus ) 							#nameKey: #emptyClipboard 							#value: #emptyClipboard 							#enablementSelector: #clipboardNotEmpty ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Toolbar 								#defaultString: '&amp;Toolbar' 								#catalogID: #menus ) 							#nameKey: #toggleToolbar 							#value: #toggleToolbar 							#indication: true ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Evaluation_Pane 								#defaultString: 'Evaluation &amp;Pane' 								#catalogID: #menus ) 							#nameKey: #toggleEvaluationPane 							#value: #toggleEvaluationPane 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) ) #(3 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Help 					#defaultString: '&amp;Help' 					#catalogID: #menus ) 				#nameKey: #help 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Inspector 								#defaultString: '&amp;Inspector' 								#catalogID: #menus ) 							#value: #helpInspector 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #help ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Inspecting_Objects 								#defaultString: 'Inspecting &amp;Objects' 								#catalogID: #menus ) 							#value: #helpInspectingObjects ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_AboutVisualWorksDot 								#defaultString: '&amp;About VisualWorks...' 								#catalogID: #menus ) 							#value: #helpAbout ) ) #(2 1 ) nil ) ) ) #(5 ) nil ) decodeAsLiteralArray</body><body package="Tools-Trippy" selector="toolbar">toolbar	"Tools.MenuEditor new openOnClass: self andSelector: #toolbar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Back 					#defaultString: 'Back' 					#catalogID: #menus ) 				#nameKey: #back 				#value: #back 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #navigatePrevious ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #Back 					#defaultString: 'Back' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Forward 					#defaultString: 'Forward' 					#catalogID: #menus ) 				#nameKey: #forward 				#value: #forward 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #navigateNext ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #Forward 					#defaultString: 'Forward' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Focus 					#defaultString: 'Focus' 					#catalogID: #menus ) 				#nameKey: #focus 				#value: #exploreFocus 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #modeFocus ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #Focus 					#defaultString: 'Focus' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ExploreSiblings 					#defaultString: 'Explore Siblings' 					#catalogID: #menus ) 				#nameKey: #exploreSiblings 				#value: #exploreSiblings 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #modeSiblings ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #ExploreSiblings 					#defaultString: 'Explore Siblings' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ExploreParts 					#defaultString: 'Explore Parts' 					#catalogID: #menus ) 				#nameKey: #exploreParts 				#value: #exploreParts 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #modeParts ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #ExploreParts 					#defaultString: 'Explore Parts' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ExploreVisited 					#defaultString: 'Explore Visited' 					#catalogID: #menus ) 				#nameKey: #exploreVisited 				#value: #exploreVisited 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #modeHistory ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #ExploreVisited 					#defaultString: 'Explore Visited' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #All 					#defaultString: 'All' 					#catalogID: #menus ) 				#value: #selectAllFields 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #selectFields ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #SelectAllFields 					#defaultString: 'Select All Fields' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Eval 					#defaultString: 'Eval' 					#catalogID: #menus ) 				#value: #toggleEvaluationPane 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.Trippy.InspectorIcons} #toggleEvaluationPane ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #ToggleEvaluationPane 					#defaultString: 'Toggle Evaluation Pane' 					#catalogID: #menus ) ) ) #(2 4 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.Trippy.BasicInspector</class-id> <category>sorting</category><body package="Tools-Trippy" selector="sortTypeSubmenuItem">sortTypeSubmenuItem		&lt;itemInMenu: #(#fieldList) position: 30.1&gt;	^(MenuItem labeled: #fieldSortBy &lt;&lt; #inspector &gt;&gt; 'Sort by:')		submenu: [self sortTypeSubmenu]</body></methods><methods><class-id>Tools.Trippy.PreviewingInspector class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="segmentedSpec">segmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #segmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1027 785 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEntry: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.6 0 0.4 0 1 ) 					#name: #fieldList 					#flags: 15 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #dive 						#requestValueChangeSelector: #changeRequest ) 					#menu: #fieldListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #normalSelection ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#tabRequiresControl: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 0.4 0 0.6 ) 					#name: #segmentList 					#flags: 15 					#model: #segmentListHolder 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 0.4 ) 					#name: #preview 					#flags: 11 					#component: #preview ) ) ) )</body><body package="Tools-Trippy" selector="unsegmentedSpec">unsegmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #unsegmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1027 785 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEntry: #dropSelector 						#drop: #dragStartSelector 						#doDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 0.4 0 1 ) 					#name: #fieldList 					#flags: 15 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #dive 						#requestValueChangeSelector: #changeRequest ) 					#menu: #fieldListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #normalSelection ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#tabRequiresControl: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 0.4 ) 					#name: #preview 					#flags: 11 					#component: #preview ) ) ) )</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector class</class-id> <category>resources</category><body package="Tools-Trippy" selector="methodListMenu">methodListMenu	"MenuEditor new openOnClass: self andSelector: #methodListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Sen_dIt #defaultString: 'Sen&amp;d It' #catalogID: #menus) 				#nameKey: #methodsSendIt 				#value: #sendIt 				#enablementSelector: #singleUnaryMethodIsSelected ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #SendAndDive #defaultString: 'Send and Di&amp;ve' #catalogID: #menus) 				#nameKey: #methodsSendAndDive 				#value: #sendAndDive 				#enablementSelector: #singleUnaryMethodIsSelected ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Senders #defaultString: '&amp;Senders' #catalogID: #menus) 				#nameKey: #senders ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Implementors #defaultString: '&amp;Implementors' #catalogID: #menus) 				#nameKey: #implementors ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #LocalSe_nders #defaultString: 'Local Se&amp;nders' #catalogID: #menus) 				#nameKey: #localSenders ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #LocalI_mplementors #defaultString: 'Local I&amp;mplementors' #catalogID: #menus) 				#nameKey: #localImplementors ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #ReferencedClasses #defaultString: 'Referenced &amp;Classes' #catalogID: #menus) 				#nameKey: #referencedClasses ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Remove #defaultString: '&amp;Remove' #catalogID: #menus) 				#value: #removeMethods 				#enablementSelector: #canRemoveMethods ) ) #(2 5 1 ) nil ) decodeAsLiteralArray</body><body package="Tools-Trippy" selector="protocolListMenu">protocolListMenu	"Tools.MenuEditor new openOnClass: self andSelector: #protocolListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_NewDot #defaultString: '&amp;New...' #catalogID: #menus) 				#value: #addProtocol ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_nameAsDot #defaultString: 'Re&amp;name As...' #catalogID: #menus) 				#value: #renameProtocol 				#enablementSelector: #canRenameProtocol ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Remove #defaultString: '&amp;Remove' #catalogID: #menus) 				#value: #removeProtocol 				#enablementSelector: #canRemoveProtocol ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_FindMethod #defaultString: '&amp;Find Method...' #catalogID: #menus) 				#nameKey: #findMethod 				#value: #findMethod ) ) #(1 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 512 384 936 710 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 -20 0.4 ) 					#name: #protocolList 					#model: #protocolListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #updateRequest ) 					#menu: #protocolListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 0.4 ) 					#name: #methodList 					#model: #methodListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #selectorDoubleClicked 						#requestValueChangeSelector: #updateRequest ) 					#menu: #methodListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#isReadOnly: false 					#tabRequiresControl: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0 0 0.4 0 1 ) 					#model: #sideHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #updateRequest ) 					#label: #(#{Kernel.UserMessage} #key: #instance #defaultString: 'instance' #catalogID: #labels) 					#select: #instance ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.2 0 0.4 0 1 ) 					#model: #sideHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #updateRequest ) 					#label: #(#{Kernel.UserMessage} #key: #class #defaultString: 'class' #catalogID: #labels) 					#select: #class ) ) ) )</body></methods><methods><class-id>Tools.Trippy.NullNavigator class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #inspector 					#model: #inspectorHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #changeRequest ) 					#labels: #() ) ) ) )</body></methods><methods><class-id>Tools.Trippy.InspectorHolder class</class-id> <category>interface specs</category><body package="Tools-Trippy" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 412 284 612 484 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #inspector 					#flags: 0 ) ) ) )</body></methods><methods><class-id>Core.Fraction</class-id> <category>printing</category><body package="Tools-Trippy" selector="inspectorExtraAttributes">inspectorExtraAttributes		&lt;inspectorFields&gt;	^Array		with:			(Tools.Trippy.DerivedAttribute				label: #asFloat &lt;&lt; #dialogs &gt;&gt; 'asFloat'				valueBlock: [self asFloat])</body></methods><methods><class-id>Core.ClassDescription</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorExtraAttributes">inspectorExtraAttributes		&lt;inspectorFields&gt;	^Array		with:			(Tools.Trippy.TextAttribute				label: #comment &lt;&lt; #dialogs &gt;&gt; 'comment'				textBlock: [self comment])</body></methods><methods><class-id>Core.Object class</class-id> <category>private</category><body package="Tools-Trippy" selector="inspectorMethodTags">inspectorMethodTags		&lt;pragmas: #instance&gt;	^#(#inspectorFields #inspectorActions)</body></methods><methods><class-id>Kernel.Context</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorExtraAttributes">inspectorExtraAttributes		&lt;inspectorFields&gt;	^self method inspectorExtraAttributes</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing</category><body package="Tools-Trippy" selector="inspectorIEEEFormula">inspectorIEEEFormula	&lt;inspectorFields&gt;	| bits output signBit exponent mantissa mantissaFraction |	self isSpecialValue ifTrue: [^Array new].	bits := self bitsAsInteger.	signBit := bits bitAt: self class instanceByteSize * 8.	exponent := (bits bitShift: self class actualPrecision negated)				bitAnd: (1						bitShift: self class instanceByteSize * 8 - self class actualPrecision - 1)							- 1.	mantissa := bits bitAnd: (1 bitShift: self class actualPrecision) - 1.	mantissaFraction := mantissa / (1 bitShift: self class actualPrecision).	output := TextStream on: String new.	output nextPutAll: '"sign" (-1** '.	output emphasis: #bold.	output print: signBit.	output emphasis: nil.	output nextPutAll: ') *"mantissa" ('.	output nextPutAll: '2r'.	output print: (exponent isZero ifTrue: [0] ifFalse: [1]).	output emphasis: #bold.	mantissaFraction numerator		printOn: output		base: 2		digitsToPad: mantissaFraction denominator highBit - 1		highDigit: mantissaFraction denominator highBit - 1.	output emphasis: nil.	output nextPutAll: ' * (2** -'.	output print: mantissaFraction denominator highBit - 1.	output nextPutAll: ')) *"exponent" (2** '.	output emphasis: #bold.	output print: (exponent isZero				ifTrue: [self class emin]				ifFalse: [exponent - 1 + self class emin]).	output emphasis: nil.	output nextPut: $).	^Array with: (Tools.Trippy.TextAttribute				label: #IEEEFormula &lt;&lt; #IDE &gt;&gt; 'IEEE Formula'				text: output contents)</body></methods><methods><class-id>Kernel.CompiledCode</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorExtraAttributes">inspectorExtraAttributes		&lt;inspectorFields&gt;	^Array		with:			(Tools.Trippy.TextAttribute				label: #bytecode &lt;&lt; #dialogs &gt;&gt; 'bytecode'				textBlock: [self symbolic])		with:			(Tools.Trippy.TextAttribute				label: #decompiled &lt;&lt; #dialogs &gt;&gt; 'decompiled'				textBlock: [self decompiledSource])		with:			(Tools.Trippy.TextAttribute				label: #source &lt;&lt; #dialogs &gt;&gt; 'source'				textBlock:					[(self homeMethod						getSourceForUserIfNone: [#noSource &lt;&lt; #dialogs &gt;&gt; 'no source'])						asText makeSelectorBoldIn: self mclass])</body></methods><methods><class-id>Core.Integer</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorExtraAttributes">inspectorExtraAttributes		&lt;inspectorFields&gt;	^Array		with:			(Tools.Trippy.TextAttribute				label: #hexadecimal &lt;&lt; #dialogs &gt;&gt; 'hexadecimal'				text: (self printStringRadix: 16))		with:			(Tools.Trippy.TextAttribute				label: #octal &lt;&lt; #dialogs &gt;&gt; 'octal'				text: (self printStringRadix: 8))		with:			(Tools.Trippy.TextAttribute				label: #binary &lt;&lt; #dialogs &gt;&gt; 'binary'				text: self paddedBinaryPrintString)</body></methods><methods><class-id>Kernel.ObjectMemory</class-id> <category>utilities</category><body package="Tools-Trippy" selector="inspectorStatisticsAttribute">inspectorStatisticsAttribute		&lt;inspectorFields&gt;	^Array		with:			(Tools.Trippy.TextAttribute				label: #statistics &lt;&lt; #dialogs &gt;&gt; 'statistics'				textBlock:					[| stream |					stream := String new writeStream.					self spaceSummaryOn: stream.					stream contents])</body></methods><methods><class-id>Core.Point</class-id> <category>printing</category><body package="Tools-Trippy" selector="inspectorPointAttributes">inspectorPointAttributes		&lt;inspectorFields&gt;	^Array		with:			(Tools.Trippy.DerivedAttribute				label: #radius &lt;&lt; #dialogs &gt;&gt; 'radius'				valueBlock: [self r])		with:			(Tools.Trippy.DerivedAttribute				label: #theta &lt;&lt; #dialogs &gt;&gt; 'theta'				valueBlock: [self theta])		with:			(Tools.Trippy.TextAttribute				label: #angle &lt;&lt; #dialogs &gt;&gt; 'angle'				textBlock: [self theta radiansToDegrees printFormat: '0.0#°'])</body></methods><methods><class-id>Core.Character</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorExtraAttributes">inspectorExtraAttributes		&lt;inspectorFields&gt;	| integerAttr name symbolicStream nameAttr |	integerAttr := Tools.Trippy.DerivedAttribute		label: #asInteger &lt;&lt; #dialogs &gt;&gt; 'asInteger'		value: self asInteger.	name := self class constantNameFor: self.	name notNil		ifTrue:			[symbolicStream := String new writeStream.			symbolicStream				store: self class;				space;				nextPutAll: name.			nameAttr := Tools.Trippy.TextAttribute				label: #symbolic &lt;&lt; #dialogs &gt;&gt; 'symbolic'				text: symbolicStream contents.			^Array with: integerAttr with: nameAttr].	^Array with: integerAttr</body></methods><methods><class-id>OS.IPSocketAddress</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorExtraAttributes">inspectorExtraAttributes	&lt;inspectorFields&gt;	^Array		with:			(Tools.Trippy.TextAttribute				label: #hostName &lt;&lt; #dialogs &gt;&gt; 'host name'				textBlock: [self hostName])		with:			(Tools.Trippy.TextAttribute				label: #hostAddress &lt;&lt; #dialogs &gt;&gt; 'host address'				textBlock: [ | output |					output := String new writeStream.					self printAddressOn: output.					output contents ])		with:			(Tools.Trippy.TextAttribute				label: #port &lt;&lt; #dialogs &gt;&gt; 'port'				textBlock: [self port printString])</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>user interface</category><body package="Tools-Trippy" selector="inspectorExtraAttributes">inspectorExtraAttributes		&lt;inspectorFields&gt;	^self method inspectorExtraAttributes</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>VisualComponent</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>VisualPart</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container eventHandlers properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>Wrapper</name><environment>Graphics</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>ClassDescription</name><environment>Core</environment><super>Core.Behavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instanceVariables organization </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>UISpecification</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>Magnitude</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>Character</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>LimitedPrecisionReal</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>powersOfTwo </class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>ObjectMemory</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>bytesPerOTE bytesPerOOP bytesPerRTE rtEntries rtUsedEntries edenBytes edenUsedBytes edenUsedBytesScavengeThreshold survBytes survUsedBytes survUsedBytesTenuringThreshold largeBytes largeUsedBytes largeFreeBytesTenuringThreshold largeUsedObjects bytesPerLTE threadedOTEntries threadedDataEntries threadedDataBytes allocFailures allocSplits allocMatches allocProbes incGCState incMarkedObjects incMarkedBytes incMarkedWeakObjects incMarkedWeakBytes incUnmarkedObjects incNilledObjects incNilledBytes incSweepAllocatedObjects incSweepAllocatedBytes incSweptObjects incReclaimedObjects incReclaimedBytes contiguousFreeOldBytes reservedContiguousFreeBytes availableFreeOldSpaceBytes availableFreeOldSpaceBytesLimit oldBytes oldOTEs oldDataBytes oldSegments numScavenges numIncGCs numGCs numDataCompactions stackBytes compCodeCacheBytes permBytes permOTEs permDataBytes oldRtEntries oldRtUsedEntries numGlobalGCs fixedSegments fixedBytes fixedUsedBytes fixedUsedObjects bytesPerFTE enumerationCallsPerMillisecond maximalFreeOldSpaceBytes nativeStackSpills numMarkStackOverflows numWeakObjectListOverflows numCompactNMethods incAbortedCount incMarkStackOverflows </inst-vars><class-inst-vars>dependents </class-inst-vars><imports></imports><category>System-Support</category><attributes><package>System-Support</package></attributes></class><class><name>IPSocketAddress</name><environment>OS</environment><super>OS.SocketAddress</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Sockets</category><attributes><package>OS-Sockets</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view sensor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>FullSpec</name><environment>UI</environment><super>UI.UISpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>window component </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>ScheduledWindow</name><environment>UI</environment><super>Graphics.Window</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label icon minimumSize maximumSize component lookPreferences paintPreferences edgeDecorationPolicy widgetPolicy controller model damageRepairPolicy masterWindow activationNotification application dragDropInProgress dragDropTracker dropTarget keyboardProcessor receiveWindowEvents sendWindowEvents toolbarVisible windowEventBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>Integer</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>SubCanvasSpec</name><environment>UI</environment><super>UI.NamedSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>majorKey minorKey clientKey </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>KeyedCollection</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>GeneralNameSpace</name><environment>Kernel</environment><super>Core.KeyedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>organization bindings specificImports generalImports </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Name Spaces</category><attributes><package>System-Name Spaces</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>ArrayedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Context</name><environment>Kernel</environment><super>Kernel.InstructionStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sender receiver stackp stack </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>CompiledCode</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>bytes </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>CompiledMethod</name><environment>Kernel</environment><super>Kernel.CompiledMainBlock</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>mclass sourceCode </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>MethodDefinition</name><environment>Tools</environment><super>Tools.GeneralMethodDefinition</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inheritingClass implementingClass selector extraText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>Signal</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent mayProceed notifierString nameClass nameMessage exceptionClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>CompositePart</name><environment>Graphics</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>components preferredBounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>SpecCollection</name><environment>UI</environment><super>UI.UISpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>collection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>AlphaBlendedIcons</name><environment>Smalltalk</environment><super>Core.Assets</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Resources</package></attributes></class><class><name>Symbol</name><environment>Core</environment><super>Core.String</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>Fraction</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numerator denominator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Set</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>tally </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Dictionary</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>View</name><environment>UI</environment><super>Graphics.DependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>OrderedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>firstIndex lastIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class></st-source>