<?xml version="1.0"?><st-source><!-- Name: Debugger-Browser ExtensionsNotice: Copyright © 2010-2003 Cincom Systems, Inc.  All Rights Reserved.Comment: PDP RB extensions for VW 7.DbIdentifier: bear73DbTrace: 293726DevelopmentPrerequisites: #(#(#any 'Debugger-UI' '') #(#any 'Browser-RefactoringUI' ''))Fragments: Dictionary ()PackageName: Debugger-Browser ExtensionsParcel: #('Debugger-Browser Extensions')ParcelName: Debugger-Browser ExtensionsPrerequisiteParcels: #(#('Debugger-UI' '') #('Browser-RefactoringUI' ''))PrintStringCache: (7.8 - 1000,tgriggs)Version: 7.8 - 1000Post-Load Block: 	[:package | ]Date: 9:15:30 AM March 11, 2011 --><time-stamp>From VisualWorks®, 7.8 of March 4, 2011 on March 11, 2011 at 9:15:30 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>testing</category><body package="Debugger-Browser Extensions" selector="areProbeCommandsLegal">areProbeCommandsLegal	^false</body></methods><methods><class-id>Refactory.Browser.AddMethodChange</class-id> <category>private</category><body package="Debugger-Browser Extensions" selector="executeNotifying:">executeNotifying: aBlock 	| undo oldMethod tool |	undo := self asUndoOperation.	undo notNil		ifTrue:			[undo name: self name.			oldMethod := undo method].	self primitiveExecute.	aBlock value.	PDPManager reinsertProbesAfterMethod: self method recompileFor: source asText.	controller notNil		ifTrue: [tool := controller performer].	PDPManager			changedMethodFrom: oldMethod			to: self method			by: tool.	^undo</body></methods><methods><class-id>Refactory.Browser.AddMethodChange</class-id> <category>accessing</category><body package="Debugger-Browser Extensions" selector="method">method		self selector ifNil: [^nil].	^self changeObject		ifNotNil:			[:changeObject | 			changeObject				compiledMethodAt: self selector				ifAbsent: [nil]]</body></methods><methods><class-id>UI.MenuAutomaticGenerator</class-id> <category>generating</category><body package="Debugger-Browser Extensions" selector="submenu:nameKey:enablement:menu:position:">submenu: label nameKey: key enablement: enablement menu: menuIDs position: position	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				enablement: enablement;				submenu: Menu new)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body></methods><methods><class-id>Refactory.Browser.RemoveMethodChange</class-id> <category>accessing</category><body package="Debugger-Browser Extensions" selector="method">method	^nil</body></methods><methods><class-id>CraftedSmalltalk.OneshotProbe class</class-id> <category>resources</category><body package="Debugger-Browser Extensions" selector="breakpointGlyph">breakpointGlyph	^DebuggerIcons oneShotBreakpoint</body><body package="Debugger-Browser Extensions" selector="disabledBreakpointGlyph">disabledBreakpointGlyph		^DebuggerIcons disabledBreakpoint</body></methods><methods><class-id>CraftedSmalltalk.OneshotProbe</class-id> <category>accessing - emphasis</category><body package="Debugger-Browser Extensions" selector="basicEmphasis">basicEmphasis		| key |	key := self isArmed		ifTrue: [#armedOneshotProbe]		ifFalse: [#disarmedOneshotProbe].	^ProbeCharacterStyle key: key value: self</body></methods><methods><class-id>CraftedSmalltalk.OneshotProbe</class-id> <category>accessing</category><body package="Debugger-Browser Extensions" selector="breakpointGlyph">breakpointGlyph		^self isArmed		ifTrue: [self class breakpointGlyph]		ifFalse: [self class disabledBreakpointGlyph]</body></methods><methods><class-id>CraftedSmalltalk.OneshotProbe</class-id> <category>accessing - emphasis</category><body package="Debugger-Browser Extensions" selector="tempEmphasis">tempEmphasis		^self basicEmphasis</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>instance creation</category><body package="Debugger-Browser Extensions" selector="new">new	| browser |	browser := super new.	PDPManager notifyOnMethodChanged: browser.	^browser"Smalltalk Professional Debug Package Version 2.6 (c) 2001 Crafted Smalltalk"</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>probes</category><body package="Debugger-Browser Extensions" selector="addBreakpoint">addBreakpoint		self addBreakpoint: CodeProbe new</body><body package="Debugger-Browser Extensions" selector="addBreakpoint:">addBreakpoint: aProbe		| probedMethod unprobedMethod aController |	aController := self textController.	unprobedMethod := self selectedMethod.	probedMethod := unprobedMethod newFullProbedMethod.	probedMethod ifNil: [^self].	PDPManager debugActive		ifFalse:			[Transcript show: #ProbesAreDisabled &lt;&lt; #pdp &gt;&gt; 'Probes are disabled'].	aProbe record: (probedMethod probeRecordFor: aController selectionRange).	probedMethod addProbe: aProbe.	aProbe unconditionallyInsertInto: probedMethod replacing: unprobedMethod</body><body package="Debugger-Browser Extensions" selector="addOneshotBreakpoint">addOneshotBreakpoint		self addBreakpoint: OneshotProbe new</body><body package="Debugger-Browser Extensions" selector="allMethodProbes">allMethodProbes	"Return all probes in the current method, regardless of selection status."		| probedMethod probes |	probedMethod := self selectedMethod.	probedMethod isProbed ifFalse: [^#()].	probes := OrderedCollection new.	probedMethod allProbesDo: [:each | probes add: each].	^probes</body><body package="Debugger-Browser Extensions" selector="areProbeCommandsLegal">areProbeCommandsLegal		^self selectors size = 1 and: [self textController textHasChanged not]</body><body package="Debugger-Browser Extensions" selector="basicReinsertProbesAndIndices:into:">basicReinsertProbesAndIndices: probesAndIndices into: probedMethod	| probesInError |	probesInError := OrderedCollection new.	probesAndIndices do:		[:ac | | probe index newRecord |		probe := ac key baseParent copy.		index := ac value.		newRecord := probedMethod probeRecordFor: (index to: index).		probe record: newRecord.		(probe updateTempVarIndexForMethod: probedMethod)			ifTrue: [probedMethod addProbe: probe]			ifFalse:				[newRecord updateMethod: probedMethod.		"update mclass and selector for reporting"				probesInError add: probe]].	probesInError addAll: probedMethod recompileProbes.	ProbedCompiledMethod reportOnFailedProbes: probesInError.</body><body package="Debugger-Browser Extensions" selector="basicRemoveProbe:">basicRemoveProbe: aProbe	| probedMethod replacementMethod |	probedMethod := self selectedMethod.	probedMethod totalProbes = 1		ifTrue: [^probedMethod revert].	replacementMethod := probedMethod newFullProbedMethod.	replacementMethod removeProbe: aProbe.	probedMethod mclass addSelector: self selector withMethod: replacementMethod.</body><body package="Debugger-Browser Extensions" selector="changedMethodFrom:to:by:">changedMethodFrom: oldMethod to: newMethod by: aBrowser 	"This message notifies the receiver that the method text for	aSelector has changed and should be updated."	| widget |	builder isNil		ifTrue: [^self].	widget := builder componentAt: #textEditor.	widget isNil		ifTrue: [^self].	widget isOpen		ifFalse:  [^self].	(newMethod selector == self selector and: [newMethod mclass == self methodClass])		ifFalse: [^self].	(aBrowser ~~ self and: [self isEditing])		ifTrue: [self textNoChange: self text allItalic]		ifFalse: [self updateContents].</body><body package="Debugger-Browser Extensions" selector="findSelectedProbeEmphasisIn:from:">findSelectedProbeEmphasisIn: aText from: aController	^PDPManager findSelectedProbeEmphasisIn:			(aText				copyFrom: aController selectionStartIndex				to: aController selectionStopIndex + 1)</body><body package="Debugger-Browser Extensions" selector="makeProbeTyped:using:at:method:">makeProbeTyped: probeType using: aProbeRecord at: selectionRange method: probedMethod	"Prompts the user to select a probe and returns an Association where the key is the probe	and the value is the conditional flag."	| probe probeRecord |	probeRecord := aProbeRecord isNil		ifTrue: [probedMethod probeRecordFor: selectionRange]		ifFalse: [aProbeRecord].	probeType == #Breakpoint		ifTrue: [probe := CodeProbe new].	probeType == #Variable		ifTrue:			[probe := self				promptForProbeVariableClass: self selectedClass				method: probedMethod				record: probeRecord.			probe isNil				ifTrue: [^nil]].	probeType == #Expression		ifTrue: [probe := DisplayActionProbe new].	probe record: probeRecord.	^probe</body><body package="Debugger-Browser Extensions" selector="modifyProbe">modifyProbe		| probedMethod candidates selectedText |	probedMethod := self selectedMethod.	selectedText := self textController text		copyFrom: self textController selectionStartIndex		to: self textController selectionStopIndex + 1.	candidates := self probesInText: selectedText.	candidates isEmpty		ifTrue: [candidates := self probesInText: self textController text].	candidates first modifyIn: probedMethod</body><body package="Debugger-Browser Extensions" selector="probesInText:">probesInText: aText	"Find all the probes embedded in the emphases of aText. Sort them by their distance from the current insertion point since every user of this so far has wanted that."		| probes searchBlock |	probes := OrderedCollection new.	searchBlock := [:emphasis | emphasis class == ProbeCharacterStyle ifTrue: [probes add: emphasis value]].	aText runs values		do:			[:value | 			(value isKindOf: Array)				ifTrue: [value do: [:obj | searchBlock value: obj]]				ifFalse: [searchBlock value: value]].	probes		sort:			[:a :b | 			(a characterIndex - self textController selectionStartIndex) abs				&lt; (b characterIndex - self textController selectionStartIndex)].	^probes</body><body package="Debugger-Browser Extensions" selector="probesNearCursor">probesNearCursor	"Return all probes that are near the cursor (when nothing is selected), where 'near' is defined as within 7 characters of the position either way. If we have multiple, only return the closest."		| probes nearCursorText |	self textController hasRangeSelection ifTrue: [^#()].	nearCursorText := self textController text		copyFrom: (self textController selectionStartIndex - 7 max: 1)		to:			(self textController selectionStopIndex + 7				min: self textController text size).	probes := self probesInText: nearCursorText.	probes		sort:			[:a :b | 			(a characterIndex - self textController selectionStartIndex) abs				&lt; (b characterIndex - self textController selectionStartIndex)].	^probes isEmpty		ifTrue: [probes]		ifFalse: [probes first: 1]</body><body package="Debugger-Browser Extensions" selector="probesToActUpon">probesToActUpon		| probedMethod victims |	probedMethod := self selectedMethod.	probedMethod isProbed ifFalse: [^#()].	"Give precedence to selected probes"	victims := self selectedProbes.	victims isEmpty ifFalse: [^victims].	"If we have no selection, give probes *near* the cursor a chance, choose the closest."	victims := self probesNearCursor.	victims isEmpty ifFalse: [^victims].	"OK, just return 'em all then."	^self allMethodProbes</body><body package="Debugger-Browser Extensions" selector="promptForProbeVariableClass:method:record:">promptForProbeVariableClass: aClass method: probedMethod record: probeRecord	"Prompts the user to select a probe and returns an Association where the key is the probe	and the value is the conditional flag."	| legalTempNames legalTemps ivarNames dialog aBuilder ivar tmpVar windoe wVar varType |	windoe := self interfaceWindow.	wVar := ValueHolder newString.	legalTemps := OrderedCollection new.	(probedMethod variableMapAt: probeRecord blockMethodIndex) temps do:		[:var |		(var key first == $. or: [legalTemps contains: [:lvar | lvar key = var key]])			ifFalse: [legalTemps add: var]].	legalTempNames := legalTemps collect: [:ac | ac key].	ivarNames := aClass allInstVarNames.	dialog := SimpleDialog new.	dialog initializeBuilderFor: windoe.	aBuilder := dialog builder.	aBuilder		aspectAt: #TOS		put: [varType := #tos.			wVar value: 'Top of Stack'].	aBuilder		aspectAt: #iVar		put: [ivar := (Menu				labelArray: ivarNames				values: ivarNames) startUp.			ivar ~~ 0				ifTrue:					[wVar value: ivar.					varType := #inst]].	aBuilder		aspectAt: #tVar		put: [tmpVar := (Menu				labelArray: legalTempNames				values: legalTemps) startUp.			tmpVar ~~ 0				ifTrue:					[wVar value: tmpVar key.					varType := #tmp]].	aBuilder		aspectAt: #wVar		put: wVar.	dialog builder add: (UISpecification from: self class watchVarSpec).	dialog initializeWindowFor: windoe.	ivarNames isEmpty		ifTrue: [(aBuilder componentAt: #IvarSwitch) disable].	legalTemps isEmpty		ifTrue: [(aBuilder componentAt: #TempSwitch) disable].	dialog preOpen.	dialog builder openDialogWithExtent: dialog builder window displayBox extent.	dialog accept value		ifFalse: [^nil].	varType == nil		ifTrue: [^nil].	varType == #tos		ifTrue: [^DisplayTOSProbe new].	varType == #inst		ifTrue: [^DisplayInstanceVarProbe name: ivar index: (ivarNames indexOf: ivar)].	^DisplayMethodVarProbe slot: tmpVar</body><body package="Debugger-Browser Extensions" selector="rearmOneshotProbes">rearmOneshotProbes		self probesToActUpon do: [:each | each isOneshot ifTrue: [each rearm]].	self updateContents</body><body package="Debugger-Browser Extensions" selector="removeProbe">removeProbe		| victims probedMethod |	probedMethod := self selectedMethod.	victims := self probesToActUpon.	victims do: [:each | self basicRemoveProbe: each].	"The following is necessary because apparently the method cache is not completely flushed."	ObjectMemory garbageCollect.	PDPManager changedMethodFrom: probedMethod to: probedMethod by: self</body><body package="Debugger-Browser Extensions" selector="selectedMethod">selectedMethod	^self methodClass compiledMethodAt: self selector</body><body package="Debugger-Browser Extensions" selector="selectedProbes">selectedProbes	"Return all probes in the current selection."		| selectedText |	self textController hasRangeSelection ifFalse: [^#()].	selectedText := self textController text		copyFrom: self textController selectionStartIndex		to: self textController selectionStopIndex + 1.	^self probesInText: selectedText</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>testing</category><body package="Debugger-Browser Extensions" selector="isClassSelected">isClassSelected	^navigator isClassSelected</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>accessing</category><body package="Debugger-Browser Extensions" selector="method">method	^nil</body></methods><methods><class-id>CraftedSmalltalk.CodeProbe class</class-id> <category>resources</category><body package="Debugger-Browser Extensions" selector="breakpointGlyph">breakpointGlyph	^DebuggerIcons breakpoint</body></methods><methods><class-id>CraftedSmalltalk.CodeProbe</class-id> <category>accessing</category><body package="Debugger-Browser Extensions" selector="breakpointGlyph">breakpointGlyph		^self class breakpointGlyph</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>class probes</category><body package="Debugger-Browser Extensions" selector="addClassProbesMenu">addClassProbesMenu	&lt;submenu: #(#AddClassProbe #pdp 'Add Class Probe')			nameKey: #addClassProbesMenu			enablement: #isClassSelected			menu: #(#classMenu)			position: 75.1&gt;	^self</body><body package="Debugger-Browser Extensions" selector="addIvarRefProbe">addIvarRefProbe	&lt;menuItem: #(#OnInstanceVarableAccessDots #pdp 'On Instance Variable Access...')			nameKey: nil			menu: #(#classMenu #addClassProbesMenu)			position: 10.1&gt;	PDPInstrumenterGUIModel instrumentIvarsIn: self selectedClass.</body><body package="Debugger-Browser Extensions" selector="addMsgRcvdProbe">addMsgRcvdProbe	&lt;menuItem: #(#OnMessageReceipt #pdp 'On Message Receipt...')			nameKey: nil			menu: #(#classMenu #addClassProbesMenu)			position: 10.2&gt;	PDPInstrumenterGUIModel instrumentMsgRcvdIn: self selectedClass.</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>method probes</category><body package="Debugger-Browser Extensions" selector="addMsgRcvdProbeToMethods">addMsgRcvdProbeToMethods	&lt;menuItem: #(#AddProbeOnMessageDot #pdp 'Add Probe on Message...')		nameKey: nil		enablement: #isSelectorSelected		indication: nil		menu: #(#selectorMenu)		position: 55.1 &gt;	| methColl |	methColl := self methodDefinitions collect: [:md | md implementingClass -&gt; md selector].	PDPInstrumenterGUIModel instrumentMsgRcvdOnList: methColl.</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>class probes</category><body package="Debugger-Browser Extensions" selector="browseProbedMethods">browseProbedMethods	"Open a method browser on all the probed methods belonging	to the selected class."		&lt;menuItem: #(#BrowseProbedMethods #pdp 'Browse Probed Methods') nameKey:			#browseProbedMethods enablement: #isClassSelected indication: nil menu:			#(#classMenu) position: 75.3&gt;	| probedMethods |	probedMethods := OrderedCollection new.	self selectedClass		selectorsAndMethodsDo:			[:ignored :eachMethod | eachMethod isProbed ifTrue: [probedMethods add: eachMethod definition]].	probedMethods isEmpty ifTrue: [^self].	^MethodCollector new		openListBrowserOn: probedMethods		label: #ProbedMethods &lt;&lt; #pdp &gt;&gt; 'Probed Methods'		initialSelection: nil</body><body package="Debugger-Browser Extensions" selector="removeClassProbes">removeClassProbes	&lt;menuItem: #(#FromThisClassOnly #pdp 'From This Class Only')			nameKey: nil			menu: #(#classMenu #removeClassProbesMenu)			position: 10.1&gt;	(Dialog		choose: ((#ThisWillRemoveAllProbesFromClassMethods &lt;&lt; #pdp &gt;&gt; 'This will remove all the probes from&lt;n&gt;the methods belonging to class &lt;1s&gt;')			expandMacrosWith: self selectedClass name)		labels: (Array with: (#Proceed &lt;&lt; #pdp &gt;&gt; 'Proceed') with: (#Cancel &lt;&lt; #pdp &gt;&gt; 'Cancel'))		values: #(true false)		default: false)		ifFalse: [^self].	self selectedClass selectorsAndMethodsDo: [:ingored :eachMethod | eachMethod revert].</body><body package="Debugger-Browser Extensions" selector="removeClassProbesMenu">removeClassProbesMenu	&lt;submenu: #(#removeClassProbes #pdp 'Remove Class Probes')			nameKey: #removeClassProbesMenu			enablement: #isClassSelected			menu: #(#classMenu)			position: 75.2&gt;	^self</body><body package="Debugger-Browser Extensions" selector="removeProbesInClassTree">removeProbesInClassTree	&lt;menuItem: #(#FromThisClassAndSubclasses #pdp 'From This Class and Subclasses')			nameKey: nil			menu: #(#classMenu #removeClassProbesMenu)			position: 10.2&gt;	(Dialog		choose: ((#ThisWillRemoveAllProbesFromClass1sAndSubs &lt;&lt; #pdp &gt;&gt; 'This will remove all the probes from the methods&lt;n&gt;belonging to class &lt;1s&gt; and its subclasses.')			expandMacrosWith: self selectedClass name)		labels: (Array with: (#Proceed &lt;&lt; #pdp &gt;&gt; 'Proceed') with: (#Cancel &lt;&lt; #pdp &gt;&gt; 'Cancel'))		values: #(true false)		default: false)		ifFalse: [^self].	self selectedClass withAllSubclasses do: [:cl | cl selectorsAndMethodsDo: [:ignored :eachMethod | eachMethod revert]].</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>interface specs</category><body package="Debugger-Browser Extensions" selector="watchVarSpec">watchVarSpec	"Tools.UIPainter new openOnClass: self andSelector: #watchVarSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #InsertVariableWatch 				#defaultString: 'Insert Variable Watch' 				#catalogID: #pdp ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1237 595 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 318 98 407 128 ) 					#model: #accept 					#tabable: false 					#label: 					#(#{Kernel.UserMessage} 						#key: #OK 						#defaultString: 'OK' 						#catalogID: #pdp ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 419 98 504 128 ) 					#model: #cancel 					#tabable: false 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #pdp ) 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 143 55 503 82 ) 					#model: #wVar 					#tabable: false 					#isReadOnly: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 9 20 132 49 ) 					#model: #TOS 					#tabable: false 					#label: 					#(#{Kernel.UserMessage} 						#key: #TopOfStack 						#defaultString: 'Top of Stack' 						#catalogID: #pdp ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 143 19 332 49 ) 					#name: #IvarSwitch 					#model: #iVar 					#tabable: true 					#label: 					#(#{Kernel.UserMessage} 						#key: #InstanceVariableDots 						#defaultString: 'Instance Variable...' 						#catalogID: #pdp ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 342 19 503 50 ) 					#name: #TempSwitch 					#model: #tVar 					#tabable: false 					#label: 					#(#{Kernel.UserMessage} 						#key: #TempVariableDots 						#defaultString: 'Temp Variable...' 						#catalogID: #pdp ) 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 61 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #WatchC 						#defaultString: 'Watch:' 						#catalogID: #pdp ) ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>probes</category><body package="Debugger-Browser Extensions" selector="addBreakpointItem">addBreakpointItem		&lt;itemInMenu: #(#mainMenu) position: 25.10&gt;	^(MenuItem labeled: #InsertBreakpoint &lt;&lt; #pdp &gt;&gt; 'Insert Breakpoint')		enablement: #areProbeCommandsLegal;		value: [self addBreakpoint];		labelImage: CodeProbe breakpointGlyph</body><body package="Debugger-Browser Extensions" selector="addOneshotBreakpointItem">addOneshotBreakpointItem		&lt;itemInMenu: #(#mainMenu) position: 25.15&gt;	^(MenuItem		labeled: #NewOneShotBreakpoint &lt;&lt; #pdp &gt;&gt; 'Insert Oneshot Breakpoint')		value: [self addOneshotBreakpoint];		enablement: #areProbeCommandsLegal;		labelImage: OneshotProbe breakpointGlyph</body><body package="Debugger-Browser Extensions" selector="addProbe">addProbe		&lt;menuItem: #(#InsertProbeDots #pdp 'Insert Probe...') nameKey: nil		enablement: #areProbeCommandsLegal indication: nil menu: #(#mainMenu)		position: 25.2&gt;	| probedMethod unprobedMethod probe probeSpec aController |	aController := self textController.	self selector isNil		ifTrue:			[^Dialog				warn:					#InsertProbeValidWhenMethodSelected &lt;&lt; #pdp &gt;&gt;							'The "insert probe" operation is onlyvalid when a method is selected.'].	aController textHasChanged		ifTrue:			[^Dialog				warn:					(#ProbeCannotBeInsertedSourceChanged &lt;&lt; #pdp &gt;&gt;							'A probe cannot be inserted because&lt;1s&gt;     the source code has changed.'						expandMacrosWith: (String with: Character cr))].	probeSpec := CodeProbe selectBrowserProbeType.	probeSpec == nil ifTrue: [^nil].	unprobedMethod := self selectedMethod.	probedMethod := unprobedMethod newFullProbedMethod.	probedMethod isNil ifTrue: [^self].	PDPManager debugActive		ifFalse:			[PDPTransientWarning				on: #ProbesAreDisabled &lt;&lt; #pdp &gt;&gt; 'Probes are disabled'].	probe := self		makeProbeTyped: probeSpec probeClass		using: nil		at: aController selectionRange		method: probedMethod.	probe isNil ifTrue: [^self].	probedMethod addProbe: probe.	probe makeConditional: probeSpec replacing: unprobedMethod with:			probedMethod</body><body package="Debugger-Browser Extensions" selector="modifyProbeItem">modifyProbeItem		&lt;itemInMenu: #(#mainMenu) position: 25.3&gt;	^(MenuItem labeled: #EditProbeDots &gt;&gt; 'Edit Probe...' &lt;&lt; #pdp)		value: [self modifyProbe];		enablement:				[self areProbeCommandsLegal and: [self selectedMethod isProbed]]</body><body package="Debugger-Browser Extensions" selector="rearmOneshotProbesItem">rearmOneshotProbesItem		&lt;itemInMenu: #(#mainMenu) position: 25.16&gt;	^(MenuItem labeled: #RearmProbes &gt;&gt; 'Rearm Oneshot Probes' &lt;&lt; #pdp)		value: [self rearmOneshotProbes];		visible:				[self areProbeCommandsLegal						and:							[self probesToActUpon								anySatisfy: [:each | each isOneshot and: [each isArmed not]]]]</body><body package="Debugger-Browser Extensions" selector="removeProbeItem">removeProbeItem		&lt;itemInMenu: #(#mainMenu) position: 25.4&gt;	^(MenuItem labeled: #RemoveProbe &gt;&gt; 'Remove Probe' &lt;&lt; #pdp)		value: [self removeProbe];		visible: [self areProbeCommandsLegal and: [self probesToActUpon size = 1]]</body><body package="Debugger-Browser Extensions" selector="removeProbesItem">removeProbesItem		&lt;itemInMenu: #(#mainMenu) position: 25.4&gt;	^(MenuItem labeled: #RemoveProbes &gt;&gt; 'Remove Probes' &lt;&lt; #pdp)		value: [self removeProbe];		visible: [self areProbeCommandsLegal and: [self probesToActUpon size &gt; 1]]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>BrowserCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modified initialLookPrefs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>MenuAutomaticGenerator</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuName menuDefiner messageSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Menus</category><attributes><package>Interface-Menus</package></attributes></class><class><name>RefactoryChange</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><class><name>AddMethodChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source selector protocols controller definedSelector package </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><class><name>RemoveMethodChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><class><name>CodeProbe</name><environment>CraftedSmalltalk</environment><super>CraftedSmalltalk.AbstractCodeProbe</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testMethod testSource variables labelString permanent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CraftedSt-Probes</category><attributes><package>Debugger-Probes</package></attributes></class><class><name>OneshotProbe</name><environment>CraftedSmalltalk</environment><super>CraftedSmalltalk.CodeProbe</super><private>false</private><indexed-type>none</indexed-type><inst-vars>armed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Debugger-Probes</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractRefactoringBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class></st-source>