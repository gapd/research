<?xml version="1.0"?><st-source><!-- Name: RBTabbedToolsetsNotice: Copyright © 2010-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: This is a reimplementation of the RB_Tabs package. It is meant for the 7.6 Browser and above (aka 4xx browser). It is reimplemented because it takes advnantage of the changes made in the 7.6 browser.  This is an unsupported goodie, provided as is.DbIdentifier: bear73DbTrace: 287673PackageName: RBTabbedToolsetsParcel: #('RBTabbedToolsets')ParcelName: RBTabbedToolsetsPrintStringCache: (7.7.1 - 1,trobinson)Version: 7.7.1 - 1Date: 9:46:48 AM June 4, 2010 --><time-stamp>From VisualWorks®, Pre-Release 7.7.1 (jun10.2) of June 4, 2010 on June 4, 2010 at 9:46:48 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AutohideTabControlComposite</name><environment>Refactory.Browser</environment><super>UI.TabControlComposite</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>RBTabbedToolsets</package></attributes></class><comment><class-id>Refactory.Browser.AutohideTabControlComposite</class-id><body>I extend my subclass behavior by adjusting the layout of my children based on whether the tab bar has more than one tab or not. If not, it is not shown, when 2+ exist, it is shown.</body></comment><methods><class-id>Refactory.Browser.AutohideTabControlComposite</class-id> <category>testing</category><body package="RBTabbedToolsets" selector="shouldShowTabBar">shouldShowTabBar	^self tabBar bottomComponent sequence size &gt; 1</body></methods><methods><class-id>Refactory.Browser.AutohideTabControlComposite</class-id> <category>private</category><body package="RBTabbedToolsets" selector="computeDisplayBoxFor:inDisplayBox:">computeDisplayBoxFor: aComponent inDisplayBox: aRectangle	self shouldShowTabBar		ifTrue:			[^super computeDisplayBoxFor: aComponent inDisplayBox: aRectangle].	^aComponent bottomComponent = subCanvas		ifTrue: [aRectangle]		ifFalse: [Point zero corner: Point zero]</body><body package="RBTabbedToolsets" selector="relayout">relayout	self bounds: self bounds.	self invalidate</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>interface opening</category><body package="RBTabbedToolsets" selector="addToolsetsTabs">addToolsetsTabs		| components compositeToWrap containerToInjectInto tabBarView tabComposite |	components := self builder window component components.	compositeToWrap := (components at: 3) bottomComponent.	containerToInjectInto := compositeToWrap container.	tabBarView := builder policy tabControlBarClass new.	tabBarView textStyle: (TextAttributes styleNamed: #systemDefault).	tabBarView model: toolsetsList listHolder.	tabBarView selectionChannel: toolsetsList selectionIndexHolder.	tabBarView controller keyboardProcessor: builder keyboardProcessor.	tabComposite := AutohideTabControlComposite new.	"Hook things up so that the appropriate changes are picked up"	self toolsets		expressInterestIn: #insert:		for: [tabComposite relayout]		sendBack: #value.	self toolsets		expressInterestIn: #remove:		for: [tabComposite relayout]		sendBack: #value.	navigator		expressInterestIn: nil		for: [tabBarView invalidate]		sendBack: #value.	tabComposite		tabBar: tabBarView		subCanvas: compositeToWrap		border: builder policy tabControlBorder.	"do NOT use component: here, as that will nil the container of the tab-wrapped-composite, and we've already updated his container"	containerToInjectInto setComponent: tabComposite.	containerToInjectInto composeAndInvalidate</body><body package="RBTabbedToolsets" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self addFind.	self addToolsetsTabs.	builder window sensor invalidationSuppressWhile: [self updateToolbar].	self currentToolset updateDisplay</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractRefactoringBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>TabControlComposite</name><environment>UI</environment><super>Graphics.CompositePart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subCanvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class></st-source>