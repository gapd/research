<?xml version="1.0"?><st-source><!-- Name: RBCodeHighlightingComment: This adds syntax highlighting to the Refactoring Browser, and optionally to workspaces and debuggers.  Through the TextHighlighting package, it runs a background process that parses the code in the text area and attempts to apply various styles to lexical elements of the parsed text, by language. For reasonable size methods and reasonable speed machines, it can usually keep up with typing.  In addition to most of the syntactic constructs, it also highlights syntax errors, some compile time errors (e.g., redefined variables), and some runtime errors (e.g., probable DNU errors):You can customize the particular emphases applied in the settings tool, using the "Highlighter" pages. These normally apply various colors along with standard kinds of text emphases.  Alternative color schemes are also available through settings.To reuse the highlighter in your application model, make sure #addHighlighters is invoked in its #postBuildWith: method, and add an extension method along these lines:	addCodeHighlighter		<highlighter>		CodeHighlighter on: (self widgetAt: #TheIdOfTheWidgetYouWantToCodeFormat) controller for: selfThe argument "self" can be any object that will actually request the highlighting from the CodeHighlightingParser.  This delegation is required to correctly configure the parser with class and environment for message send context.  The delegation object must understand both #highlight:from: and #unhighlight:from:, in accordance with the implementation of DelegateHighlighter.You can use methods in the CodeHighlighter configuring protocol to control when the highlighter works through settings.  By default, it uses the "forSource" method, which restricts only by the master code highlighting switch.  If you wanted to tie this, for example, to the debugger switch, your extension method would look like this:	addCodeHighlighter		<highlighter>		(CodeHighlighter on: (self widgetAt: #TheIdOfTheWidgetYouWantToCodeFormat) controller for: self) forDebuggerYou can add your own code highlighting restriction controls and settings using the configuring methods as examples.With this version, the application of individual emphases for specific situations made pluggable and is accomplished by selected emphasizers.  The code parser defers to a [computed] list of emphasizers, where each does the actual styling for any language element, according to its purpose.  This allows complete control of what visual characteristics are applied.  Emphasizers are configured for each parser as it is created through the use of pragmas.  The method containing the pragma is invoked during parser initialization.  If the method returns nil, it is ignored.  Otherwise, the method should return an instance of a CodeEmphasizer configured on the parser.  Since emphasizers and the resulting styling are orthogonal, no provision is made for ordering the emphasizers.  For example, the language colorizer is enabled as follows (in the configuring protocol of CodeHighlightingParser):	lexicalEmphasizer		<emphasizer>		^CodeHighlighter markUpLanguage ifTrue: [LexicalCodeEmphasizer on: self]The latest version can be found in the Cincom Public Store Repository (see http://www.cincomsmalltalk.com). See also http://wiki.cs.uiuc.edu/VisualWorks/RB+Code+Highlighter for more information.DbIdentifier: bear73DbTrace: 318667DevelopmentPrerequisites: #(#(#any 'Debugger-UI' '') #(#any 'SmaCC Runtime' '') #(#any 'HighlightingStyles' '') #(#any 'TextHighlighting' '') #(#any 'Browser-BrowserUI' '') #(#any 'Browser-Namespace' '') #(#any 'Refactory-Namespace' '') #(#any 'Tools-Settings' '') #(#any 'Tools-Settings-VW' '') #(#any 'Tools-Trippy' '') #(#any 'Tools-Workspace' ''))ExplicitPrerequisites: #()IgnoredPrerequisites: #()KSignature: #('definedClasses' 4 'definedClassesHash' 25783466817 'extendedClasses' 13 'extendedClassesHash' 2083514339)PackageName: RBCodeHighlightingParcel: #('RBCodeHighlighting')ParcelName: RBCodeHighlightingPrerequisiteDescriptions: #(#(#name 'Debugger-UI' #componentType #package) #(#name 'SmaCC Runtime' #componentType #package) #(#name 'HighlightingStyles' #componentType #package) #(#name 'TextHighlighting' #componentType #package) #(#name 'Browser-BrowserUI' #componentType #package) #(#name 'Browser-Namespace' #componentType #package) #(#name 'Refactory-Namespace' #componentType #package) #(#name 'Tools-Settings' #componentType #package) #(#name 'Tools-Settings-VW' #componentType #package) #(#name 'Tools-Trippy' #componentType #package) #(#name 'Tools-Workspace' #componentType #package))PrerequisiteParcels: #(#('Debugger-UI' '') #('SmaCC Runtime' '') #('HighlightingStyles' '') #('TextHighlighting' '') #('Browser-BrowserUI' '') #('Browser-Namespace' '') #('Refactory-Namespace' '') #('Tools-Settings' '') #('Tools-Settings-VW' '') #('Tools-Trippy' '') #('Tools-Workspace' ''))PrintStringCache: (7.7 - 11,nross)Time: August 20, 2006 21:52:20.804Version: 7.7 - 11Pre-Load Block: 	[:package | #{Refactory.CodeHighlighter.CodeHighlighter} ifDefinedDo: [:chc | chc uninstall]]Post-Load Block: 	[:package | Refactory.CodeHighlighter.CodeHighlighter install.(Store.Registry packageNamed: 'Fix Colored Text Selection') isNil	ifTrue:		[Transcript			beginEntry; cr; nextPutAll: package name;			nextPutAll: ' suggests loading'; crtab;			nextPutAll: 'Fix Colored Text Selection'; cr;			nextPutAll: '(see that package''s comment)';			cr; endEntry]]Pre-Unload Block: 	[:package | Refactory.CodeHighlighter.CodeHighlighter uninstall]Post-Unload Block: 	[UI.StyleDescription purgeObsoleteCharacterAttributeStyles]Date: 10:25:36 AM February 4, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (feb11.1) of February 4, 2011 on February 4, 2011 at 10:25:36 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>CodeHighlighter</name><environment>Refactory</environment><private>false</private><imports>			private UI.HighlightingTextEditorController			private UI.HighlightingTextEditorController.RefreshDelay			private Smalltalk.*			private Refactory.Browser.*			private Refactory.SmaCC.*			</imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></name-space><class><name>CodeEmphasizer</name><environment>Refactory.CodeHighlighter</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>order parser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.CodeEmphasizer</class-id><body>CodeEmphasizer is the abstract root class of all objects that apply highlighting or emphasis to code.  The individual styles reflect how that emphasis will appear on the display.  The emphasizer determines the particular emphasis that should be assigned in a particular situation.  Multiple emphasizers are possible, each doing something distinct to the code, which can be controlled independently by their respective highlighter.  By default, the receiver does nothing with any formatting action.Instance Variables	order		&lt;Number&gt;					Relative order of applying formatting emphasis	parser		&lt;CodeHighlightingParser&gt;	The parser used to scan the current source code.</body></comment><class><name>CodeHighlightingScanner</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id><body>CodeHighlightingScanner is a type of SmaCCScanner that specifically recognizes Smalltalk tokens for highlighting.</body></comment><class><name>SmalltalkCodeHighlightingScanner</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.CodeHighlighter.CodeHighlightingScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingScanner</class-id><body>SmalltalkCodeHighlightingScanner is a SmaCCScanner that supports highlighting of the VisualWorks variant of the Smalltalk language.</body></comment><class><name>CascadeElement</name><environment>Refactory.CodeHighlighter</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type send marker </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.CascadeElement</class-id><body>CascadeElement is a class used to record cascade messages, identifying the type, the message send, and the cascade marker.Instance Variables	marker	&lt;SmaCCToken&gt;					The cascade marker token	send	&lt;OrderedCollection of: Association&gt;	The message send (keywords and arguments)	type	&lt;Symbol&gt;							The type of message send (#unary, #binary, #keyword)</body></comment><class><name>CodeHighlighter</name><environment>Refactory.CodeHighlighter</environment><super>UI.DelegateHighlighter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.CodeHighlighter</class-id><body>CodeHighlighter performs code highlighting by deferring to a code tool or other object.  It also provides a number of class instance variables for controlling general code highlighter behavior.Shared Variables	DistinguishElements		&lt;Boolean&gt;	indicates whether individual elements of a literal array should be highlighted independently of the array	HighlightDebuggers		&lt;Boolean&gt;	indicates whether code highlighting should be enabled in debuggers</body></comment><class><name>SpellingCodeEmphasizer</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.CodeHighlighter.CodeEmphasizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.SpellingCodeEmphasizer</class-id><body>SpellingCodeEmphasizer is a special case of code emphasizer that does spelling checking of various lexical items.</body></comment><class><name>CodeHighlightingParser</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>blockDepth class counter formatters lastBlock lastComment literalArray namespace parenDepth string text variables </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id><body>CodeHighlightingParser is a SmaCCParser that supports highlighting of the Smalltalk language.  Like yacc, SmaCC permits specification of actions when productions are reduced.  Each of these actions results in some highlighting to the code.  CodeHighlightingParser is actually an abstract class;  the concrete classes have the actual grammar.Instance Variables	blockDepth		&lt;SmallInteger&gt;			Current nesting depth for blocks (does not include byte arrays)	class			&lt;Behavior&gt;				Behavior for which the method is parsed	counter			&lt;SmallInteger&gt;			Scope counter (assigns a unique id for lexical clarity)	formatters		&lt;OrderedCollection&gt;		The set of emphasizers defined and active for this formatting run	lastBlock		&lt;BlockVariables&gt;		The most recently popped block scope (used for formatting only)	lastComment	&lt;OrderedCollection&gt;		Last comment(s) seen;  used to set method comment highlighting	literalArray		&lt;SmallInteger&gt;			Non-zero when scanning elements of a literal array	namespace		&lt;NameSpace&gt;			Namespace providing resolution context for method being parsed	parenDepth		&lt;SmallInteger&gt;			Current nesting depth for parentheses (includes arrays, unfortunately)	string			&lt;String&gt;				Source method string	text				&lt;Text&gt;					The formatted text	variables		&lt;BlockVariables&gt;		Innermost lexical scope holder (for variables and temporaries)</body></comment><class><name>LexicalCodeEmphasizer</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.CodeHighlighter.CodeEmphasizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.LexicalCodeEmphasizer</class-id><body>LexicalCodeEmphasizer is the general implementation of the code emphasizer, applying emphasis to the various lexical entities.</body></comment><class><name>BlockVariables</name><environment>Refactory.CodeHighlighter</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arguments depth id outer temporaries </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.BlockVariables</class-id><body>I am a helper object that tracks temporary variables and the like for blocks.  This allows maintenance of scope identity so that the same block argument declared in different blocks is, in fact, different.  The depth is computed on reference.Instance Variables	arguments	&lt;OrderedCollection&gt;		The set of arguments declared for the block or method.	id			&lt;SmallInteger&gt;			Unique block id (within context of method).	outer		&lt;BlockVariables&gt;		Outer or enclosing scope;  nil for the method.	temporaries	&lt;OrderedCollection&gt;		The set of temporaries declared for the block.</body></comment><class><name>HyperlinkCodeEmphasizer</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.CodeHighlighter.CodeEmphasizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.HyperlinkCodeEmphasizer</class-id><body>HyperlinkeCodeEmphasizer is a special case of code emphasizer that does hyperlink marking of various lexical items.</body></comment><class><name>SmalltalkCodeHighlightingParser</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.CodeHighlighter.CodeHighlightingParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><comment><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingParser</class-id><body>SmalltalkCodeHighlightingParser is a SmaCCParser that supports highlighting of the VisualWorks variant of the Smalltalk language.</body></comment><shared-variable><name>HighlightDebugger</name><environment>Refactory.CodeHighlighter</environment><private>false</private><constant>false</constant><category>Settings</category><initializer>true</initializer><attributes><package>RBCodeHighlighting</package></attributes></shared-variable><shared-variable><name>DistinguishAnnotations</name><environment>Refactory.CodeHighlighter.CodeHighlighter</environment><private>false</private><constant>false</constant><category>settings</category><initializer>false</initializer><attributes><package>RBCodeHighlighting</package></attributes></shared-variable><shared-variable><name>MarkUpLanguage</name><environment>Refactory.CodeHighlighter.CodeHighlighter</environment><private>false</private><constant>false</constant><category>settings</category><initializer>true</initializer><attributes><package>RBCodeHighlighting</package></attributes></shared-variable><shared-variable><name>DistinguishElements</name><environment>Refactory.CodeHighlighter.CodeHighlighter</environment><private>false</private><constant>false</constant><category>settings</category><initializer>true</initializer><attributes><package>RBCodeHighlighting</package></attributes></shared-variable><methods><class-id>Refactory.CodeHighlighter.CodeEmphasizer</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatArrayHash:leftDelimiter:rightDelimiter:">formatArrayHash: hashToken leftDelimiter: leftDelimiterToken rightDelimiter: rightDelimiterToken</body><body package="RBCodeHighlighting" selector="formatAssignedVariable:">formatAssignedVariable: aToken</body><body package="RBCodeHighlighting" selector="formatAssignment:">formatAssignment: aToken</body><body package="RBCodeHighlighting" selector="formatBinaryMessage:to:">formatBinaryMessage: anOrderedCollection to: aClass</body><body package="RBCodeHighlighting" selector="formatBinaryMethod:with:">formatBinaryMethod: selectorToken with: variableToken</body><body package="RBCodeHighlighting" selector="formatBlockArgumentSeparator:">formatBlockArgumentSeparator: aToken</body><body package="RBCodeHighlighting" selector="formatBlockLeftBracket:argumentsSeparator:rightBracket:with:">formatBlockLeftBracket: leftBracketToken argumentsSeparator: separatorToken rightBracket: rightBracketToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatBlockVariable:colon:with:">formatBlockVariable: variableToken colon: colonToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatByteArrayHash:leftBracket:rightBracket:">formatByteArrayHash: hashToken leftBracket: leftBracketToken rightBracket: rightBracketToken</body><body package="RBCodeHighlighting" selector="formatCascade:">formatCascade: aToken</body><body package="RBCodeHighlighting" selector="formatCharacter:">formatCharacter: aToken</body><body package="RBCodeHighlighting" selector="formatClassReference:">formatClassReference: aToken</body><body package="RBCodeHighlighting" selector="formatComment:">formatComment: aToken</body><body package="RBCodeHighlighting" selector="formatExpressionLeftParenthesis:rightParenthesis:with:">formatExpressionLeftParenthesis: leftParenthesisToken rightParenthesis: rightParenthesisToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatFalse:">formatFalse: aToken</body><body package="RBCodeHighlighting" selector="formatGlobalVariable:">formatGlobalVariable: aToken</body><body package="RBCodeHighlighting" selector="formatKeyword:with:">formatKeyword: selectorToken with: variableToken</body><body package="RBCodeHighlighting" selector="formatKeywordMessage:to:">formatKeywordMessage: anOrderedCollection to: aClass</body><body package="RBCodeHighlighting" selector="formatKeywordMethod:">formatKeywordMethod: tokenCollection</body><body package="RBCodeHighlighting" selector="formatLocalVariable:with:">formatLocalVariable: aToken with: anEmphasis</body><body package="RBCodeHighlighting" selector="formatMethodArgument:with:">formatMethodArgument: variableToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatMethodComment:">formatMethodComment: aToken</body><body package="RBCodeHighlighting" selector="formatNameSpaceReference:">formatNameSpaceReference: aToken</body><body package="RBCodeHighlighting" selector="formatNil:">formatNil: aToken</body><body package="RBCodeHighlighting" selector="formatNumber:">formatNumber: aToken</body><body package="RBCodeHighlighting" selector="formatPeriod:">formatPeriod: aToken</body><body package="RBCodeHighlighting" selector="formatPrimitiveFrom:to:">formatPrimitiveFrom: startToken to: stopToken</body><body package="RBCodeHighlighting" selector="formatPrimitiveLeftBracket:selector:rightBracket:">formatPrimitiveLeftBracket: leftBracketToken selector: anOrderdedCollection rightBracket: rightBracketToken</body><body package="RBCodeHighlighting" selector="formatQualifiedReferenceHash:leftBrace:rightBrace:">formatQualifiedReferenceHash: hashToken leftBrace: leftBraceToken rightBrace: rightBraceToken</body><body package="RBCodeHighlighting" selector="formatReturn:">formatReturn: aToken</body><body package="RBCodeHighlighting" selector="formatSelf:">formatSelf: aToken</body><body package="RBCodeHighlighting" selector="formatSharedVariable:">formatSharedVariable: aToken</body><body package="RBCodeHighlighting" selector="formatString:">formatString: aToken</body><body package="RBCodeHighlighting" selector="formatSuper:">formatSuper: aToken</body><body package="RBCodeHighlighting" selector="formatSymbol:hash:">formatSymbol: aToken hash: hashToken</body><body package="RBCodeHighlighting" selector="formatSyntaxErrorFrom:to:">formatSyntaxErrorFrom: startInteger to: stopInteger</body><body package="RBCodeHighlighting" selector="formatTemporaryVariable:with:">formatTemporaryVariable: variableToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatThisContext:">formatThisContext: aToken</body><body package="RBCodeHighlighting" selector="formatTrue:">formatTrue: aToken</body><body package="RBCodeHighlighting" selector="formatUnaryMessage:to:">formatUnaryMessage: anOrderedCollection to: aClass</body><body package="RBCodeHighlighting" selector="formatUnaryMethod:">formatUnaryMethod: selectorToken</body><body package="RBCodeHighlighting" selector="formatUndeclaredVariable:">formatUndeclaredVariable: aToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeEmphasizer</class-id> <category>emphasis</category><body package="RBCodeHighlighting" selector="emphasizeFrom:to:with:">emphasizeFrom: startInteger to: stopInteger with: aValue 	parser emphasizeFrom: startInteger to: stopInteger with: aValue</body><body package="RBCodeHighlighting" selector="emphasizeToken:with:">emphasizeToken: aToken with: aValue 	self emphasizeFrom: aToken startPosition to: aToken stopPosition with: aValue</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeEmphasizer</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="order">order	^order ifNil: [order := self defaultOrder]</body><body package="RBCodeHighlighting" selector="order:">order: anObject	order := anObject</body><body package="RBCodeHighlighting" selector="parser">parser	^parser</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeEmphasizer</class-id> <category>private</category><body package="RBCodeHighlighting" selector="setParser:">setParser: aParser	parser := aParser</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeEmphasizer</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="initialize">initialize	"Initialize the receiver."</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeEmphasizer</class-id> <category>defaults</category><body package="RBCodeHighlighting" selector="defaultOrder">defaultOrder	"Answer the default order for the receiver's class."	^100</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeEmphasizer</class-id> <category>comparing</category><body package="RBCodeHighlighting" selector="&lt;">&lt; anEmphasizer	"Order the receiver and the argument."	^self order &lt; anEmphasizer order</body><body package="RBCodeHighlighting" selector="&lt;=">&lt;= anEmphasizer	"Order the receiver and the argument."	^self order &lt;= anEmphasizer order</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeEmphasizer class</class-id> <category>instance creation</category><body package="RBCodeHighlighting" selector="new">new	"Answer a new instance of the receiver."	self shouldNotImplement</body><body package="RBCodeHighlighting" selector="on:">on: aParser	"Answer a new instance of the receiver."	^super new initialize		setParser: aParser;		yourself</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="binary_symbolId">binary_symbolId	^26</body><body package="RBCodeHighlighting" selector="emptySymbolTokenId">emptySymbolTokenId	^66</body><body package="RBCodeHighlighting" selector="errorTokenId">errorTokenId	^67</body><body package="RBCodeHighlighting" selector="nameId">nameId	^20</body><body package="RBCodeHighlighting" selector="negative_numberId">negative_numberId	^22</body><body package="RBCodeHighlighting" selector="numberId">numberId	^21</body><body package="RBCodeHighlighting" selector="smalltalkCommentId">smalltalkCommentId	^28</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="negative_number">negative_number	stream skip: -2.	self scanNumber: self negative_numberId</body><body package="RBCodeHighlighting" selector="number">number	stream skip: -1.	self scanNumber: self numberId</body><body package="RBCodeHighlighting" selector="scanNumber:">scanNumber: id 	| token endPosition scannedId |	scannedId := [		Number readFrom: stream.		id	] on: Error do: [ : ex |		self errorTokenId	].	endPosition := stream position.	stream position: start.	outputStream reset.	token := SmaCCToken 				value: (stream next: endPosition - start)				start: start+1				id: (Array with: scannedId).	matchActions := nil.	returnMatchBlock value: token</body><body package="RBCodeHighlighting" selector="variable_assignment">variable_assignment	| token |	outputStream skip: -2.	stream skip: -2.	token := SmaCCToken 				value: outputStream contents				start: start+1				id: (Array with: self nameId).	outputStream reset.	matchActions := nil.	returnMatchBlock value: token</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan1">scan1		self recordMatch: #(23).	self step.	currentCharacter == $' ifTrue: [^self scan2].	^self reportLastMatch</body><body package="RBCodeHighlighting" selector="scan2">scan2		[self step.	currentCharacter ~~ $'] whileTrue.	^self scan1</body><body package="RBCodeHighlighting" selector="scan3">scan3		self recordMatch: #(24).	self step.	(currentCharacter isLetter or: [currentCharacter == $_])		ifTrue: [^self scan4].	currentCharacter == $=		ifTrue: [^self recordAndReportMatch: #variable_assignment].	^self reportLastMatch</body><body package="RBCodeHighlighting" selector="scan4">scan4		[self step.	currentCharacter isLetter		or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]]		whileTrue.	currentCharacter == $:		ifTrue:			[self recordMatch: #(25).			self step.			(currentCharacter isLetter or: [currentCharacter == $_])				ifTrue: [^self scan4]].	^self reportLastMatch</body><body package="RBCodeHighlighting" selector="scan5">scan5		self step.	(currentCharacter isLetter or: [currentCharacter == $_])		ifTrue:			[[self recordMatch: #(29).			self step.			currentCharacter isLetter				or:					[(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]]				whileTrue.			currentCharacter == $. ifTrue: [^self scan5]].	^self reportLastMatch</body><body package="RBCodeHighlighting" selector="scanForToken">scanForToken		self step.	(currentCharacter isLetter or: [currentCharacter == $_])		ifTrue:			[self recordMatch: #(20 32).			self step.			(currentCharacter isLetter				or:					[(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]])				ifTrue:					[[self recordMatch: #(20).					self step.					currentCharacter isLetter						or:							[(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]]						whileTrue].			currentCharacter == $. ifTrue: [^self scan5].			currentCharacter == $: ifTrue: [^self scan3].			^self reportLastMatch].	(currentCharacter &lt;= Character backspace		or:			[(currentCharacter				between: (Character value: 14)				and: (Character value: 31))				or:					[currentCharacter == $`						or:							[(currentCharacter								between: Character del								and: $Â¿) or: [currentCharacter == $Ã or: [currentCharacter == $Ã·]]]]])		ifTrue: [^self recordAndReportMatch: #(32)].	(currentCharacter == $!		or:			[(currentCharacter between: $% and: $&amp;)				or:					[(currentCharacter between: $* and: $,)						or:							[currentCharacter == $/								or:									[currentCharacter == $=										or:											[(currentCharacter between: $? and: $@)												or: [currentCharacter == $\ or: [currentCharacter == $~]]]]]]])		ifTrue:			[self recordMatch: #(26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue].			^self reportLastMatch].	currentCharacter isDigit ifTrue: [^self recordAndReportMatch: #number].	(currentCharacter isBlank		or:			[currentCharacter				between: Character lf				and: Character cr])		ifTrue:			[self recordMatch: #whitespace.			self step.			(currentCharacter isBlank				or:					[currentCharacter						between: Character lf						and: Character cr])				ifTrue:					[[self recordMatch: #whitespace.					self step.					currentCharacter isBlank						or:							[currentCharacter								between: Character lf								and: Character cr]] whileTrue].			^self reportLastMatch].	currentCharacter == $"		ifTrue:			[self recordMatch: #(32).			self step.			currentCharacter ~~ $"				ifTrue:					[[self step.					currentCharacter ~~ $"] whileTrue].			currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(28)].			^self reportLastMatch].	currentCharacter == $# ifTrue: [^self recordAndReportMatch: #(6 32)].	currentCharacter == $$		ifTrue:			[self recordMatch: #(32).			self step.			^self recordAndReportMatch: #(30)].	currentCharacter == $'		ifTrue:			[self recordMatch: #(32).			self step.			currentCharacter ~~ $' ifTrue: [^self scan2].			currentCharacter == $' ifTrue: [^self scan1].			^self reportLastMatch].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(7 32)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(10 32)].	currentCharacter == $-		ifTrue:			[self recordMatch: #(26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue.					^self reportLastMatch].			currentCharacter isDigit				ifTrue: [^self recordAndReportMatch: #negative_number].			^self reportLastMatch].	currentCharacter == $. ifTrue: [^self recordAndReportMatch: #(2 32)].	currentCharacter == $:		ifTrue:			[self recordMatch: #(19 32).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(15)].			^self reportLastMatch].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(3 32)].	currentCharacter == $&lt;		ifTrue:			[self recordMatch: #(9 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue].			^self reportLastMatch].	currentCharacter == $&gt;		ifTrue:			[self recordMatch: #(8 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue].			^self reportLastMatch].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(17 32)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(18 32)].	currentCharacter == $^ ifTrue: [^self recordAndReportMatch: #(16 32)].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(5 32)].	currentCharacter == $|		ifTrue:			[self recordMatch: #(1 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(4 32)].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>initialization</category><body package="RBCodeHighlighting" selector="initialize">initialize	"We need this because otherwise our initialization won't get run"	super initialize.</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>generated-initialization</category><body package="RBCodeHighlighting" selector="initializeKeywordMap">initializeKeywordMap		keywordMap := Dictionary new.	#(#(20 'false' 13) #(20 'nil' 14) #(20 'true' 12) #(26 '||' 11))		do:			[:each | 			(keywordMap				at: each first				ifAbsentPut: [Dictionary new])				at: (each at: 2)				put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>generated-comments</category><body package="RBCodeHighlighting" selector="scannerDefinitionComment">scannerDefinitionComment	"&lt;name&gt;	:	[a-zA-Z_ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿] [\wÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿]*	;&lt;number&gt;:	[0-9]	;&lt;negative_number&gt;	:	\- &lt;number&gt;	;&lt;string&gt;	:	\'  [^\']* \' (\' [^\']* \')*	;&lt;keyword&gt;	:	&lt;name&gt; \:	;&lt;multikeyword&gt;	:	&lt;name&gt; \: (&lt;name&gt; \: )+	;&lt;binary_symbol&gt;	:  [\~\-\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,]+	;	&lt;whitespace&gt;	:	\s+	;&lt;smalltalkComment&gt;	:	\"" [^\""]* \""	;&lt;dotted_name&gt;	:	&lt;name&gt; (\. &lt;name&gt;)+	;&lt;character&gt;	:	\$ .	;&lt;variable_assignment&gt; : &lt;name&gt; \: \=	;&lt;any_char&gt; : . ; # For VW literal arrays that handle #(;) -&gt; #(#';')"</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="binary_symbolId">binary_symbolId	^26</body><body package="RBCodeHighlighting" selector="emptySymbolTokenId">emptySymbolTokenId	^75</body><body package="RBCodeHighlighting" selector="errorTokenId">errorTokenId	^76</body><body package="RBCodeHighlighting" selector="nameId">nameId	^20</body><body package="RBCodeHighlighting" selector="negative_numberId">negative_numberId	^22</body><body package="RBCodeHighlighting" selector="numberId">numberId	^21</body><body package="RBCodeHighlighting" selector="smalltalkCommentId">smalltalkCommentId	^28</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan1">scan1		self recordMatch: #(23).	self step.	currentCharacter == $' ifTrue: [^self scan2].	^self reportLastMatch</body><body package="RBCodeHighlighting" selector="scan2">scan2		[self step.	currentCharacter ~~ $'] whileTrue.	^self scan1</body><body package="RBCodeHighlighting" selector="scan3">scan3		self recordMatch: #(24).	self step.	(currentCharacter isLetter or: [currentCharacter == $_])		ifTrue: [^self scan4].	currentCharacter == $=		ifTrue: [^self recordAndReportMatch: #variable_assignment].	^self reportLastMatch</body><body package="RBCodeHighlighting" selector="scan4">scan4		[self step.	currentCharacter isLetter		or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]]		whileTrue.	currentCharacter == $:		ifTrue:			[self recordMatch: #(25).			self step.			(currentCharacter isLetter or: [currentCharacter == $_])				ifTrue: [^self scan4]].	^self reportLastMatch</body><body package="RBCodeHighlighting" selector="scan5">scan5		self step.	(currentCharacter isLetter or: [currentCharacter == $_])		ifTrue:			[[self recordMatch: #(29).			self step.			currentCharacter isLetter				or:					[(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]]				whileTrue.			currentCharacter == $. ifTrue: [^self scan5]].	^self reportLastMatch</body><body package="RBCodeHighlighting" selector="scanForToken">scanForToken		self step.	(currentCharacter isLetter or: [currentCharacter == $_])		ifTrue:			[self recordMatch: #(20 32).			self step.			(currentCharacter isLetter				or:					[(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]])				ifTrue:					[[self recordMatch: #(20).					self step.					currentCharacter isLetter						or:							[(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]]						whileTrue].			currentCharacter == $. ifTrue: [^self scan5].			currentCharacter == $: ifTrue: [^self scan3].			^self reportLastMatch].	(currentCharacter &lt;= Character backspace		or:			[(currentCharacter				between: (Character value: 14)				and: (Character value: 31))				or:					[currentCharacter == $`						or:							[(currentCharacter								between: Character del								and: $Â¿) or: [currentCharacter == $Ã or: [currentCharacter == $Ã·]]]]])		ifTrue: [^self recordAndReportMatch: #(32)].	(currentCharacter == $!		or:			[(currentCharacter between: $% and: $&amp;)				or:					[(currentCharacter between: $* and: $,)						or:							[currentCharacter == $/								or:									[currentCharacter == $=										or:											[(currentCharacter between: $? and: $@)												or: [currentCharacter == $\ or: [currentCharacter == $~]]]]]]])		ifTrue:			[self recordMatch: #(26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue].			^self reportLastMatch].	currentCharacter isDigit ifTrue: [^self recordAndReportMatch: #number].	(currentCharacter isBlank		or:			[currentCharacter				between: Character lf				and: Character cr])		ifTrue:			[self recordMatch: #whitespace.			self step.			(currentCharacter isBlank				or:					[currentCharacter						between: Character lf						and: Character cr])				ifTrue:					[[self recordMatch: #whitespace.					self step.					currentCharacter isBlank						or:							[currentCharacter								between: Character lf								and: Character cr]] whileTrue].			^self reportLastMatch].	currentCharacter == $"		ifTrue:			[self recordMatch: #(32).			self step.			currentCharacter ~~ $"				ifTrue:					[[self step.					currentCharacter ~~ $"] whileTrue].			currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(28)].			^self reportLastMatch].	currentCharacter == $# ifTrue: [^self recordAndReportMatch: #(13 32)].	currentCharacter == $$		ifTrue:			[self recordMatch: #(32).			self step.			^self recordAndReportMatch: #(30)].	currentCharacter == $'		ifTrue:			[self recordMatch: #(32).			self step.			currentCharacter ~~ $' ifTrue: [^self scan2].			currentCharacter == $' ifTrue: [^self scan1].			^self reportLastMatch].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(18 32)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(17 32)].	currentCharacter == $-		ifTrue:			[self recordMatch: #(26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue.					^self reportLastMatch].			currentCharacter isDigit				ifTrue: [^self recordAndReportMatch: #negative_number].			^self reportLastMatch].	currentCharacter == $. ifTrue: [^self recordAndReportMatch: #(5 32)].	currentCharacter == $:		ifTrue:			[self recordMatch: #(1 32).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(11)].			^self reportLastMatch].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(16 32)].	currentCharacter == $&lt;		ifTrue:			[self recordMatch: #(9 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue].			^self reportLastMatch].	currentCharacter == $&gt;		ifTrue:			[self recordMatch: #(8 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue].			^self reportLastMatch].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(2 32)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(3 32)].	currentCharacter == $^ ifTrue: [^self recordAndReportMatch: #(4 32)].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(14 32)].	currentCharacter == $|		ifTrue:			[self recordMatch: #(7 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $-)								or:									[currentCharacter == $/										or:											[(currentCharacter between: $&lt; and: $@)												or:													[currentCharacter == $\														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]])				ifTrue:					[[self recordMatch: #(26).					self step.					currentCharacter == $!						or:							[(currentCharacter between: $% and: $&amp;)								or:									[(currentCharacter between: $* and: $-)										or:											[currentCharacter == $/												or:													[(currentCharacter between: $&lt; and: $@)														or:															[currentCharacter == $\																or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]]						whileTrue].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(6 32)].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingScanner class</class-id> <category>generated-comments</category><body package="RBCodeHighlighting" selector="scannerDefinitionComment">scannerDefinitionComment	"&lt;name&gt;				:	[a-zA-Z_ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿] [\wÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿]*	;&lt;number&gt;				:	[0-9]	;&lt;negative_number&gt;		:	\- &lt;number&gt;	;&lt;string&gt;				:	\'  [^\']* \' (\' [^\']* \')*	;&lt;keyword&gt;				:	&lt;name&gt; \:	;&lt;multikeyword&gt;			:	&lt;name&gt; \: (&lt;name&gt; \: )+	;&lt;binary_symbol&gt;		:	[\~\-\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,]+	;&lt;whitespace&gt;			:	\s+	;&lt;smalltalkComment&gt;	:	\"" [^\""]* \""	;&lt;dotted_name&gt;			:	&lt;name&gt; (\. &lt;name&gt;)+	;&lt;character&gt;				:	\$ .	;&lt;variable_assignment&gt;	:	&lt;name&gt; \: \=	;&lt;any_char&gt;				:	.	;			# For VW literal arrays that handle #(;) -&gt; #(#';')"</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingScanner class</class-id> <category>initialization</category><body package="RBCodeHighlighting" selector="initialize">initialize	"We need this because otherwise our initialization won't get run"	super initialize.</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingScanner class</class-id> <category>generated-initialization</category><body package="RBCodeHighlighting" selector="initializeKeywordMap">initializeKeywordMap		keywordMap := Dictionary new.	#(#(20 'false' 15) #(20 'nil' 12) #(20 'true' 19) #(26 '||' 10))		do:			[:each | 			(keywordMap				at: each first				ifAbsentPut: [Dictionary new])				at: (each at: 2)				put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.CodeHighlighter.CascadeElement</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="marker">marker	^marker</body><body package="RBCodeHighlighting" selector="marker:">marker: anObject	marker := anObject</body><body package="RBCodeHighlighting" selector="send">send	^send</body><body package="RBCodeHighlighting" selector="send:">send: anObject	send := anObject</body><body package="RBCodeHighlighting" selector="type">type	^type</body><body package="RBCodeHighlighting" selector="type:">type: anObject	type := anObject</body></methods><methods><class-id>Refactory.CodeHighlighter.CascadeElement class</class-id> <category>instance creation</category><body package="RBCodeHighlighting" selector="type:send:marker:">type: aSymbol send: aCollection marker: aToken	^self new		type: aSymbol;		send: aCollection;		marker: aToken;		yourself</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlighter</class-id> <category>defaults</category><body package="RBCodeHighlighting" selector="defaultActivation">defaultActivation	"Answer the default activation value."	self forSource</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlighter</class-id> <category>highlighting</category><body package="RBCodeHighlighting" selector="highlight:">highlight: aText	"Tool must check activation in order to remove highlighting."	controller text size &lt; Refactory.Browser.BrowserTextTool.ParserTextLimit 		ifFalse: [^aText].	^super highlight: aText</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlighter</class-id> <category>configuring</category><body package="RBCodeHighlighting" selector="forDebugger">forDebugger	"Answer whether the receiver is active for comments."	active := [CodeHighlighter isHighlighting and: [CodeHighlighter highlightDebuggers]]</body><body package="RBCodeHighlighting" selector="forSource">forSource	"Answer whether the receiver is active for comments."	active := [CodeHighlighter isHighlighting]</body><body package="RBCodeHighlighting" selector="forWorkspace">forWorkspace	"Answer whether the receiver is active for comments."	active := [CodeHighlighter isHighlighting and: [tool isStylingSmalltalkCode]]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlighter class</class-id> <category>installation</category><body package="RBCodeHighlighting" selector="convertBrowsers">convertBrowsers	BrowserCodeTool allGeneralInstances do: [:each | each addCodeHighlighter].	BrowserDefinitionTool allGeneralInstances do: [:each | each addCodeHighlighter].</body><body package="RBCodeHighlighting" selector="convertDebuggers">convertDebuggers	DebuggerClient allInstances do: [:each | each addCodeHighlighter]</body><body package="RBCodeHighlighting" selector="convertInspectors">convertInspectors	Tools.Trippy.BehaviorInspector allInstances do: [:each | each addCodeHighlighter]</body><body package="RBCodeHighlighting" selector="convertSettings">convertSettings	UI.StylesheetSettingsPage allGeneralInstances do: [:each | each addCodeHighlighter].</body><body package="RBCodeHighlighting" selector="convertWorkspaces">convertWorkspaces	Workbook allInstances do: [:each | each isStylingSmalltalkCode ifTrue: [each currentPage addCodeHighlighter]].	Workspace allInstances do: [:each | each isStylingSmalltalkCode ifTrue: [each currentPage addCodeHighlighter]]</body><body package="RBCodeHighlighting" selector="updateStyleDescriptions">updateStyleDescriptions	"StyleDescription is re-installed because we override the default style sheet.	 This forces the styles to be reloaded with appropriate color versions for the	 code formatting.  We only do this if no style has explicit emphasis so as to	 not wipe out custom user style settings."	(StyleDescription styles anySatisfy: [:style | style hasEmphasis])		ifFalse: [StyleDescription install]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlighter class</class-id> <category>startup</category><body package="RBCodeHighlighting" selector="startup">startup	"The receiver is being activated.  Apply instances of the receiver to all	 appropriate places."	self convertSettings.	self convertBrowsers.	self convertDebuggers.	self convertInspectors.	self convertWorkspaces.	StyleDescription styles:		(StyleDescription mergeStyles:			(StyleDescription decodeStyles: StyleDescription defaultStyles)).		"StyleDescription is reloaded because we override the default style sheet.		 This forces the styles to be reinitialized with appropriate color versions for		 code formatting.  Unfortunately, there is no way to be selective yet, so we		 always wipe out custom user style settings, if any."</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlighter class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="distinguishAnnotations">distinguishAnnotations	DistinguishAnnotations ifNil: [#{DistinguishAnnotations} binding reinitializeValue].	^DistinguishAnnotations</body><body package="RBCodeHighlighting" selector="distinguishAnnotations:">distinguishAnnotations: anObject	DistinguishAnnotations := anObject</body><body package="RBCodeHighlighting" selector="highlightDebuggers">highlightDebuggers	HighlightDebugger ifNil: [#{HighlightDebugger} binding reinitializeValue].	^HighlightDebugger</body><body package="RBCodeHighlighting" selector="highlightDebuggers:">highlightDebuggers: anObject	HighlightDebugger := anObject</body><body package="RBCodeHighlighting" selector="literalElements">literalElements	DistinguishElements ifNil: [#{DistinguishElements} binding reinitializeValue].	^DistinguishElements</body><body package="RBCodeHighlighting" selector="literalElements:">literalElements: anObject	DistinguishElements := anObject</body><body package="RBCodeHighlighting" selector="markUpLanguage">markUpLanguage	MarkUpLanguage ifNil: [#{MarkUpLanguage} binding reinitializeValue].	^MarkUpLanguage</body><body package="RBCodeHighlighting" selector="markUpLanguage:">markUpLanguage: anObject	MarkUpLanguage := anObject</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlighter class</class-id> <category>defaults</category><body package="RBCodeHighlighting" selector="defaultOrder">defaultOrder	"Answer the default order for the receiver's class."	^200</body></methods><methods><class-id>Refactory.CodeHighlighter.SpellingCodeEmphasizer</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatComment:">formatComment: aToken 	parser spellCheckToken: aToken</body><body package="RBCodeHighlighting" selector="formatKeywordMethod:">formatKeywordMethod: selectorTokens	selectorTokens do: [:selectorToken | parser spellCheckToken: selectorToken]</body><body package="RBCodeHighlighting" selector="formatString:">formatString: aToken 	parser spellCheckToken: aToken</body><body package="RBCodeHighlighting" selector="formatUnaryMethod:">formatUnaryMethod: selectorToken 	parser spellCheckToken: selectorToken</body></methods><methods><class-id>Refactory.CodeHighlighter.SpellingCodeEmphasizer</class-id> <category>defaults</category><body package="RBCodeHighlighting" selector="defaultOrder">defaultOrder	"Answer the default order for the receiver's class."	^#{UI.SpellingHighlighter}		ifDefinedDo: [:shc | shc defaultOrder]		elseDo: [super defaultOrder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="actionForCurrentToken">actionForCurrentToken	| ids action |		"Format comments, which are white-space tokens dropped from		 the rest of the parsing stream.  Remember the comment tokens		 so that, if we reduce a message pattern, the first such comment		 after the pattern can be formatted as the method comment."	currentToken id first = scanner smalltalkCommentId		ifTrue:			[lastComment := OrderedCollection new.			[currentToken id first = scanner smalltalkCommentId]				whileTrue: 					[lastComment add: currentToken.					self formatComment: currentToken.					currentToken := nil.					self getNextToken]].		"Process action for the current token."	ids := currentToken id.	1 to: ids size		do: 			[:i | 			action := self actionFor: (ids at: i).			(action bitAnd: 2r11) = 3 ifFalse: [^action].			(ids at: i) = scanner negative_numberId 				ifTrue: 					[currentToken := SmaCCToken 								value: '-'								start: currentToken startPosition								id: (Array with: scanner binary_symbolId).					scanner position: currentToken stopPosition - 1.					^self actionForCurrentToken]].	^3</body><body package="RBCodeHighlighting" selector="dismissErrorToken">dismissErrorToken	| oldToken |	oldToken := currentToken.	super dismissErrorToken.	self isEOFToken 		ifTrue: [self formatSyntaxErrorFrom: oldToken stopPosition + 1 to: text size]		ifFalse: 			[self formatSyntaxErrorFrom: oldToken stopPosition + 1				to: currentToken stopPosition]</body><body package="RBCodeHighlighting" selector="errorHandlerStates">errorHandlerStates	| states |	states := super errorHandlerStates.	self patchErrorHandlerStates: states.	^states</body><body package="RBCodeHighlighting" selector="findErrorHandlerIfNoneUseErrorNumber:">findErrorHandlerIfNoneUseErrorNumber: anInteger 	| startingToken |	startingToken := currentToken.	super findErrorHandlerIfNoneUseErrorNumber: anInteger.	self formatSyntaxErrorFrom: startingToken startPosition		to: currentToken stopPosition</body><body package="RBCodeHighlighting" selector="handleError:">handleError: anInteger 	self isEOFToken 		ifTrue: 			[string size = 0 				ifFalse: [self formatSyntaxErrorFrom: string size to: string size]]		ifFalse: 			[self formatSyntaxError.			self hasErrorHandler 				ifFalse: 					[self formatSyntaxErrorFrom: currentToken startPosition to: string size]].	^super handleError: anInteger</body><body package="RBCodeHighlighting" selector="patchErrorHandlerStates:">patchErrorHandlerStates: stateCollection 	"Hack -- remove the top level error handler if multiple ones exist"	| errorHandlersCount |	errorHandlersCount := stateCollection inject: 0				into: [:sum :each | sum + (each min: 1)].	errorHandlersCount &gt; 1 		ifTrue: 			[stateCollection at: ((1 to: stateCollection size) 						detect: [:each | (stateCollection at: each) ~~ 0])				put: 0]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespace">namespace	^namespace</body><body package="RBCodeHighlighting" selector="namespace:">namespace: aNamespace	namespace := aNamespace</body><body package="RBCodeHighlighting" selector="text">text	^text</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>variables</category><body package="RBCodeHighlighting" selector="addArgument:">addArgument: aString 	"the guard is here because temps can be empty when we hit the error production of 'KeywordMethodName'.	For example when formatting the following method source: 'foo bar: baz'"	variables outer notNil ifTrue: [variables arguments add: aString]</body><body package="RBCodeHighlighting" selector="addNewScope">addNewScope	| id |	counter := (id := counter) + 1.	(variables := variables isNil					ifTrue: [BlockVariables new]					ifFalse: [BlockVariables outer: variables]) id: id</body><body package="RBCodeHighlighting" selector="addTemporary:">addTemporary: aString 	"the guard is here because temps can be empty when we hit the error production of 'KeywordMethodName'.	For example when formatting the following method source: 'foo bar: baz'"	variables outer notNil ifTrue: [variables temporaries add: aString]</body><body package="RBCodeHighlighting" selector="removeScope">removeScope	variables := variables ifNotNil: [(lastBlock := variables) outer]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-formatting</category><body package="RBCodeHighlighting" selector="checkThisContext">checkThisContext	"Answer whether the receiver supports 'thisContext'."	^true</body><body package="RBCodeHighlighting" selector="defaultNameSpace">defaultNameSpace	"Answer the default name space to use for resolving symbols."	^Smalltalk</body><body package="RBCodeHighlighting" selector="emphasizeFrom:to:with:">emphasizeFrom: startInteger to: stopInteger with: aValue 	text string = string 		ifTrue: 			[text 				addEmphasis: aValue asEmphasisArray				removeEmphasis: nil "(StyleDescription stylesToRemove asEmphasisWithout: aValue)"				allowDuplicates: false				from: startInteger				to: stopInteger]</body><body package="RBCodeHighlighting" selector="findNamespaceFor:">findNamespaceFor: aBindingReference	| isAbsolute pathString home |	pathString := aBindingReference asString.	isAbsolute := (pathString includes: $.) and: [pathString first ~~ $_].	home := isAbsolute 		ifTrue: [self defaultNameSpace]		ifFalse: [namespace isNil 			ifTrue: [class isNil ifTrue: [self defaultNameSpace] ifFalse: [class environment]]			ifFalse: [namespace]].	aBindingReference		class: (isAbsolute ifTrue: [nil] ifFalse: [class])		home: home.</body><body package="RBCodeHighlighting" selector="formattersDo:">formattersDo: aBlock	"Iterate over the receiver's formatters invoking the block for each."	^formatters do: aBlock</body><body package="RBCodeHighlighting" selector="hyperlinkToken:delimited:">hyperlinkToken: aToken delimited: skipEnds	"Perform special hyperlink marking of the argument token.  Should only be called	 by hyperlink emphasizer which should only be run if hyperlinking is enabled."	text string = string		ifTrue:			[| bias |			bias := skipEnds ifTrue: [1] ifFalse: [0].			text styleEmbeddedHttpsFrom: aToken startPosition + bias to: aToken stopPosition - bias]</body><body package="RBCodeHighlighting" selector="literalFormatDo:">literalFormatDo: aBlock	(literalArray = 0 or: [CodeHighlighter literalElements]) ifTrue: [aBlock value]</body><body package="RBCodeHighlighting" selector="pathStringFor:">pathStringFor: aToken	"Answer the path string for the argument, used when resolving globals."	^aToken value</body><body package="RBCodeHighlighting" selector="spellCheckToken:">spellCheckToken: aToken	"Perform special spell checking of the argument token.  Should only be called	 by spelling emphasizer which should only be run if spellchecker is enabled."	text string = string		ifTrue: [text checkSpellingFrom: aToken startPosition to: aToken stopPosition]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="class:">class: aClass	class := aClass.	variables arguments addAll: aClass allInstVarNames</body><body package="RBCodeHighlighting" selector="initialize">initialize	super initialize.	counter := 0.	self addNewScope.	lastComment := #().	formatters := SortedCollection new.	parenDepth := blockDepth := literalArray := 0.	(Pragma allNamed: #emphasizer from: self class to: CodeHighlightingParser) do:		[:pragma |		(self perform: pragma selector)			ifNotNil: [:emphasizer | formatters add: emphasizer]]</body><body package="RBCodeHighlighting" selector="text:">text: aText 	text := aText.	string := text string copy.	text addEmphasis: #() removeEmphasis: StyleDescription stylesToRemove allowDuplicates: false</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatArrayHash:leftDelimiter:rightDelimiter:">formatArrayHash: hashToken leftDelimiter: leftDelimiterToken rightDelimiter: rightDelimiterToken 	self formattersDo: [:f | f formatArrayHash: hashToken leftDelimiter: leftDelimiterToken rightDelimiter: rightDelimiterToken].	literalArray := literalArray - 1 max: 0.	^self arrayClass</body><body package="RBCodeHighlighting" selector="formatAssignedVariable:">formatAssignedVariable: variableToken 	self formattersDo: [:f | f formatAssignedVariable: variableToken].	self formatVariableReference: variableToken.	^nil</body><body package="RBCodeHighlighting" selector="formatAssignment:">formatAssignment: aToken	self formattersDo: [:f | f formatAssignment: aToken].	^nil</body><body package="RBCodeHighlighting" selector="formatBinaryMessage:to:">formatBinaryMessage: anOrderedCollection to: aClass	self formattersDo: [:f | f formatBinaryMessage: anOrderedCollection to: aClass].	^nil</body><body package="RBCodeHighlighting" selector="formatBinaryMethod:with:">formatBinaryMethod: selectorToken with: variableToken	self formattersDo:		[:f |		f formatBinaryMethod: selectorToken with: variableToken.		lastComment notEmpty ifTrue: [f formatMethodComment: lastComment first]].	self formatMethodArgument: variableToken.	^nil</body><body package="RBCodeHighlighting" selector="formatBlockArgumentSeparator:">formatBlockArgumentSeparator: variableToken	self formattersDo: [:f | f formatBlockArgumentSeparator: variableToken].	^nil</body><body package="RBCodeHighlighting" selector="formatBlockLeftBracket:argumentsSeparator:rightBracket:">formatBlockLeftBracket: leftBracketToken argumentsSeparator: separatorToken rightBracket: rightBracketToken	| style |	style := 		(#(			#code_bracket1			#code_bracket2			#code_bracket3			#code_bracket4			#code_bracket5			#code_bracket6			#code_bracket7			#code_bracket8			#code_bracket9		) at: ((blockDepth min: 9) max: 1)).	self formattersDo: [:f | f formatBlockLeftBracket: leftBracketToken argumentsSeparator: separatorToken rightBracket: rightBracketToken with: style].	blockDepth := blockDepth - 1 max: 0.	^self blockClass</body><body package="RBCodeHighlighting" selector="formatBlockVariable:colon:">formatBlockVariable: variableToken colon: colonToken	| style |	style := variables argumentType: variableToken value.	self formattersDo: [:f | f formatBlockVariable: variableToken colon: colonToken with: style].	self addArgument: variableToken value.	^nil</body><body package="RBCodeHighlighting" selector="formatByteArrayHash:leftBracket:rightBracket:">formatByteArrayHash: hashToken leftBracket: leftBracketToken rightBracket: rightBracketToken 	self literalFormatDo:		[self formattersDo: [:f | f formatByteArrayHash: hashToken leftBracket: leftBracketToken rightBracket: rightBracketToken]].	^self byteArrayClass</body><body package="RBCodeHighlighting" selector="formatCascadeList:to:">formatCascadeList: aCollection to: aClass	aCollection do:		[:cascade |		self formattersDo: [:f | f formatCascade: cascade marker].		cascade type == #unary			ifTrue: [self formatUnaryMessage: cascade send to: aClass]			ifFalse:				[cascade type == #binary					ifTrue: [self formatBinaryMessage: cascade send to: aClass]					ifFalse: [self formatKeywordMessage: cascade send to: aClass]]].	^nil</body><body package="RBCodeHighlighting" selector="formatCharacter:">formatCharacter: aToken 	self literalFormatDo: [self formattersDo: [:f | f formatCharacter: aToken]].	^self characterClass</body><body package="RBCodeHighlighting" selector="formatComment:">formatComment: aToken 	self formattersDo: [:f | f formatComment: aToken].	^nil</body><body package="RBCodeHighlighting" selector="formatExpressionLeftParenthesis:rightParenthesis:">formatExpressionLeftParenthesis: leftParenthesisToken rightParenthesis: rightParenthesisToken	| style |	style := 		(#(			#code_parenthesis1			#code_parenthesis2			#code_parenthesis3			#code_parenthesis4			#code_parenthesis5			#code_parenthesis6			#code_parenthesis7			#code_parenthesis8			#code_parenthesis9		) at: (parenDepth min: 9)).	self formattersDo: [:f | f formatExpressionLeftParenthesis: leftParenthesisToken rightParenthesis: rightParenthesisToken with: style].	parenDepth := parenDepth - 1 max: 0.	^nil</body><body package="RBCodeHighlighting" selector="formatFalse:">formatFalse: aToken	self literalFormatDo: [self formattersDo: [:f | f formatFalse: aToken]].	^self falseClass</body><body package="RBCodeHighlighting" selector="formatKeyword:with:">formatKeyword: selectorToken with: variableToken	self formattersDo:		[:f |		f formatKeyword: selectorToken with: variableToken.		lastComment notEmpty ifTrue: [f formatMethodComment: lastComment first]].	self formatMethodArgument: variableToken.	^nil</body><body package="RBCodeHighlighting" selector="formatKeywordMessage:to:">formatKeywordMessage: anOrderedCollection to: aClass	self formattersDo: [:f | f formatKeywordMessage: anOrderedCollection to: aClass].	^nil</body><body package="RBCodeHighlighting" selector="formatKeywordMethod:">formatKeywordMethod: methodItems	| arguments keywords |	arguments := methodItems last.	keywords := methodItems first.	self formattersDo:		[:f |		f formatKeywordMethod: keywords.		lastComment notEmpty ifTrue: [f formatMethodComment: lastComment first]].	arguments do: [:variableToken | self formatMethodArgument: variableToken].	^nil</body><body package="RBCodeHighlighting" selector="formatMethodArgument:">formatMethodArgument: variableToken	| style |	style := variables argumentType: variableToken value.	self formattersDo: [:f | f formatMethodArgument: variableToken with: style].	self addArgument: variableToken value.	^nil</body><body package="RBCodeHighlighting" selector="formatMethodComment:">formatMethodComment: aToken	self formattersDo: [:f | f formatMethodComment: aToken].	^nil</body><body package="RBCodeHighlighting" selector="formatNil:">formatNil: aToken 	self literalFormatDo: [self formattersDo: [:f | f formatNil: aToken]].	^self nilClass</body><body package="RBCodeHighlighting" selector="formatNumber:">formatNumber: aToken 	self literalFormatDo: [self formattersDo: [:f | f formatNumber: aToken]].	^aToken value asNumber class</body><body package="RBCodeHighlighting" selector="formatPeriod:">formatPeriod: aToken	self formattersDo: [:f | f formatPeriod: aToken].	^nil</body><body package="RBCodeHighlighting" selector="formatPrimitiveFrom:to:">formatPrimitiveFrom: startToken to: stopToken	self formattersDo: [:f | f formatPrimitiveFrom: startToken to: stopToken].	^nil</body><body package="RBCodeHighlighting" selector="formatPrimitiveLeftBracket:selector:rightBracket:">formatPrimitiveLeftBracket: leftBracketToken selector: anOrderdedCollection rightBracket: rightBracketToken	self formattersDo: [:f | f formatPrimitiveLeftBracket: leftBracketToken selector: anOrderdedCollection rightBracket: rightBracketToken].	^nil</body><body package="RBCodeHighlighting" selector="formatQualifiedReferenceHash:leftBrace:rightBrace:">formatQualifiedReferenceHash: hashToken leftBrace: leftBraceToken rightBrace: rightBraceToken	self literalFormatDo:		[self formattersDo: [:f | f formatQualifiedReferenceHash: hashToken leftBrace: leftBraceToken rightBrace: rightBraceToken]].	^self referenceClass</body><body package="RBCodeHighlighting" selector="formatReturn:">formatReturn: aToken	self formattersDo: [:f | f formatReturn: aToken].	^nil</body><body package="RBCodeHighlighting" selector="formatString:">formatString: aToken 	self literalFormatDo: [self formattersDo: [:f | f formatString: aToken]].	^self stringClass</body><body package="RBCodeHighlighting" selector="formatSymbol:hash:">formatSymbol: aToken hash: hashToken	self literalFormatDo:		[self formattersDo: [:f | f formatSymbol: aToken hash: hashToken]].	^self symbolClass</body><body package="RBCodeHighlighting" selector="formatSyntaxError">formatSyntaxError	self formatSyntaxErrorFrom: currentToken startPosition to: currentToken stopPosition.	^nil</body><body package="RBCodeHighlighting" selector="formatSyntaxErrorFrom:to:">formatSyntaxErrorFrom: startInteger to: stopInteger	self formattersDo: [:f | f formatSyntaxErrorFrom: startInteger to: stopInteger].	^nil</body><body package="RBCodeHighlighting" selector="formatTemporaryVariable:">formatTemporaryVariable: variableToken	| style |	style := variables temporaryType: variableToken value.	self formattersDo: [:f | f formatLocalVariable: variableToken with: style].	self addTemporary: variableToken value.	^nil</body><body package="RBCodeHighlighting" selector="formatTrue:">formatTrue: aToken	self literalFormatDo: [self formattersDo: [:f | f formatTrue: aToken]].	^self trueClass</body><body package="RBCodeHighlighting" selector="formatUnaryMessage:to:">formatUnaryMessage: anOrderedCollection to: aClass	self formattersDo: [:f | f formatUnaryMessage: anOrderedCollection to: aClass].	^nil</body><body package="RBCodeHighlighting" selector="formatUnaryMethod:">formatUnaryMethod: selectorToken	self formattersDo:		[:f |		f formatUnaryMethod: selectorToken.		lastComment notEmpty ifTrue: [f formatMethodComment: lastComment first]].	^nil</body><body package="RBCodeHighlighting" selector="formatVariableReference:">formatVariableReference: aToken 	| binding local name ref |		"Handle obvious pre-defined literal references."	name := aToken value.	name = 'self' 		ifTrue: 			[self formattersDo: [:f | f formatSelf: aToken].			^class].	name = 'super' 		ifTrue: 			[self formattersDo: [:f | f formatSuper: aToken].			^class ifNotNil: [class superclass]].	(self checkThisContext and: [name = 'thisContext'])		ifTrue: 			[self formattersDo: [:f | f formatThisContext: aToken].			^thisContext class].		"Handle locals, temporaries, and arguments."	(local := variables referenceType: name) notNil		ifTrue:			[self formattersDo: [:f | f formatLocalVariable: aToken with: local].			^nil].		"Item is a global or shared name.  Highlight depending on		 value (behavior, name space) or containing environment (a		 class or name space)."	ref := BindingReference pathString: (self pathStringFor: aToken).	self findNamespaceFor: ref.	binding := ref bindingOrNil.	binding isNil 		ifTrue: 			[self formattersDo: [:f | f formatUndeclaredVariable: aToken].			^nil].	(binding value isBehavior or: [binding isForClass]) 		ifTrue: [self formattersDo: [:f | f formatClassReference: aToken]]		ifFalse: 			[(binding value isNameSpace or: [binding isForNameSpace]) 				ifTrue: [self formattersDo: [:f | f formatNameSpaceReference: aToken]]				ifFalse:					[(ref path size = 1						and: [(ref class isNil ifTrue: [#()] ifFalse: [ref class withAllSuperclasses])							anySatisfy: [:behavior | behavior asNameSpace includesKey: ref simpleName]])						ifTrue: [self formattersDo: [:f | f formatSharedVariable: aToken]]						ifFalse: [self formattersDo: [:f | f formatGlobalVariable: aToken]]]].	^self valueClass: binding value</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>classes</category><body package="RBCodeHighlighting" selector="arrayClass">arrayClass	^Array</body><body package="RBCodeHighlighting" selector="blockClass">blockClass	^BlockClosure</body><body package="RBCodeHighlighting" selector="byteArrayClass">byteArrayClass	^ByteArray</body><body package="RBCodeHighlighting" selector="characterClass">characterClass	^Character</body><body package="RBCodeHighlighting" selector="falseClass">falseClass	^False</body><body package="RBCodeHighlighting" selector="nilClass">nilClass	^UndefinedObject</body><body package="RBCodeHighlighting" selector="numberClass:">numberClass: aNumber	"Answer the number class for the argument."	^aNumber class</body><body package="RBCodeHighlighting" selector="referenceClass">referenceClass	^LiteralBindingReference</body><body package="RBCodeHighlighting" selector="stringClass">stringClass	^String</body><body package="RBCodeHighlighting" selector="symbolClass">symbolClass	^Symbol</body><body package="RBCodeHighlighting" selector="trueClass">trueClass	^True</body><body package="RBCodeHighlighting" selector="valueClass:">valueClass: anObject	"Answer the class for the argument."	^anObject class</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatExpression:">formatExpression: aText 	| parser |	parser := self concreteClass on: (ReadStream on: aText).	parser text: aText.	parser setStartingState: parser class startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body><body package="RBCodeHighlighting" selector="formatExpression:for:">formatExpression: aText for: aClass 	| parser |	parser := aClass codeHighlighterClass concreteClass on: (ReadStream on: aText).	parser		text: aText;		class: aClass.	parser setStartingState: parser class startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body><body package="RBCodeHighlighting" selector="formatExpression:forClass:namespace:">formatExpression: aText forClass: aClass namespace: aNamespace	| parser |	parser := aClass codeHighlighterClass concreteClass on: (ReadStream on: aText).	parser		text: aText;		class: aClass;		namespace: aNamespace.	parser setStartingState: parser class startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body><body package="RBCodeHighlighting" selector="formatMethod:">formatMethod: aText 	| parser |	parser := self concreteClass on: (ReadStream on: aText).	parser text: aText.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body><body package="RBCodeHighlighting" selector="formatMethod:for:">formatMethod: aText for: aClass 	| parser |	parser := aClass codeHighlighterClass concreteClass on: (ReadStream on: aText).	parser		text: aText;		class: aClass.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body><body package="RBCodeHighlighting" selector="formatMethod:forClass:namespace:">formatMethod: aText forClass: aClass namespace: aNamespace	| parser |	aClass isNil ifTrue: [^aText].	parser := aClass codeHighlighterClass concreteClass on: (ReadStream on: aText).	parser		text: aText;		class: aClass;		namespace: aNamespace.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-accessing</category><body package="RBCodeHighlighting" selector="scannerClass">scannerClass	^self subclassResponsibility</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="concreteClass">concreteClass	"Answer the concrete class for the receiver."	^self == CodeHighlightingParser		ifTrue: [SmalltalkCodeHighlightingParser]		ifFalse: [self]</body></methods><methods><class-id>Refactory.CodeHighlighter.LexicalCodeEmphasizer</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatArrayHash:leftDelimiter:rightDelimiter:">formatArrayHash: hashToken leftDelimiter: leftDelimiterToken rightDelimiter: rightDelimiterToken 	CodeHighlighter literalElements		ifTrue:			[self emphasizeFrom: (hashToken ifNil: [leftDelimiterToken]) startPosition to: leftDelimiterToken stopPosition with: #code_array.			self emphasizeFrom: rightDelimiterToken startPosition to: rightDelimiterToken stopPosition with: #code_array]		ifFalse:			[parser literalArray = 1				ifTrue: [self emphasizeFrom: (hashToken ifNil: [leftDelimiterToken]) startPosition to: rightDelimiterToken stopPosition with: #code_array]]</body><body package="RBCodeHighlighting" selector="formatAssignment:">formatAssignment: aToken	self emphasizeToken: aToken with: #code_assignment</body><body package="RBCodeHighlighting" selector="formatBinaryMessage:to:">formatBinaryMessage: anOrderedCollection to: aClass 	self formatMessage: anOrderedCollection to: aClass with: #code_binaryMessageSend</body><body package="RBCodeHighlighting" selector="formatBinaryMethod:with:">formatBinaryMethod: selectorToken with: variableToken 	self emphasizeToken: selectorToken with: #code_binaryMethodName.</body><body package="RBCodeHighlighting" selector="formatBlockLeftBracket:argumentsSeparator:rightBracket:with:">formatBlockLeftBracket: leftBracketToken argumentsSeparator: separatorToken rightBracket: rightBracketToken with: aStyleName	self emphasizeToken: leftBracketToken with: aStyleName.	"separatorToken notNil ifTrue: [self formatToken: separatorToken with: aStyleName]."	self emphasizeToken: rightBracketToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatBlockVariable:colon:with:">formatBlockVariable: variableToken colon: colonToken with: aStyleName	self emphasizeFrom: colonToken startPosition to: variableToken startPosition - 1 with: aStyleName emphasisKey.	self formatVariable: variableToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatByteArrayHash:leftBracket:rightBracket:">formatByteArrayHash: hashToken leftBracket: leftBracketToken rightBracket: rightBracketToken 	self emphasizeFrom: (hashToken ifNil: [leftBracketToken]) startPosition to: rightBracketToken stopPosition with: #code_byteArray</body><body package="RBCodeHighlighting" selector="formatCascade:">formatCascade: cascadeToken	self emphasizeToken: cascadeToken with: #code_cascade.</body><body package="RBCodeHighlighting" selector="formatCharacter:">formatCharacter: aToken 	self emphasizeToken: aToken with: #code_character</body><body package="RBCodeHighlighting" selector="formatClassReference:">formatClassReference: aToken	self formatVariable: aToken with: #code_classReference</body><body package="RBCodeHighlighting" selector="formatComment:">formatComment: aToken 	self emphasizeToken: aToken with: #code_comment</body><body package="RBCodeHighlighting" selector="formatExpressionLeftParenthesis:rightParenthesis:with:">formatExpressionLeftParenthesis: leftParenthesisToken rightParenthesis: rightParenthesisToken with: aStyleName	self emphasizeToken: leftParenthesisToken with: aStyleName.	self emphasizeToken: rightParenthesisToken with: aStyleName.</body><body package="RBCodeHighlighting" selector="formatFalse:">formatFalse: aToken 	self emphasizeToken: aToken with: #code_false</body><body package="RBCodeHighlighting" selector="formatGlobalVariable:">formatGlobalVariable: aToken	self formatVariable: aToken with: #code_globalVariableReference</body><body package="RBCodeHighlighting" selector="formatKeywordMessage:to:">formatKeywordMessage: anOrderedCollection to: aClass 	self formatMessage: anOrderedCollection to: aClass with: #code_keywordMessageSend</body><body package="RBCodeHighlighting" selector="formatKeywordMethod:">formatKeywordMethod: anOrderedCollection	anOrderedCollection do:		[:selectorToken | self emphasizeToken: selectorToken with: #code_keywordMethodName]</body><body package="RBCodeHighlighting" selector="formatLocalVariable:with:">formatLocalVariable: aToken with: anEmphasis	self formatVariable: aToken with: anEmphasis</body><body package="RBCodeHighlighting" selector="formatMessage:to:with:">formatMessage: anOrderedCollection to: aClass with: aStyleName	| symbol |	symbol := (self isValidMessage: anOrderedCollection for: aClass) 				ifTrue: [aStyleName]				ifFalse: [#code_dnu].	anOrderedCollection do: [:each | self emphasizeToken: each with: symbol].	^aClass</body><body package="RBCodeHighlighting" selector="formatMethodArgument:with:">formatMethodArgument: variableToken with: aStyleName	self formatVariable: variableToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatMethodComment:">formatMethodComment: aToken 	"Reformat the argument token from a code comment to a method comment.	 Simply applying the new emphasis doesn't work;  we must remove the old	 emphasis first."	parser text addEmphasis: #() removeEmphasis: #(#code_comment) allowDuplicates: false from: aToken startPosition to: aToken stopPosition.	self emphasizeToken: aToken with: #code_methodComment</body><body package="RBCodeHighlighting" selector="formatNameSpaceReference:">formatNameSpaceReference: aToken	self formatVariable: aToken with: #code_nameSpaceReference</body><body package="RBCodeHighlighting" selector="formatNil:">formatNil: aToken 	self emphasizeToken: aToken with: #code_nil</body><body package="RBCodeHighlighting" selector="formatNumber:">formatNumber: aToken 	self emphasizeToken: aToken with: #code_number</body><body package="RBCodeHighlighting" selector="formatPrimitiveFrom:to:">formatPrimitiveFrom: startToken to: stopToken 	"self emphasizeFrom: startToken startPosition to: stopToken stopPosition with: #code_primitive"	self emphasizeToken: startToken with: #code_primitive.	self emphasizeToken: stopToken with: #code_primitive</body><body package="RBCodeHighlighting" selector="formatPrimitiveLeftBracket:selector:rightBracket:">formatPrimitiveLeftBracket: leftBracketToken selector: selectorTokens rightBracket: rightBracketToken	self emphasizeToken: leftBracketToken with: #code_primitive.	self emphasizeToken: rightBracketToken with: #code_primitive.	selectorTokens isNil		ifTrue: [self formatSyntaxErrorFrom: leftBracketToken stopPosition + 1 to: rightBracketToken startPosition - 1]		ifFalse:			[CodeHighlighter distinguishAnnotations				ifTrue: [selectorTokens do: [:selectorToken | self emphasizeToken: selectorToken with: #code_primitive]]				ifFalse: [self emphasizeFrom: leftBracketToken stopPosition + 1 to: rightBracketToken startPosition - 1 with: #code_primitive]]</body><body package="RBCodeHighlighting" selector="formatQualifiedReferenceHash:leftBrace:rightBrace:">formatQualifiedReferenceHash: hashToken leftBrace: leftBraceToken rightBrace: rightBraceToken 	self emphasizeFrom: (hashToken ifNil: [leftBraceToken]) startPosition to: rightBraceToken stopPosition with: #code_qualifiedReference</body><body package="RBCodeHighlighting" selector="formatReturn:">formatReturn: aToken	self emphasizeToken: aToken with: #code_return</body><body package="RBCodeHighlighting" selector="formatSelf:">formatSelf: aToken 	self formatVariable: aToken with: #code_self</body><body package="RBCodeHighlighting" selector="formatSharedVariable:">formatSharedVariable: aToken	self formatVariable: aToken with: #code_sharedVariableReference</body><body package="RBCodeHighlighting" selector="formatString:">formatString: aToken 	self emphasizeToken: aToken with: #code_string</body><body package="RBCodeHighlighting" selector="formatSuper:">formatSuper: aToken 	self formatVariable: aToken with: #code_super</body><body package="RBCodeHighlighting" selector="formatSymbol:hash:">formatSymbol: aToken hash: hashToken 	self emphasizeFrom: (hashToken ifNil: [aToken]) startPosition to: aToken stopPosition with: #code_symbol</body><body package="RBCodeHighlighting" selector="formatSyntaxErrorFrom:to:">formatSyntaxErrorFrom: startInteger to: stopInteger 	self emphasizeFrom: startInteger to: stopInteger with: #code_syntaxError</body><body package="RBCodeHighlighting" selector="formatTemporaryVariable:with:">formatTemporaryVariable: variableToken with: aStyleName	self formatVariable: variableToken with: aStyleName</body><body package="RBCodeHighlighting" selector="formatThisContext:">formatThisContext: aToken	self formatVariable: aToken with: #code_thisContext</body><body package="RBCodeHighlighting" selector="formatTrue:">formatTrue: aToken 	self emphasizeToken: aToken with: #code_true</body><body package="RBCodeHighlighting" selector="formatUnaryMessage:to:">formatUnaryMessage: anOrderedCollection to: aClass 	self formatMessage: anOrderedCollection to: aClass with: #code_unaryMessageSend</body><body package="RBCodeHighlighting" selector="formatUnaryMethod:">formatUnaryMethod: selectorToken 	self emphasizeToken: selectorToken with: #code_unaryMethodName</body><body package="RBCodeHighlighting" selector="formatUndeclaredVariable:">formatUndeclaredVariable: aToken	self formatVariable: aToken with: #code_undeclaredVariable</body><body package="RBCodeHighlighting" selector="formatVariable:with:">formatVariable: aToken with: anEmphasis	anEmphasis isSequenceable		ifTrue: [self emphasizeToken: aToken with: anEmphasis]		ifFalse: [self emphasizeToken: aToken with: anEmphasis key]</body></methods><methods><class-id>Refactory.CodeHighlighter.LexicalCodeEmphasizer</class-id> <category>support</category><body package="RBCodeHighlighting" selector="isValidMessage:for:">isValidMessage: anOrderedCollection for: aClass 	| name stream |	stream := WriteStream on: (String new: 30).	anOrderedCollection do: [:each | stream nextPutAll: each value].	name := stream contents.	name := Symbol findInterned: name.	name isNil ifTrue: [^false].	^aClass isNil or: [aClass canUnderstand: name]</body></methods><methods><class-id>Refactory.CodeHighlighter.LexicalCodeEmphasizer</class-id> <category>defaults</category><body package="RBCodeHighlighting" selector="defaultOrder">defaultOrder	"Answer the default order for the receiver's class."	^CodeHighlighter defaultOrder</body></methods><methods><class-id>Refactory.CodeHighlighter.BlockVariables</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="arguments">arguments	^arguments</body><body package="RBCodeHighlighting" selector="arguments:">arguments: anObject	arguments := anObject</body><body package="RBCodeHighlighting" selector="depth">depth	outer ifNil: [^0].	^outer depth + 1</body><body package="RBCodeHighlighting" selector="id">id	^id</body><body package="RBCodeHighlighting" selector="id:">id: anObject	id := anObject</body><body package="RBCodeHighlighting" selector="outer">outer	^outer</body><body package="RBCodeHighlighting" selector="outer:">outer: anObject	outer := anObject</body><body package="RBCodeHighlighting" selector="temporaries">temporaries	^temporaries</body><body package="RBCodeHighlighting" selector="temporaries:">temporaries: anObject	temporaries := anObject</body></methods><methods><class-id>Refactory.CodeHighlighter.BlockVariables</class-id> <category>variables</category><body package="RBCodeHighlighting" selector="argumentType:">argumentType: aVariable	"Answer the type of the argument definition reference.  This will be a simple	 block argument definition unless it is known to the receiver, which will lead	 to a redefinition marker."	| style |	style := (outer isNil or: [outer outer isNil])				ifTrue: [#code_methodVariableDefinition]				ifFalse: [#code_blockArgumentDefinition].	(self isDefined: aVariable)		ifTrue: [style := style asEmphasisWith: #code_redefinedVariableDefinition].	^self variable: aVariable argument: style</body><body package="RBCodeHighlighting" selector="isDefined:">isDefined: aVariable	"Answer whether the argument is defined in the scope chain."	^(arguments includes: aVariable)		or: [(temporaries includes: aVariable)			or: [outer notNil and: [outer isDefined: aVariable]]]</body><body package="RBCodeHighlighting" selector="referenceType:">referenceType: aVariable	"Answer the type of the argument variable reference, if it is known to the receiver."	^(arguments includes: aVariable)		ifTrue:			[self variable: aVariable argument:				(outer isNil					ifTrue: [#code_instanceVariable]					ifFalse:						[outer outer isNil							ifTrue: [#code_methodVariable]							ifFalse: [#code_blockArgument]])]		ifFalse:			[(temporaries includes: aVariable)				ifTrue: [self variable: aVariable temporary: #code_temporaryVariable]				ifFalse:					[outer isNil						ifTrue: [nil]						ifFalse: [outer referenceType: aVariable]]]</body><body package="RBCodeHighlighting" selector="temporaryType:">temporaryType: aVariable	"Answer the type of the temporary definition reference.  This will be a simple	 block argument definition unless it is known to the receiver, which will lead	 to a redefinition marker."	^self variable: aVariable temporary:		((self isDefined: aVariable)			ifTrue: [#(#code_temporaryVariableDefinition #code_redefinedVariableDefinition)]			ifFalse: [#code_temporaryVariableDefinition])</body><body package="RBCodeHighlighting" selector="variable:argument:">variable: aVariable argument: formatCode	"Answer a suitable structure for the variable and format code."	^formatCode -&gt; (aVariable , '.arg.' , id printString)</body><body package="RBCodeHighlighting" selector="variable:temporary:">variable: aVariable temporary: formatCode	"Answer a suitable structure for the variable and format code."	^formatCode -&gt; (aVariable , '.tmp.' , id printString)</body></methods><methods><class-id>Refactory.CodeHighlighter.BlockVariables</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="initialize">initialize	"Initialize the receiver."	arguments := OrderedCollection new.	temporaries := OrderedCollection new.</body></methods><methods><class-id>Refactory.CodeHighlighter.BlockVariables</class-id> <category>printing</category><body package="RBCodeHighlighting" selector="printOn:">printOn: aStream	super printOn: aStream.	aStream										nextPut: $(;		print: (outer ifNotNil: [outer id]);	nextPut: $,;		print: id;							nextPut: $,;		print: self depth;					nextPut: $,;		print: arguments size;			nextPut: $,;		print: temporaries size;			nextPut: $)</body></methods><methods><class-id>Refactory.CodeHighlighter.BlockVariables class</class-id> <category>instance creation</category><body package="RBCodeHighlighting" selector="new">new	"Create a new instance of the receiver, initialized as the method scope."	^super new initialize</body><body package="RBCodeHighlighting" selector="outer:">outer: blockVariables	"Create a new instance of the receiver, initialized as the method scope."	^self new		outer: blockVariables;		yourself</body></methods><methods><class-id>Refactory.CodeHighlighter.HyperlinkCodeEmphasizer</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatComment:">formatComment: aToken 	parser hyperlinkToken: aToken delimited: true</body><body package="RBCodeHighlighting" selector="formatString:">formatString: aToken 	parser hyperlinkToken: aToken delimited: true</body></methods><methods><class-id>Refactory.CodeHighlighter.HyperlinkCodeEmphasizer</class-id> <category>defaults</category><body package="RBCodeHighlighting" selector="defaultOrder">defaultOrder	"Answer the default order for the receiver's class."	^#{UI.HyperlinkHighlighter}		ifDefinedDo: [:hhc | hhc defaultOrder]		elseDo: [super defaultOrder]</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForAddDoitScope1:">reduceActionForAddDoitScope1: nodes		^self addNewScope</body><body package="RBCodeHighlighting" selector="reduceActionForArray4:">reduceActionForArray4: nodes		(nodes at: 2) stopPosition + 1 = (nodes at: 3) startPosition		ifTrue:			[self				formatSymbol:					(SmaCCToken						value: (nodes at: 2) value , ':'						start: (nodes at: 2) startPosition						id: nil)				hash: nil]		ifFalse:			[self				formatSymbol: (nodes at: 2)					hash: nil;				formatSymbol:						(SmaCCToken							value: ':'							start: (nodes at: 3) startPosition							id: nil)					hash: nil].	scanner position: (nodes at: 3) startPosition.	currentToken := nil.	^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForArrayLiteral1:">reduceActionForArrayLiteral1: nodes		^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForArrayLiteral2:">reduceActionForArrayLiteral2: nodes		^self		formatQualifiedReferenceHash: nil		leftBrace: (nodes at: 1)		rightBrace: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForArrayLiteral3:">reduceActionForArrayLiteral3: nodes		^self		formatQualifiedReferenceHash: nil		leftBrace: (nodes at: 1)		rightBrace: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessage1:">reduceActionForBinaryMessage1: nodes		^OrderedCollection with: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend1:">reduceActionForBinaryMessageSend1: nodes		^self		formatBinaryMessage: (nodes at: 2)		to: nil</body><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend2:">reduceActionForBinaryMessageSend2: nodes		^self		formatBinaryMessage: (nodes at: 2)		to: nil</body><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend3:">reduceActionForBinaryMessageSend3: nodes		^self		formatBinaryMessage: (nodes at: 2)		to: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForBinaryMethodName1:">reduceActionForBinaryMethodName1: nodes		self addNewScope.	^self		formatBinaryMethod: (nodes at: 1)		with: (nodes at: 2)</body><body package="RBCodeHighlighting" selector="reduceActionForBlock1:">reduceActionForBlock1: nodes		^self		formatBlockLeftBracket: (nodes at: 1)		argumentsSeparator: nil		rightBracket: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForBlock2:">reduceActionForBlock2: nodes		self removeScope.	^self		formatBlockLeftBracket: (nodes at: 1)		argumentsSeparator: nil		rightBracket: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForBlock3:">reduceActionForBlock3: nodes		^self		formatBlockLeftBracket: (nodes at: 1)		argumentsSeparator: (nodes at: 3)		rightBracket: (nodes at: 5)</body><body package="RBCodeHighlighting" selector="reduceActionForBlock4:">reduceActionForBlock4: nodes		^self		formatBlockLeftBracket: (nodes at: 1)		argumentsSeparator: (nodes at: 3)		rightBracket: (nodes at: 7)</body><body package="RBCodeHighlighting" selector="reduceActionForBlockArgs1:">reduceActionForBlockArgs1: nodes		^self		formatBlockVariable: (nodes at: 2)		colon: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForBlockArgs2:">reduceActionForBlockArgs2: nodes		^self		formatBlockVariable: (nodes at: 3)		colon: (nodes at: 2)</body><body package="RBCodeHighlighting" selector="reduceActionForBlockOpen1:">reduceActionForBlockOpen1: nodes		blockDepth := blockDepth + 1.	self addNewScope.	^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForCascade1:">reduceActionForCascade1: nodes		^self		formatCascadeList: (nodes at: 2)		to: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForCascade2:">reduceActionForCascade2: nodes		^self		formatCascadeList: (nodes at: 2)		to: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForCascade3:">reduceActionForCascade3: nodes		^self		formatCascadeList: (nodes at: 2)		to: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForCascadeList1:">reduceActionForCascadeList1: nodes		^OrderedCollection new</body><body package="RBCodeHighlighting" selector="reduceActionForCascadeList2:">reduceActionForCascadeList2: nodes		^(nodes at: 1)		add:				(CascadeElement						type: #unary						send: (nodes at: 3)						marker: (nodes at: 2));		yourself</body><body package="RBCodeHighlighting" selector="reduceActionForCascadeList3:">reduceActionForCascadeList3: nodes		^(nodes at: 1)		add:				(CascadeElement						type: #binary						send: (nodes at: 3)						marker: (nodes at: 2));		yourself</body><body package="RBCodeHighlighting" selector="reduceActionForCascadeList4:">reduceActionForCascadeList4: nodes		^(nodes at: 1)		add:				(CascadeElement						type: #keyword						send: (nodes at: 3)						marker: (nodes at: 2));		yourself</body><body package="RBCodeHighlighting" selector="reduceActionForConstant10:">reduceActionForConstant10: nodes		^self		formatSymbol: (nodes at: 2)		hash: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant11:">reduceActionForConstant11: nodes		^self		formatSymbol: (nodes at: 2)		hash: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant12:">reduceActionForConstant12: nodes		^self		formatSymbol: (nodes at: 2)		hash: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant13:">reduceActionForConstant13: nodes		^self		formatQualifiedReferenceHash: (nodes at: 1)		leftBrace: (nodes at: 2)		rightBrace: (nodes at: 4)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant14:">reduceActionForConstant14: nodes		^self		formatQualifiedReferenceHash: (nodes at: 1)		leftBrace: (nodes at: 2)		rightBrace: (nodes at: 4)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant15:">reduceActionForConstant15: nodes		^self		formatArrayHash: (nodes at: 1)		leftDelimiter: (nodes at: 2)		rightDelimiter: (nodes at: 4)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant16:">reduceActionForConstant16: nodes		^self		formatByteArrayHash: (nodes at: 1)		leftBracket: (nodes at: 2)		rightBracket: (nodes at: 4)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant1:">reduceActionForConstant1: nodes		^self formatTrue: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant2:">reduceActionForConstant2: nodes		^self formatFalse: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant3:">reduceActionForConstant3: nodes		^self formatNil: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant4:">reduceActionForConstant4: nodes		^self formatNumber: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant5:">reduceActionForConstant5: nodes		^self formatNumber: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant6:">reduceActionForConstant6: nodes		^self formatCharacter: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant7:">reduceActionForConstant7: nodes		^self formatString: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant8:">reduceActionForConstant8: nodes		^self		formatSymbol: (nodes at: 2)		hash: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForConstant9:">reduceActionForConstant9: nodes		^self		formatSymbol: (nodes at: 2)		hash: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForExpression1:">reduceActionForExpression1: nodes		^self		formatAssignedVariable: (nodes at: 1);		formatAssignment: (nodes at: 2)</body><body package="RBCodeHighlighting" selector="reduceActionForExpression2:">reduceActionForExpression2: nodes		^self		formatAssignedVariable: (nodes at: 1);		formatAssignment: (nodes at: 2)</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessage1:">reduceActionForKeywordMessage1: nodes		^OrderedCollection with: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessage2:">reduceActionForKeywordMessage2: nodes		^(nodes at: 1)		add: (nodes at: 2);		yourself</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend1:">reduceActionForKeywordMessageSend1: nodes		^self		formatKeywordMessage: (nodes at: 2)		to: nil</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend2:">reduceActionForKeywordMessageSend2: nodes		^self		formatKeywordMessage: (nodes at: 2)		to: nil</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend3:">reduceActionForKeywordMessageSend3: nodes		^self		formatKeywordMessage: (nodes at: 2)		to: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodList1:">reduceActionForKeywordMethodList1: nodes		self addNewScope.	^OrderedCollection		with: (OrderedCollection with: (nodes at: 1))		with: (OrderedCollection with: (nodes at: 2))</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodList2:">reduceActionForKeywordMethodList2: nodes		(nodes at: 1) first add: (nodes at: 2).	(nodes at: 1) last add: (nodes at: 3).	^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodList3:">reduceActionForKeywordMethodList3: nodes		^OrderedCollection		with: (OrderedCollection with: (nodes at: 1))		with: (OrderedCollection with: (nodes at: 2))</body><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodName1:">reduceActionForKeywordMethodName1: nodes		^self formatKeywordMethod: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForLiteral1:">reduceActionForLiteral1: nodes		^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForLiteral2:">reduceActionForLiteral2: nodes		^self		formatArrayHash: nil		leftDelimiter: (nodes at: 1)		rightDelimiter: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralArrayOpen1:">reduceActionForLiteralArrayOpen1: nodes		literalArray := literalArray + 1.	^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralConstant1:">reduceActionForLiteralConstant1: nodes		^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralConstant2:">reduceActionForLiteralConstant2: nodes		^self		formatSymbol: (nodes at: 1)		hash: nil</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralConstant3:">reduceActionForLiteralConstant3: nodes		^self		formatSymbol: (nodes at: 1)		hash: nil</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralConstant4:">reduceActionForLiteralConstant4: nodes		^self		formatSymbol: (nodes at: 1)		hash: nil</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralConstant5:">reduceActionForLiteralConstant5: nodes		^self		formatSymbol: (nodes at: 1)		hash: nil</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralConstant6:">reduceActionForLiteralConstant6: nodes		^self		formatSymbol: (nodes at: 1)		hash: nil</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralConstant7:">reduceActionForLiteralConstant7: nodes		^self		formatArrayHash: nil		leftDelimiter: (nodes at: 1)		rightDelimiter: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForLiteralConstant8:">reduceActionForLiteralConstant8: nodes		^self		formatByteArrayHash: nil		leftBracket: (nodes at: 1)		rightBracket: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForObjectStudioArray4:">reduceActionForObjectStudioArray4: nodes		(nodes at: 2) stopPosition + 1 = (nodes at: 3) startPosition		ifTrue:			[self				formatSymbol:					(SmaCCToken						value: (nodes at: 2) value , ':'						start: (nodes at: 2) startPosition						id: nil)				hash: nil]		ifFalse:			[self				formatSymbol: (nodes at: 2)					hash: nil;				formatSymbol:						(SmaCCToken							value: ':'							start: (nodes at: 3) startPosition							id: nil)					hash: nil].	scanner position: (nodes at: 3) startPosition.	currentToken := nil.	^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForObjectStudioArrayLiteral1:">reduceActionForObjectStudioArrayLiteral1: nodes		^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForObjectStudioArrayLiteral2:">reduceActionForObjectStudioArrayLiteral2: nodes		^self		formatArrayHash: nil		leftDelimiter: (nodes at: 1)		rightDelimiter: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForOptional_____1:">reduceActionForOptional_____1: nodes		^nil</body><body package="RBCodeHighlighting" selector="reduceActionForOptional_____2:">reduceActionForOptional_____2: nodes		^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForPrimary1:">reduceActionForPrimary1: nodes		^self		formatExpressionLeftParenthesis: (nodes at: 1)		rightParenthesis: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForPrimary2:">reduceActionForPrimary2: nodes		^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForPrimary3:">reduceActionForPrimary3: nodes		^self formatVariableReference: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForPrimary4:">reduceActionForPrimary4: nodes		^self formatVariableReference: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForPrimary5:">reduceActionForPrimary5: nodes		^BlockClosure</body><body package="RBCodeHighlighting" selector="reduceActionForPrimaryOpen1:">reduceActionForPrimaryOpen1: nodes		parenDepth := parenDepth + 1.	^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveKeywordList1:">reduceActionForPrimitiveKeywordList1: nodes		^OrderedCollection with: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveKeywordList2:">reduceActionForPrimitiveKeywordList2: nodes		^(nodes at: 1)		add: (nodes at: 2);		yourself</body><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveKeywordList3:">reduceActionForPrimitiveKeywordList3: nodes		self formatTemporaryVariable: (nodes at: 3).	^(nodes at: 1)		add: (nodes at: 2);		yourself</body><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend1:">reduceActionForPrimitiveMessageSend1: nodes		^OrderedCollection with: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend2:">reduceActionForPrimitiveMessageSend2: nodes		^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForPrimitives2:">reduceActionForPrimitives2: nodes		^self		formatPrimitiveLeftBracket: (nodes at: 2)		selector: (nodes at: 3)		rightBracket: (nodes at: 4)</body><body package="RBCodeHighlighting" selector="reduceActionForPrimitives3:">reduceActionForPrimitives3: nodes		^self		formatPrimitiveLeftBracket: (nodes at: 2)		selector: nil		rightBracket: (nodes at: 4)</body><body package="RBCodeHighlighting" selector="reduceActionForStatementGroup2:">reduceActionForStatementGroup2: nodes		^self formatPeriod: (nodes at: 2)</body><body package="RBCodeHighlighting" selector="reduceActionForStatementGroup3:">reduceActionForStatementGroup3: nodes		^self		formatPeriod: (nodes at: 2);		formatReturn: (nodes at: 3);		formatPeriod: (nodes at: 5)</body><body package="RBCodeHighlighting" selector="reduceActionForStatementGroup4:">reduceActionForStatementGroup4: nodes		^self		formatReturn: (nodes at: 1);		formatPeriod: (nodes at: 3)</body><body package="RBCodeHighlighting" selector="reduceActionForStatementGroup5:">reduceActionForStatementGroup5: nodes		^self		formatReturn: (nodes at: 2);		formatPeriod: (nodes at: 4)</body><body package="RBCodeHighlighting" selector="reduceActionForStatementGroup6:">reduceActionForStatementGroup6: nodes		^self		formatPeriod: (nodes at: 2);		formatReturn: (nodes at: 3);		formatPeriod: (nodes at: 5)</body><body package="RBCodeHighlighting" selector="reduceActionForStatementList2:">reduceActionForStatementList2: nodes		^self formatPeriod: (nodes at: 2)</body><body package="RBCodeHighlighting" selector="reduceActionForStatementList3:">reduceActionForStatementList3: nodes		^self formatPeriod: (nodes at: 2)</body><body package="RBCodeHighlighting" selector="reduceActionForStatements1:">reduceActionForStatements1: nodes		^self removeScope</body><body package="RBCodeHighlighting" selector="reduceActionForStudioArrayOpen1:">reduceActionForStudioArrayOpen1: nodes		literalArray := literalArray + 1.	^nodes at: 1</body><body package="RBCodeHighlighting" selector="reduceActionForTemporaryVariables2:">reduceActionForTemporaryVariables2: nodes		^self formatTemporaryVariable: (nodes at: 2)</body><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessage1:">reduceActionForUnaryMessage1: nodes		^OrderedCollection with: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessageSend1:">reduceActionForUnaryMessageSend1: nodes		^self		formatUnaryMessage: (nodes at: 2)		to: nil</body><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessageSend2:">reduceActionForUnaryMessageSend2: nodes		^self		formatUnaryMessage: (nodes at: 2)		to: (nodes at: 1)</body><body package="RBCodeHighlighting" selector="reduceActionForUnaryMethodName1:">reduceActionForUnaryMethodName1: nodes		self addNewScope.	^self formatUnaryMethod: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingParser</class-id> <category>generated-tables</category><body package="RBCodeHighlighting" selector="reduceTable">reduceTable	^#(#(33 2 #reduceActionForKeywordMethodList1:)#(33 3 #reduceActionForKeywordMethodList2:)#(33 3 #reduceActionForKeywordMethodList3:)#(34 2 #reduceFor:)#(34 2 #reduceFor:)#(34 2 #reduceFor:)#(34 3 #reduceFor:)#(35 0 #reduceFor:)#(35 4 #reduceActionForPrimitives2:)#(35 4 #reduceActionForPrimitives3:)#(36 1 #reduceActionForPrimitiveMessageSend1:)#(36 1 #reduceActionForPrimitiveMessageSend2:)#(37 2 #reduceActionForPrimitiveKeywordList1:)#(37 3 #reduceActionForPrimitiveKeywordList2:)#(37 3 #reduceActionForPrimitiveKeywordList3:)#(38 1 #reduceActionForLiteral1:)#(38 3 #reduceActionForLiteral2:)#(39 0 #reduceActionForAddDoitScope1:)#(40 1 #reduceActionForStatements1:)#(41 0 #reduceFor:)#(41 1 #reduceFor:)#(41 3 #reduceFor:)#(42 0 #reduceFor:)#(42 2 #reduceActionForStatementGroup2:)#(42 5 #reduceActionForStatementGroup3:)#(42 3 #reduceActionForStatementGroup4:)#(42 4 #reduceActionForStatementGroup5:)#(42 5 #reduceActionForStatementGroup6:)#(43 1 #reduceFor:)#(43 3 #reduceActionForStatementList2:)#(43 3 #reduceActionForStatementList3:)#(44 0 #reduceActionForOptional_____1:)#(44 1 #reduceActionForOptional_____2:)#(45 3 #reduceActionForExpression1:)#(45 3 #reduceActionForExpression2:)#(45 1 #reduceFor:)#(46 1 #reduceActionForBlockOpen1:)#(47 2 #reduceActionForBlockArgs1:)#(47 3 #reduceActionForBlockArgs2:)#(48 3 #reduceActionForBlock1:)#(48 3 #reduceActionForBlock2:)#(48 5 #reduceActionForBlock3:)#(48 7 #reduceActionForBlock4:)#(49 1 #reduceActionForKeywordMethodName1:)#(50 2 #reduceActionForCascade1:)#(50 2 #reduceActionForCascade2:)#(50 2 #reduceActionForCascade3:)#(50 1 #reduceFor:)#(51 2 #reduceActionForKeywordMessageSend1:)#(51 2 #reduceActionForKeywordMessageSend2:)#(51 2 #reduceActionForKeywordMessageSend3:)#(52 0 #reduceActionForCascadeList1:)#(52 3 #reduceActionForCascadeList2:)#(52 3 #reduceActionForCascadeList3:)#(52 3 #reduceActionForCascadeList4:)#(53 2 #reduceActionForBinaryMessageSend1:)#(53 2 #reduceActionForBinaryMessageSend2:)#(53 2 #reduceActionForBinaryMessageSend3:)#(54 2 #reduceActionForUnaryMessageSend1:)#(54 2 #reduceActionForUnaryMessageSend2:)#(55 3 #reduceActionForPrimary1:)#(55 1 #reduceActionForPrimary2:)#(55 1 #reduceActionForPrimary3:)#(55 1 #reduceActionForPrimary4:)#(55 1 #reduceActionForPrimary5:)#(56 1 #reduceActionForUnaryMessage1:)#(57 2 #reduceActionForBinaryMessage1:)#(58 2 #reduceActionForKeywordMessage1:)#(58 3 #reduceActionForKeywordMessage2:)#(59 1 #reduceFor:)#(59 1 #reduceFor:)#(59 1 #reduceFor:)#(60 1 #reduceFor:)#(60 1 #reduceFor:)#(61 1 #reduceActionForPrimaryOpen1:)#(62 2 #reduceActionForBinaryMethodName1:)#(63 6 #reduceFor:)#(63 4 #reduceFor:)#(63 2 #reduceFor:)#(64 1 #reduceActionForUnaryMethodName1:)#(65 1 #reduceActionForLiteralArrayOpen1:)#(66 0 #reduceFor:)#(66 1 #reduceFor:)#(66 2 #reduceFor:)#(66 3 #reduceActionForArray4:)#(67 0 #reduceFor:)#(67 2 #reduceFor:)#(67 1 #reduceFor:)#(68 1 #reduceActionForConstant1:)#(68 1 #reduceActionForConstant2:)#(68 1 #reduceActionForConstant3:)#(68 1 #reduceActionForConstant4:)#(68 1 #reduceActionForConstant5:)#(68 1 #reduceActionForConstant6:)#(68 1 #reduceActionForConstant7:)#(68 2 #reduceActionForConstant8:)#(68 2 #reduceActionForConstant9:)#(68 2 #reduceActionForConstant10:)#(68 2 #reduceActionForConstant11:)#(68 2 #reduceActionForConstant12:)#(68 4 #reduceActionForConstant13:)#(68 4 #reduceActionForConstant14:)#(68 4 #reduceActionForConstant15:)#(68 4 #reduceActionForConstant16:)#(69 1 #reduceFor:)#(70 1 #reduceActionForLiteralConstant1:)#(70 1 #reduceActionForLiteralConstant2:)#(70 1 #reduceActionForLiteralConstant3:)#(70 1 #reduceActionForLiteralConstant4:)#(70 1 #reduceActionForLiteralConstant5:)#(70 1 #reduceActionForLiteralConstant6:)#(70 3 #reduceActionForLiteralConstant7:)#(70 3 #reduceActionForLiteralConstant8:)#(70 1 #reduceFor:)#(71 1 #reduceActionForStudioArrayOpen1:)#(72 0 #reduceFor:)#(72 1 #reduceFor:)#(72 2 #reduceFor:)#(72 3 #reduceActionForObjectStudioArray4:)#(73 1 #reduceActionForArrayLiteral1:)#(73 3 #reduceActionForArrayLiteral2:)#(73 3 #reduceActionForArrayLiteral3:)#(74 1 #reduceActionForObjectStudioArrayLiteral1:)#(74 3 #reduceActionForObjectStudioArrayLiteral2:)#(77 2 #reduceFor:)#(78 0 #reduceFor:)#(78 2 #reduceActionForTemporaryVariables2:))</body><body package="RBCodeHighlighting" selector="transitionTable">transitionTable	^#(#[1 0 13 0 20 0 17 0 24 0 21 0 26 0 25 0 33 0 29 0 34 0 33 0 49 0 37 0 62 0 41 0 64 0 45 0 76]#[1 0 82 0 2 0 82 0 4 0 49 0 7 0 53 0 10 0 82 0 12 0 82 0 13 0 82 0 14 0 82 0 15 0 82 0 18 0 82 0 19 0 82 0 20 0 82 0 21 0 82 0 22 0 82 0 23 0 82 0 29 0 82 0 30 0 57 0 41 0 82 0 75 0 82 0 76 0 61 0 77]#[0 1 66 0 2 0 4 0 7 0 9 0 10 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 29 0 30 0 75 0 76]#[0 0 65 0 20]#[0 0 69 0 20]#[1 0 178 0 2 0 178 0 4 0 178 0 7 0 178 0 9 0 178 0 10 0 178 0 12 0 178 0 13 0 178 0 14 0 178 0 15 0 178 0 18 0 178 0 19 0 178 0 20 0 178 0 21 0 178 0 22 0 178 0 23 0 73 0 24 0 178 0 29 0 178 0 30 0 178 0 75 0 178 0 76]#[0 0 0 0 75]#[1 0 34 0 2 0 34 0 4 0 34 0 7 0 34 0 9 0 34 0 10 0 34 0 12 0 34 0 13 0 34 0 14 0 34 0 15 0 34 0 18 0 34 0 19 0 34 0 20 0 34 0 21 0 34 0 22 0 34 0 23 0 34 0 29 0 34 0 30 0 77 0 35 0 81 0 63 0 34 0 75 0 34 0 76]#[1 0 34 0 2 0 34 0 4 0 34 0 7 0 34 0 9 0 34 0 10 0 34 0 12 0 34 0 13 0 34 0 14 0 34 0 15 0 34 0 18 0 34 0 19 0 34 0 20 0 34 0 21 0 34 0 22 0 34 0 23 0 34 0 29 0 34 0 30 0 77 0 35 0 85 0 63 0 34 0 75 0 34 0 76]#[1 0 34 0 2 0 34 0 4 0 34 0 7 0 34 0 9 0 34 0 10 0 34 0 12 0 34 0 13 0 34 0 14 0 34 0 15 0 34 0 18 0 34 0 19 0 34 0 20 0 34 0 21 0 34 0 22 0 34 0 23 0 34 0 29 0 34 0 30 0 77 0 35 0 89 0 63 0 34 0 75 0 34 0 76]#[1 0 74 0 2 0 74 0 4 0 74 0 7 0 74 0 9 0 74 0 10 0 74 0 12 0 74 0 13 0 74 0 14 0 74 0 15 0 74 0 18 0 74 0 19 0 74 0 20 0 74 0 21 0 74 0 22 0 74 0 23 0 93 0 24 0 74 0 29 0 74 0 30 0 97 0 39 0 74 0 75 0 74 0 76]#[1 1 250 0 7 1 250 0 20 0 101 0 78]#[0 0 86 0 2 0 3 0 4 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 29 0 30 0 75 0 76]#[1 0 105 0 2 0 94 0 3 0 109 0 4 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 0 165 0 40 0 169 0 42 0 173 0 43 0 177 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71 0 94 0 75 0 221 0 76]#[0 0 0 0 75]#[0 0 6 0 2 0 4 0 7 0 9 0 10 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 75 0 76]#[0 1 50 0 2 0 4 0 7 0 9 0 10 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 29 0 30 0 75 0 76]#[0 0 225 0 20]#[1 0 105 0 2 0 109 0 4 0 229 0 7 0 233 0 9 0 237 0 10 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 0 241 0 40 0 169 0 42 0 173 0 43 0 177 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71 0 94 0 75 0 221 0 76]#[0 0 26 0 75]#[0 0 22 0 75]#[0 0 18 0 75]#[0 0 245 0 20]#[1 0 34 0 2 0 34 0 4 0 34 0 7 0 34 0 9 0 34 0 10 0 34 0 12 0 34 0 13 0 34 0 14 0 34 0 15 0 34 0 18 0 34 0 19 0 34 0 20 0 34 0 21 0 34 0 22 0 34 0 23 0 34 0 29 0 34 0 30 0 77 0 35 0 249 0 63 0 34 0 75 0 34 0 76]#[1 0 253 0 7 1 1 0 20]#[0 0 150 0 1 0 2 0 3 0 4 0 7 0 10 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 29 0 30 0 76]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 1 5 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71]#[0 1 110 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[1 1 9 0 2 1 13 0 14 1 17 0 18 1 21 0 20 1 25 0 23 1 29 0 24 1 33 0 25 1 37 0 26 1 41 0 65]#[0 1 206 0 2 0 6 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 76]#[0 1 106 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 46 0 2 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 29 0 30]#[0 1 102 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[1 0 254 0 3 0 254 0 5 1 45 0 11 0 254 0 17 0 254 0 20 0 254 0 24 0 254 0 26 0 254 0 75]#[0 1 114 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 118 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 126 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[1 1 2 0 3 1 2 0 5 1 49 0 11 1 2 0 17 1 2 0 20 1 2 0 24 1 2 0 26 1 2 0 75]#[0 1 122 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 0 250 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[0 1 246 0 3 0 75]#[0 0 78 0 3 0 75]#[1 0 130 0 3 1 53 0 5 1 57 0 44 0 130 0 75]#[0 0 118 0 3 0 5 0 75]#[1 1 61 0 1 0 82 0 2 0 82 0 3 0 82 0 4 0 49 0 7 0 53 0 10 0 82 0 12 0 82 0 13 0 82 0 14 0 82 0 15 0 82 0 18 0 82 0 19 0 82 0 20 0 82 0 21 0 82 0 22 0 82 0 23 0 82 0 29 0 82 0 30 0 57 0 41 1 65 0 47 0 82 0 76 1 69 0 77]#[0 1 6 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[0 0 146 0 3 0 5 0 17 0 75]#[1 0 210 0 3 0 210 0 5 0 210 0 16 0 210 0 17 1 73 0 52 0 210 0 75]#[1 0 210 0 3 0 210 0 5 0 210 0 16 0 210 0 17 1 77 0 24 1 81 0 26 1 85 0 52 1 89 0 57 1 93 0 58 0 210 0 75]#[1 0 210 0 3 0 210 0 5 0 210 0 16 0 210 0 17 1 97 0 20 1 77 0 24 1 81 0 26 1 101 0 52 1 105 0 56 1 109 0 57 1 113 0 58 0 210 0 75]#[1 0 194 0 3 0 194 0 5 0 194 0 17 1 97 0 20 1 77 0 24 1 81 0 26 1 117 0 56 1 121 0 57 1 125 0 58 0 194 0 75]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 1 129 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71]#[0 0 66 0 3 0 5 0 8 0 16 0 17 0 20 0 24 0 26 0 75]#[1 1 210 0 2 1 210 0 6 1 210 0 12 1 210 0 13 1 210 0 14 1 210 0 15 1 210 0 18 1 210 0 19 1 210 0 20 1 210 0 21 1 210 0 22 1 210 0 23 1 210 0 24 1 210 0 25 1 210 0 26 1 210 0 29 1 210 0 30 1 210 0 32 1 133 0 72 1 137 0 76]#[1 1 141 0 4 1 145 0 5]#[0 0 10 0 2 0 4 0 7 0 9 0 10 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 75 0 76]#[1 1 250 0 7 1 250 0 20 1 149 0 78]#[1 1 153 0 20 1 157 0 24 1 161 0 36 1 165 0 37 1 169 0 76]#[1 0 34 0 2 0 34 0 4 0 34 0 9 0 34 0 12 0 34 0 13 0 34 0 14 0 34 0 15 0 34 0 18 0 34 0 19 0 34 0 20 0 34 0 21 0 34 0 22 0 34 0 23 0 34 0 29 0 34 0 30 1 173 0 35 0 34 0 75 0 34 0 76]#[0 1 62 0 75]#[0 0 14 0 2 0 4 0 7 0 9 0 10 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 75 0 76]#[0 0 30 0 75]#[0 0 90 0 2 0 3 0 4 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 29 0 30 0 75 0 76]#[0 1 254 0 7 0 20]#[1 0 130 0 3 1 177 0 5 1 181 0 44 0 130 0 75]#[1 1 90 0 3 1 90 0 21 1 185 0 67 1 189 0 76]#[1 1 193 0 20 1 197 0 29]#[0 1 70 0 2 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 76]#[0 1 134 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 130 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 142 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 146 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 138 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[1 1 74 0 2 1 74 0 12 1 74 0 13 1 74 0 14 1 74 0 15 1 74 0 17 1 74 0 18 1 74 0 19 1 74 0 20 1 74 0 21 1 74 0 22 1 74 0 23 1 74 0 24 1 74 0 25 1 74 0 26 1 74 0 29 1 74 0 30 1 74 0 32 1 201 0 66 1 205 0 76]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 1 209 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 1 213 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71]#[1 0 105 0 2 0 134 0 3 1 217 0 4 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 1 221 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71 0 134 0 75]#[0 0 98 0 3 0 75]#[0 1 225 0 20]#[1 1 229 0 1 1 233 0 3 1 237 0 7 1 241 0 10]#[0 1 245 0 3]#[1 0 182 0 3 0 182 0 5 1 249 0 16 0 182 0 17 0 182 0 75]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 1 253 0 20 0 141 0 21 0 145 0 22 0 149 0 23 2 1 0 29 0 157 0 30 0 161 0 38 0 181 0 46 0 185 0 48 2 5 0 53 2 9 0 54 2 13 0 55 2 17 0 59 0 209 0 61 0 213 0 68 0 217 0 71]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 1 253 0 20 0 141 0 21 0 145 0 22 0 149 0 23 2 1 0 29 0 157 0 30 0 161 0 38 0 181 0 46 0 185 0 48 2 21 0 54 2 25 0 55 2 29 0 60 0 209 0 61 0 213 0 68 0 217 0 71]#[1 0 186 0 3 0 186 0 5 1 249 0 16 0 186 0 17 0 186 0 75]#[0 0 230 0 3 0 5 0 16 0 17 0 24 0 26 0 75]#[1 0 202 0 3 0 202 0 5 0 202 0 16 0 202 0 17 2 33 0 24 0 202 0 75]#[0 1 10 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[1 0 190 0 3 0 190 0 5 1 249 0 16 0 190 0 17 0 190 0 75]#[0 0 238 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[0 0 226 0 3 0 5 0 16 0 17 0 24 0 26 0 75]#[1 0 198 0 3 0 198 0 5 0 198 0 16 0 198 0 17 2 33 0 24 0 198 0 75]#[0 0 242 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[0 0 234 0 3 0 5 0 16 0 17 0 24 0 26 0 75]#[1 0 206 0 3 0 206 0 5 0 206 0 16 0 206 0 17 2 33 0 24 0 206 0 75]#[0 2 37 0 17]#[1 2 41 0 2 2 45 0 6 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 1 17 0 18 0 133 0 19 2 49 0 20 0 141 0 21 0 145 0 22 0 149 0 23 2 53 0 24 2 57 0 25 2 61 0 26 2 65 0 29 0 157 0 30 2 69 0 32 2 73 0 65 2 77 0 68 2 81 0 70 2 85 0 71 2 89 0 74]#[0 1 214 0 2 0 6 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 2 93 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71]#[1 0 105 0 2 2 97 0 4 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 2 101 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71]#[1 2 105 0 7 1 1 0 20]#[0 0 46 0 8]#[1 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 133 0 19 0 141 0 21 0 145 0 22 0 149 0 23 0 157 0 30 2 109 0 38 0 213 0 68 0 217 0 71]#[0 2 113 0 8]#[1 0 50 0 8 2 117 0 24]#[0 2 121 0 8]#[1 0 105 0 2 0 109 0 4 0 233 0 9 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 2 125 0 40 0 169 0 42 0 173 0 43 0 177 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71 0 94 0 75 0 221 0 76]#[0 0 134 0 3 0 75]#[0 0 106 0 3 0 75]#[1 2 129 0 3 2 133 0 21]#[0 1 98 0 3 0 21]#[0 2 137 0 6]#[0 2 141 0 6]#[1 2 41 0 2 0 113 0 12 0 117 0 13 2 145 0 14 0 125 0 15 2 149 0 17 1 17 0 18 0 133 0 19 2 153 0 20 0 141 0 21 0 145 0 22 0 149 0 23 2 53 0 24 2 57 0 25 2 61 0 26 2 65 0 29 0 157 0 30 2 69 0 32 2 73 0 65 2 77 0 68 2 157 0 70 2 161 0 73]#[0 1 78 0 2 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 138 0 3 0 5 0 17 0 75]#[0 0 142 0 3 0 5 0 17 0 75]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 2 165 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71]#[0 0 122 0 3 0 5 0 75]#[0 0 154 0 1 0 3 0 7 0 10]#[0 2 169 0 20]#[0 0 166 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[1 0 82 0 2 0 82 0 3 0 82 0 4 0 49 0 7 0 53 0 10 0 82 0 12 0 82 0 13 0 82 0 14 0 82 0 15 0 82 0 18 0 82 0 19 0 82 0 20 0 82 0 21 0 82 0 22 0 82 0 23 0 82 0 29 0 82 0 30 0 57 0 41 0 82 0 76 2 173 0 77]#[1 1 250 0 7 1 250 0 20 2 177 0 78]#[0 0 162 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[1 1 97 0 20 1 77 0 24 1 81 0 26 2 181 0 56 2 185 0 57 2 189 0 58]#[0 0 254 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[0 1 2 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[1 1 26 0 3 1 26 0 5 1 26 0 16 1 26 0 17 1 26 0 24 1 81 0 26 1 89 0 57 1 26 0 75]#[1 1 30 0 3 1 30 0 5 1 30 0 16 1 30 0 17 1 97 0 20 1 30 0 24 1 81 0 26 1 105 0 56 1 109 0 57 1 30 0 75]#[1 1 34 0 3 1 34 0 5 1 34 0 16 1 34 0 17 1 97 0 20 1 34 0 24 1 81 0 26 1 117 0 56 1 121 0 57 1 34 0 75]#[0 1 18 0 3 0 5 0 16 0 17 0 24 0 75]#[1 1 38 0 3 1 38 0 5 1 38 0 16 1 38 0 17 1 97 0 20 1 38 0 24 1 38 0 26 1 105 0 56 1 38 0 75]#[1 1 42 0 3 1 42 0 5 1 42 0 16 1 42 0 17 1 97 0 20 1 42 0 24 1 42 0 26 1 117 0 56 1 42 0 75]#[0 1 14 0 3 0 5 0 16 0 17 0 24 0 26 0 75]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 1 253 0 20 0 141 0 21 0 145 0 22 0 149 0 23 2 1 0 29 0 157 0 30 0 161 0 38 0 181 0 46 0 185 0 48 2 5 0 53 2 9 0 54 2 13 0 55 2 193 0 59 0 209 0 61 0 213 0 68 0 217 0 71]#[0 0 246 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[1 1 90 0 3 1 90 0 21 2 197 0 67 1 189 0 76]#[0 0 70 0 3 0 5 0 8 0 16 0 17 0 20 0 24 0 26 0 75]#[1 1 174 0 2 1 174 0 6 2 201 0 11 1 174 0 12 1 174 0 13 1 174 0 14 1 174 0 15 1 174 0 18 1 174 0 19 1 174 0 20 1 174 0 21 1 174 0 22 1 174 0 23 1 174 0 24 1 174 0 25 1 174 0 26 1 174 0 29 1 174 0 30 1 174 0 32]#[0 1 186 0 2 0 6 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 190 0 2 0 6 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 182 0 2 0 6 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 178 0 2 0 6 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 202 0 2 0 6 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 1 74 0 2 1 74 0 12 1 74 0 13 1 74 0 14 1 74 0 15 1 74 0 17 1 74 0 18 1 74 0 19 1 74 0 20 1 74 0 21 1 74 0 22 1 74 0 23 1 74 0 24 1 74 0 25 1 74 0 26 1 74 0 29 1 74 0 30 1 74 0 32 2 205 0 66 1 205 0 76]#[0 1 170 0 2 0 6 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 238 0 2 0 6 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 1 210 0 2 1 210 0 6 1 210 0 12 1 210 0 13 1 210 0 14 1 210 0 15 1 210 0 18 1 210 0 19 1 210 0 20 1 210 0 21 1 210 0 22 1 210 0 23 1 210 0 24 1 210 0 25 1 210 0 26 1 210 0 29 1 210 0 30 1 210 0 32 2 209 0 72 1 137 0 76]#[0 1 218 0 2 0 6 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 0 130 0 3 1 177 0 5 2 213 0 44 0 130 0 75]#[1 0 105 0 2 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 2 217 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71]#[0 0 126 0 3 0 5 0 75]#[1 0 34 0 2 0 34 0 4 0 34 0 9 0 34 0 12 0 34 0 13 0 34 0 14 0 34 0 15 0 34 0 18 0 34 0 19 0 34 0 20 0 34 0 21 0 34 0 22 0 34 0 23 0 34 0 29 0 34 0 30 2 221 0 35 0 34 0 75 0 34 0 76]#[0 0 54 0 8 0 24]#[0 0 38 0 2 0 4 0 7 0 9 0 10 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 29 0 30 0 75 0 76]#[1 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 133 0 19 2 225 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 157 0 30 2 229 0 38 0 213 0 68 0 217 0 71]#[0 0 42 0 2 0 4 0 7 0 9 0 10 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 29 0 30 0 75 0 76]#[0 1 58 0 75]#[0 1 162 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 94 0 3 0 21]#[0 1 150 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[0 1 154 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[1 2 233 0 20 2 237 0 29]#[0 1 158 0 2 0 3 0 5 0 6 0 8 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 75]#[1 1 174 0 2 2 241 0 11 1 174 0 12 1 174 0 13 1 174 0 14 1 174 0 15 1 174 0 17 1 174 0 18 1 174 0 19 1 174 0 20 1 174 0 21 1 174 0 22 1 174 0 23 1 174 0 24 1 174 0 25 1 174 0 26 1 174 0 29 1 174 0 30 1 174 0 32]#[0 1 226 0 2 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 82 0 2 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 0 130 0 3 1 177 0 5 2 245 0 44 0 130 0 75]#[0 0 158 0 1 0 3 0 7 0 10]#[0 2 249 0 3]#[1 2 253 0 7 1 1 0 20]#[0 0 214 0 3 0 5 0 16 0 17 0 75]#[0 0 218 0 3 0 5 0 16 0 17 0 75]#[1 0 222 0 3 0 222 0 5 0 222 0 16 0 222 0 17 2 33 0 24 0 222 0 75]#[0 1 22 0 3 0 5 0 16 0 17 0 24 0 75]#[1 3 1 0 3 2 133 0 21]#[0 1 222 0 2 0 6 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 2 41 0 2 0 113 0 12 0 117 0 13 2 145 0 14 0 125 0 15 3 5 0 17 1 17 0 18 0 133 0 19 2 153 0 20 0 141 0 21 0 145 0 22 0 149 0 23 2 53 0 24 2 57 0 25 2 61 0 26 2 65 0 29 0 157 0 30 2 69 0 32 2 73 0 65 2 77 0 68 2 157 0 70 2 161 0 73]#[1 2 41 0 2 3 9 0 6 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 1 17 0 18 0 133 0 19 2 49 0 20 0 141 0 21 0 145 0 22 0 149 0 23 2 53 0 24 2 57 0 25 2 61 0 26 2 65 0 29 0 157 0 30 2 69 0 32 2 73 0 65 2 77 0 68 2 81 0 70 2 85 0 71 2 89 0 74]#[0 0 110 0 3 0 75]#[1 0 130 0 3 1 177 0 5 3 13 0 44 0 130 0 75]#[1 0 105 0 2 0 109 0 4 0 233 0 9 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 3 17 0 40 0 169 0 42 0 173 0 43 0 177 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71 0 94 0 75 0 221 0 76]#[0 0 62 0 8 0 24]#[0 0 58 0 8 0 24]#[0 3 21 0 6]#[0 3 25 0 6]#[0 1 86 0 2 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 102 0 3 0 75]#[0 0 170 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75]#[1 0 105 0 2 0 94 0 3 0 109 0 4 0 113 0 12 0 117 0 13 0 121 0 14 0 125 0 15 0 129 0 18 0 133 0 19 0 137 0 20 0 141 0 21 0 145 0 22 0 149 0 23 0 153 0 29 0 157 0 30 0 161 0 38 3 29 0 40 0 169 0 42 0 173 0 43 0 177 0 45 0 181 0 46 0 185 0 48 0 189 0 50 0 193 0 51 0 197 0 53 0 201 0 54 0 205 0 55 0 209 0 61 0 213 0 68 0 217 0 71 0 221 0 76]#[0 1 198 0 2 0 6 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 194 0 2 0 6 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 242 0 2 0 6 0 12 0 13 0 14 0 15 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 114 0 3 0 75]#[0 1 54 0 75]#[0 1 230 0 2 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 234 0 2 0 12 0 13 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 33 0 3]#[0 0 174 0 3 0 5 0 16 0 17 0 20 0 24 0 26 0 75])</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingParser class</class-id> <category>generated-starting states</category><body package="RBCodeHighlighting" selector="startingStateForMethod">startingStateForMethod	^1</body><body package="RBCodeHighlighting" selector="startingStateForSequenceNode">startingStateForSequenceNode	^2</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingParser class</class-id> <category>generated-accessing</category><body package="RBCodeHighlighting" selector="scannerClass">scannerClass	^SmalltalkCodeHighlightingScanner</body></methods><methods><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingParser class</class-id> <category>generated-comments</category><body package="RBCodeHighlighting" selector="parserDefinitionComment">parserDefinitionComment	"%id &lt;number&gt; &lt;negative_number&gt; &lt;name&gt; &lt;smalltalkComment&gt; &lt;binary_symbol&gt; ;%start SequenceNode ;Method:	UnaryMethodName MethodSequenceNode |	BinaryMethodName MethodSequenceNode |	KeywordMethodName MethodSequenceNode|	error AddDoitScope MethodSequenceNode;AddDoitScope:	{self addNewScope};UnaryMethodName: 	&lt;name&gt; {self addNewScope. self formatUnaryMethod: '1'};BinaryMethodName:	&lt;binary_symbol&gt; &lt;name&gt; {self addNewScope. self formatBinaryMethod: '1' with: '2'};KeywordMethodName:	KeywordMethodList {self formatKeywordMethod: '1'};KeywordMethodList:	&lt;keyword&gt; &lt;name&gt; {self addNewScope. OrderedCollection with: (OrderedCollection with: '1') with: (OrderedCollection with: '2')}|	KeywordMethodList &lt;keyword&gt; &lt;name&gt; {'1' first add: '2'. '1' last add: '3'. '1'}|	error &lt;keyword&gt; &lt;name&gt; {OrderedCollection with: (OrderedCollection with: '1') with: (OrderedCollection with: '2')};Primitives:	|	Primitives ""&lt;"" PrimitiveMessageSend ""&gt;"" {self formatPrimitiveLeftBracket: '2' selector: '3' rightBracket: '4'}|	Primitives ""&lt;"" error ""&gt;"" {self formatPrimitiveLeftBracket: '2' selector: nil rightBracket: '4'};PrimitiveMessageSend:	&lt;name&gt; {OrderedCollection with: '1'}|	PrimitiveKeywordList {'1'};PrimitiveKeywordList:	&lt;keyword&gt; Literal {OrderedCollection with: '1'}|	PrimitiveKeywordList &lt;keyword&gt; Literal {'1' add: '2'; yourself}|	PrimitiveKeywordList &lt;keyword&gt; &lt;name&gt; {self formatTemporaryVariable: '3'. '1' add: '2'; yourself};MethodSequenceNode:	Primitives ""|"" TemporaryVariables ""|"" Primitives Statements|	Primitives ""||"" Primitives Statements|	Primitives Statements;SequenceNode:	Temporaries Statements;Temporaries:|	""||""|	""|"" TemporaryVariables ""|"";TemporaryVariables:|	TemporaryVariables &lt;name&gt; {self formatTemporaryVariable: '2'};Statements:	StatementGroup {self removeScope};StatementGroup:|	StatementList OptionalPeriod {self formatPeriod: '2'}|	StatementList ""."" ""^"" Expression OptionalPeriod {self formatPeriod: '2'; formatReturn: '3'; formatPeriod: '5'}|	""^"" Expression OptionalPeriod {self formatReturn: '1'; formatPeriod: '3'}|	error ""^"" Expression OptionalPeriod {self formatReturn: '2'; formatPeriod: '4'}|	error ""."" ""^"" Expression OptionalPeriod {self formatPeriod: '2'; formatReturn: '3'; formatPeriod: '5'};StatementList:	Expression|	StatementList ""."" Expression {self formatPeriod: '2'}|	error ""."" Expression {self formatPeriod: '2'};Block:	BlockOpen SequenceNode ""]"" {self formatBlockLeftBracket: '1' argumentsSeparator: nil rightBracket: '3'}|	BlockOpen BlockArgs ""]"" {self removeScope. self formatBlockLeftBracket: '1' argumentsSeparator: nil rightBracket: '3'}|	BlockOpen BlockArgs ""|"" SequenceNode ""]"" {self formatBlockLeftBracket: '1' argumentsSeparator: '3' rightBracket: '5'}|	BlockOpen BlockArgs ""||"" TemporaryVariables ""|"" Statements ""]"" {self formatBlockLeftBracket: '1' argumentsSeparator: '3' rightBracket: '7'};BlockOpen:	""["" {blockDepth := blockDepth + 1. self addNewScope. '1'};BlockArgs:	"":"" &lt;name&gt; {self formatBlockVariable: '2' colon: '1'}|	BlockArgs "":"" &lt;name&gt; {self formatBlockVariable: '3' colon: '2'};Expression:	&lt;name&gt; "":="" Expression {self formatAssignedVariable: '1'; formatAssignment: '2'}|	&lt;dotted_name&gt; "":="" Expression {self formatAssignedVariable: '1'; formatAssignment: '2'}|	Cascade;Cascade:	KeywordMessageSend CascadeList {self formatCascadeList: '2' to: '1'}|	BinaryMessageSend CascadeList {self formatCascadeList: '2' to: '1'}|	UnaryMessageSend CascadeList {self formatCascadeList: '2' to: '1'}|	Primary;CascadeList:	{OrderedCollection new}|	CascadeList "";"" UnaryMessage {'1' add: (CascadeElement type: #unary send: '3' marker: '2'); yourself}|	CascadeList "";"" BinaryMessage {'1' add: (CascadeElement type: #binary send: '3' marker: '2'); yourself}|	CascadeList "";"" KeywordMessage {'1' add: (CascadeElement type: #keyword send: '3' marker: '2'); yourself};KeywordMessageSend:	UnaryMessageSend KeywordMessage {self formatKeywordMessage: '2' to: nil}|	BinaryMessageSend KeywordMessage {self formatKeywordMessage: '2' to: nil}|	Primary KeywordMessage {self formatKeywordMessage: '2' to: '1'};KeywordMessage:	&lt;keyword&gt; KeywordArgument {OrderedCollection with: '1'}|	KeywordMessage &lt;keyword&gt; KeywordArgument {'1' add: '2'; yourself} ;KeywordArgument:	BinaryMessageSend|	UnaryMessageSend|	Primary;BinaryMessageSend:	UnaryMessageSend BinaryMessage {self formatBinaryMessage: '2' to: nil}|	BinaryMessageSend BinaryMessage {self formatBinaryMessage: '2' to: nil}|	Primary BinaryMessage {self formatBinaryMessage: '2' to: '1'};BinaryMessage:	&lt;binary_symbol&gt; BinaryArgument {OrderedCollection with: '1'} ;BinaryArgument:	UnaryMessageSend|	Primary;UnaryMessageSend:	UnaryMessageSend UnaryMessage {self formatUnaryMessage: '2' to: nil}|	Primary UnaryMessage {self formatUnaryMessage: '2' to: '1'};UnaryMessage:	&lt;name&gt; {OrderedCollection with: '1'};Primary:	PrimaryOpen Expression "")"" {self formatExpressionLeftParenthesis: '1' rightParenthesis: '3'}|	Literal {'1'}|	&lt;name&gt; {self formatVariableReference: '1'}|	&lt;dotted_name&gt; {self formatVariableReference: '1'}|	Block {BlockClosure};PrimaryOpen:	""("" {parenDepth := parenDepth + 1. '1'};Constant:	""true"" {self formatTrue: '1'}|	""false"" {self formatFalse: '1'}|	""nil"" {self formatNil: '1'}|	&lt;number&gt; {self formatNumber: '1'}|	&lt;negative_number&gt; {self formatNumber: '1'}|	&lt;character&gt; {self formatCharacter: '1'}|	&lt;string&gt; {self formatString: '1'}|	 ""#"" &lt;string&gt; {self formatSymbol: '2' hash: '1'}|	""#"" &lt;name&gt; {self formatSymbol: '2' hash: '1'}|	""#"" &lt;binary_symbol&gt; {self formatSymbol: '2' hash: '1'}|	""#"" &lt;keyword&gt; {self formatSymbol: '2' hash: '1'}|	""#"" &lt;multikeyword&gt; {self formatSymbol: '2' hash: '1'}|	""#"" ""{"" &lt;name&gt; ""}"" {self formatQualifiedReferenceHash: '1' leftBrace: '2' rightBrace: '4'}|	""#"" ""{"" &lt;dotted_name&gt; ""}"" {self formatQualifiedReferenceHash: '1' leftBrace: '2' rightBrace: '4'}|	""#"" LiteralArrayOpen Array "")"" {self formatArrayHash: '1' leftDelimiter: '2' rightDelimiter: '4'}|	""#"" ""["" ByteArray ""]"" {self formatByteArrayHash: '1' leftBracket: '2' rightBracket: '4'};LiteralArrayOpen:	""(""	{literalArray := literalArray + 1. '1'};LiteralConstant:	Constant {'1'}|	&lt;name&gt; {self formatSymbol: '1' hash: nil}|	&lt;dotted_name&gt; {self formatSymbol: '1' hash: nil}|	&lt;binary_symbol&gt; {self formatSymbol: '1' hash: nil}|	&lt;keyword&gt; {self formatSymbol: '1' hash: nil}|	&lt;multikeyword&gt; {self formatSymbol: '1' hash: nil}|	LiteralArrayOpen Array "")"" {self formatArrayHash: nil leftDelimiter: '1' rightDelimiter: '3'}|	""["" ByteArray ""]"" {self formatByteArrayHash: nil leftBracket: '1' rightBracket: '3'}|	&lt;any_char&gt;;Literal:	Constant {'1'}|	StudioArrayOpen ObjectStudioArray ""}"" {self formatArrayHash: nil leftDelimiter: '1' rightDelimiter: '3'};StudioArrayOpen:	""{""	{literalArray := literalArray + 1. '1'};ByteArray: 	|	ByteArray &lt;number&gt; |	error;Array: 	|	error |	Array ArrayLiteral |	Array &lt;name&gt; "":="" {'2' stopPosition + 1 = '3' startPosition				 			ifTrue: [self formatSymbol: (SmaCCToken value: ('2' value , ':') start: '2' startPosition id: nil) hash: nil] 							ifFalse: [self formatSymbol: '2' hash: nil; 									formatSymbol: (SmaCCToken value: ':' start: '3' startPosition id: nil) hash: nil].  						scanner position: '3' startPosition. currentToken := nil. '1'};ArrayLiteral:	LiteralConstant {'1'}|	""{"" &lt;name&gt; ""}"" {self formatQualifiedReferenceHash: nil leftBrace: '1' rightBrace: '3'}|	""{"" &lt;dotted_name&gt; ""}"" {self formatQualifiedReferenceHash: nil leftBrace: '1' rightBrace: '3'};ObjectStudioArray: 	|	error |	ObjectStudioArray ObjectStudioArrayLiteral |	ObjectStudioArray &lt;name&gt; "":="" {'2' stopPosition + 1 = '3' startPosition				 			ifTrue: [self formatSymbol: (SmaCCToken value: ('2' value , ':') start: '2' startPosition id: nil) hash: nil] 							ifFalse: [self formatSymbol: '2' hash: nil; 									formatSymbol: (SmaCCToken value: ':' start: '3' startPosition id: nil) hash: nil].  						scanner position: '3' startPosition. currentToken := nil. '1'};ObjectStudioArrayLiteral:	LiteralConstant {'1'}|	StudioArrayOpen ObjectStudioArray ""}"" {self formatArrayHash: nil leftDelimiter: '1' rightDelimiter: '3'};OptionalPeriod:	{nil}|	""."" {'1'};"</body></methods><methods><class-id>Core.Metaclass</class-id> <category>compiling</category><body package="RBCodeHighlighting" selector="codeHighlighterClass">codeHighlighterClass	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer a compiler class appropriate for source methods of this class' metaclass."	^self instanceBehavior codeHighlighterClass</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>private</category><body package="RBCodeHighlighting" selector="highlight:from:">highlight: aText from: aHighlighter		^Refactory.CodeHighlighter.CodeHighlightingParser 		formatMethod: aText		forClass: (service context ifNotNil: [: c | c mclass ])		namespace: self doItEnvironment</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder	"(Highlighter Override - private - not for general use - may be removed at any time)	 Convert text pane to a highlighting pane."	self enableStackFiltering.	self textController 		autoAccept: false;		doNotHandleLocally: #explain;		keyboardHook: [:e :c | self textEditor: c keyPress: e].	self setupMenuBarMenu: (aBuilder menuAt: #menuBarMenu).	self stackView scrollOffsetHolder		expressInterestIn: #value		for: self		sendBack: #listScrolled.	self addHighlighters</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>private</category><body package="RBCodeHighlighting" selector="unhighlight:from:">unhighlight: aText from: aHighlighter		^aText addEmphasis: #() removeEmphasis: StyleDescription codeNames allowDuplicates: false</body></methods><methods><class-id>Core.Class</class-id> <category>compiling</category><body package="RBCodeHighlighting" selector="codeHighlighterClass">codeHighlighterClass	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer a compiler class appropriate for source methods of this class' metaclass."	^Refactory.CodeHighlighter.SmalltalkCodeHighlightingParser</body></methods><methods><class-id>Core.Character</class-id> <category>testing</category><body package="RBCodeHighlighting" selector="isBlank">isBlank	"space or tab"	^self == ($ ) or: [ self == ($	) ].</body></methods><methods><class-id>Tools.StyleDescription class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="codeNames">codeNames	"Answer the names of all code styles to be removed when code	 highlighting is disabled."	^(Pragma allNamed: #code in: self class) collect: [:pragma | (self perform: pragma selector) name]</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="dontStyleSmalltalkCode">dontStyleSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Mark current page that it shouldn't style as code."	self currentPage dontStyleSmalltalkCode</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>testing</category><body package="RBCodeHighlighting" selector="isHighlightingEnabled">isHighlightingEnabled	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer whether highlighting is enabled for the current page."	^Refactory.CodeHighlighter.CodeHighlighter isHighlighting		and: [self currentPage canStyleSmalltalkCode]</body><body package="RBCodeHighlighting" selector="isStylingSmalltalkCode">isStylingSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer whether the current page is styled as code."	^self currentPage isStylingSmalltalkCode</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="styleSmalltalkCode">styleSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Mark current page that it should style as code."	self currentPage styleSmalltalkCode</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="highlight:from:">highlight: aText from: aHighlighter		^Refactory.CodeHighlighter.CodeHighlightingParser 		formatExpression: aText		forClass: nil class		namespace: nil</body><body package="RBCodeHighlighting" selector="unhighlight:from:">unhighlight: aText from: aHighlighter		^aText addEmphasis: #() removeEmphasis: StyleDescription codeNames allowDuplicates: false</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="highlight:from:">highlight: aText from: aHighlighter	^Refactory.CodeHighlighter.CodeHighlightingParser 		formatMethod: aText		forClass: self selectedClass		namespace: self doItEnvironment</body><body package="RBCodeHighlighting" selector="unhighlight:from:">unhighlight: aText from: aHighlighter		^aText addEmphasis: #() removeEmphasis: StyleDescription codeNames allowDuplicates: false</body></methods><methods><class-id>Tools.WorkspaceInspectorPage</class-id> <category>testing</category><body package="RBCodeHighlighting" selector="canStyleSmalltalkCode">canStyleSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer whether the current page can style its source as Smalltalk code."	^false</body><body package="RBCodeHighlighting" selector="isStylingSmalltalkCode">isStylingSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer whether the current page is styled as code."	^false</body></methods><methods><class-id>Tools.StylesheetSettingsPage</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="highlight:from:">highlight: aText from: aHighlighter	"(Highlighter Extension - private - not for general use - may be removed at any time)	 If highlighting is enabled for the receiver, add a code highlighter."	^Refactory.CodeHighlighter.CodeHighlightingParser 		formatMethod: aText		forClass: self class		namespace: nil</body><body package="RBCodeHighlighting" selector="unhighlight:from:">unhighlight: aText from: aHighlighter		^aText addEmphasis: #() removeEmphasis: StyleDescription codeNames allowDuplicates: false</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="highlight:from:">highlight: aText from: aHighlighter		^Refactory.CodeHighlighter.CodeHighlightingParser 		formatMethod: aText		forClass: object class		namespace: object class environment</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(aBuilder componentAt: #methodList) widget displayStringSelector: #simpleReverseDisplayString.	self configureCodeViewController: (aBuilder componentAt: #text) widget controller.	self addHighlighters</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>private</category><body package="RBCodeHighlighting" selector="textController">textController	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer the receiver's text widget's controller."	^builder notNil ifTrue: [(builder componentAt: #text) widget controller]</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="unhighlight:from:">unhighlight: aText from: aHighlighter		^aText addEmphasis: #() removeEmphasis: StyleDescription codeNames allowDuplicates: false</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>testing</category><body package="RBCodeHighlighting" selector="canStyleSmalltalkCode">canStyleSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer whether the current page can style its source as Smalltalk code."	^true</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="dontStyleSmalltalkCode">dontStyleSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Mark current page that it shouldn't style as code."	self removeActionsForEvent: #isStylingSmalltalkCode.	Refactory.CodeHighlighter.HighlightingTextEditorController 		revertController: self textEditor.</body><body package="RBCodeHighlighting" selector="highlight:from:">highlight: aText from: aHighlighter	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Highlight the text of the current page as if it were code."	^Refactory.CodeHighlighter.CodeHighlightingParser 		formatExpression: aText		forClass: nil class		namespace: self doItEnvironment</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>testing</category><body package="RBCodeHighlighting" selector="isStylingSmalltalkCode">isStylingSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Answer whether the current page is styled as code."	^self eventTable includesKey: #isStylingSmalltalkCode</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="styleSmalltalkCode">styleSmalltalkCode	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Mark current page for styling as code."	self when: #isStylingSmalltalkCode send: #yourself to: self.	self addCodeHighlighter</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="unhighlight:from:">unhighlight: aText from: aHighlighter		^aText addEmphasis: #() removeEmphasis: StyleDescription codeNames allowDuplicates: false</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>configuring</category><body package="RBCodeHighlighting" selector="hyperlinkEmphasizer">hyperlinkEmphasizer	&lt;emphasizer&gt;	^#{UI.HyperlinkHighlighter}		ifDefinedDo:			[:shc |			(shc isHighlighting and: [shc isCheckingSomeCode])				ifTrue: [HyperlinkCodeEmphasizer on: self]]</body><body package="RBCodeHighlighting" selector="lexicalEmphasizer">lexicalEmphasizer	&lt;emphasizer&gt;	^CodeHighlighter markUpLanguage ifTrue: [LexicalCodeEmphasizer on: self]</body><body package="RBCodeHighlighting" selector="spellingEmphasizer">spellingEmphasizer	&lt;emphasizer&gt;	^#{UI.SpellingHighlighter}		ifDefinedDo:			[:shc |			(shc isHighlighting and: [shc isCheckingSomeCode])				ifTrue: [SpellingCodeEmphasizer on: self]]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="parserPragmas">parserPragmas	"Answer the set of pragmas used by the class."	&lt;pragmas: #instance&gt;	^#(#emphasizer)</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="addCodeHighlighter">addCodeHighlighter	"(Highlighter Extension - private - not for general use - may be removed at any time)	 If highlighting is enabled for the receiver, add a code highlighter."	&lt;highlighter&gt;	(Refactory.CodeHighlighter.CodeHighlighter on: self textController for: self) ifNotNil: [:hl | hl forDebugger]</body></methods><methods><class-id>Tools.StyleDescription class</class-id> <category>style descriptions</category><body package="RBCodeHighlighting" selector="code_array">code_array	&lt;style&gt;	&lt;code&gt;	^self name: #code_array category: 'Literal' description: 'Array'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_assignment">code_assignment	&lt;style&gt;	&lt;code&gt;	^self name: #code_assignment category: 'Other' description: 'Assignment'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_binaryMessageSend">code_binaryMessageSend	&lt;style&gt;	&lt;code&gt;	^self name: #code_binaryMessageSend category: 'Method' description: 'Binary Message Send'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_binaryMethodName">code_binaryMethodName	&lt;style&gt;	&lt;code&gt;	^self name: #code_binaryMethodName category: 'Method' description: 'Binary Method Name'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_blockArgument">code_blockArgument	&lt;style&gt;	&lt;code&gt;	^self name: #code_blockArgument category: 'Variable' description: 'Block Argument Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_blockArgumentDefinition">code_blockArgumentDefinition	&lt;style&gt;	&lt;code&gt;	^self name: #code_blockArgumentDefinition category: 'Variable' description: 'Block Argument Definition'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket1">code_bracket1	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket1 category: 'Block' description: 'Block Level 1'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket2">code_bracket2	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket2 category: 'Block' description: 'Block Level 2'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket3">code_bracket3	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket3 category: 'Block' description: 'Block Level 3'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket4">code_bracket4	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket4 category: 'Block' description: 'Block Level 4'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket5">code_bracket5	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket5 category: 'Block' description: 'Block Level 5'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket6">code_bracket6	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket6 category: 'Block' description: 'Block Level 6'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket7">code_bracket7	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket7 category: 'Block' description: 'Block Level 7'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket8">code_bracket8	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket8 category: 'Block' description: 'Block Level 8'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_bracket9">code_bracket9	&lt;style&gt;	&lt;code&gt;	^self name: #code_bracket9 category: 'Block' description: 'Block Level 9'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_byteArray">code_byteArray	&lt;style&gt;	&lt;code&gt;	^self name: #code_byteArray category: 'Literal' description: 'Byte Array'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_cascade">code_cascade	&lt;style&gt;	&lt;code&gt;	^self name: #code_cascade category: 'Method' description: 'Cascade'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_character">code_character	&lt;style&gt;	&lt;code&gt;	^self name: #code_character category: 'Literal' description: 'Character'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_classReference">code_classReference	&lt;style&gt;	&lt;code&gt;	^self name: #code_classReference category: 'Variable' description: 'Class Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_comment">code_comment	&lt;style&gt;	&lt;code&gt;	^self name: #code_comment category: 'Comment' description: 'Comment'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_dnu">code_dnu	&lt;style&gt;	&lt;code&gt;	^self name: #code_dnu category: 'Error' description: 'Message Not Understood'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_false">code_false	&lt;style&gt;	&lt;code&gt;	^self name: #code_false category: 'Literal' description: 'false'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_globalVariableReference">code_globalVariableReference	&lt;style&gt;	&lt;code&gt;	^self name: #code_globalVariableReference category: 'Variable' description: 'Global Variable Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_instanceVariable">code_instanceVariable	&lt;style&gt;	&lt;code&gt;	^self name: #code_instanceVariable category: 'Variable' description: 'Instance Variable Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_keywordMessageSend">code_keywordMessageSend	&lt;style&gt;	&lt;code&gt;	^self name: #code_keywordMessageSend category: 'Method' description: 'Keyword Message Send'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_keywordMethodName">code_keywordMethodName	&lt;style&gt;	&lt;code&gt;	^self name: #code_keywordMethodName category: 'Method' description: 'Keyword Method Name'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_methodComment">code_methodComment	&lt;style&gt;	&lt;code&gt;	^self name: #code_methodComment category: 'Comment' description: 'Method Comment'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_methodVariable">code_methodVariable	&lt;style&gt;	&lt;code&gt;	^self name: #code_methodVariable category: 'Variable' description: 'Method Argument Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_methodVariableDefinition">code_methodVariableDefinition	&lt;style&gt;	&lt;code&gt;	^self name: #code_methodVariableDefinition category: 'Variable' description: 'Method Argument Definition'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_nameSpaceReference">code_nameSpaceReference	&lt;style&gt;	&lt;code&gt;	^self name: #code_nameSpaceReference category: 'Variable' description: 'Name Space Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_nil">code_nil	&lt;style&gt;	&lt;code&gt;	^self name: #code_nil category: 'Literal' description: 'nil'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_number">code_number	&lt;style&gt;	&lt;code&gt;	^self name: #code_number category: 'Literal' description: 'Number'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis1">code_parenthesis1	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis1 category: 'Parenthesis' description: 'Parenthesis Level 1'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis2">code_parenthesis2	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis2 category: 'Parenthesis' description: 'Parenthesis Level 2'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis3">code_parenthesis3	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis3 category: 'Parenthesis' description: 'Parenthesis Level 3'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis4">code_parenthesis4	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis4 category: 'Parenthesis' description: 'Parenthesis Level 4'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis5">code_parenthesis5	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis5 category: 'Parenthesis' description: 'Parenthesis Level 5'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis6">code_parenthesis6	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis6 category: 'Parenthesis' description: 'Parenthesis Level 6'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis7">code_parenthesis7	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis7 category: 'Parenthesis' description: 'Parenthesis Level 7'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis8">code_parenthesis8	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis8 category: 'Parenthesis' description: 'Parenthesis Level 8'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_parenthesis9">code_parenthesis9	&lt;style&gt;	&lt;code&gt;	^self name: #code_parenthesis9 category: 'Parenthesis' description: 'Parenthesis Level 9'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_primitive">code_primitive	&lt;style&gt;	&lt;code&gt;	^self name: #code_primitive category: 'Method' description: 'Primitive/Pragma'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_qualifiedReference">code_qualifiedReference	&lt;style&gt;	&lt;code&gt;	^self name: #code_qualifiedReference category: 'Variable' description: 'Qualified Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_redefinedVariableDefinition">code_redefinedVariableDefinition	&lt;style&gt;	&lt;code&gt;	^self name: #code_redefinedVariableDefinition category: 'Variable' description: 'Redefined Variable'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_return">code_return	&lt;style&gt;	&lt;code&gt;	^self name: #code_return category: 'Other' description: 'Return'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_self">code_self	&lt;style&gt;	&lt;code&gt;	^self name: #code_self category: 'Other' description: 'self'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_sharedVariableReference">code_sharedVariableReference	&lt;style&gt;	&lt;code&gt;	^self name: #code_sharedVariableReference category: 'Variable' description: 'Shared Variable Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_string">code_string	&lt;style&gt;	&lt;code&gt;	^self name: #code_string category: 'Literal' description: 'String'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_super">code_super	&lt;style&gt;	&lt;code&gt;	^self name: #code_super category: 'Other' description: 'super'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_symbol">code_symbol	&lt;style&gt;	&lt;code&gt;	^self name: #code_symbol category: 'Literal' description: 'Symbol'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_syntaxError">code_syntaxError	&lt;style&gt;	&lt;code&gt;	^self name: #code_syntaxError category: 'Error' description: 'Syntax Error'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_temporaryVariable">code_temporaryVariable	&lt;style&gt;	&lt;code&gt;	^self name: #code_temporaryVariable category: 'Variable' description: 'Temporary Variable Reference'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_temporaryVariableDefinition">code_temporaryVariableDefinition	&lt;style&gt;	&lt;code&gt;	^self name: #code_temporaryVariableDefinition category: 'Variable' description: 'Temporary Variable Definition'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_thisContext">code_thisContext	&lt;style&gt;	&lt;code&gt;	^self name: #code_thisContext category: 'Other' description: 'thisContext'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_true">code_true	&lt;style&gt;	&lt;code&gt;	^self name: #code_true category: 'Literal' description: 'true'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_unaryMessageSend">code_unaryMessageSend	&lt;style&gt;	&lt;code&gt;	^self name: #code_unaryMessageSend category: 'Method' description: 'Unary Message Send'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_unaryMethodName">code_unaryMethodName	&lt;style&gt;	&lt;code&gt;	^self name: #code_unaryMethodName category: 'Method' description: 'Unary Method Name'  emphasis: nil</body><body package="RBCodeHighlighting" selector="code_undeclaredVariable">code_undeclaredVariable	&lt;style&gt;	&lt;code&gt;	^self name: #code_undeclaredVariable category: 'Variable' description: 'Undeclared Variable' emphasis: nil</body></methods><methods><class-id>Tools.StyleDescription class</class-id> <category>style sheets</category><body package="RBCodeHighlighting" selector="codeStylesDefault">codeStylesDefault	"self styles: (self decodeStyles: self codeStylesDefault)"	&lt;stylesheet: 'Default Colors' order: 0&gt;	&lt;default&gt;	^#(		#(#code_comment #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} #lightGray))))		#(#code_methodComment #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkGray))))		#(#code_primitive #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #orange))))		"syntax"		#(#code_assignment)		#(#code_cascade)		#(#code_return #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #red))))		#(#code_self #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #blue))))		#(#code_super #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #royalBlue))))		#(#code_thisContext #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #orange))))		"selectors"		#(#code_binaryMethodName #(#bold))		#(#code_binaryMessageSend)		#(#code_keywordMethodName #(#bold))		#(#code_keywordMessageSend)		#(#code_unaryMethodName #(#bold))		#(#code_unaryMessageSend)		"locals"		#(#code_blockArgument #(#underline #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_blockArgumentDefinition #(#underline #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_instanceVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #navy))))		#(#code_methodVariable #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_methodVariableDefinition #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_temporaryVariable #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_temporaryVariableDefinition #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		"globals"		#(#code_classReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #purple))))		#(#code_globalVariableReference #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		#(#code_nameSpaceReference #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		#(#code_qualifiedReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_sharedVariableReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		"literals"		#(#code_array #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_byteArray #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_character #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_false #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_nil #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_number #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_string #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_symbol #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_true #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		"errors"		#(#code_dnu #(#jaggedEdge))		#(#code_redefinedVariableDefinition #(#jaggedEdge #(#{Core.Association} #color #(#{Graphics.ColorValue} #red))))		#(#code_syntaxError #(#jaggedEdge #(#{Core.Association} #color #(#{Graphics.ColorValue} #red))))		#(#code_undeclaredVariable #(#jaggedEdge #(#{Core.Association} #color #(#{Graphics.ColorValue} #red))))		"scope"		#(#code_bracket1)		#(#code_bracket2)		#(#code_bracket3)		#(#code_bracket4)		#(#code_bracket5)		#(#code_bracket6)		#(#code_bracket7)		#(#code_bracket8)		#(#code_bracket9)		#(#code_parenthesis1)		#(#code_parenthesis2)		#(#code_parenthesis3)		#(#code_parenthesis4)		#(#code_parenthesis5)		#(#code_parenthesis6)		#(#code_parenthesis7)		#(#code_parenthesis8)		#(#code_parenthesis9)	)</body><body package="RBCodeHighlighting" selector="codeStylesGreens">codeStylesGreens	"self styles: (self decodeStyles: self codeStylesGreens)"	&lt;stylesheet: 'Forest Tones' order: 10&gt;	^#(		#(#code_comment #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkGreen))))		#(#code_methodComment #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkGreen))))		#(#code_primitive #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #orange))))		"syntax"		#(#code_assignment)		#(#code_cascade)		#(#code_return #(#bold))		#(#code_self #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #navy))))		#(#code_super #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #navy))))		#(#code_thisContext #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #navy))))		"selectors"		#(#code_binaryMethodName #(#bold))		#(#code_binaryMessageSend)		#(#code_keywordMethodName #(#bold))		#(#code_keywordMessageSend)		#(#code_unaryMethodName #(#bold))		#(#code_unaryMessageSend)		"locals"		#(#code_blockArgument #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		#(#code_blockArgumentDefinition #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		#(#code_instanceVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #blue))))		#(#code_methodVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #olive))))		#(#code_methodVariableDefinition #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #olive))))		#(#code_temporaryVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		#(#code_temporaryVariableDefinition #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		"globals"		#(#code_classReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_globalVariableReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_nameSpaceReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_qualifiedReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_sharedVariableReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		"literals"		#(#code_array #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		#(#code_byteArray #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		#(#code_character #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		#(#code_false #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		#(#code_nil #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		#(#code_number #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		#(#code_string #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		#(#code_symbol #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		#(#code_true #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkRed))))		"errors"		#(#code_dnu #(#jaggedEdge))		#(#code_redefinedVariableDefinition #(#jaggedEdge #(#{Core.Association} #color #(#{Graphics.ColorValue} #red))))		#(#code_syntaxError #(#jaggedEdge #(#{Core.Association} #color #(#{Graphics.ColorValue} #red))))		#(#code_undeclaredVariable #(#jaggedEdge #(#{Core.Association} #color #(#{Graphics.ColorValue} #red))))		"scope"		#(#code_bracket1)		#(#code_bracket2)		#(#code_bracket3)		#(#code_bracket4)		#(#code_bracket5)		#(#code_bracket6)		#(#code_bracket7)		#(#code_bracket8)		#(#code_bracket9)		#(#code_parenthesis1)		#(#code_parenthesis2)		#(#code_parenthesis3)		#(#code_parenthesis4)		#(#code_parenthesis5)		#(#code_parenthesis6)		#(#code_parenthesis7)		#(#code_parenthesis8)		#(#code_parenthesis9)	)</body><body package="RBCodeHighlighting" selector="codeStylesPastels">codeStylesPastels	"self styles: (self decodeStyles: self codeStylesPastels)"	&lt;stylesheet: 'Bright Pastels' order: 10&gt;	^#(		#(#code_comment #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} 2048 8191 5119))))		#(#code_methodComment #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 1536 6143 3861))))		#(#code_primitive #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} 0 6618 0))))		"syntax"		#(#code_assignment)		#(#code_cascade)		#(#code_return #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #green))))		#(#code_self #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #blue))))		#(#code_super #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #blue))))		#(#code_thisContext #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 0 7233 7233))))		"selectors"		#(#code_binaryMethodName #(#bold))		#(#code_binaryMessageSend)		#(#code_keywordMethodName #(#bold))		#(#code_keywordMessageSend)		#(#code_unaryMethodName #(#bold))		#(#code_unaryMessageSend)		"locals"		#(#code_blockArgument #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta)) #underline))		#(#code_blockArgumentDefinition #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta)) #underline))		#(#code_instanceVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #navy))))		#(#code_methodVariable #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_methodVariableDefinition #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkMagenta))))		#(#code_temporaryVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 5185 0 5185))))		#(#code_temporaryVariableDefinition #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 5185 0 5185))))		"globals"		#(#code_classReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #purple))))		#(#code_globalVariableReference #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		#(#code_nameSpaceReference #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		#(#code_qualifiedReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_sharedVariableReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #darkCyan))))		"literals"		#(#code_array #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_byteArray #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_character #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_false #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_nil #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_number #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		#(#code_string #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 4096 0 8191))))		#(#code_symbol #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 4096 0 8191))))		#(#code_true #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #magenta))))		"errors"		#(#code_dnu #(#jaggedEdge))		#(#code_redefinedVariableDefinition #(#jaggedEdge #(#{Core.Association} #color #(#{Graphics.ColorValue} #orange))))		#(#code_syntaxError #(#jaggedEdge #bold #(#{Core.Association} #color #(#{Graphics.ColorValue} 7028 0 0))))		#(#code_undeclaredVariable #(#jaggedEdge #(#{Core.Association} #color #(#{Graphics.ColorValue} #orange))))		"scope"		#(#code_bracket1)		#(#code_bracket2)		#(#code_bracket3)		#(#code_bracket4)		#(#code_bracket5)		#(#code_bracket6)		#(#code_bracket7)		#(#code_bracket8)		#(#code_bracket9)		#(#code_parenthesis1)		#(#code_parenthesis2)		#(#code_parenthesis3)		#(#code_parenthesis4)		#(#code_parenthesis5)		#(#code_parenthesis6)		#(#code_parenthesis7)		#(#code_parenthesis8)		#(#code_parenthesis9)	)</body><body package="RBCodeHighlighting" selector="codeStylesVaried">codeStylesVaried	"self styles: (self decodeStyles: self codeStylesVaried)"	&lt;stylesheet: 'Varied Colors' order: 10&gt;	^#(		#(#code_comment #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} 4915 4915 4915))))		#(#code_methodComment #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 2602 2602 2602))))		#(#code_primitive #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 6143 4095 0)) #italic))		"syntax"		#(#code_assignment #(#bold))		#(#code_cascade)		#(#code_return #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} 8191 6536 0))))		#(#code_self #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #blue))))		#(#code_super #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #blue))))		#(#code_thisContext #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 2048 2048 8191))))		"selectors"		#(#code_binaryMethodName #(#bold))		#(#code_binaryMessageSend)		#(#code_keywordMethodName #(#bold))		#(#code_keywordMessageSend)		#(#code_unaryMethodName #(#bold))		#(#code_unaryMessageSend)		"locals"		#(#code_blockArgument #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 4096 0 8191))))		#(#code_blockArgumentDefinition #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 4015 0 8191))))		#(#code_instanceVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 7281 0 7281))))		#(#code_methodVariable #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} 4096 0 8191))))		#(#code_methodVariableDefinition #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} 4096 0 8191))))		#(#code_temporaryVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 5815 0 5815)) #italic))		#(#code_temporaryVariableDefinition #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 5782 0 5782)) #italic))		"globals"		#(#code_classReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 0 6219 3114))))		#(#code_globalVariableReference #(#bold #italic #(#{Core.Association} #color #(#{Graphics.ColorValue} 0 6219 3115))))		#(#code_nameSpaceReference #(#bold #(#{Core.Association} #color #(#{Graphics.ColorValue} 0 6219 6219))))		#(#code_qualifiedReference #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 3114 6219 0))))		#(#code_sharedVariableReference #(#italic #(#{Core.Association} #color #(#{Graphics.ColorValue} 0 6219 3115))))		"literals"		#(#code_array #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 4096 2050 0))))		#(#code_byteArray #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 2983 1496 0))))		#(#code_character #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 8191 3293 0))))		#(#code_false #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 0 3465 6927))))		#(#code_nil #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 0 3465 6927))))		#(#code_number #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 8191 3293 0))))		#(#code_string #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 8191 3293 0))))		#(#code_symbol #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 8191 3293 0))))		#(#code_true #(#(#{Core.Association} #color #(#{Graphics.ColorValue} 0 3466 6927))))		"errors"		#(#code_dnu #(#jaggedEdge))		#(#code_redefinedVariableDefinition #(#bold #strikeout #(#{Core.Association} #color #(#{Graphics.ColorValue} 8191 6979 0))))		#(#code_syntaxError #(#bold #strikeout #(#{Core.Association} #color #(#{Graphics.ColorValue} 6876 0 0))))		#(#code_undeclaredVariable #(#(#{Core.Association} #color #(#{Graphics.ColorValue} #red)) #jaggedEdge #bold))		"scope"		#(#code_bracket1)		#(#code_bracket2)		#(#code_bracket3)		#(#code_bracket4)		#(#code_bracket5)		#(#code_bracket6)		#(#code_bracket7)		#(#code_bracket8)		#(#code_bracket9)		#(#code_parenthesis1)		#(#code_parenthesis2)		#(#code_parenthesis3)		#(#code_parenthesis4)		#(#code_parenthesis5)		#(#code_parenthesis6)		#(#code_parenthesis7)		#(#code_parenthesis8)		#(#code_parenthesis9)	)</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions-delegated</category><body package="RBCodeHighlighting" selector="styleAsSmalltalkCodeMenu">styleAsSmalltalkCodeMenu	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Format the current selection and replace the selection with the formatted code."	&lt;menuItem: 'Style as Smalltalk code'		icon: nil		nameKey: nil		enablement: #isHighlightingEnabled		indication: #isStylingSmalltalkCode		menu: #(#menuBar #optionsMenu)		position: 10.4&gt;	self isStylingSmalltalkCode		ifTrue: [self dontStyleSmalltalkCode]		ifFalse: [self styleSmalltalkCode]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menu</category><body package="RBCodeHighlighting" selector="highlighterSettings">highlighterSettings	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Enable access to the highlighter settings from the browser."	&lt;menuItem: 'Code Highlighter Settings'		nameKey: #highlighterSettings		menu: #(#toolsMenu)		position: 25.00&gt;	SettingsManager 		openOrRaise: VisualWorksSettings 		selectPage: #(tools highlighter code)</body><body package="RBCodeHighlighting" selector="highlighterStyles">highlighterStyles	"(Highlighter Extension - private - not for general use - may be removed at any time)	 Enable access to the highlighter settings from the browser."	&lt;menuItem: 'Code Highlighter Styles'		nameKey: #highlighterStyles		menu: #(#toolsMenu)		position: 25.1&gt;	SettingsManager 		openOrRaise: VisualWorksSettings 		selectPage: #(tools highlighter stylesheet)</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="addCodeHighlighter">addCodeHighlighter	"(Highlighter Extension - private - not for general use - may be removed at any time)	 If highlighting is enabled for the receiver, add a code highlighter."	&lt;highlighter&gt;	self class environment == Refactory.Browser		ifTrue: 			[Refactory.CodeHighlighter.CodeHighlighter on: self textController for: self]</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-highlighter</category><body package="RBCodeHighlighting" selector="toolsHighlightCodeDebuggers">toolsHighlightCodeDebuggers	"(Highlighter Extension - private - not for general use - may be removed at any time)"	&lt;setting: #(tools highlighter code debuggers) position: 30&gt;	^(BooleanSetting 			on: Refactory.CodeHighlighter.CodeHighlighter 			aspect: #highlightDebuggers)		default: true;		label: #ToolsHighlightCodeDebuggers &lt;&lt; #browser &gt;&gt; 'Highlight code in Debugger windows';		helpText: #ToolsHighlightCodeDebuggersHelpText &lt;&lt; #browser &gt;&gt; 'Indicates whether code highlighting should be enabled in the debugger.  When true, highlighting is enabled in the debugger, as permitted by other highlighting controls.  When false, all debugger code highlighting is disabled.'</body><body package="RBCodeHighlighting" selector="toolsHighlightCodeEnable">toolsHighlightCodeEnable	"(Highlighter Extension - private - not for general use - may be removed at any time)"	&lt;setting: #(tools highlighter code enable) position: 20&gt;	^(BooleanSetting 			on: Refactory.CodeHighlighter.CodeHighlighter 			aspect: #highlight)		default: true;		label: #ToolsHighlightCodeEnable &lt;&lt; #browser &gt;&gt; 'Highlight source code (master code enable)';		helpText: #ToolsHighlightCodeEnableHelpText &lt;&lt; #browser &gt;&gt; 'Indicates whether code highlighting should be enabled.  When true, highlighting is enabled in browsers and the debugger, as permitted by other highlighting controls.  When false, all code highlighting is disabled.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="RBCodeHighlighting" selector="toolsHighlightCodePage">toolsHighlightCodePage	"(Highlighter Extension - private - not for general use - may be removed at any time)"	&lt;settingsPage: #(tools highlighter code)&gt;	^ModularSettingsPage new		label: #ToolsHighlightSourceCode &lt;&lt; #browser &gt;&gt; 'Code/Source';		icon: (ListIconLibrary visualFor: #textPage);		settings: (self settingsWithPrefix: #(tools highlighter code))</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-highlighter</category><body package="RBCodeHighlighting" selector="toolsHighlightEmphasisLanguageAnnotations">toolsHighlightEmphasisLanguageAnnotations	"(Highlighter Extension - private - not for general use - may be removed at any time)"	&lt;setting: #(tools highlighter code language annotations) position: 70&gt;	^(BooleanSetting 			on: Refactory.CodeHighlighter.CodeHighlighter 			aspect: #distinguishAnnotations)		default: true;		label: #ToolsHighlightCodeAnnotationLiterals &lt;&lt; #browser &gt;&gt; 'Distinguish literals in method tags (annotations)';		helpText: #ToolsHighlightCodeAnnotationsHelpText &lt;&lt; #browser &gt;&gt; 'Indicates whether the method annotations (tags) are highlighted as a single entity or have their individual components distinguished.  When true, the annotation delimiters and the tag selector are highlighted as a primitive but the arguments are highlighted as normal.  When false, the entire annotation is highlighted as a primitive.'</body><body package="RBCodeHighlighting" selector="toolsHighlightEmphasisLanguageEnable">toolsHighlightEmphasisLanguageEnable	"(Highlighter Extension - private - not for general use - may be removed at any time)"	&lt;setting: #(tools highlighter code language enable) position: 30&gt;	^(BooleanSetting 			on: Refactory.CodeHighlighter.CodeHighlighter 			aspect: #markUpLanguage)		default: true;		label: #ToolsHighlightEmphasisLanguageEnable &lt;&lt; #browser &gt;&gt; 'Dynamically mark language elements';		helpText: #ToolsHighlightEmphasisLanguageEnableHelpText &lt;&lt; #browser &gt;&gt; 'Indicates whether source code language elements should be identified and styled.  When true, individual lexical entities are emphasized with appropriate styles whose visual characteristics can be set in the style editor settings page.  When false, lexical entities are not styled.'</body><body package="RBCodeHighlighting" selector="toolsHighlightEmphasisLanguageLiterals">toolsHighlightEmphasisLanguageLiterals	"(Highlighter Extension - private - not for general use - may be removed at any time)"	&lt;setting: #(tools highlighter code language literals) position: 50&gt;	^(BooleanSetting 			on: Refactory.CodeHighlighter.CodeHighlighter 			aspect: #literalElements)		default: true;		label: #ToolsHighlightCodeLiteralElements &lt;&lt; #browser &gt;&gt; 'Distinguish individual constants in Array literals';		helpText: #ToolsHighlightCodeLiteralsHelpText &lt;&lt; #browser &gt;&gt; 'Indicates whether constants embedded in a literal array should be formatted independently.  When true, a literal array''s delimiters are formatted separate from the array''s contents.  The individual elements of the array are formatted according to their normal style conventions.  When false, a literal array is formatted as a whole (rather than just its delimiters) with no separate formatting of the contents.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="RBCodeHighlighting" selector="toolsHighlightEmphasisLanguagePage">toolsHighlightEmphasisLanguagePage	"(Highlighter Extension - private - not for general use - may be removed at any time)"	&lt;settingsPage: #(tools highlighter code language)&gt;	^ModularSettingsPage new		label: #ToolsHighlightEmphasisLanguage &lt;&lt; #browser &gt;&gt; 'Language Emphasis';		icon: (ListIconLibrary visualFor: #textPage);		settings: (self settingsWithPrefix: #(tools highlighter code language))</body><body package="RBCodeHighlighting" selector="toolsHighlightEmphasisMarkupPage">toolsHighlightEmphasisMarkupPage	"(Highlighter Extension - private - not for general use - may be removed at any time)"	&lt;settingsPage: #(tools highlighter code markup)&gt;	^ModularSettingsPage new		label: #ToolsHighlightEmphasisMarkup &lt;&lt; #browser &gt;&gt; 'Mark Up Emphasis';		icon: (ListIconLibrary visualFor: #textPage);		settings: (self settingsWithPrefix: #(tools highlighter code markup))</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="addCodeHighlighter">addCodeHighlighter	"(Highlighter Extension - private - not for general use - may be removed at any time)	 If highlighting is enabled for the receiver, add a code highlighter."	&lt;highlighter&gt;	self class environment == Refactory.Browser		ifTrue: 			[Refactory.CodeHighlighter.CodeHighlighter on: self textController for: self]</body></methods><methods><class-id>Tools.StylesheetSettingsPage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="acceptHighlight">acceptHighlight	"Perform an acceptance action."	&lt;action: 20&gt;	HighlightingTextEditorController refreshAllControllers.</body></methods><methods><class-id>Tools.StylesheetSettingsPage</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="addCodeHighlighter">addCodeHighlighter	"(Highlighter Extension - private - not for general use - may be removed at any time)	 If highlighting is enabled for the receiver, add a code highlighter."	&lt;highlighter&gt;	(Refactory.CodeHighlighter.CodeHighlighter on: self textController for: self) ifNotNil: [:hl | hl forSettingsIn: self]</body></methods><methods><class-id>Tools.StylesheetSettingsPage</class-id> <category>samples</category><body package="RBCodeHighlighting" selector="codeSampleMethod">codeSampleMethod	&lt;sample: 'Code Sample' order: 0&gt;	&lt;uses: #{UI.SpellingHighlighter}&gt;	&lt;uses: #{UI.HyperlinkHighlighter}&gt;	&lt;uses: #{Refactory.CodeHighlighter.CodeHighlighter}&gt;	^'someMethod: value	"Sample method to show how methods are formatted.	 Edit the method text to create alternatives.	 Hyperlinks:		http://localhost/visited.html					http://localhost/unvisited.html"	&lt;primitive: 999&gt;					"Primitives / Annotation"	| temp |							"Temporary Variables"	Transcript show: ''a String''.		"Global Variables, Strings"	self at: 2; = -5; yourself.			"Cascade Message Sends"	temp := stylesHolder.			"Assignments, Inst. Vars"	EventHandlers keys + 1.234.		"Shared Variables, Number"	#(a true #(literal) array #[1]).		"Literal Array, Elements"	{ home } , #literal includes: $c.	"Miscellaneous Literals"	Smalltalk includesKey: #Object.	"Name spaces"	#[1 2 3] isKindOf: ByteArray.		"Classes, Byte Arrays"	#{Core.Object} isDefined.		"Qualified References"	thisContext receiver == self.		"Predefined Literals"	((((((((((super color: value)))))))))).	"Super, Parentheses, MNU"	false ifFalse:					"Blocks, Redeclared Vars"		[[:block | [[[[[[[[:temp | self at: block+temp]]]]]]]]]].	^nil = anUndeclaredVariable.		"Return, Undeclared Vars"	value + + 6						"Syntax Error"'</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="addCodeHighlighter">addCodeHighlighter	"(Highlighter Extension - private - not for general use - may be removed at any time)	 If highlighting is enabled for the receiver, add a code highlighter."	&lt;highlighter&gt;	(Refactory.CodeHighlighter.CodeHighlighter on: self textController for: self) ifNotNil: [:hl | hl forDebugger]</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="addCodeHighlighter">addCodeHighlighter	"(Highlighter Extension - private - not for general use - may be removed at any time)	 If highlighting is enabled for the receiver, add a code highlighter."	&lt;highlighter&gt;	(Refactory.CodeHighlighter.CodeHighlighter on: self textEditor for: self) ifNotNil: [:hl | hl forWorkspace]</body></methods><initialize><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id></initialize><initialize><class-id>Refactory.CodeHighlighter.SmalltalkCodeHighlightingScanner</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>BrowserDefinitionTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>SmaCCParser</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scanner currentToken errorToken stateStack nodeStack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>Character</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractRefactoringBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>BrowserCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modified initialLookPrefs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>Metaclass</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thisClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>DelegateHighlighter</name><environment>UI</environment><super>UI.Highlighter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tool </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TextHighlighting</package></attributes></class><class><name>WorkspaceInspectorPage</name><environment>Tools</environment><super>Tools.Trippy.InspectorHolder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Workspace</category><attributes><package>Tools-Workspace</package></attributes></class><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>BehaviorInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textHolder sideHolder protocolListHolder methodListHolder inheritanceStop </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>AbstractWorkspace</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>locals importAll specificImports importSummaryHolder pageExplanationHolder statusBarVisible encodingChannel menuBarHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Workspace</category><attributes><package>Tools-Workspace</package></attributes></class><class><name>SmaCCScanner</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream start matchActions matchEnd currentCharacter outputStream lastOutputStreamMatchPosition lastMatchWasEmpty returnMatchBlock state comments </inst-vars><class-inst-vars>keywordMap </class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>WorkspacePage</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>workspace label verboseLabel filename fileTimestamp textModel unacceptedText savedSelection savedFileTimestamp textModelOverride </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Workspace</category><attributes><package>Tools-Workspace</package></attributes></class><class><name>DebuggerClient</name><environment>CraftedSmalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>service contextIndex busy text parsedSource parseTree stackList stackEmphases enableStackFiltering closeAction terminated </inst-vars><class-inst-vars>menuHolder </class-inst-vars><imports>			Refactory.Browser.BrowserEnvironment			Refactory.Browser.RefactoringBrowser			Refactory.Browser.RBParser			</imports><category>Tools-Programming</category><attributes><package>Debugger-UI</package></attributes></class><class><name>StylesheetSettingsPage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>emphasisEditor enabledClasses sampleHolder samplesMenu stylesHolder stylesMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>HighlightingStyles</package></attributes></class></st-source>