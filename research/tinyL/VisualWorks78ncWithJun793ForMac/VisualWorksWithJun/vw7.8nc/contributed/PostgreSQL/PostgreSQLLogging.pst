<?xml version="1.0"?><st-source><!-- Name: PostgreSQLLoggingComment: © 2000 - 2009 Bruce Badger. Licensed under the LGPL.Primarily implelemented to support EXDI logging, this package can be used to capture detailed information about the message flowing between the PostgreSQL driver library and a PostgreSQL backend.Have a look at the class-side methods of the PostgreSQLLoggingTesting class.  Work though the test methods to get an idea of what you can do.- - Please send your comments to bbadger@openskills.com.  Thanks.DbIdentifier: bb20100717DbTrace: 908DevelopmentPrerequisites: #(#(#any 'PostgreSQLDriver' ''))HideSource: falsePackageName: PostgreSQLLoggingParcel: #('PostgreSQLLogging')ParcelName: PostgreSQLLoggingPrerequisiteParcels: #(#('PostgreSQLDriver' ''))PrintStringCache: (1.5 001,bbadger)SaveSource: trueVersion: 1.5Date: 11:31:37 PM November 8, 2010 --><time-stamp>From VisualWorks®, 7.7 of November 25, 2009 on November 8, 2010 at 11:31:37 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PostgreSQLConnectionLog</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetStream subjectConnections </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-PostgreSQL-Logging</category><attributes><package>PostgreSQLLogging</package></attributes></class><class><name>PostgreSQLLoggingError</name><environment>Smalltalk</environment><super>SpError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PostgreSQL-Logging</category><attributes><package>PostgreSQLLogging</package></attributes></class><methods><class-id>PostgreSQLConnectionLog</class-id> <category>initialize-release</category><body package="PostgreSQLLogging" selector="logEverythingFor:to:">logEverythingFor: aConnection to: aStream 	"^self 	I initialize myself to log all communications with the backend for 	aConnection to aStream."	targetStream := aStream.	self startMonitoring: aConnection.	^self</body><body package="PostgreSQLLogging" selector="logEverythingTo:">logEverythingTo: aStream 	"^a PostgreSQLConnectionLog 	I initialize myself to log all communications with the backend for 	*all* (existing &amp; new) connections to aStream."	targetStream := aStream.	PostgreSQLConnection commonLog: self.	^self</body></methods><methods><class-id>PostgreSQLConnectionLog</class-id> <category>private</category><body package="PostgreSQLLogging" selector="closeTargetStream">closeTargetStream	"^self 	I close the target stream (if it understand that - e.g. the Transcript 	does not) and set my instance variable to nil."	(self targetStream respondsTo: #close) ifTrue: [self targetStream close].	targetStream := nil.	^self</body><body package="PostgreSQLLogging" selector="loggingBlock">loggingBlock	"^a BlockClosure 	I return the block I use to replace the default block in a connection. 	My block delegates the job of logging to my &gt;&gt;logMessage: method."	^[:aMessage | self logMessage: aMessage]</body></methods><methods><class-id>PostgreSQLConnectionLog</class-id> <category>services</category><body package="PostgreSQLLogging" selector="close">close	"^self 	I close myself. This means I remove my logging blocks from my 	target connection(s) and close the 	target stream. Once closed, I can not be re-started. Use &gt;&gt;pause 	instead if you want to be able to 	re-start logging with me. I check to see if I'm the common log for all 	connections &amp; if I am, I remove myself."	self subjectConnections do: [:aConnection | self stopMonitoring: aConnection].	PostgreSQLConnection commonLog == self ifTrue: [PostgreSQLConnection commonLog: nil].	self closeTargetStream.	^self</body><body package="PostgreSQLLogging" selector="logMessage:">logMessage: aMessage 	"^self 	I log aMessage to my target stream. I write out a timestamp, 	followed by a representation of aMessage. Lastly I flush the stream."	(self targetStream) cr; nextPutAll: Timestamp now printString; cr.	aMessage printOn: self targetStream.	self targetStream flush.	^self</body><body package="PostgreSQLLogging" selector="pause">pause	"^self 	I stop logging my connections. I keep the logging stream open, so I am able to continue logging if 	I'm sent &gt;&gt;resume."	self subjectConnections do: [:aConnection | self stopMonitoring: aConnection].	^self</body><body package="PostgreSQLLogging" selector="resume">resume	"^self 	I resume logging my connections. I can only resume if the logging stream is still open (the state I 	would expect after a pause)."	targetStream isNil ifTrue: [PostgreSQLLoggingError raiseSignal: 'Attempt to resume a log when the log stream is close.'].	self subjectConnections do: [:aConnection | self startMonitoring: aConnection].	^self</body><body package="PostgreSQLLogging" selector="startMonitoring:">startMonitoring: aConnection 	"^self 	I add aConnection to my collection of monitored connections, and I replace the current logging block 	of aConnection with my logging blocks.."	self subjectConnections add: aConnection.	aConnection readStream loggingBlock: self loggingBlock.	aConnection writeStream loggingBlock: self loggingBlock.	^self</body><body package="PostgreSQLLogging" selector="stopMonitoring:">stopMonitoring: aConnection 	"^self 	I reset the logging blocks of a connection so they no longer use mine. I make sure that aConnection 	is in my collection of subjectConnections before I fiddle with the logging blocks of aConnection. If a 	Connection is not one of my subjectConnections, I simply return myself."	(self subjectConnections includes: aConnection)		ifTrue: 			[aConnection readStream loggingBlock: nil.			aConnection writeStream loggingBlock: nil].	^self</body></methods><methods><class-id>PostgreSQLConnectionLog</class-id> <category>accessing</category><body package="PostgreSQLLogging" selector="subjectConnections">subjectConnections	"^a Set 	I return a set containing the connections I'm currently logging the traffic of."	subjectConnections isNil ifTrue: [subjectConnections := Set new].	^subjectConnections</body><body package="PostgreSQLLogging" selector="targetStream">targetStream	"^a Stream like thing 	I return the stream (or Transcript, or whatever) that I've been asked 	to log to."	^targetStream</body></methods><methods><class-id>PostgreSQLConnectionLog class</class-id> <category>instance creation</category><body package="PostgreSQLLogging" selector="logEverythingFor:to:">logEverythingFor: aConnection to: aStream 	"^a PostgreSQLConnectionLog 	I return an instance of myself which logs all communications with 	the backend to aStream."	^self new logEverythingFor: aConnection to: aStream</body><body package="PostgreSQLLogging" selector="logEverythingTo:">logEverythingTo: aStream 	"^a PostgreSQLConnectionLog 	I return an instance of myself which logs all communications with 	the backend for *all* (exiting &amp; new) connections to aStream."	^self new logEverythingTo: aStream</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SpError</name><environment>Smalltalk</environment><super>SpAbstractError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpExceptions</category><attributes><package>SpExceptions</package></attributes></class></st-source>