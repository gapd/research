<?xml version="1.0"?><st-source><!-- Name: Base64Encoding-TestsComment: © 2000 - 2008 Bruce Badger. Licensed under the LGPL.DbIdentifier: bb20100717DbTrace: 570DevelopmentPrerequisites: #(#(#any 'Base64Encoding' '') #(#any 'SUnit' ''))PackageName: Base64Encoding-TestsParcel: #('Base64Encoding-Tests')PrerequisiteParcels: #(#('Base64Encoding' '') #('SUnit' ''))PrintStringCache: (1.4 102,bbadger)Version: 1.4 102Date: 11:32:02 PM November 8, 2010 --><time-stamp>From VisualWorks®, 7.7 of November 25, 2009 on November 8, 2010 at 11:32:02 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Base64EncodingStreamTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bigSourceByteArray bigEncodedString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-PostgreSQL-Base64 Encoding</category><attributes><package>Base64Encoding-Tests</package></attributes></class><comment><class-id>Base64EncodingStreamTest</class-id><body>Copyright © 2000  Bruce Badger. All Rights Reserved.Instance Variables:</body></comment><methods><class-id>Base64EncodingStreamTest</class-id> <category>performance</category><body package="Base64Encoding-Tests" selector="performanceTest01">performanceTest01	"^self 	Encode the big values in my resources that are intended for testing."	"Base64EncodingStreamTest new performanceTest01"	| targetStream |	targetStream := WriteStream on: (String new: self bigEncodedString size).	^Time millisecondsToRun: 			[1000 timesRepeat: 					[| writeStream encodedString |					targetStream reset.					writeStream := Base64EncodingWriteStream onStream: targetStream.					writeStream disableLineBreaks.					writeStream nextPutAll: self bigSourceByteArray.					writeStream close.					encodedString := writeStream contents]]</body><body package="Base64Encoding-Tests" selector="performanceTest02">performanceTest02	"^self 	Decode the big values in my resources that are intended for testing."	"Base64EncodingStreamTest new performanceTest02"	| targetStream |	targetStream := WriteStream 				on: (ByteArray new: self bigSourceByteArray size).	String new: self bigEncodedString size.	^Time millisecondsToRun: 			[1000 timesRepeat: 					[| readStream |					targetStream reset.					readStream := Base64EncodingReadStream on: self bigEncodedString.					readStream upToEnd]]</body><body package="Base64Encoding-Tests" selector="performanceTest04">performanceTest04	"^self 	Decode the big values in my resources that are intended for testing."	"Base64EncodingStreamTest new performanceTest04"	| targetStream |	targetStream := WriteStream 				on: (ByteArray new: self bigSourceByteArray size).	String new: self bigEncodedString size.	^TimeProfiler profile: 			[1000 timesRepeat: 					[| readStream |					targetStream reset.					readStream := Base64EncodingReadStream on: self bigEncodedString.					readStream upToEnd]]</body><body package="Base64Encoding-Tests" selector="performanceTest06">performanceTest06	"^self 	Decode the big values in my resources that are intended for testing."	"Base64EncodingStreamTest new performanceTest06"	| targetStream |	targetStream := WriteStream 				on: (ByteArray new: self bigSourceByteArray size).	String new: self bigEncodedString size.	^AllocationProfiler profile: 			[1000 timesRepeat: 					[| readStream |					targetStream reset.					readStream := Base64EncodingReadStream on: self bigEncodedString.					readStream upToEnd]]</body></methods><methods><class-id>Base64EncodingStreamTest</class-id> <category>testing</category><body package="Base64Encoding-Tests" selector="test01">test01	"^self 	I create a byte array with every possible byte value and then write that to a String through a 	Base64EncodingWriteStream."	"self test01"	| sourceBytes writeStream resultingString expectedResult |	sourceBytes := ByteArray withAll: (0 to: 255).	writeStream := Base64EncodingWriteStream on: String new.	writeStream nextPutAll: sourceBytes.	writeStream close.	resultingString := writeStream contents.	expectedResult := (ByteArray 				fromPackedString: 'PTEEP4E7TTYBY6MIP5E/SDQALD=D^DERQV!MUTYRVU!GP&amp;-!Q7!7YD!(NF]IT4%*R$MU[T)9Y7AKZWM3SEL4]$5DQW%M^%D1S&amp;)#M@4JS5Q/M5ADLB-PLDIBTV-NQUIUV$!SQV1KT3A8S%Q+NUEUU$)TU$YVU5X1ZE)W[GQ#VEX5Y%%GQ&amp;%YL%I,V&amp;5$[6EW\GI"Q3E5X#MB^@4JX69NLFQXV#M%RF06YSM8NVY.J4E''VT-DZD%WQ6 4ZT))[7UMZ%$6TF-JQ5M+MUMV[GA%VV5Z\VI.R#I%[#YCZF=1S6-0XVE.\T--\P4J\SY9]GI1J7]3X$-:]D1WL''P7ZSU5\''T8]&amp;H6K7]MRDM7NEQF^GM&amp;RW%#\$1:SSMO^#%DT#A4TET1YFIXL$9.XSH9^&amp;P3]B=''MFULZ 4JMT=X[ST+Z''@6]WY3M6T7]#!PRG$8K5P1NWY&amp;MB-&amp;\#\/TCL+K7\=OP@a') 					asString.	self assert: resultingString = expectedResult.	^self</body><body package="Base64Encoding-Tests" selector="test02">test02	"^self 	I create a byte array with every possible byte value and then write that to a String through a 	Base64EncodingWriteStream. Then I read it back through a Base64EncodingReadStream"	"self test02"	| sourceBytes writeStream encodedString readStream decodedString |	sourceBytes := ByteArray withAll: (0 to: 255).	writeStream := Base64EncodingWriteStream on: String new.	writeStream nextPutAll: sourceBytes.	writeStream close.	encodedString := writeStream contents.	readStream := Base64EncodingReadStream on: encodedString.	decodedString := readStream upToEnd.	self assert: decodedString = sourceBytes.	^self</body><body package="Base64Encoding-Tests" selector="test03">test03	"^self 	I encode the byte array without line breaks, then I decode it."	"self test03"	| sourceBytes writeStream encodedString readStream decodedString |	sourceBytes := ByteArray withAll: (0 to: 255).	writeStream := Base64EncodingWriteStream on: String new.	writeStream disableLineBreaks.	writeStream nextPutAll: sourceBytes.	writeStream close.	encodedString := writeStream contents.	readStream := Base64EncodingReadStream on: encodedString.	decodedString := readStream upToEnd.	self assert: decodedString = sourceBytes.	^self</body><body package="Base64Encoding-Tests" selector="test04">test04	"^self 	I encode and decode byte arrays of varying lengths to check boundary conditions."	"self test04"	| sourceBytes writeStream encodedString readStream decodedString |	0 to: 255		do: 			[:endByte | 			sourceBytes := ByteArray withAll: (0 to: endByte).			writeStream := Base64EncodingWriteStream on: String new.			writeStream disableLineBreaks.			writeStream nextPutAll: sourceBytes.			writeStream close.			encodedString := writeStream contents.			readStream := Base64EncodingReadStream on: encodedString.			decodedString := readStream upToEnd.			self assert: decodedString = sourceBytes].	^self</body><body package="Base64Encoding-Tests" selector="test05">test05	"^self 	Encode and decode using the big values in my resources that are intended for testing."	"Base64EncodingStreamTest new test05"	| sourceBytes writeStream encodedString readStream decodedString |	sourceBytes := self bigSourceByteArray.	writeStream := Base64EncodingWriteStream on: String new.	writeStream disableLineBreaks.	writeStream nextPutAll: sourceBytes.	writeStream close.	encodedString := writeStream contents.	encodedString = self bigEncodedString.	readStream := Base64EncodingReadStream on: encodedString.	decodedString := readStream upToEnd.	self assert: decodedString = sourceBytes.	^self</body></methods><methods><class-id>Base64EncodingStreamTest</class-id> <category>resources</category><body package="Base64Encoding-Tests" selector="bigEncodedString">bigEncodedString	"^a ByteArrayI return the 'big' encoded string I use for performance testing."	bigEncodedString isNil 		ifTrue: 			[| targetStream |			targetStream := Base64EncodingWriteStream on: String new.			targetStream nextPutAll: self bigSourceByteArray.			targetStream close.			bigEncodedString := targetStream contents].	^bigEncodedString</body><body package="Base64Encoding-Tests" selector="bigSourceByteArray">bigSourceByteArray	"^a ByteArrayI return the 'big' byte array I use for performance testing.  The ByteArray contains all 256 possible byte values repeated many times."	bigSourceByteArray isNil 		ifTrue: 			[| targetStream byteArrayFragment |			targetStream := WriteStream on: ByteArray new.			byteArrayFragment := ByteArray withAll: (0 to: 255).			40 timesRepeat: [targetStream nextPutAll: byteArrayFragment].			bigSourceByteArray := targetStream contents].	^bigSourceByteArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>